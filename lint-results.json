
> vite_react_shadcn_ts@0.0.0 lint
> eslint . --format json

[{"filePath":"/workspaces/debre-bisrat-web-portal/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/public/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/router-context.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/App.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'useLocation' is defined but never used.","line":6,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'registration' is defined but never used.","line":15,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'TempoRoutesHandler' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":28}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { BrowserRouter, Routes, Route, useLocation } from \"react-router-dom\";\nimport { ProtectedRoute } from \"@/components/auth/ProtectedRoute\";\nimport { usePerformanceMonitoring } from \"@/hooks/use-performance-monitoring\";\n\n// Register Service Worker\nif (\"serviceWorker\" in navigator) {\n  window.addEventListener(\"load\", () => {\n    navigator.serviceWorker\n      .register(\"/sw.js\")\n      .then((registration) => {\n        console.log(\"ServiceWorker registration successful\");\n      })\n      .catch((err) => {\n        console.log(\"ServiceWorker registration failed: \", err);\n      });\n  });\n}\n\n// Simple component to handle tempo routes without causing recursion\nfunction TempoRoutesHandler() {\n  // Only render tempo routes if in tempo environment\n  if (!import.meta.env.VITE_TEMPO || import.meta.env.VITE_TEMPO !== \"true\") {\n    return null;\n  }\n\n  // Return a simple route that will be handled by the main Routes component\n  return null;\n}\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Events from \"./pages/Events\";\nimport Contact from \"./pages/Contact\";\nimport NotFound from \"./pages/NotFound\";\nimport MembershipRegistration from \"./pages/MembershipRegistration\";\nimport Donation from \"./pages/Donation\";\nimport DonationSuccess from \"./pages/DonationSuccess\";\nimport DonationDemo from \"./pages/DonationDemo\";\nimport MembershipSuccess from \"./pages/MembershipSuccess\";\nimport Gallery from \"./pages/Gallery\";\nimport Services from \"./pages/Services\";\nimport AdminLayout from \"./pages/admin/AdminLayout\";\nimport AdminLogin from \"./pages/admin/Login\";\nimport AdminDashboard from \"./pages/admin/Dashboard\";\nimport AdminEvents from \"./pages/admin/Events\";\nimport AdminGallery from \"./pages/admin/Gallery\";\nimport AdminSettings from \"./pages/admin/Settings\";\nimport AdminMembers from \"./pages/admin/Members\";\nimport AdminTestimonials from \"./pages/admin/Testimonials\";\nimport AdminPrayerRequests from \"./pages/admin/PrayerRequests\";\nimport AdminDonations from \"./pages/admin/Donations\";\nimport AdminUsers from \"./pages/admin/Users\";\nimport AdminSystemHealth from \"./pages/admin/SystemHealth\";\nimport AdminAnalytics from \"./pages/admin/Analytics\";\nimport AdminBulkOperations from \"./pages/admin/BulkOperations\";\nimport AdminContentScheduler from \"./pages/admin/ContentScheduler\";\nimport AdminAppointments from \"./pages/admin/Appointments\";\nimport { LanguageProvider } from \"./contexts/LanguageContext\";\nimport { DataProvider } from \"./contexts/DataContext\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport \"@/utils/debugSync\"; // Initialize debug utilities\n\nfunction AppContent() {\n  usePerformanceMonitoring();\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/about\" element={<About />} />\n      <Route path=\"/events\" element={<Events />} />\n      <Route path=\"/contact\" element={<Contact />} />\n      <Route\n        path=\"/membership\"\n        element={<MembershipRegistration />}\n      />\n      <Route path=\"/donation\" element={<Donation />} />\n      <Route path=\"/donation-success\" element={<DonationSuccess />} />\n      <Route path=\"/donation-demo\" element={<DonationDemo />} />\n      <Route path=\"/membership-success\" element={<MembershipSuccess />} />\n      <Route path=\"/gallery\" element={<Gallery />} />\n      <Route path=\"/services\" element={<Services />} />\n\n      {/* Admin Routes */}\n      <Route path=\"/admin/login\" element={<AdminLogin />} />\n      <Route\n        path=\"/admin\"\n        element={\n          <ProtectedRoute>\n            <AdminLayout />\n          </ProtectedRoute>\n        }\n      >\n        <Route index element={<AdminDashboard />} />\n        <Route path=\"dashboard\" element={<AdminDashboard />} />\n        <Route path=\"events\" element={<AdminEvents />} />\n        <Route path=\"gallery\" element={<AdminGallery />} />\n        <Route path=\"settings\" element={<AdminSettings />} />\n        <Route path=\"members\" element={<AdminMembers />} />\n        <Route path=\"testimonials\" element={<AdminTestimonials />} />\n        <Route path=\"prayer-requests\" element={<AdminPrayerRequests />} />\n        <Route path=\"donations\" element={<AdminDonations />} />\n        <Route path=\"users\" element={<AdminUsers />} />\n        <Route path=\"system-health\" element={<AdminSystemHealth />} />\n        <Route path=\"analytics\" element={<AdminAnalytics />} />\n        <Route path=\"bulk-operations\" element={<AdminBulkOperations />} />\n        <Route path=\"content-scheduler\" element={<AdminContentScheduler />} />\n        <Route path=\"appointments\" element={<AdminAppointments />} />\n      </Route>\n\n      {/* Add this before the catchall route */}\n      {import.meta.env.VITE_TEMPO && <Route path=\"/tempobook/*\" />}\n\n      <Route path=\"*\" element={<NotFound />} />\n    </Routes>\n  );\n}\n\nexport default function App(): React.ReactElement {\n  return (\n    <ErrorBoundary>\n      <LanguageProvider>\n        <DataProvider>\n          <TooltipProvider>\n            <BrowserRouter>\n              <AppContent />\n              <Toaster />\n              <Sonner />\n            </BrowserRouter>\n          </TooltipProvider>\n        </DataProvider>\n      </LanguageProvider>\n    </ErrorBoundary>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/AdminAuthGuard.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":7,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAdminAuth'. Either include it or remove the dependency array.","line":17,"column":6,"nodeType":"ArrayExpression","endLine":17,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAdminAuth]","fix":{"range":[522,524],"text":"[checkAdminAuth]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface AdminAuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminAuthGuard({ children }: AdminAuthGuardProps) {\n  const [loading, setLoading] = useState(true);\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    checkAdminAuth();\n  }, []);\n\n  const checkAdminAuth = async () => {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (!session) {\n        navigate(\"/admin/login\");\n        return;\n      }\n\n      // Check if user has admin role\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", session.user.id)\n        .single();\n\n      if (error || !profile || profile.role !== \"admin\") {\n        navigate(\"/admin/login\");\n        return;\n      }\n\n      setIsAuthorized(true);\n    } catch (error) {\n      console.error(\"Error checking admin auth:\", error);\n      navigate(\"/admin/login\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"h-6 w-6 animate-spin text-church-burgundy\" />\n          <span className=\"text-gray-600\">Verifying access...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthorized) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/AdminConfirmDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface AdminConfirmDialogProps {\n  trigger: React.ReactNode;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm: () => Promise<void> | void;\n  destructive?: boolean;\n  loading?: boolean;\n}\n\nexport default function AdminConfirmDialog({\n  trigger,\n  title,\n  description,\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\",\n  onConfirm,\n  destructive = false,\n  loading = false,\n}: AdminConfirmDialogProps) {\n  const [open, setOpen] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true);\n      await onConfirm();\n      setOpen(false);\n    } catch (error) {\n      console.error(\"Confirmation action failed:\", error);\n      // Error handling is typically done in the parent component\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>{trigger}</AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isLoading || loading}>\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleConfirm}\n            disabled={isLoading || loading}\n            className={destructive ? \"bg-red-600 hover:bg-red-700\" : \"\"}\n          >\n            {isLoading || loading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Processing...\n              </>\n            ) : (\n              confirmText\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/AdminDataTable.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":26,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":32,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":44,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Search, ChevronLeft, ChevronRight, Filter } from \"lucide-react\";\nimport { useDebounce } from \"@/hooks/useDebounce\";\n\ninterface Column<T> {\n  key: keyof T | string;\n  label: string;\n  render?: (item: T) => React.ReactNode;\n  sortable?: boolean;\n  filterable?: boolean;\n}\n\ninterface AdminDataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  title: string;\n  description?: string;\n  searchPlaceholder?: string;\n  pageSize?: number;\n  actions?: (item: T) => React.ReactNode;\n  loading?: boolean;\n  onRefresh?: () => void;\n}\n\nexport default function AdminDataTable<T extends Record<string, any>>({\n  data,\n  columns,\n  title,\n  description,\n  searchPlaceholder = \"Search...\",\n  pageSize = 10,\n  actions,\n  loading = false,\n  onRefresh,\n}: AdminDataTableProps<T>) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\");\n  const [filters, setFilters] = useState<Record<string, string>>({});\n\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n\n  const filteredAndSortedData = useMemo(() => {\n    let result = [...data];\n\n    // Apply search filter\n    if (debouncedSearchTerm) {\n      result = result.filter((item) =>\n        Object.values(item).some((value) =>\n          String(value)\n            .toLowerCase()\n            .includes(debouncedSearchTerm.toLowerCase()),\n        ),\n      );\n    }\n\n    // Apply column filters\n    Object.entries(filters).forEach(([column, filterValue]) => {\n      if (filterValue) {\n        result = result.filter((item) =>\n          String(item[column])\n            .toLowerCase()\n            .includes(filterValue.toLowerCase()),\n        );\n      }\n    });\n\n    // Apply sorting\n    if (sortColumn) {\n      result.sort((a, b) => {\n        const aValue = a[sortColumn];\n        const bValue = b[sortColumn];\n\n        if (aValue < bValue) return sortDirection === \"asc\" ? -1 : 1;\n        if (aValue > bValue) return sortDirection === \"asc\" ? 1 : -1;\n        return 0;\n      });\n    }\n\n    return result;\n  }, [data, debouncedSearchTerm, filters, sortColumn, sortDirection]);\n\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return filteredAndSortedData.slice(startIndex, startIndex + pageSize);\n  }, [filteredAndSortedData, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(filteredAndSortedData.length / pageSize);\n\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortColumn(column);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const handleFilterChange = (column: string, value: string) => {\n    setFilters((prev) => ({ ...prev, [column]: value }));\n    setCurrentPage(1); // Reset to first page when filtering\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>{title}</CardTitle>\n          {description && <CardDescription>{description}</CardDescription>}\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>{title}</CardTitle>\n            {description && <CardDescription>{description}</CardDescription>}\n          </div>\n          {onRefresh && (\n            <Button onClick={onRefresh} variant=\"outline\" size=\"sm\">\n              Refresh\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Search and Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder={searchPlaceholder}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Column Filters */}\n          {columns\n            .filter((col) => col.filterable)\n            .map((column) => (\n              <Select\n                key={String(column.key)}\n                value={filters[String(column.key)] || \"\"}\n                onValueChange={(value) =>\n                  handleFilterChange(String(column.key), value)\n                }\n              >\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder={`Filter ${column.label}`} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All {column.label}</SelectItem>\n                  {/* Add specific filter options based on column data */}\n                </SelectContent>\n              </Select>\n            ))}\n        </div>\n\n        {/* Data Table */}\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableHead\n                    key={String(column.key)}\n                    className={\n                      column.sortable ? \"cursor-pointer hover:bg-gray-50\" : \"\"\n                    }\n                    onClick={() =>\n                      column.sortable && handleSort(String(column.key))\n                    }\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>{column.label}</span>\n                      {column.sortable && sortColumn === String(column.key) && (\n                        <span className=\"text-xs\">\n                          {sortDirection === \"asc\" ? \"↑\" : \"↓\"}\n                        </span>\n                      )}\n                    </div>\n                  </TableHead>\n                ))}\n                {actions && <TableHead>Actions</TableHead>}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {paginatedData.length === 0 ? (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length + (actions ? 1 : 0)}\n                    className=\"text-center py-8\"\n                  >\n                    <div className=\"text-gray-500\">\n                      {debouncedSearchTerm ||\n                      Object.values(filters).some((f) => f)\n                        ? \"No results found matching your criteria\"\n                        : \"No data available\"}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                paginatedData.map((item, index) => (\n                  <TableRow key={index}>\n                    {columns.map((column) => (\n                      <TableCell key={String(column.key)}>\n                        {column.render\n                          ? column.render(item)\n                          : String(item[column.key] || \"\")}\n                      </TableCell>\n                    ))}\n                    {actions && <TableCell>{actions(item)}</TableCell>}\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between mt-6\">\n            <div className=\"text-sm text-gray-600\">\n              Showing {(currentPage - 1) * pageSize + 1} to{\" \"}\n              {Math.min(currentPage * pageSize, filteredAndSortedData.length)}{\" \"}\n              of {filteredAndSortedData.length} results\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage((prev) => Math.max(1, prev - 1))}\n                disabled={currentPage === 1}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n              <span className=\"text-sm\">\n                Page {currentPage} of {totalPages}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() =>\n                  setCurrentPage((prev) => Math.min(totalPages, prev + 1))\n                }\n                disabled={currentPage === totalPages}\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/AdminErrorBoundary.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":26,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'errorInfo' is defined but never used.","line":26,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":54},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":33,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { AlertTriangle, RefreshCw, Home, Bug, Database } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface AdminErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n  errorId?: string;\n  isRetrying: boolean;\n  connectionStatus: \"checking\" | \"connected\" | \"disconnected\";\n}\n\ninterface AdminErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<{ error?: Error; resetError: () => void }>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n}\n\nclass AdminErrorBoundary extends React.Component<\n  AdminErrorBoundaryProps,\n  AdminErrorBoundaryState\n> {\n  private retryTimeoutId?: NodeJS.Timeout;\n\n  constructor(props: AdminErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      isRetrying: false,\n      connectionStatus: \"checking\",\n    };\n  }\n\n  static getDerivedStateFromError(\n    error: Error,\n  ): Partial<AdminErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n      errorId: Date.now().toString(),\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"Admin Error Boundary caught error:\", error, errorInfo);\n\n    this.setState({ errorInfo });\n\n    // Check database connection\n    this.checkConnection();\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // Log error details\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      errorId: this.state.errorId,\n    };\n\n    console.error(\"Admin error details:\", errorData);\n\n    // Store in localStorage for debugging\n    try {\n      const existingErrors = JSON.parse(\n        localStorage.getItem(\"admin_errors\") || \"[]\",\n      );\n      existingErrors.unshift(errorData);\n      const recentErrors = existingErrors.slice(0, 5);\n      localStorage.setItem(\"admin_errors\", JSON.stringify(recentErrors));\n    } catch (storageError) {\n      console.error(\"Failed to store admin error:\", storageError);\n    }\n  }\n\n  checkConnection = async () => {\n    this.setState({ connectionStatus: \"checking\" });\n    try {\n      const { error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n\n      if (error) {\n        throw error;\n      }\n\n      this.setState({ connectionStatus: \"connected\" });\n    } catch (error) {\n      console.error(\"Database connection check failed:\", error);\n      this.setState({ connectionStatus: \"disconnected\" });\n    }\n  };\n\n  resetError = () => {\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n      errorId: undefined,\n      isRetrying: false,\n    });\n\n    // Clear problematic cache data\n    if (typeof window !== \"undefined\") {\n      try {\n        const keysToRemove = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (\n            key &&\n            (key.includes(\"admin_cache\") || key.includes(\"sync_cache\"))\n          ) {\n            keysToRemove.push(key);\n          }\n        }\n        keysToRemove.forEach((key) => localStorage.removeItem(key));\n      } catch (e) {\n        console.warn(\"Failed to clear cache:\", e);\n      }\n    }\n  };\n\n  retryWithDelay = () => {\n    this.setState({ isRetrying: true });\n\n    this.retryTimeoutId = setTimeout(() => {\n      this.resetError();\n    }, 2000);\n  };\n\n  componentWillUnmount() {\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        const FallbackComponent = this.props.fallback;\n        return (\n          <FallbackComponent\n            error={this.state.error}\n            resetError={this.resetError}\n          />\n        );\n      }\n\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n          <Card className=\"w-full max-w-3xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n                <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-red-900 text-xl\">\n                Admin System Error\n              </CardTitle>\n              <CardDescription className=\"text-base\">\n                The admin panel encountered an error. Don't worry - your data is\n                safe.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Connection Status */}\n              <Alert>\n                <Database className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Database Status:\n                  <span\n                    className={`ml-2 font-semibold ${\n                      this.state.connectionStatus === \"connected\"\n                        ? \"text-green-600\"\n                        : this.state.connectionStatus === \"disconnected\"\n                          ? \"text-red-600\"\n                          : \"text-yellow-600\"\n                    }`}\n                  >\n                    {this.state.connectionStatus === \"connected\"\n                      ? \"Connected\"\n                      : this.state.connectionStatus === \"disconnected\"\n                        ? \"Disconnected\"\n                        : \"Checking...\"}\n                  </span>\n                </AlertDescription>\n              </Alert>\n\n              {/* Error Details */}\n              {this.state.error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-red-900 mb-2 flex items-center\">\n                    <Bug className=\"w-4 h-4 mr-2\" />\n                    Error Details:\n                  </h4>\n                  <p className=\"text-sm text-red-800 font-mono break-all mb-2\">\n                    {this.state.error.message}\n                  </p>\n                  {this.state.errorId && (\n                    <p className=\"text-xs text-red-600\">\n                      Error ID: {this.state.errorId}\n                    </p>\n                  )}\n                </div>\n              )}\n\n              {/* Troubleshooting Steps */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-blue-900 mb-2\">\n                  Troubleshooting Steps:\n                </h4>\n                <ol className=\"text-sm text-blue-800 space-y-1 list-decimal list-inside\">\n                  <li>Try refreshing the page</li>\n                  <li>Check your internet connection</li>\n                  <li>Clear browser cache and cookies</li>\n                  <li>If the problem persists, contact support</li>\n                </ol>\n              </div>\n\n              {/* Development Info */}\n              {!import.meta.env.PROD && this.state.errorInfo && (\n                <details className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <summary className=\"font-semibold text-gray-900 cursor-pointer\">\n                    Technical Details (Development)\n                  </summary>\n                  <pre className=\"text-xs text-gray-700 mt-2 overflow-auto max-h-40 whitespace-pre-wrap\">\n                    {this.state.error?.stack}\n                  </pre>\n                  <pre className=\"text-xs text-gray-600 mt-2 overflow-auto max-h-32 whitespace-pre-wrap\">\n                    {this.state.errorInfo.componentStack}\n                  </pre>\n                </details>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button\n                  onClick={this.retryWithDelay}\n                  disabled={this.state.isRetrying}\n                  className=\"flex-1 bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  <RefreshCw\n                    className={`w-4 h-4 mr-2 ${this.state.isRetrying ? \"animate-spin\" : \"\"}`}\n                  />\n                  {this.state.isRetrying ? \"Retrying...\" : \"Retry\"}\n                </Button>\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh Page\n                </Button>\n                <Button\n                  onClick={() => (window.location.href = \"/admin/dashboard\")}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Dashboard\n                </Button>\n              </div>\n\n              {/* Help Text */}\n              <div className=\"text-center text-sm text-gray-500\">\n                <p>\n                  If this problem persists, please contact support with Error\n                  ID:{\" \"}\n                  <code className=\"bg-gray-100 px-1 rounded font-mono\">\n                    {this.state.errorId}\n                  </code>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default AdminErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/AdminFormWrapper.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'formData' is defined but never used.","line":9,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface AdminFormWrapperProps {\n  children: React.ReactNode;\n  onSubmit: (formData: FormData) => Promise<void>;\n  submitText?: string;\n  successMessage?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport default function AdminFormWrapper({\n  children,\n  onSubmit,\n  submitText = \"Save Changes\",\n  successMessage = \"Changes saved successfully\",\n  className = \"\",\n  disabled = false,\n}: AdminFormWrapperProps) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(false);\n\n    try {\n      const formData = new FormData(e.currentTarget);\n      await onSubmit(formData);\n      setSuccess(true);\n      toast({\n        title: \"Success\",\n        description: successMessage,\n      });\n\n      // Clear success message after 3 seconds\n      setTimeout(() => setSuccess(false), 3000);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"An error occurred\";\n      setError(errorMessage);\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={`space-y-6 ${className}`}>\n      {children}\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {success && (\n        <Alert className=\"border-green-200 bg-green-50\">\n          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          <AlertDescription className=\"text-green-800\">\n            {successMessage}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"flex justify-end space-x-4\">\n        <Button\n          type=\"submit\"\n          disabled={loading || disabled}\n          className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n        >\n          {loading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            submitText\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/AdminSessionManager.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":32,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":33,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":34,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":31}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock } from \"lucide-react\";\n\ninterface AdminSessionManagerProps {\n  children: React.ReactNode;\n}\n\nconst SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\nconst WARNING_TIME = 5 * 60 * 1000; // 5 minutes before timeout\n\nexport default function AdminSessionManager({\n  children,\n}: AdminSessionManagerProps) {\n  const [showWarning, setShowWarning] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    let activityTimer: NodeJS.Timeout;\n    let warningTimer: NodeJS.Timeout;\n    let countdownTimer: NodeJS.Timeout;\n    let lastActivity = Date.now();\n\n    const resetTimers = () => {\n      lastActivity = Date.now();\n      clearTimeout(activityTimer);\n      clearTimeout(warningTimer);\n      clearTimeout(countdownTimer);\n      setShowWarning(false);\n\n      // Set warning timer\n      warningTimer = setTimeout(() => {\n        setShowWarning(true);\n        setTimeLeft(WARNING_TIME);\n\n        // Start countdown\n        countdownTimer = setInterval(() => {\n          setTimeLeft((prev) => {\n            if (prev <= 1000) {\n              handleSessionTimeout();\n              return 0;\n            }\n            return prev - 1000;\n          });\n        }, 1000);\n      }, SESSION_TIMEOUT - WARNING_TIME);\n\n      // Set session timeout\n      activityTimer = setTimeout(handleSessionTimeout, SESSION_TIMEOUT);\n    };\n\n    const handleSessionTimeout = async () => {\n      try {\n        await supabase.auth.signOut();\n        toast({\n          title: \"Session Expired\",\n          description: \"Your session has expired. Please log in again.\",\n          variant: \"destructive\",\n        });\n        navigate(\"/admin/login\");\n      } catch (error) {\n        console.error(\"Error during session timeout:\", error);\n      }\n    };\n\n    const handleActivity = () => {\n      if (Date.now() - lastActivity > 60000) {\n        // Only reset if more than 1 minute since last activity\n        resetTimers();\n      }\n    };\n\n    // Track user activity\n    const events = [\n      \"mousedown\",\n      \"mousemove\",\n      \"keypress\",\n      \"scroll\",\n      \"touchstart\",\n      \"click\",\n    ];\n    events.forEach((event) => {\n      document.addEventListener(event, handleActivity, true);\n    });\n\n    // Initialize timers\n    resetTimers();\n\n    return () => {\n      clearTimeout(activityTimer);\n      clearTimeout(warningTimer);\n      clearTimeout(countdownTimer);\n      events.forEach((event) => {\n        document.removeEventListener(event, handleActivity, true);\n      });\n    };\n  }, [navigate, toast]);\n\n  const handleExtendSession = () => {\n    setShowWarning(false);\n    // Reset timers by triggering activity\n    document.dispatchEvent(new Event(\"mousedown\"));\n  };\n\n  const handleLogout = async () => {\n    try {\n      await supabase.auth.signOut();\n      navigate(\"/admin/login\");\n    } catch (error) {\n      console.error(\"Error during logout:\", error);\n    }\n  };\n\n  const formatTime = (ms: number) => {\n    const minutes = Math.floor(ms / 60000);\n    const seconds = Math.floor((ms % 60000) / 1000);\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  return (\n    <>\n      {children}\n\n      <Dialog open={showWarning} onOpenChange={() => {}}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Clock className=\"mr-2 h-5 w-5 text-orange-500\" />\n              Session Expiring Soon\n            </DialogTitle>\n            <DialogDescription>\n              Your admin session will expire in {formatTime(timeLeft)}. Would\n              you like to extend your session?\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter className=\"flex-col sm:flex-row gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              className=\"w-full sm:w-auto\"\n            >\n              Logout Now\n            </Button>\n            <Button\n              onClick={handleExtendSession}\n              className=\"w-full sm:w-auto bg-church-burgundy hover:bg-church-burgundy/90\"\n            >\n              Extend Session\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/AdminSyncStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/AuditLog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'setFilter' is assigned a value but never used.","line":42,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAuditData'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [filter, loadAuditData, timeRange]","fix":{"range":[1460,1479],"text":"[filter, loadAuditData, timeRange]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertTriangle,\n  User,\n  Clock,\n  Database,\n  Download,\n  RefreshCw,\n  Filter,\n  Eye,\n} from \"lucide-react\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport { format, subDays, subWeeks, subMonths } from \"date-fns\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface AuditLogProps {\n  className?: string;\n}\n\nconst AuditLog: React.FC<AuditLogProps> = ({ className }) => {\n  const [actions, setActions] = useState<any[]>([]);\n  const [criticalActions, setCriticalActions] = useState<any[]>([]);\n  const [statistics, setStatistics] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState(\"all\");\n  const [timeRange, setTimeRange] = useState(\"week\");\n  const [activeTab, setActiveTab] = useState(\"recent\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAuditData();\n    const interval = setInterval(loadAuditData, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, [filter, timeRange]);\n\n  const loadAuditData = async () => {\n    try {\n      setLoading(true);\n\n      // Get filtered actions based on time range\n      const now = new Date();\n      let startDate: Date;\n\n      switch (timeRange) {\n        case \"day\":\n          startDate = subDays(now, 1);\n          break;\n        case \"week\":\n          startDate = subWeeks(now, 1);\n          break;\n        case \"month\":\n          startDate = subMonths(now, 1);\n          break;\n        default:\n          startDate = subWeeks(now, 1);\n      }\n\n      const filteredActions = dataSyncService.getActionsByDateRange(\n        startDate,\n        now,\n      );\n      const recentActions = dataSyncService.getRecentAdminActions(50);\n      const critical = dataSyncService.getCriticalActions(20);\n      const stats = dataSyncService.getActionStatistics();\n\n      setActions(filter === \"all\" ? recentActions : filteredActions);\n      setCriticalActions(critical);\n      setStatistics(stats);\n    } catch (error) {\n      console.error(\"Error loading audit data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load audit log data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportAuditLog = () => {\n    const exportData = {\n      exportedAt: new Date().toISOString(),\n      timeRange,\n      filter,\n      statistics,\n      actions: actions.slice(0, 1000), // Limit export size\n      criticalActions,\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `audit-log-${format(new Date(), \"yyyy-MM-dd-HH-mm\")}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Success\",\n      description: \"Audit log exported successfully\",\n    });\n  };\n\n  const getActionIcon = (action: string) => {\n    if (action.includes(\"delete\"))\n      return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n    if (action.includes(\"create\"))\n      return <Database className=\"h-4 w-4 text-green-600\" />;\n    if (action.includes(\"update\"))\n      return <Eye className=\"h-4 w-4 text-blue-600\" />;\n    return <Clock className=\"h-4 w-4 text-gray-600\" />;\n  };\n\n  const getActionBadge = (action: string) => {\n    if (action.includes(\"delete\"))\n      return <Badge variant=\"destructive\">Delete</Badge>;\n    if (action.includes(\"create\"))\n      return <Badge className=\"bg-green-100 text-green-800\">Create</Badge>;\n    if (action.includes(\"update\"))\n      return <Badge className=\"bg-blue-100 text-blue-800\">Update</Badge>;\n    return <Badge variant=\"secondary\">{action}</Badge>;\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-church-burgundy\">Audit Log</h2>\n          <p className=\"text-gray-600 mt-1\">\n            Track all administrative actions and system events\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-full sm:w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"day\">Last Day</SelectItem>\n              <SelectItem value=\"week\">Last Week</SelectItem>\n              <SelectItem value=\"month\">Last Month</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button\n            onClick={exportAuditLog}\n            variant=\"outline\"\n            className=\"flex-1 sm:flex-none\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button\n            onClick={loadAuditData}\n            variant=\"outline\"\n            className=\"flex-1 sm:flex-none\"\n          >\n            <RefreshCw\n              className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n            />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Overview */}\n      {statistics && (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Today</p>\n                  <p className=\"text-2xl font-bold text-church-burgundy\">\n                    {statistics.today}\n                  </p>\n                </div>\n                <Clock className=\"h-8 w-8 text-church-burgundy\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">This Week</p>\n                  <p className=\"text-2xl font-bold text-church-burgundy\">\n                    {statistics.thisWeek}\n                  </p>\n                </div>\n                <Database className=\"h-8 w-8 text-church-burgundy\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    Critical Actions\n                  </p>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {statistics.criticalCount}\n                  </p>\n                </div>\n                <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    Total Actions\n                  </p>\n                  <p className=\"text-2xl font-bold text-church-burgundy\">\n                    {statistics.total}\n                  </p>\n                </div>\n                <User className=\"h-8 w-8 text-church-burgundy\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"recent\">Recent Actions</TabsTrigger>\n          <TabsTrigger value=\"critical\">Critical Actions</TabsTrigger>\n          <TabsTrigger value=\"statistics\">Statistics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"recent\" className=\"space-y-4\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n            </div>\n          ) : actions.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <Clock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No recent actions found</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-2\">\n              {actions.map((action, index) => (\n                <Card key={index}>\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        {getActionIcon(action.action)}\n                        <div className=\"min-w-0 flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <p className=\"font-medium text-sm\">\n                              {action.action}\n                            </p>\n                            {getActionBadge(action.action)}\n                          </div>\n                          <p className=\"text-sm text-gray-600\">\n                            Table: {action.table}\n                          </p>\n                          {action.data?.preview && (\n                            <p className=\"text-xs text-gray-500 truncate\">\n                              Data: {action.data.preview}\n                            </p>\n                          )}\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-400 mt-1\">\n                            <span>User: {action.userId}</span>\n                            <span>\n                              Session: {action.sessionId?.substring(0, 8)}...\n                            </span>\n                            <span>\n                              {format(\n                                new Date(action.timestamp),\n                                \"MMM d, HH:mm:ss\",\n                              )}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"critical\" className=\"space-y-4\">\n          {criticalActions.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <AlertTriangle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No critical actions recorded</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-2\">\n              {criticalActions.map((action, index) => (\n                <Card key={index} className=\"border-red-200\">\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                        <div className=\"min-w-0 flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <p className=\"font-medium text-sm text-red-900\">\n                              {action.action}\n                            </p>\n                            <Badge variant=\"destructive\">Critical</Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600\">\n                            Table: {action.table}\n                          </p>\n                          {action.data?.preview && (\n                            <p className=\"text-xs text-gray-500 truncate\">\n                              Data: {action.data.preview}\n                            </p>\n                          )}\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-400 mt-1\">\n                            <span>User: {action.userId}</span>\n                            <span>\n                              Session: {action.sessionId?.substring(0, 8)}...\n                            </span>\n                            <span>\n                              {format(\n                                new Date(action.timestamp),\n                                \"MMM d, HH:mm:ss\",\n                              )}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"statistics\" className=\"space-y-6\">\n          {statistics && (\n            <>\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Actions by Type</CardTitle>\n                    <CardDescription>\n                      Breakdown of administrative actions\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {Object.entries(statistics.byAction).map(\n                        ([action, count]) => (\n                          <div\n                            key={action}\n                            className=\"flex items-center justify-between\"\n                          >\n                            <span className=\"text-sm capitalize\">\n                              {action.replace(\"_\", \" \")}\n                            </span>\n                            <Badge variant=\"outline\">{count as number}</Badge>\n                          </div>\n                        ),\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Actions by User</CardTitle>\n                    <CardDescription>User activity breakdown</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {Object.entries(statistics.byUser).map(\n                        ([user, count]) => (\n                          <div\n                            key={user}\n                            className=\"flex items-center justify-between\"\n                          >\n                            <span className=\"text-sm\">{user}</span>\n                            <Badge variant=\"outline\">{count as number}</Badge>\n                          </div>\n                        ),\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default AuditLog;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ErrorBoundary.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Bug' is defined but never used.","line":2,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'useToast' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":24,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'errorInfo' is defined but never used.","line":24,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":54}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { AlertTriangle, RefreshCw, Home, Bug } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n  errorId?: string;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<{ error?: Error; resetError: () => void }>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n}\n\nclass ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n      errorId: Date.now().toString(),\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"Error caught by boundary:\", error, errorInfo);\n\n    // Store error info in state\n    this.setState({ errorInfo });\n\n    // Log to DataSyncService\n    dataSyncService.logError(\n      \"React Error Boundary\",\n      error,\n      `Component: ${errorInfo.componentStack?.split(\"\\n\")[1]?.trim()}`,\n    );\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // Log to external service in production\n    if (import.meta.env.PROD) {\n      this.logToExternalService(error, errorInfo);\n    }\n  }\n\n  private logToExternalService = (error: Error, errorInfo: React.ErrorInfo) => {\n    // In production, integrate with error tracking service like Sentry\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      errorId: this.state.errorId,\n    };\n\n    // TODO: Send to error tracking service\n    console.error(\"Production error logged:\", errorData);\n\n    // For now, store in localStorage as fallback\n    try {\n      const existingErrors = JSON.parse(\n        localStorage.getItem(\"app_errors\") || \"[]\",\n      );\n      existingErrors.push(errorData);\n      // Keep only last 10 errors\n      const recentErrors = existingErrors.slice(-10);\n      localStorage.setItem(\"app_errors\", JSON.stringify(recentErrors));\n    } catch (storageError) {\n      console.error(\"Failed to store error in localStorage:\", storageError);\n    }\n  };\n\n  resetError = () => {\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n      errorId: undefined,\n    });\n\n    // Clear any cached data that might be causing issues\n    if (typeof window !== \"undefined\") {\n      try {\n        // Clear relevant localStorage items (but preserve important user data)\n        const keysToRemove: string[] = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (\n            key &&\n            (key.includes(\"admin_cache\") ||\n              key.includes(\"sync_cache\") ||\n              key.includes(\"temp_\"))\n          ) {\n            keysToRemove.push(key);\n          }\n        }\n        keysToRemove.forEach((key) => localStorage.removeItem(key));\n\n        // Clear only temporary session storage items\n        const sessionKeysToRemove: string[] = [];\n        for (let i = 0; i < sessionStorage.length; i++) {\n          const key = sessionStorage.key(i);\n          if (key && (key.includes(\"temp_\") || key.includes(\"cache_\"))) {\n            sessionKeysToRemove.push(key);\n          }\n        }\n        sessionKeysToRemove.forEach((key) => sessionStorage.removeItem(key));\n      } catch (e) {\n        console.warn(\"Failed to clear storage:\", e);\n      }\n    }\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        const FallbackComponent = this.props.fallback;\n        return (\n          <FallbackComponent\n            error={this.state.error}\n            resetError={this.resetError}\n          />\n        );\n      }\n\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n          <Card className=\"w-full max-w-2xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n                <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-red-900 text-xl\">\n                Oops! Something went wrong\n              </CardTitle>\n              <CardDescription className=\"text-base\">\n                We encountered an unexpected error. Our team has been notified.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Error Details */}\n              {this.state.error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-red-900 mb-2\">\n                    Error Details:\n                  </h4>\n                  <p className=\"text-sm text-red-800 font-mono break-all\">\n                    {this.state.error.message}\n                  </p>\n                  {this.state.errorId && (\n                    <p className=\"text-xs text-red-600 mt-2\">\n                      Error ID: {this.state.errorId}\n                    </p>\n                  )}\n                </div>\n              )}\n\n              {/* Development Info */}\n              {!import.meta.env.PROD && this.state.errorInfo && (\n                <details className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <summary className=\"font-semibold text-gray-900 cursor-pointer\">\n                    Technical Details (Development)\n                  </summary>\n                  <pre className=\"text-xs text-gray-700 mt-2 overflow-auto max-h-40\">\n                    {this.state.error?.stack}\n                  </pre>\n                  <pre className=\"text-xs text-gray-600 mt-2 overflow-auto max-h-32\">\n                    {this.state.errorInfo.componentStack}\n                  </pre>\n                </details>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button\n                  onClick={this.resetError}\n                  className=\"flex-1 bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Try Again\n                </Button>\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh Page\n                </Button>\n                <Button\n                  onClick={() => (window.location.href = \"/\")}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Go Home\n                </Button>\n              </div>\n\n              {/* Help Text */}\n              <div className=\"text-center text-sm text-gray-500\">\n                <p>\n                  If this problem persists, please contact support with Error\n                  ID:{\" \"}\n                  <code className=\"bg-gray-100 px-1 rounded\">\n                    {this.state.errorId}\n                  </code>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ErrorDiagnostics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ImageSlider.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'interval' is assigned a value but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface ImageSliderProps {\n  slides: {\n    image: string; \n    title: string; \n    content: string;\n  }[];\n  autoPlay?: boolean;\n  interval?: number;\n}\n\nexport default function ImageSlider({\n  slides = [],\n  autoPlay = false,\n  interval = 3000,\n}: ImageSliderProps) {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [imageLoaded, setImageLoaded] = useState<boolean[]>(\n    new Array(slides.length).fill(false)\n  );\n\n  useEffect(() => {\n    if (!autoPlay || slides.length <= 1) return;\n\n    const autoAdvance = setInterval(() => {\n      setCurrentSlide((prev) => (prev === slides.length - 1 ? 0 : prev + 1));\n    }, 7000); // 7 seconds for better readability\n\n    return () => clearInterval(autoAdvance);\n  }, [autoPlay, slides.length]);\n\n  // Preload next image for better performance\n  useEffect(() => {\n    if (slides.length > 0) {\n      const nextIndex = (currentSlide + 1) % slides.length;\n      const img = new Image();\n      img.src = slides[nextIndex].image;\n    }\n  }, [currentSlide, slides]);\n\n  const handleImageLoad = (index: number) => {\n    setImageLoaded((prev) => {\n      const newLoaded = [...prev];\n      newLoaded[index] = true;\n      return newLoaded;\n    });\n  };\n\n  const handleImageError = (index: number) => {\n    console.warn(`Image at index ${index} failed to load.`);\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide(\n      currentSlide === 0 ? slides.length - 1 : currentSlide - 1\n    );\n  };\n\n  const nextSlide = () => {\n    setCurrentSlide(\n      currentSlide === slides.length - 1 ? 0 : currentSlide + 1\n    );\n  };\n\n  if (!slides || slides.length === 0) {\n    return (\n      <div className=\"w-full h-64 bg-gray-200 flex items-center justify-center\">\n        No slides available\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative w-full h-[450px] md:h-[550px] lg:h-[650px] overflow-hidden rounded-2xl shadow-2xl border border-church-gold/20\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-church-burgundy/5 via-transparent to-church-gold/5 pointer-events-none z-10\"></div>\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-all duration-1200 ease-in-out ${\n            index === currentSlide\n              ? \"opacity-100 scale-100\"\n              : \"opacity-0 scale-110 pointer-events-none\"\n          }`}\n        >\n          {!imageLoaded[index] && index === currentSlide && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-br from-church-burgundy/10 to-church-gold/10\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-church-gold border-t-transparent\"></div>\n            </div>\n          )}\n          <img\n            src={slide.image}\n            alt={`Slide ${index + 1}`}\n            className={`w-full h-full object-cover transition-all duration-1000 ${\n              imageLoaded[index] ? \"opacity-100\" : \"opacity-0\"\n            }`}\n            onLoad={() => handleImageLoad(index)}\n            onError={() => handleImageError(index)}\n            loading={index === 0 ? \"eager\" : \"lazy\"}\n          />\n          {/* Reduced gradient overlay for better image visibility */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-black/10 to-black/20\"></div>\n          <div className=\"absolute inset-0 bg-gradient-to-br from-church-burgundy/20 via-transparent to-church-gold/15\"></div>\n\n          {/* Content overlay with reduced opacity for better background visibility */}\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white p-6 md:p-8 z-20\">\n            <div className=\"text-center max-w-5xl mx-auto backdrop-blur-md bg-gradient-to-br from-church-burgundy/35 via-church-burgundy/25 to-church-burgundy/40 rounded-2xl p-8 md:p-10 border border-church-gold/40 shadow-2xl animate-slide-up\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-church-gold/8 via-transparent to-church-gold/4 rounded-2xl\"></div>\n              <div className=\"relative z-10\">\n                <h2\n                  className=\"text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold mb-4 md:mb-6 text-church-gold font-serif\"\n                  style={{\n                    textShadow:\n                      \"4px 4px 8px rgba(0,0,0,0.95), 2px 2px 4px rgba(0,0,0,0.8)\",\n                  }}\n                >\n                  {slide.title}\n                </h2>\n                <div className=\"w-24 h-1 bg-gradient-to-r from-transparent via-church-gold to-transparent mx-auto mb-4 md:mb-6\"></div>\n                <p\n                  className=\"text-base md:text-lg lg:text-xl xl:text-2xl text-center leading-relaxed font-medium text-white/98\"\n                  style={{\n                    textShadow:\n                      \"3px 3px 6px rgba(0,0,0,0.9), 1px 1px 3px rgba(0,0,0,0.7)\",\n                  }}\n                >\n                  {slide.content}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n\n      <button\n        onClick={prevSlide}\n        className=\"absolute left-4 md:left-6 top-1/2 transform -translate-y-1/2 bg-church-burgundy/80 hover:bg-church-burgundy/90 text-church-gold p-3 md:p-4 rounded-full transition-all duration-300 hover:scale-110 backdrop-blur-md border border-church-gold/30 shadow-lg z-30\"\n        aria-label=\"Previous image\"\n      >\n        <ChevronLeft className=\"w-5 h-5 md:w-6 md:h-6\" />\n      </button>\n\n      <button\n        onClick={nextSlide}\n        className=\"absolute right-4 md:right-6 top-1/2 transform -translate-y-1/2 bg-church-burgundy/80 hover:bg-church-burgundy/90 text-church-gold p-3 md:p-4 rounded-full transition-all duration-300 hover:scale-110 backdrop-blur-md border border-church-gold/30 shadow-lg z-30\"\n        aria-label=\"Next image\"\n      >\n        <ChevronRight className=\"w-5 h-5 md:w-6 md:h-6\" />\n      </button>\n\n      <div className=\"absolute bottom-6 md:bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 z-30\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`relative transition-all duration-400 ${\n              index === currentSlide\n                ? \"w-4 h-4 md:w-5 md:h-5\"\n                : \"w-3 h-3 md:w-4 md:h-4 hover:scale-110\"\n            }`}\n            aria-label={`Go to slide ${index + 1}`}\n          >\n            <div\n              className={`w-full h-full rounded-full transition-all duration-400 ${\n                index === currentSlide\n                  ? \"bg-church-gold shadow-lg animate-pulse-glow\"\n                  : \"bg-white/60 hover:bg-white/80 backdrop-blur-sm\"\n              }`}\n            />\n            {index === currentSlide && (\n              <div className=\"absolute inset-0 rounded-full border-2 border-church-gold/50 animate-ping\"></div>\n            )}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-black/30 via-black/20 to-black/30\">\n        <div\n          className=\"h-full bg-gradient-to-r from-church-gold via-church-gold/80 to-church-gold transition-all duration-500 ease-out shadow-sm\"\n          style={{\n            width: `${((currentSlide + 1) / slides.length) * 100}%`,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ImageWithFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/LoadingState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/NewsletterSubscription.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":9,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":43,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":30}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useToast } from \"../hooks/use-toast\";\n\nexport default function NewsletterSubscription() {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) return;\n\n    setIsLoading(true);\n    try {\n      // Here you would typically save to a newsletter table\n      // For now, just show success message\n      toast({\n        title: \"Success!\",\n        description: \"Thank you for subscribing to our newsletter.\",\n      });\n      setEmail(\"\");\n    } catch (error) {\n      console.error(\"Newsletter subscription error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to subscribe. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <h3 className=\"text-lg font-semibold mb-4\">\n        Subscribe to Our Newsletter\n      </h3>\n      <form onSubmit={handleSubmit} className=\"flex gap-2\">\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setEmail(e.target.value)\n          }\n          placeholder=\"Enter your email\"\n          className=\"flex-1 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          required\n        />\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\n        >\n          {isLoading ? \"Subscribing...\" : \"Subscribe\"}\n        </button>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/auth/ProtectedRoute.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":5,"column":58,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\nexport function ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const {\n          data: { session },\n        } = await supabase.auth.getSession();\n        setIsAuthenticated(!!session);\n      } catch (error) {\n        console.error(\"Auth check failed:\", error);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuth();\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setIsAuthenticated(!!session);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"h-32 w-32 animate-spin rounded-full border-b-2 border-t-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/admin/login\" state={{ from: location }} replace />;\n  }\n\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/carousel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":19,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: \"horizontal\" | \"vertical\";\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins,\n    );\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n    const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return;\n      }\n\n      setCanScrollPrev(api.canScrollPrev());\n      setCanScrollNext(api.canScrollNext());\n    }, []);\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev();\n    }, [api]);\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext();\n    }, [api]);\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault();\n          scrollPrev();\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault();\n          scrollNext();\n        }\n      },\n      [scrollPrev, scrollNext],\n    );\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return;\n      }\n\n      setApi(api);\n    }, [api, setApi]);\n\n    React.useEffect(() => {\n      if (!api) {\n        return;\n      }\n\n      onSelect(api);\n      api.on(\"reInit\", onSelect);\n      api.on(\"select\", onSelect);\n\n      return () => {\n        api?.off(\"select\", onSelect);\n      };\n    }, [api, onSelect]);\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  },\n);\nCarousel.displayName = \"Carousel\";\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel();\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n});\nCarouselContent.displayName = \"CarouselContent\";\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel();\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nCarouselItem.displayName = \"CarouselItem\";\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  );\n});\nCarouselPrevious.displayName = \"CarouselPrevious\";\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  );\n});\nCarouselNext.displayName = \"CarouselNext\";\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/chart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'k' is defined but never used.","line":10,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":5},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":70,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":8}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig;\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = \"Chart\";\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color,\n  );\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`,\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: \"line\" | \"dot\" | \"dashed\";\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        );\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className,\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || item.payload.fill || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\",\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            },\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\",\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = \"ChartTooltip\";\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    if (!payload?.length) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className,\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\",\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n);\nChartLegendContent.displayName = \"ChartLegend\";\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":169,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":169,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  );\n});\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n});\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n});\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n});\nFormMessage.displayName = \"FormMessage\";\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\",\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/optimized-image.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":5,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface OptimizedImageProps\n  extends React.ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  alt: string;\n  className?: string;\n  lowQualitySrc?: string;\n}\n\nexport function OptimizedImage({\n  src,\n  alt,\n  className,\n  lowQualitySrc,\n  ...props\n}: OptimizedImageProps) {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  const [currentSrc, setCurrentSrc] = useState(lowQualitySrc || src);\n\n  useEffect(() => {\n    const img = new Image();\n    img.src = src;\n\n    img.onload = () => {\n      setCurrentSrc(src);\n      setLoaded(true);\n    };\n\n    img.onerror = () => {\n      setError(true);\n    };\n  }, [src]);\n\n  if (error) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-gray-100\",\n          className,\n        )}\n      >\n        <span className=\"text-sm text-gray-500\">Failed to load image</span>\n      </div>\n    );\n  }\n\n  return (\n    <img\n      src={currentSrc}\n      alt={alt}\n      className={cn(\n        \"transition-opacity duration-300\",\n        !loaded && \"filter blur-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/resizable.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":9,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":25,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GripVertical } from \"lucide-react\";\nimport * as ResizablePrimitive from \"react-resizable-panels\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className,\n    )}\n    {...props}\n  />\n);\n\nconst ResizablePanel = ResizablePrimitive.Panel;\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean;\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className,\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n);\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":30,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":32,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":32},{"ruleId":"no-redeclare","severity":2,"message":"'SidebarContext' is already defined.","line":37,"column":7,"nodeType":"Identifier","messageId":"redeclared","endLine":37,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":53,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":76,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":41},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":784,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":784,"endColumn":13}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width-mobile] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event: React.MouseEvent) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] after:-translate-x-1/2 after:bg-sidebar-border after:opacity-0 after:transition-opacity after:duration-200 group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    asChild?: boolean;\n  }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n  }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => {\n  return (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  );\n});\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => {\n  return (\n    <li\n      ref={ref}\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  );\n});\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!size-8\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => {\n  return (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => {\n  return <li ref={ref} {...props} />;\n});\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-foreground/50\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/skeleton.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":6,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/sonner.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":4,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\";\nimport { Toaster as Sonner, toast } from \"sonner\";\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>;\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { Toaster, toast };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/toaster.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":24,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":25,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":26,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useToast } from \"@/hooks/use-toast\";\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({\n        id,\n        title,\n        description,\n        action,\n        ...props\n      }: {\n        id: string;\n        title?: React.ReactNode;\n        description?: React.ReactNode;\n        action?: React.ReactElement;\n        [key: string]: any;\n      }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/contexts/DataContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":21,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":38},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":142,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":142,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface DataContextType {\n  connectionHealth: boolean;\n  syncStatus: Record<string, string>;\n  gitStatus: {\n    branch: string;\n    hasChanges: boolean;\n    changedFiles: string[];\n  };\n  lastRefresh: Date | null;\n  isRefreshing: boolean;\n  forceSync: () => Promise<void>;\n  autoCommitAndPush: (message: string) => Promise<boolean>;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\ninterface DataProviderProps {\n  children: ReactNode;\n}\n\nexport function DataProvider({ children }: DataProviderProps) {\n  const [connectionHealth, setConnectionHealth] = useState(true);\n  const [syncStatus, setSyncStatus] = useState<Record<string, string>>({\n    events: \"SUBSCRIBED\",\n    gallery: \"SUBSCRIBED\",\n    sermons: \"SUBSCRIBED\",\n    members: \"SUBSCRIBED\",\n    testimonials: \"SUBSCRIBED\",\n    prayer_requests: \"SUBSCRIBED\",\n    donations: \"SUBSCRIBED\",\n  });\n  const [gitStatus, setGitStatus] = useState({\n    branch: \"main\",\n    hasChanges: false,\n    changedFiles: [],\n  });\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(new Date());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const refreshAllData = async () => {\n    if (isRefreshing) {\n      console.log(\"Refresh already in progress, skipping...\");\n      return;\n    }\n\n    setIsRefreshing(true);\n    try {\n      console.log(\"Starting data refresh...\");\n\n      // Test database connection first\n      const { error: connectionError } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n\n      if (connectionError) {\n        throw new Error(\n          `Database connection failed: ${connectionError.message}`,\n        );\n      }\n\n      setConnectionHealth(true);\n      setLastRefresh(new Date());\n\n      // Update sync status for common tables\n      setSyncStatus({\n        events: \"SUBSCRIBED\",\n        members: \"SUBSCRIBED\",\n        sermons: \"SUBSCRIBED\",\n        gallery: \"SUBSCRIBED\",\n        testimonials: \"SUBSCRIBED\",\n        prayer_requests: \"SUBSCRIBED\",\n        donations: \"SUBSCRIBED\",\n      });\n\n      console.log(\"Data refresh completed successfully\");\n    } catch (error) {\n      console.error(\"Force sync failed:\", error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const forceSync = async () => {\n    console.log(\"Force syncing data...\");\n    // Debounce force sync to prevent infinite loops\n    if (isRefreshing) {\n      console.log(\"Sync already in progress, skipping...\");\n      return;\n    }\n    await refreshAllData();\n  };\n\n  const autoCommitAndPush = async (message: string): Promise<boolean> => {\n    try {\n      console.log(\"Auto commit and push:\", message);\n      // Simulate git operations\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n      setGitStatus((prev) => ({\n        ...prev,\n        hasChanges: false,\n        changedFiles: [],\n      }));\n      return true;\n    } catch (error) {\n      console.error(\"Auto commit and push failed:\", error);\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    // Simulate periodic health checks\n    const interval = setInterval(() => {\n      setLastRefresh(new Date());\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const value: DataContextType = {\n    connectionHealth,\n    syncStatus,\n    gitStatus,\n    lastRefresh,\n    isRefreshing,\n    forceSync,\n    autoCommitAndPush,\n  };\n\n  return <DataContext.Provider value={value}>{children}</DataContext.Provider>;\n}\n\nexport function useDataContext() {\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error(\"useDataContext must be used within a DataProvider\");\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/contexts/LanguageContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'lang' is defined but never used.","line":7,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":8,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":400,"column":28,"nodeType":"Identifier","messageId":"namedExport","endLine":400,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\ntype Language = \"en\" | \"am\";\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\n// Create the language context\nconst LanguageContext = createContext<LanguageContextType | undefined>(\n  undefined,\n);\n\n// Translations object for all strings in both languages\nconst translations: Record<string, Record<Language, string>> = {\n  // Navigation\n  home: { en: \"Home\", am: \"መነሻ\" },\n  about: { en: \"About Us\", am: \"ስለ እኛ\" },\n  events: { en: \"Events\", am: \"ዝግጅቶች\" },\n  services: { en: \"Services\", am: \"አገልግሎቶች\" },\n  gallery: { en: \"Gallery\", am: \"ፎቶዎች\" },\n  donation: { en: \"Donation\", am: \"ልገሳ\" },\n  membership: { en: \"Membership\", am: \"አባልነት\" },\n  contact: { en: \"Contact Us\", am: \"ያግኙን\" },\n\n  // Home page\n  welcome: {\n    en: \"Welcome to the Debre Bisrat Dagimawi Kulibi St.Gabriel EOTC, Silver Spring, Maryland\",\n    am: \"እንኳን ወደ ደብረ ብሥራት ዳግማዊ ቁልቢ ቅዱስ ገብርኤል የኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያን ድረ ገጽ በሰላም መጡ።\",\n  },\n  bible_verse: {\n    en: \"Give, and it will be given to you. A good measure, pressed down, shaken together and running over, will be poured into your lap. For with the measure you use, it will be measured to you.\",\n    am: \"ስጡ፤ ለእናንተም ይሰጣችኋል። መልካም መጠን የተደቆሰና የተነቀነቀ የተትረፈረፈም ይሰጣችኋል፤ በምትሰፍሩበት መስፈሪያ ለእናንተ ይሰፈርላችኋልና።\",\n  },\n  bible_reference: { en: \"Luke 6:38, NIV\", am: \"ሉቃስ 6:38\" },\n\n  // Common form fields\n  full_name: { en: \"Full Name\", am: \"ሙሉ ስም\" },\n  email: { en: \"Email Address\", am: \"የኢሜል አድራሻ\" },\n  phone: { en: \"Phone Number\", am: \"ስልክ ቁጥር\" },\n  address: { en: \"Address\", am: \"አድራሻ\" },\n  preferred_language: { en: \"Preferred Language\", am: \"የተመረጠ ቋንቋ\" },\n  english: { en: \"English\", am: \"እንግሊዝኛ\" },\n  amharic: { en: \"Amharic\", am: \"አማርኛ\" },\n  submit: { en: \"Submit\", am: \"አስገባ\" },\n  processing: { en: \"Processing...\", am: \"በመስራት ላይ...\" },\n\n  // Donation page\n  donation_title: { en: \"Support Our Church\", am: \"ቤተክርስቲያናችንን ይደግፉ\" },\n  donation_subtitle: {\n    en: \"Make a Difference in Our Community\",\n    am: \"በማህበረሰባችን ውስጥ ለውጥ ያድርጉ\",\n  },\n  donation_description: {\n    en: \"Your generous contributions help us maintain our church, support community programs, and continue our mission.\",\n    am: \"የእርስዎ ገንዘብ ቤተክርስቲያናችንን ለመጠበቅ፣ የማህበረሰብ ፕሮግራሞችን ለመደገፍ እና ተልዕኮአችንን ለመቀጠል ይረዳናል።\",\n  },\n  donation_amount: { en: \"Donation Amount\", am: \"የልገሳ መጠን\" },\n  donation_type: { en: \"Donation Type\", am: \"የልገሳ አይነት\" },\n  one_time: { en: \"One-time\", am: \"አንድ ጊዜ\" },\n  monthly: { en: \"Monthly\", am: \"ወርሃዊ\" },\n  quarterly: { en: \"Quarterly\", am: \"በየሶስት ወሩ\" },\n  annually: { en: \"Annually\", am: \"አመታዊ\" },\n  donate_now: { en: \"Donate Now\", am: \"አሁን ይለግሱ\" },\n  donation_purpose: { en: \"Purpose of Donation\", am: \"የልገሳ ዓላማ\" },\n  general_fund: { en: \"General Fund\", am: \"አጠቃላይ\" },\n  building_fund: { en: \"Building Fund\", am: \"የህንፃ\" },\n  youth_programs: { en: \"Youth Programs\", am: \"የወጣቶች ፕሮግራም\" },\n  charity: { en: \"Charity\", am: \"ለጋስነት\" },\n  suggested_amounts: { en: \"Suggested Amounts\", am: \"የሚመከሩ መጠኖች\" },\n  custom_amount: { en: \"Custom Amount\", am: \"የተለየ መጠን\" },\n  contact_preference: { en: \"Contact Preference\", am: \"የመገናኛ ምርጫ\" },\n  email_contact: { en: \"Email\", am: \"ኢሜል\" },\n  phone_contact: { en: \"Phone\", am: \"ስልክ\" },\n  anonymous_donation: {\n    en: \"Make this donation anonymous\",\n    am: \"ይህንን ልገሳ ስም ሳይገለጽ ማድረግ\",\n  },\n  anonymous_note: {\n    en: \"Your contact information will not be shared publicly\",\n    am: \"የእርስዎ የመገናኛ መረጃ በይፋ አይጋራም\",\n  },\n  tax_deductible: { en: \"Tax Deductible\", am: \"ከግብር የሚቀነስ\" },\n  tax_deductible_note: {\n    en: \"This donation is tax-deductible. You will receive a receipt for your records.\",\n    am: \"ይህ ልገሳ ከግብር የሚቀነስ ነው። ለመዝገብዎ ደረሰኝ ይደርስዎታል።\",\n  },\n  secure_payment: { en: \"Secure Payment\", am: \"ደህንነቱ የተጠበቀ ክፍያ\" },\n  secure_payment_note: {\n    en: \"Your payment information is encrypted and secure\",\n    am: \"የእርስዎ የክፍያ መረጃ የተመሰጠረ እና ደህንነቱ የተጠበቀ ነው\",\n  },\n  donation_impact: { en: \"Your Impact\", am: \"የእርስዎ ተጽዕኖ\" },\n  general_fund_impact: {\n    en: \"Supports daily operations, utilities, and maintenance of our church facilities\",\n    am: \"የቤተክርስቲያናችንን የዕለት ተዕለት ሥራዎች፣ መገልገያዎች እና ጥገና ይደግፋል\",\n  },\n  building_fund_impact: {\n    en: \"Helps with construction, renovation, and expansion of church buildings\",\n    am: \"የቤተክርስቲያን ህንፃዎች ግንባታ፣ ማሻሻያ እና ማስፋፊያ ይረዳል\",\n  },\n  youth_programs_impact: {\n    en: \"Funds Sunday school, youth activities, and educational programs\",\n    am: \"የሰንበት ትምህርት ቤት፣ የወጣቶች እንቅስቃሴዎች እና የትምህርት ፕሮግራሞችን ይደግፋል\",\n  },\n  charity_impact: {\n    en: \"Supports community outreach, food programs, and assistance to those in need\",\n    am: \"የማህበረሰብ ድጋፍ፣ የምግብ ፕሮግራሞች እና ለተቸገሩ ሰዎች እርዳታ ይሰጣል\",\n  },\n  donor_recognition: { en: \"Donor Recognition\", am: \"የለጋሽ እውቅና\" },\n  include_in_bulletin: {\n    en: \"Include my name in the church bulletin (unless anonymous)\",\n    am: \"ስሜን በቤተክርስቲያን መግለጫ ውስጥ ያካትቱ (ስም ሳይገለጽ ካልሆነ በስተቀር)\",\n  },\n  memorial_dedication: {\n    en: \"Memorial or Dedication (Optional)\",\n    am: \"መታሰቢያ ወይም መሰጠት (አማራጭ)\",\n  },\n  memorial_placeholder: {\n    en: \"In memory of... or In honor of...\",\n    am: \"በ... ትዝታ ወይም በ... ክብር\",\n  },\n  proceed_to_payment: {\n    en: \"Proceed to Secure Payment\",\n    am: \"ወደ ደህንነቱ የተጠበቀ ክፍያ ይሂዱ\",\n  },\n\n  // Services page\n  services_title: { en: \"Church Services\", am: \"የቤተክርስቲያን አገልግሎቶች\" },\n  services_description: {\n    en: \"Learn about the various religious services offered at our church throughout the year.\",\n    am: \"በዓመቱ ውስጥ ቤተክርስቲያናችን ስለሚሰጣቸው የተለያዩ ሃይማኖታዊ አገልግሎቶች ይወቁ።\",\n  },\n  regular_services: { en: \"Regular Services\", am: \"መደበኛ አገልግሎቶች\" },\n  special_services: {\n    en: \"Special Services & Holidays\",\n    am: \"ልዩ አገልግሎቶች እና በዓላት\",\n  },\n  children_services: { en: \"Children's Services\", am: \"የልጆች አገልግሎቶች\" },\n\n  // Gallery page\n  gallery_title: { en: \"Photo Gallery\", am: \"ፎቶ ማዕከል\" },\n  gallery_description: {\n    en: \"Explore photos from our church events, celebrations, and community gatherings.\",\n    am: \"ከቤተክርስቲያን ዝግጅቶቻችን፣ ከበዓላት እና ከማህበረሰብ ስብሰባዎች ፎቶዎችን ይመልከቱ።\",\n  },\n  church_building: { en: \"Church Building\", am: \"የቤተክርስቲያን ህንፃ\" },\n  congregation: { en: \"Congregation\", am: \"ምዕመናን\" },\n  celebrations: { en: \"Celebrations\", am: \"በዓላት\" },\n  community_events: { en: \"Community Events\", am: \"የማህበረሰብ ዝግጅቶች\" },\n\n  // Contact page\n  contact_title: { en: \"Contact Us\", am: \"ያግኙን\" },\n  contact_description: {\n    en: \"Have questions? Reach out to us through any of the methods below or use the contact form.\",\n    am: \"ጥያቄዎች አሉዎት? ከታች ባሉት ማንኛውም መንገዶች ወይም የመገናኛ ቅጹን በመጠቀም ያግኙን።\",\n  },\n  message: { en: \"Message\", am: \"መልዕክት\" },\n  send_message: { en: \"Send Message\", am: \"መልዕክት ላክ\" },\n  language_switch: { en: \"አማርኛ\", am: \"English\" },\n\n  // Footer\n  copyright: {\n    en: \"© 2025 Debre Bisrat Dagimawi Kulibi St.Gabriel EOTC. All rights reserved.\",\n    am: \"© 2025 ደብረ ብሥራት ዳግማዊ ቁልቢ ቅዱስ ገብርኤል የኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያን። መብቱ በህግ የተጠበቀ ነው።\",\n  },\n\n  // Membership Registration\n  membership_registration_title: {\n    en: \"Membership Registration\",\n    am: \"የአባልነት ምዝገባ\",\n  },\n  membership_registration_description: {\n    en: \"Join our church community by registering as a member. Annual membership fee is $100.\",\n    am: \"በአባልነት በመመዝገብ የቤተክርስቲያን ማህበረሰባችንን ይቀላቀሉ። የዓመት አባልነት ክፍያ $100 ነው።\",\n  },\n  membership_type: {\n    en: \"Membership Type\",\n    am: \"የአባልነት ዓይነት\",\n  },\n  select_membership_type: {\n    en: \"Select Membership Type\",\n    am: \"የአባልነት ዓይነት ይምረጡ\",\n  },\n  individual_membership: {\n    en: \"Individual Membership\",\n    am: \"የግል አባልነት\",\n  },\n  family_membership: {\n    en: \"Family Membership\",\n    am: \"የቤተሰብ አባልነት\",\n  },\n  membership_fee_notice: {\n    en: \"Annual Membership Fee: $100\",\n    am: \"የዓመት አባልነት ክፍያ፡ $100\",\n  },\n  membership_fee_description: {\n    en: \"This fee helps support our church's activities and maintenance.\",\n    am: \"ይህ ክፍያ የቤተክርስቲያናችንን እንቅስቃሴዎች እና ጥገና ይደግፋል።\",\n  },\n  register_and_pay: {\n    en: \"Register & Pay $100\",\n    am: \"ይመዝገቡ እና $100 ይክፈሉ\",\n  },\n\n  // Membership Registration Form Fields\n  first_name: { en: \"First Name\", am: \"መጠሪያ ስም\" },\n  middle_name: { en: \"Middle Name\", am: \"የአባት ስም\" },\n  last_name: { en: \"Last Name\", am: \"የአያት ስም\" },\n  baptismal_name: { en: \"Baptismal Name\", am: \"የጥምቀት ስም\" },\n  date_of_birth: { en: \"Date of Birth\", am: \"የትውልድ ቀን\" },\n  gender: { en: \"Gender\", am: \"ፆታ\" },\n  male: { en: \"Male\", am: \"ወንድ\" },\n  female: { en: \"Female\", am: \"ሴት\" },\n  street_address: { en: \"Street Address\", am: \"የመንገድ አድራሻ\" },\n  apt_suite_bldg: {\n    en: \"Apt, Suite, Bldg. (optional)\",\n    am: \"አፓርትመንት፣ ሱት፣ ህንፃ (አማራጭ)\",\n  },\n  city: { en: \"City\", am: \"ከተማ\" },\n  state_province_region: { en: \"State/Province/Region\", am: \"ግዛት/ክልል/ወረዳ\" },\n  postal_zip_code: { en: \"Postal/Zip Code\", am: \"ፖስታ/ዚፕ ኮድ\" },\n  country: { en: \"Country\", am: \"ሀገር\" },\n  united_states: { en: \"United States\", am: \"አሜሪካ\" },\n  canada: { en: \"Canada\", am: \"ካናዳ\" },\n  ethiopia: { en: \"Ethiopia\", am: \"ኢትዮጵያ\" },\n  other: { en: \"Other\", am: \"ሌላ\" },\n  regular_member: {\n    en: \"Regular Member ($100/year)\",\n    am: \"መደበኛ አባል ($100/አመት)\",\n  },\n  student_member: { en: \"Student Member ($50/year)\", am: \"የተማሪ አባል ($50/አመት)\" },\n  senior_member: { en: \"Senior Member ($75/year)\", am: \"የአዛውንት አባል ($75/አመት)\" },\n  family_member: {\n    en: \"Family Member ($200/year)\",\n    am: \"የቤተሰብ አባል ($200/አመት)\",\n  },\n  previous_member_orthodox: {\n    en: \"I was previously a member of another Orthodox church\",\n    am: \"ከዚህ በፊት የሌላ ኦርቶዶክስ ቤተክርስቲያን አባል ነበርኩ\",\n  },\n  previous_church_name: { en: \"Previous Church Name\", am: \"የቀድሞ ቤተክርስቲያን ስም\" },\n  baptized: { en: \"I have been baptized\", am: \"ተጠምቄአለሁ\" },\n  baptism_date: { en: \"Baptism Date\", am: \"የጥምቀት ቀን\" },\n  marital_status: { en: \"Marital Status\", am: \"የጋብቻ ሁኔታ\" },\n  single: { en: \"Single\", am: \"ያላገባ\" },\n  married: { en: \"Married\", am: \"ያገባ\" },\n  divorced: { en: \"Divorced\", am: \"የተፋታ\" },\n  widowed: { en: \"Widowed\", am: \"የትዳር አጋሩ የሞተበት\" },\n  spouse_information: { en: \"Spouse Information\", am: \"የትዳር አጋር መረጃ\" },\n  spouse: { en: \"Spouse\", am: \"የትዳር አጋር\" },\n  spouse_baptismal_name: {\n    en: \"Spouse Baptismal Name\",\n    am: \"የትዳር አጋር የጥምቀት ስም\",\n  },\n  spouse_phone: { en: \"Spouse Phone\", am: \"የትዳር አጋር ስልክ\" },\n  spouse_email: { en: \"Spouse Email\", am: \"የትዳር አጋር ኢሜል\" },\n  children_information: { en: \"Children Information\", am: \"የልጆች መረጃ\" },\n  child_1: { en: \"Child 1\", am: \"ልጅ 1\" },\n  child_2: { en: \"Child 2\", am: \"ልጅ 2\" },\n  ministry_interests: {\n    en: \"Ministry Interests (Select all that apply)\",\n    am: \"የአገልግሎት ፍላጎቶች (የሚመለከትዎትን ሁሉ ይምረጡ)\",\n  },\n  volunteer_interests: {\n    en: \"Volunteer Interests (Select all that apply)\",\n    am: \"የበጎ ፈቃድ ፍላጎቶች (የሚመለከትዎትን ሁሉ ይምረጡ)\",\n  },\n  special_skills: {\n    en: \"Special Skills or Talents\",\n    am: \"ልዩ ችሎታዎች ወይም ተሰጥኦዎች\",\n  },\n  skills_placeholder: {\n    en: \"Please describe any special skills, talents, or professional expertise you'd like to share...\",\n    am: \"እባክዎን ማካፈል የሚፈልጓቸውን ልዩ ችሎታዎች፣ ተሰጥኦዎች ወይም ሙያዊ ብቃቶች ይግለጹ...\",\n  },\n  emergency_contact_info: {\n    en: \"Emergency Contact Information\",\n    am: \"የአደጋ ጊዜ ተጠሪ መረጃ\",\n  },\n  emergency_contact_name: {\n    en: \"Emergency Contact Name\",\n    am: \"የአደጋ ጊዜ ተጠሪ ስም\",\n  },\n  emergency_contact_phone: {\n    en: \"Emergency Contact Phone\",\n    am: \"የአደጋ ጊዜ ተጠሪ ስልክ\",\n  },\n  emergency_contact_relation: {\n    en: \"Relationship to Emergency Contact\",\n    am: \"ከአደጋ ጊዜ ተጠሪ ጋር ያለዎት ግንኙነት\",\n  },\n  emergency_relation_placeholder: {\n    en: \"e.g., Spouse, Parent, Sibling, Friend\",\n    am: \"ለምሳሌ፣ ባል/ሚስት፣ ወላጅ፣ ወንድም/እህት፣ ጓደኛ\",\n  },\n  final_details_review: {\n    en: \"Final Details & Review\",\n    am: \"የመጨረሻ ዝርዝሮች እና ግምገማ\",\n  },\n  email_updates_consent: {\n    en: \"I would like to receive email updates about church events and news\",\n    am: \"ስለ ቤተክርስቲያን ዝግጅቶች እና ዜናዎች በኢሜይል መረጃዎችን መቀበል እፈልጋለሁ\",\n  },\n  sms_updates_consent: {\n    en: \"I would like to receive SMS updates for urgent announcements\",\n    am: \"ለአስቸኳይ ማስታወቂያዎች በኤስኤምኤስ መረጃዎችን መቀበል እፈልጋለሁ\",\n  },\n  how_did_you_hear: {\n    en: \"How did you hear about our church?\",\n    am: \"ስለ ቤተክርስቲያናችን እንዴት ሰሙ?\",\n  },\n  please_select: { en: \"Please select...\", am: \"እባክዎን ይምረጡ...\" },\n  friend_family: { en: \"Friend or Family Member\", am: \"ጓደኛ ወይም የቤተሰብ አባል\" },\n  church_website: { en: \"Church Website\", am: \"የቤተክርስቲያን ድህረ ገጽ\" },\n  social_media: { en: \"Social Media\", am: \"ማህበራዊ ሚዲያ\" },\n  community_event: { en: \"Community Event\", am: \"የማህበረሰብ ዝግጅት\" },\n  drove_by: { en: \"Drove by the Church\", am: \"ቤተክርስቲያኑን አልፌ ሳይ\" },\n  additional_notes: {\n    en: \"Additional Notes or Comments\",\n    am: \"ተጨማሪ ማስታወሻዎች ወይም አስተያየቶች\",\n  },\n  notes_placeholder: {\n    en: \"Please share anything else you'd like us to know...\",\n    am: \"እባክዎን እኛ እንድናውቅ የሚፈልጉትን ማንኛውንም ነገር ያካፍሉ...\",\n  },\n  agree_terms: {\n    en: \"I agree to the church's terms and conditions, and I understand that membership requires an annual fee. I commit to participating in church activities and supporting the church community.\",\n    am: \"የቤተክርስቲያኑን ውሎች እና ሁኔታዎች እስማማለሁ፣ እና አባልነት አመታዊ ክፍያ እንደሚጠይቅ ተረድቻለሁ። በቤተክርስቲያን እንቅስቃሴዎች ለመሳተፍ እና የቤተክርስቲያን ማህበረሰብን ለመደገፍ እቃጠራለሁ።\",\n  },\n  photo_consent: {\n    en: \"I consent to having my photo taken during church events and activities for use in church publications, website, and social media.\",\n    am: \"በቤተክርስቲያን ዝግጅቶች እና እንቅስቃሴዎች ወቅት ፎቶዬ እንዲነሳ እና በቤተክርስቲያን ህትመቶች፣ ድህረ ገጽ እና ማህበራዊ ሚዲያ ላይ እንዲውል ፈቃዴን እሰጣለሁ።\",\n  },\n  membership_fee: { en: \"Membership Fee\", am: \"የአባልነት ክፍያ\" },\n  annual_membership_fee: {\n    en: \"Annual membership fee:\",\n    am: \"አመታዊ የአባልነት ክፍያ:\",\n  },\n  payment_redirect_notice: {\n    en: \"After submitting this form, you will be redirected to a secure payment page to complete your membership registration.\",\n    am: \"ይህንን ቅጽ ካስገቡ በኋላ፣ የአባልነት ምዝገባዎን ለማጠናቀቅ ወደ ደህንነቱ የተጠበቀ የክፍያ ገጽ ይዞረዛሉ።\",\n  },\n  previous: { en: \"Previous\", am: \"ቀዳሚ\" },\n  next: { en: \"Next\", am: \"ቀጣይ\" },\n  complete_registration: {\n    en: \"Complete Registration & Pay\",\n    am: \"ምዝገባን አጠናቅቅ እና ክፈል\",\n  },\n  personal_information: { en: \"Personal Information\", am: \"የግል መረጃ\" },\n  address_information: { en: \"Address Information\", am: \"የአድራሻ መረጃ\" },\n  membership_family_info: {\n    en: \"Membership & Family Information\",\n    am: \"የአባልነት እና የቤተሰብ መረጃ\",\n  },\n  ministry_emergency_contact: {\n    en: \"Ministry Interests & Emergency Contact\",\n    am: \"የአገልግሎት ፍላጎቶች እና የአደጋ ጊዜ ተጠሪ\",\n  },\n  step_personal: { en: \"Personal\", am: \"የግል\" },\n  step_address: { en: \"Address\", am: \"አድራሻ\" },\n  step_membership: { en: \"Membership\", am: \"አባልነት\" },\n  step_ministry: { en: \"Ministry\", am: \"አገልግሎት\" },\n  step_review: { en: \"Review\", am: \"ግምገማ\" },\n  date: { en: \"Date\", am: \"ቀን\" },\n  required: { en: \"*\", am: \"*\" },\n};\n\n// Language Provider component\nfunction LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>(\"en\");\n\n  // Translation function\n  const t = (key: string): string => {\n    if (!translations[key]) {\n      console.warn(`Translation key not found: ${key}`);\n      return key;\n    }\n    return translations[key][language];\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\n// Custom hook for using the language context\nfunction useLanguage(): LanguageContextType {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n}\n\nexport { LanguageProvider, useLanguage };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/hooks/use-performance-monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/hooks/use-toast.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'state' is defined but never used.","line":124,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/hooks/useAdminAuth.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkAuth' and 'checkUserRole'. Either include them or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [checkAuth, checkUserRole, navigate]","fix":{"range":[925,935],"text":"[checkAuth, checkUserRole, navigate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { User } from \"@supabase/supabase-js\";\n\ninterface AdminUser extends User {\n  role?: string;\n}\n\nexport const useAdminAuth = () => {\n  const [user, setUser] = useState<AdminUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    checkAuth();\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === \"SIGNED_OUT\" || !session) {\n        setUser(null);\n        setIsAdmin(false);\n        navigate(\"/admin/login\");\n      } else if (event === \"SIGNED_IN\" && session) {\n        await checkUserRole(session.user);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [navigate]);\n\n  const checkAuth = async () => {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (session?.user) {\n        await checkUserRole(session.user);\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Error checking auth:\", error);\n      setLoading(false);\n    }\n  };\n\n  const checkUserRole = async (user: User) => {\n    try {\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (error) {\n        console.error(\"Error fetching profile:\", error);\n        // If profile doesn't exist, check if this is the first user\n        const { count } = await supabase\n          .from(\"profiles\")\n          .select(\"*\", { count: \"exact\", head: true });\n\n        if (count === 0) {\n          // First user becomes admin\n          const { error: createError } = await supabase\n            .from(\"profiles\")\n            .insert({\n              id: user.id,\n              email: user.email,\n              role: \"admin\",\n            });\n\n          if (!createError) {\n            setUser({ ...user, role: \"admin\" });\n            setIsAdmin(true);\n          }\n        }\n      } else if (profile?.role === \"admin\") {\n        setUser({ ...user, role: profile.role });\n        setIsAdmin(true);\n      } else {\n        setUser(user);\n        setIsAdmin(false);\n        navigate(\"/admin/login\");\n      }\n    } catch (error) {\n      console.error(\"Error checking user role:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  return {\n    user,\n    loading,\n    isAdmin,\n    signOut,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/hooks/useDataRefresh.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'dataSyncService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'dependencies' is assigned a value but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":18,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'forceSync' is assigned a value but never used.","line":24,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'safeRefreshFunction' is assigned a value but never used.","line":36,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'enhancedRefreshFunction' is not defined.","line":76,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'enhancedRefreshFunction' is not defined.","line":86,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'enhancedRefreshFunction' is not defined.","line":91,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'enhancedRefreshFunction' is not defined.","line":98,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":98,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":102,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":102,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":106,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":106,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":107,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":107,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":108,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'enhancedRefreshFunction' is not defined.","line":115,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":123,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":123,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":127,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":127,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":128,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":128,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":129,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":129,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'pauseRefresh' is assigned a value but never used.","line":138,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'resumeRefresh' is assigned a value but never used.","line":143,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'refreshFunction'. Either include it or remove the dependency array. If 'refreshFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":164,"column":6,"nodeType":"ArrayExpression","endLine":164,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [refreshFunction, tableName]","fix":{"range":[5573,5584],"text":"[refreshFunction, tableName]"}}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useCallback } from \"react\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport { useDataContext } from \"@/contexts/DataContext\";\n\n/**\n * Simplified data refresh hook without complex event listeners\n * @param refreshFunction - Function to call for refreshing data\n * @param intervalMs - Refresh interval in milliseconds (default: 5 minutes)\n * @param dependencies - Dependencies array to restart the interval\n * @param tableName - Optional table name for logging\n */\nexport const useDataRefresh = (\n  refreshFunction: () => void | Promise<void>,\n  intervalMs: number = 30 * 60 * 1000, // Increased to 30 minutes to reduce frequency\n  dependencies: any[] = [],\n  tableName?: string,\n) => {\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const isActiveRef = useRef(true);\n  const lastRefreshRef = useRef<Date | null>(null);\n  const isRefreshingRef = useRef(false);\n\n  const refreshFunctionRef = useRef(refreshFunction);\n  const { connectionHealth, forceSync } = useDataContext();\n\n  useEffect(() => {\n    refreshFunctionRef.current = refreshFunction;\n  }, [refreshFunction]);\n\n  useEffect(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Simple refresh function with debouncing\n    const safeRefreshFunction = async () => {\n      if (!isActiveRef.current || isRefreshingRef.current) {\n        console.log(\n          `Skipping refresh for ${tableName || \"component\"} - already refreshing or inactive`,\n        );\n        return;\n      }\n      const maxRetries = 3;\n      let retryCount = 0;\n\n      while (retryCount < maxRetries) {\n        try {\n          await refreshFunctionRef.current();\n          lastRefreshRef.current = new Date();\n          console.log(\n            `Data refresh successful for ${tableName || \"component\"}`,\n          );\n          break;\n        } catch (error) {\n          retryCount++;\n          console.error(\n            `Error during data refresh (attempt ${retryCount}/${maxRetries}):`,\n            error,\n          );\n\n          if (retryCount < maxRetries) {\n            await new Promise((resolve) =>\n              setTimeout(resolve, 1000 * Math.pow(2, retryCount - 1)),\n            );\n          } else {\n            console.error(\n              `Max retry attempts reached for ${tableName || \"component\"} refresh`,\n            );\n          }\n        }\n      }\n    };\n\n    intervalRef.current = setInterval(async () => {\n      if (isActiveRef.current && connectionHealth) {\n        await enhancedRefreshFunction();\n      } else if (!connectionHealth) {\n        console.warn(\"Skipping refresh due to connection health issues\");\n      }\n    }, intervalMs);\n\n    const handleDataChange = () => {\n      console.log(\n        `Real-time data change detected for ${tableName || \"component\"}`,\n      );\n      enhancedRefreshFunction();\n    };\n\n    const handleForceRefresh = () => {\n      console.log(`Force refresh triggered for ${tableName || \"component\"}`);\n      enhancedRefreshFunction();\n    };\n\n    const handleAdminAction = () => {\n      console.log(\n        `Admin action detected, refreshing ${tableName || \"component\"}`,\n      );\n      enhancedRefreshFunction();\n    };\n\n    if (tableName) {\n      DataSyncService.subscribe(`${tableName}Changed`, handleDataChange);\n      window.addEventListener(`${tableName}Changed`, handleDataChange);\n    }\n\n    DataSyncService.subscribe(\"dataChanged\", handleDataChange);\n    DataSyncService.subscribe(\"forceRefresh\", handleForceRefresh);\n    DataSyncService.subscribe(\"adminActionCompleted\", handleAdminAction);\n\n    window.addEventListener(\"dataChanged\", handleDataChange);\n    window.addEventListener(\"forceRefresh\", handleForceRefresh);\n    window.addEventListener(\"adminActionCompleted\", handleAdminAction);\n    window.addEventListener(\"dataRefresh\", handleDataChange);\n\n    enhancedRefreshFunction();\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n\n      if (tableName) {\n        DataSyncService.unsubscribe(`${tableName}Changed`, handleDataChange);\n        window.removeEventListener(`${tableName}Changed`, handleDataChange);\n      }\n\n      DataSyncService.unsubscribe(\"dataChanged\", handleDataChange);\n      DataSyncService.unsubscribe(\"forceRefresh\", handleForceRefresh);\n      DataSyncService.unsubscribe(\"adminActionCompleted\", handleAdminAction);\n\n      window.removeEventListener(\"dataChanged\", handleDataChange);\n      window.removeEventListener(\"forceRefresh\", handleForceRefresh);\n      window.removeEventListener(\"adminActionCompleted\", handleAdminAction);\n      window.removeEventListener(\"dataRefresh\", handleDataChange);\n    };\n  }, [tableName, connectionHealth, intervalMs]);\n\n  const pauseRefresh = useCallback(() => {\n    isActiveRef.current = false;\n    console.log(`Paused refresh for ${tableName || \"component\"}`);\n  }, [tableName]);\n\n  const resumeRefresh = useCallback(() => {\n    isActiveRef.current = true;\n    console.log(`Resumed refresh for ${tableName || \"component\"}`);\n  }, [tableName]);\n\n  const manualRefresh = useCallback(async () => {\n    if (!isRefreshingRef.current) {\n      console.log(`Manual refresh triggered for ${tableName || \"component\"}`);\n      isRefreshingRef.current = true;\n      try {\n        await refreshFunction();\n        lastRefreshRef.current = new Date();\n      } catch (error) {\n        console.error(\n          `Manual refresh error for ${tableName || \"component\"}:`,\n          error,\n        );\n      } finally {\n        isRefreshingRef.current = false;\n      }\n    }\n  }, [tableName]);\n\n  const forceSyncData = useCallback(async () => {\n    console.log(`Force sync triggered for ${tableName || \"component\"}`);\n    await manualRefresh();\n  }, [manualRefresh, tableName]);\n\n  return {\n    manualRefresh,\n    forceSyncData,\n    lastRefresh: lastRefreshRef.current,\n    isActive: isActiveRef.current,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/hooks/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/integrations/supabase/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/integrations/supabase/types.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":946,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":946,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":949,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":949,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":952,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":952,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":955,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":955,"endColumn":9}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[];\n\nexport type Database = {\n  public: {\n    Tables: {\n      appointments: {\n        Row: {\n          admin_notes: string | null;\n          admin_response: string | null;\n          confirmed_date: string | null;\n          confirmed_time: string | null;\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string;\n          notes: string | null;\n          phone: string;\n          requested_date: string;\n          requested_time: string;\n          responded_at: string | null;\n          responded_by: string | null;\n          service_title: string;\n          status: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          admin_notes?: string | null;\n          admin_response?: string | null;\n          confirmed_date?: string | null;\n          confirmed_time?: string | null;\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name: string;\n          notes?: string | null;\n          phone: string;\n          requested_date: string;\n          requested_time: string;\n          responded_at?: string | null;\n          responded_by?: string | null;\n          service_title: string;\n          status?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          admin_notes?: string | null;\n          admin_response?: string | null;\n          confirmed_date?: string | null;\n          confirmed_time?: string | null;\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string;\n          notes?: string | null;\n          phone?: string;\n          requested_date?: string;\n          requested_time?: string;\n          responded_at?: string | null;\n          responded_by?: string | null;\n          service_title?: string;\n          status?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"appointments_responded_by_fkey\";\n            columns: [\"responded_by\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      donations: {\n        Row: {\n          amount: number;\n          created_at: string;\n          donor_email: string | null;\n          donor_name: string | null;\n          id: string;\n          is_anonymous: boolean | null;\n          payment_id: string | null;\n          payment_method: string | null;\n          payment_status: string | null;\n          purpose: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          amount: number;\n          created_at?: string;\n          donor_email?: string | null;\n          donor_name?: string | null;\n          id?: string;\n          is_anonymous?: boolean | null;\n          payment_id?: string | null;\n          payment_method?: string | null;\n          payment_status?: string | null;\n          purpose?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          amount?: number;\n          created_at?: string;\n          donor_email?: string | null;\n          donor_name?: string | null;\n          id?: string;\n          is_anonymous?: boolean | null;\n          payment_id?: string | null;\n          payment_method?: string | null;\n          payment_status?: string | null;\n          purpose?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      email_campaigns: {\n        Row: {\n          content: string;\n          created_at: string | null;\n          created_by: string | null;\n          id: string;\n          name: string;\n          recipient_count: number | null;\n          scheduled_at: string | null;\n          sent_at: string | null;\n          sent_count: number | null;\n          status: string | null;\n          subject: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          content: string;\n          created_at?: string | null;\n          created_by?: string | null;\n          id?: string;\n          name: string;\n          recipient_count?: number | null;\n          scheduled_at?: string | null;\n          sent_at?: string | null;\n          sent_count?: number | null;\n          status?: string | null;\n          subject: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          content?: string;\n          created_at?: string | null;\n          created_by?: string | null;\n          id?: string;\n          name?: string;\n          recipient_count?: number | null;\n          scheduled_at?: string | null;\n          sent_at?: string | null;\n          sent_count?: number | null;\n          status?: string | null;\n          subject?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_settings: {\n        Row: {\n          auto_welcome_email: boolean | null;\n          created_at: string | null;\n          enable_newsletters: boolean | null;\n          from_email: string | null;\n          from_name: string | null;\n          id: number;\n          newsletter_frequency: string | null;\n          smtp_host: string | null;\n          smtp_password: string | null;\n          smtp_port: number | null;\n          smtp_username: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          auto_welcome_email?: boolean | null;\n          created_at?: string | null;\n          enable_newsletters?: boolean | null;\n          from_email?: string | null;\n          from_name?: string | null;\n          id?: number;\n          newsletter_frequency?: string | null;\n          smtp_host?: string | null;\n          smtp_password?: string | null;\n          smtp_port?: number | null;\n          smtp_username?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          auto_welcome_email?: boolean | null;\n          created_at?: string | null;\n          enable_newsletters?: boolean | null;\n          from_email?: string | null;\n          from_name?: string | null;\n          id?: number;\n          newsletter_frequency?: string | null;\n          smtp_host?: string | null;\n          smtp_password?: string | null;\n          smtp_port?: number | null;\n          smtp_username?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_subscribers: {\n        Row: {\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string | null;\n          preferences: Json | null;\n          status: string | null;\n          subscribed_at: string | null;\n          unsubscribed_at: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name?: string | null;\n          preferences?: Json | null;\n          status?: string | null;\n          subscribed_at?: string | null;\n          unsubscribed_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string | null;\n          preferences?: Json | null;\n          status?: string | null;\n          subscribed_at?: string | null;\n          unsubscribed_at?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_templates: {\n        Row: {\n          content: string;\n          created_at: string | null;\n          id: string;\n          is_active: boolean | null;\n          name: string;\n          subject: string;\n          template_type: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          content: string;\n          created_at?: string | null;\n          id?: string;\n          is_active?: boolean | null;\n          name: string;\n          subject: string;\n          template_type: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          content?: string;\n          created_at?: string | null;\n          id?: string;\n          is_active?: boolean | null;\n          name?: string;\n          subject?: string;\n          template_type?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      events: {\n        Row: {\n          created_at: string;\n          description: string | null;\n          event_date: string;\n          event_time: string | null;\n          id: string;\n          image_url: string | null;\n          is_featured: boolean | null;\n          location: string | null;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          description?: string | null;\n          event_date: string;\n          event_time?: string | null;\n          id?: string;\n          image_url?: string | null;\n          is_featured?: boolean | null;\n          location?: string | null;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          description?: string | null;\n          event_date?: string;\n          event_time?: string | null;\n          id?: string;\n          image_url?: string | null;\n          is_featured?: boolean | null;\n          location?: string | null;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      gallery: {\n        Row: {\n          category: string | null;\n          created_at: string;\n          description: string | null;\n          id: string;\n          image_url: string;\n          is_featured: boolean | null;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          category?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          image_url: string;\n          is_featured?: boolean | null;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          category?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          image_url?: string;\n          is_featured?: boolean | null;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      members: {\n        Row: {\n          address: string | null;\n          created_at: string;\n          email: string | null;\n          full_name: string;\n          id: string;\n          join_date: string | null;\n          last_renewal_date: string | null;\n          membership_date: string | null;\n          membership_status: string | null;\n          membership_type: string | null;\n          next_renewal_date: string | null;\n          phone: string | null;\n          updated_at: string;\n          registration_date: string | null;\n          first_name: string | null;\n          middle_name: string | null;\n          last_name: string | null;\n          baptismal_name: string | null;\n          street_address: string | null;\n          apt_suite_bldg: string | null;\n          city: string | null;\n          state_province_region: string | null;\n          postal_zip_code: string | null;\n          country: string | null;\n          date_of_birth: string | null;\n          gender: string | null;\n          marital_status: string | null;\n          spouse_name: string | null;\n          spouse_baptismal_name: string | null;\n          spouse_phone: string | null;\n          spouse_email: string | null;\n          child1_first_name: string | null;\n          child1_middle_name: string | null;\n          child1_last_name: string | null;\n          child1_date_of_birth: string | null;\n          child2_first_name: string | null;\n          child2_middle_name: string | null;\n          child2_last_name: string | null;\n          child2_date_of_birth: string | null;\n          emergency_contact_name: string | null;\n          emergency_contact_phone: string | null;\n          emergency_contact_relation: string | null;\n          preferred_language: string | null;\n          ministry_interests: string[] | null;\n          volunteer_interests: string[] | null;\n          skills: string | null;\n          how_did_you_hear: string | null;\n          additional_notes: string | null;\n          baptized: boolean | null;\n          baptism_date: string | null;\n          previous_member: boolean | null;\n          previous_church: string | null;\n          children: Json | null;\n          email_updates: boolean | null;\n          sms_updates: boolean | null;\n          photo_consent: boolean | null;\n          occupation: string | null;\n          contact_method: string | null;\n          membership_fee_paid: boolean | null;\n          payment_reference: string | null;\n          registration_notes: string | null;\n          church_activities_interest: string[] | null;\n          dietary_restrictions: string | null;\n          medical_conditions: string | null;\n          transportation_needed: boolean | null;\n          volunteer_availability: string | null;\n          social_media_consent: boolean | null;\n          newsletter_consent: boolean | null;\n          data_processing_consent: boolean | null;\n          membership_card_issued: boolean | null;\n          membership_card_number: string | null;\n          referral_source: string | null;\n          family_size: number | null;\n          household_income_range: string | null;\n          education_level: string | null;\n          languages_spoken: string[] | null;\n          baptism_location: string | null;\n          confirmation_status: boolean | null;\n          confirmation_date: string | null;\n          godparents: string | null;\n          spiritual_father: string | null;\n          church_school_interest: boolean | null;\n          youth_group_interest: boolean | null;\n          choir_interest: boolean | null;\n          bible_study_interest: boolean | null;\n          prayer_group_interest: boolean | null;\n          community_service_interest: boolean | null;\n          leadership_experience: string | null;\n          special_needs: string | null;\n          emergency_medical_info: string | null;\n          insurance_info: string | null;\n          membership_sponsor: string | null;\n          membership_sponsor_phone: string | null;\n          registration_ip_address: string | null;\n          registration_user_agent: string | null;\n          terms_accepted_at: string | null;\n          privacy_policy_accepted_at: string | null;\n          membership_agreement_signed: boolean | null;\n          background_check_required: boolean | null;\n          background_check_completed: boolean | null;\n          background_check_date: string | null;\n          orientation_completed: boolean | null;\n          orientation_date: string | null;\n          mentor_assigned: string | null;\n          integration_status: string | null;\n          last_contact_date: string | null;\n          follow_up_required: boolean | null;\n          membership_level: string | null;\n          voting_rights: boolean | null;\n          committee_eligibility: boolean | null;\n          leadership_eligibility: boolean | null;\n        };\n        Insert: {\n          address?: string | null;\n          created_at?: string;\n          email?: string | null;\n          full_name: string;\n          id?: string;\n          join_date?: string | null;\n          last_renewal_date?: string | null;\n          membership_date?: string | null;\n          membership_status?: string | null;\n          membership_type?: string | null;\n          next_renewal_date?: string | null;\n          phone?: string | null;\n          updated_at?: string;\n          registration_date?: string | null;\n          first_name?: string | null;\n          middle_name?: string | null;\n          last_name?: string | null;\n          baptismal_name?: string | null;\n          street_address?: string | null;\n          apt_suite_bldg?: string | null;\n          city?: string | null;\n          state_province_region?: string | null;\n          postal_zip_code?: string | null;\n          country?: string | null;\n          date_of_birth?: string | null;\n          gender?: string | null;\n          marital_status?: string | null;\n          spouse_name?: string | null;\n          spouse_baptismal_name?: string | null;\n          spouse_phone?: string | null;\n          spouse_email?: string | null;\n          child1_first_name?: string | null;\n          child1_middle_name?: string | null;\n          child1_last_name?: string | null;\n          child1_date_of_birth?: string | null;\n          child2_first_name?: string | null;\n          child2_middle_name?: string | null;\n          child2_last_name?: string | null;\n          child2_date_of_birth?: string | null;\n          emergency_contact_name?: string | null;\n          emergency_contact_phone?: string | null;\n          emergency_contact_relation?: string | null;\n          preferred_language?: string | null;\n          ministry_interests?: string[] | null;\n          volunteer_interests?: string[] | null;\n          skills?: string | null;\n          how_did_you_hear?: string | null;\n          additional_notes?: string | null;\n          baptized?: boolean | null;\n          baptism_date?: string | null;\n          previous_member?: boolean | null;\n          previous_church?: string | null;\n          children?: Json | null;\n          email_updates?: boolean | null;\n          sms_updates?: boolean | null;\n          photo_consent?: boolean | null;\n          occupation?: string | null;\n          contact_method?: string | null;\n          membership_fee_paid?: boolean | null;\n          payment_reference?: string | null;\n          registration_notes?: string | null;\n          church_activities_interest?: string[] | null;\n          dietary_restrictions?: string | null;\n          medical_conditions?: string | null;\n          transportation_needed?: boolean | null;\n          volunteer_availability?: string | null;\n          social_media_consent?: boolean | null;\n          newsletter_consent?: boolean | null;\n          data_processing_consent?: boolean | null;\n          membership_card_issued?: boolean | null;\n          membership_card_number?: string | null;\n          referral_source?: string | null;\n          family_size?: number | null;\n          household_income_range?: string | null;\n          education_level?: string | null;\n          languages_spoken?: string[] | null;\n          baptism_location?: string | null;\n          confirmation_status?: boolean | null;\n          confirmation_date?: string | null;\n          godparents?: string | null;\n          spiritual_father?: string | null;\n          church_school_interest?: boolean | null;\n          youth_group_interest?: boolean | null;\n          choir_interest?: boolean | null;\n          bible_study_interest?: boolean | null;\n          prayer_group_interest?: boolean | null;\n          community_service_interest?: boolean | null;\n          leadership_experience?: string | null;\n          special_needs?: string | null;\n          emergency_medical_info?: string | null;\n          insurance_info?: string | null;\n          membership_sponsor?: string | null;\n          membership_sponsor_phone?: string | null;\n          registration_ip_address?: string | null;\n          registration_user_agent?: string | null;\n          terms_accepted_at?: string | null;\n          privacy_policy_accepted_at?: string | null;\n          membership_agreement_signed?: boolean | null;\n          background_check_required?: boolean | null;\n          background_check_completed?: boolean | null;\n          background_check_date?: string | null;\n          orientation_completed?: boolean | null;\n          orientation_date?: string | null;\n          mentor_assigned?: string | null;\n          integration_status?: string | null;\n          last_contact_date?: string | null;\n          follow_up_required?: boolean | null;\n          membership_level?: string | null;\n          voting_rights?: boolean | null;\n          committee_eligibility?: boolean | null;\n          leadership_eligibility?: boolean | null;\n        };\n        Update: {\n          address?: string | null;\n          created_at?: string;\n          email?: string | null;\n          full_name?: string;\n          id?: string;\n          join_date?: string | null;\n          last_renewal_date?: string | null;\n          membership_date?: string | null;\n          membership_status?: string | null;\n          membership_type?: string | null;\n          next_renewal_date?: string | null;\n          phone?: string | null;\n          updated_at?: string;\n          registration_date?: string | null;\n          first_name?: string | null;\n          middle_name?: string | null;\n          last_name?: string | null;\n          baptismal_name?: string | null;\n          street_address?: string | null;\n          apt_suite_bldg?: string | null;\n          city?: string | null;\n          state_province_region?: string | null;\n          postal_zip_code?: string | null;\n          country?: string | null;\n          date_of_birth?: string | null;\n          gender?: string | null;\n          marital_status?: string | null;\n          spouse_name?: string | null;\n          spouse_baptismal_name?: string | null;\n          spouse_phone?: string | null;\n          spouse_email?: string | null;\n          child1_first_name?: string | null;\n          child1_middle_name?: string | null;\n          child1_last_name?: string | null;\n          child1_date_of_birth?: string | null;\n          child2_first_name?: string | null;\n          child2_middle_name?: string | null;\n          child2_last_name?: string | null;\n          child2_date_of_birth?: string | null;\n          emergency_contact_name?: string | null;\n          emergency_contact_phone?: string | null;\n          emergency_contact_relation?: string | null;\n          preferred_language?: string | null;\n          ministry_interests?: string[] | null;\n          volunteer_interests?: string[] | null;\n          skills?: string | null;\n          how_did_you_hear?: string | null;\n          additional_notes?: string | null;\n          baptized?: boolean | null;\n          baptism_date?: string | null;\n          previous_member?: boolean | null;\n          previous_church?: string | null;\n          children?: Json | null;\n          email_updates?: boolean | null;\n          sms_updates?: boolean | null;\n          photo_consent?: boolean | null;\n          occupation?: string | null;\n          contact_method?: string | null;\n          membership_fee_paid?: boolean | null;\n          payment_reference?: string | null;\n          registration_notes?: string | null;\n          church_activities_interest?: string[] | null;\n          dietary_restrictions?: string | null;\n          medical_conditions?: string | null;\n          transportation_needed?: boolean | null;\n          volunteer_availability?: string | null;\n          social_media_consent?: boolean | null;\n          newsletter_consent?: boolean | null;\n          data_processing_consent?: boolean | null;\n          membership_card_issued?: boolean | null;\n          membership_card_number?: string | null;\n          referral_source?: string | null;\n          family_size?: number | null;\n          household_income_range?: string | null;\n          education_level?: string | null;\n          languages_spoken?: string[] | null;\n          baptism_location?: string | null;\n          confirmation_status?: boolean | null;\n          confirmation_date?: string | null;\n          godparents?: string | null;\n          spiritual_father?: string | null;\n          church_school_interest?: boolean | null;\n          youth_group_interest?: boolean | null;\n          choir_interest?: boolean | null;\n          bible_study_interest?: boolean | null;\n          prayer_group_interest?: boolean | null;\n          community_service_interest?: boolean | null;\n          leadership_experience?: string | null;\n          special_needs?: string | null;\n          emergency_medical_info?: string | null;\n          insurance_info?: string | null;\n          membership_sponsor?: string | null;\n          membership_sponsor_phone?: string | null;\n          registration_ip_address?: string | null;\n          registration_user_agent?: string | null;\n          terms_accepted_at?: string | null;\n          privacy_policy_accepted_at?: string | null;\n          membership_agreement_signed?: boolean | null;\n          background_check_required?: boolean | null;\n          background_check_completed?: boolean | null;\n          background_check_date?: string | null;\n          orientation_completed?: boolean | null;\n          orientation_date?: string | null;\n          mentor_assigned?: string | null;\n          integration_status?: string | null;\n          last_contact_date?: string | null;\n          follow_up_required?: boolean | null;\n          membership_level?: string | null;\n          voting_rights?: boolean | null;\n          committee_eligibility?: boolean | null;\n          leadership_eligibility?: boolean | null;\n        };\n        Relationships: [];\n      };\n      newsletter_subscribers: {\n        Row: {\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string | null;\n          subscribed: boolean | null;\n          subscription_date: string | null;\n          unsubscribe_token: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name?: string | null;\n          subscribed?: boolean | null;\n          subscription_date?: string | null;\n          unsubscribe_token?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string | null;\n          subscribed?: boolean | null;\n          subscription_date?: string | null;\n          unsubscribe_token?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      prayer_requests: {\n        Row: {\n          created_at: string;\n          email: string | null;\n          id: string;\n          is_answered: boolean | null;\n          is_public: boolean | null;\n          name: string;\n          request: string;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          is_answered?: boolean | null;\n          is_public?: boolean | null;\n          name: string;\n          request: string;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          is_answered?: boolean | null;\n          is_public?: boolean | null;\n          name?: string;\n          request?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      profiles: {\n        Row: {\n          created_at: string;\n          email: string | null;\n          id: string;\n          role: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          role?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          role?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      sermons: {\n        Row: {\n          audio_url: string | null;\n          created_at: string;\n          description: string | null;\n          id: string;\n          is_featured: boolean | null;\n          preacher: string | null;\n          scripture_reference: string | null;\n          sermon_date: string;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          audio_url?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          is_featured?: boolean | null;\n          preacher?: string | null;\n          scripture_reference?: string | null;\n          sermon_date: string;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          audio_url?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          is_featured?: boolean | null;\n          preacher?: string | null;\n          scripture_reference?: string | null;\n          sermon_date?: string;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      site_settings: {\n        Row: {\n          admin_email: string | null;\n          church_address: string | null;\n          church_name: string | null;\n          created_at: string;\n          email: string | null;\n          enable_donations: boolean | null;\n          enable_email_notifications: boolean | null;\n          enable_membership: boolean | null;\n          enable_newsletter: boolean | null;\n          enable_stripe: boolean | null;\n          from_email: string | null;\n          id: number;\n          maintenance_mode: boolean | null;\n          phone_number: string | null;\n          stripe_publishable_key: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          admin_email?: string | null;\n          church_address?: string | null;\n          church_name?: string | null;\n          created_at?: string;\n          email?: string | null;\n          enable_donations?: boolean | null;\n          enable_email_notifications?: boolean | null;\n          enable_membership?: boolean | null;\n          enable_newsletter?: boolean | null;\n          enable_stripe?: boolean | null;\n          from_email?: string | null;\n          id?: number;\n          maintenance_mode?: boolean | null;\n          phone_number?: string | null;\n          stripe_publishable_key?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          admin_email?: string | null;\n          church_address?: string | null;\n          church_name?: string | null;\n          created_at?: string;\n          email?: string | null;\n          enable_donations?: boolean | null;\n          enable_email_notifications?: boolean | null;\n          enable_membership?: boolean | null;\n          enable_newsletter?: boolean | null;\n          enable_stripe?: boolean | null;\n          from_email?: string | null;\n          id?: number;\n          maintenance_mode?: boolean | null;\n          phone_number?: string | null;\n          stripe_publishable_key?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      stripe_settings: {\n        Row: {\n          created_at: string | null;\n          default_currency: string | null;\n          enable_stripe: boolean | null;\n          id: number;\n          stripe_mode: string | null;\n          stripe_publishable_key: string | null;\n          stripe_secret_key: string | null;\n          stripe_webhook_secret: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          default_currency?: string | null;\n          enable_stripe?: boolean | null;\n          id?: number;\n          stripe_mode?: string | null;\n          stripe_publishable_key?: string | null;\n          stripe_secret_key?: string | null;\n          stripe_webhook_secret?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          default_currency?: string | null;\n          enable_stripe?: boolean | null;\n          id?: number;\n          stripe_mode?: string | null;\n          stripe_publishable_key?: string | null;\n          stripe_secret_key?: string | null;\n          stripe_webhook_secret?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      testimonials: {\n        Row: {\n          content: string;\n          created_at: string;\n          id: string;\n          is_approved: boolean | null;\n          name: string;\n          updated_at: string;\n        };\n        Insert: {\n          content: string;\n          created_at?: string;\n          id?: string;\n          is_approved?: boolean | null;\n          name: string;\n          updated_at?: string;\n        };\n        Update: {\n          content?: string;\n          created_at?: string;\n          id?: string;\n          is_approved?: boolean | null;\n          name?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n    };\n    Views: {\n      [_ in never]: never;\n    };\n    Functions: {\n      [_ in never]: never;\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n    CompositeTypes: {\n      [_ in never]: never;\n    };\n  };\n};\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">];\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R;\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R;\n      }\n      ? R\n      : never\n    : never;\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I;\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I;\n      }\n      ? I\n      : never\n    : never;\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U;\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U;\n      }\n      ? U\n      : never\n    : never;\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never;\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never;\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/lib/env.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'ImportMetaEnv' is not defined.","line":32,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'ImportMetaEnv' is not defined.","line":53,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":63}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Environment variable defaults for development\nconst ENV_DEFAULTS = {\n  VITE_APP_NAME: \"St. Gabriel Ethiopian Orthodox Church\",\n  VITE_SUPABASE_URL: \"\",\n  VITE_SUPABASE_ANON_KEY: \"\",\n  VITE_API_URL: \"https://nvigfdxosyqhnoljtfld.supabase.co\",\n} as const;\n\n// Set defaults immediately to prevent runtime errors\nif (typeof window !== \"undefined\") {\n  Object.entries(ENV_DEFAULTS).forEach(([key, value]) => {\n    if (!import.meta.env[key]) {\n      // @ts-ignore\n      import.meta.env[key] = value;\n    }\n  });\n}\n\n// Critical environment variables that must be set in production\nconst CRITICAL_ENV_VARS = [\n  \"VITE_SUPABASE_URL\",\n  \"VITE_SUPABASE_ANON_KEY\",\n] as const;\n\n/**\n * Get an environment variable with fallback to defaults\n * @param key - The key of the environment variable\n * @param defaultValue - The default value if the environment variable is not set\n * @returns The value of the environment variable\n */\nexport const getEnvVar = (\n  key: keyof ImportMetaEnv,\n  defaultValue: string = \"\",\n): string => {\n  const value = import.meta.env[key];\n  if (value) return value;\n\n  // Check if we have a default for this key\n  if (key in ENV_DEFAULTS) {\n    return ENV_DEFAULTS[key as keyof typeof ENV_DEFAULTS];\n  }\n\n  return defaultValue;\n};\n\n/**\n * Check if a feature flag is enabled\n * @param flag - The name of the feature flag\n * @returns boolean indicating if the feature is enabled\n */\nexport const isFeatureEnabled = (flag: string): boolean => {\n  const value = getEnvVar(\n    `VITE_ENABLE_${flag.toUpperCase()}` as keyof ImportMetaEnv,\n    \"false\",\n  );\n  return value.toLowerCase() === \"true\";\n};\n\n/**\n * Validate environment variables with development-friendly approach\n * @throws Error only if critical variables are missing in production\n */\nexport const validateEnv = (): void => {\n  const isDevelopment =\n    import.meta.env.DEV || import.meta.env.VITE_TEMPO === \"true\";\n\n  // In development, we're more lenient and provide defaults\n  if (isDevelopment) {\n    // Ensure defaults are set\n    Object.entries(ENV_DEFAULTS).forEach(([key, value]) => {\n      if (!import.meta.env[key]) {\n        // @ts-ignore\n        import.meta.env[key] = value;\n      }\n    });\n\n    console.info(`ℹ️  Development mode: Using default environment variables`);\n    return; // Don't throw in development\n  }\n\n  // In production, be strict about critical variables\n  const missingCritical = CRITICAL_ENV_VARS.filter(\n    (key) => !import.meta.env[key],\n  );\n\n  if (missingCritical.length > 0) {\n    throw new Error(\n      `Missing critical environment variables: ${missingCritical.join(\", \")}\\n` +\n        \"Please set these variables in your project settings before deploying to production.\",\n    );\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/lib/supabaseClient.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_table' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'_query' is defined but never used.","line":4,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'_n' is defined but never used.","line":5,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'_data' is defined but never used.","line":16,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'_data' is defined but never used.","line":24,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":30}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced stub for supabase client to match Settings.tsx usage\nexport const supabase = {\n  from: (_table: string) => ({\n    select: (_query?: string) => ({\n      limit: (_n?: number) => ({\n        single: async () => ({\n          data: {},\n          error: null,\n        }),\n      }),\n      single: async () => ({\n        data: {},\n        error: null,\n      }),\n    }),\n    insert: (_data: any) => ({\n      select: () => ({\n        single: async () => ({\n          data: {},\n          error: null,\n        }),\n      }),\n    }),\n    upsert: async (_data: any) => ({\n      data: {},\n      error: null,\n    }),\n  }),\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/Contact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/Donation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/DonationDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/DonationSuccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/Events.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/Gallery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/Home.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/MembershipRegistration.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'addChild' is assigned a value but never used.","line":280,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":280,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'removeChild' is assigned a value but never used.","line":284,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":284,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'updateChild' is assigned a value but never used.","line":288,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":288,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'getTranslation' is assigned a value but never used.","line":1568,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1568,"endColumn":23}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type FC, useState, useEffect } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport {\n  CheckCircle,\n  User,\n  CreditCard,\n  FileText,\n  AlertCircle,\n  Mail,\n  MapPin,\n  Calendar,\n  Users,\n  Heart,\n} from \"lucide-react\";\n\ninterface FormData {\n  // Registration Date\n  registrationDate: string;\n\n  // Personal Information\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  baptismalName: string;\n  email: string;\n  phone: string;\n  dateOfBirth: string;\n  gender: string;\n\n  // Address Information\n  streetAddress: string;\n  aptSuiteBldg: string;\n  city: string;\n  stateProvinceRegion: string;\n  postalZipCode: string;\n  country: string;\n\n  // Spouse Information\n  spouse: string;\n  spouseBaptismalName: string;\n  spousePhone: string;\n  spouseEmail: string;\n\n  // Children Information\n  child1FirstName: string;\n  child1MiddleName: string;\n  child1LastName: string;\n  child1DateOfBirth: string;\n  child2FirstName: string;\n  child2MiddleName: string;\n  child2LastName: string;\n  child2DateOfBirth: string;\n\n  // Membership Information\n  membershipType: string;\n  previousMember: boolean;\n  previousChurch: string;\n  baptized: boolean;\n  baptismDate: string;\n\n  // Family Information\n  maritalStatus: string;\n  children: Array<{ name: string; age: string }>;\n\n  // Contact Preferences\n  preferredLanguage: string;\n  contactMethod: string;\n  emailUpdates: boolean;\n  smsUpdates: boolean;\n\n  // Ministry Interests\n  ministryInterests: string[];\n  volunteerInterests: string[];\n  skills: string;\n\n  // Emergency Contact\n  emergencyName: string;\n  emergencyPhone: string;\n  emergencyRelation: string;\n\n  // Additional Information\n  howDidYouHear: string;\n  additionalNotes: string;\n  agreeToTerms: boolean;\n  agreeToPhotos: boolean;\n}\n\nconst MembershipRegistration: FC = () => {\n  const { t, language } = useLanguage();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [children, setChildren] = useState<\n    Array<{ name: string; age: string }>\n  >([{ name: \"\", age: \"\" }]);\n\n  const [formData, setFormData] = useState<FormData>({\n    registrationDate: new Date().toISOString().split(\"T\")[0],\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    baptismalName: \"\",\n    email: \"\",\n    phone: \"\",\n    dateOfBirth: \"\",\n    gender: \"\",\n    streetAddress: \"\",\n    aptSuiteBldg: \"\",\n    city: \"\",\n    stateProvinceRegion: \"\",\n    postalZipCode: \"\",\n    country: \"United States\",\n    spouse: \"\",\n    spouseBaptismalName: \"\",\n    spousePhone: \"\",\n    spouseEmail: \"\",\n    child1FirstName: \"\",\n    child1MiddleName: \"\",\n    child1LastName: \"\",\n    child1DateOfBirth: \"\",\n    child2FirstName: \"\",\n    child2MiddleName: \"\",\n    child2LastName: \"\",\n    child2DateOfBirth: \"\",\n    membershipType: \"regular\",\n    previousMember: false,\n    previousChurch: \"\",\n    baptized: false,\n    baptismDate: \"\",\n    maritalStatus: \"single\",\n    children: [],\n    preferredLanguage: \"english\",\n    contactMethod: \"email\",\n    emailUpdates: true,\n    smsUpdates: false,\n    ministryInterests: [],\n    volunteerInterests: [],\n    skills: \"\",\n    emergencyName: \"\",\n    emergencyPhone: \"\",\n    emergencyRelation: \"\",\n    howDidYouHear: \"\",\n    additionalNotes: \"\",\n    agreeToTerms: false,\n    agreeToPhotos: false,\n  });\n\n  const totalSteps = 5;\n  const progressPercentage = (currentStep / totalSteps) * 100;\n\n  const ministryOptions = [\n    \"Sunday School\",\n    \"Youth Ministry\",\n    \"Music Ministry\",\n    \"Prayer Ministry\",\n    \"Outreach Ministry\",\n    \"Women's Ministry\",\n    \"Men's Ministry\",\n    \"Children's Ministry\",\n    \"Hospitality Ministry\",\n    \"Media Ministry\",\n  ];\n\n  const volunteerOptions = [\n    \"Event Planning\",\n    \"Cleaning & Maintenance\",\n    \"Food Service\",\n    \"Transportation\",\n    \"Translation Services\",\n    \"Technical Support\",\n    \"Administrative Support\",\n    \"Fundraising\",\n    \"Community Outreach\",\n    \"Teaching\",\n  ];\n\n  const validateStep = (step: number): boolean => {\n    const errors: Record<string, string> = {};\n\n    switch (step) {\n      case 1:\n        if (!formData.firstName.trim())\n          errors.firstName = \"First name is required\";\n        if (!formData.lastName.trim())\n          errors.lastName = \"Last name is required\";\n        if (!formData.email.trim()) errors.email = \"Email is required\";\n        if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email))\n          errors.email = \"Invalid email format\";\n        if (!formData.phone.trim()) errors.phone = \"Phone number is required\";\n        if (!formData.dateOfBirth)\n          errors.dateOfBirth = \"Date of birth is required\";\n        if (!formData.gender) errors.gender = \"Gender is required\";\n        break;\n      case 2:\n        if (!formData.streetAddress.trim())\n          errors.streetAddress = \"Street address is required\";\n        if (!formData.city.trim()) errors.city = \"City is required\";\n        if (!formData.stateProvinceRegion.trim())\n          errors.stateProvinceRegion = \"State/Province/Region is required\";\n        if (!formData.postalZipCode.trim())\n          errors.postalZipCode = \"Postal/ZIP code is required\";\n        break;\n      case 3:\n        if (!formData.membershipType)\n          errors.membershipType = \"Membership type is required\";\n        if (formData.previousMember && !formData.previousChurch.trim()) {\n          errors.previousChurch = \"Previous church name is required\";\n        }\n        if (formData.baptized && !formData.baptismDate) {\n          errors.baptismDate = \"Baptism date is required\";\n        }\n        break;\n      case 4:\n        if (!formData.emergencyName.trim())\n          errors.emergencyName = \"Emergency contact name is required\";\n        if (!formData.emergencyPhone.trim())\n          errors.emergencyPhone = \"Emergency contact phone is required\";\n        if (!formData.emergencyRelation.trim())\n          errors.emergencyRelation = \"Emergency contact relation is required\";\n        break;\n      case 5:\n        if (!formData.agreeToTerms)\n          errors.agreeToTerms = \"You must agree to the terms and conditions\";\n        break;\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep((prev) => Math.min(prev + 1, totalSteps));\n    }\n  };\n\n  const handlePrevious = () => {\n    setCurrentStep((prev) => Math.max(prev - 1, 1));\n  };\n\n  const handleInputChange = (field: keyof FormData, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (formErrors[field]) {\n      setFormErrors((prev) => ({ ...prev, [field]: \"\" }));\n    }\n  };\n\n  const handleArrayChange = (field: keyof FormData, values: string[]) => {\n    setFormData((prev) => ({ ...prev, [field]: values }));\n  };\n\n  const addChild = () => {\n    setChildren((prev) => [...prev, { name: \"\", age: \"\" }]);\n  };\n\n  const removeChild = (index: number) => {\n    setChildren((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  const updateChild = (index: number, field: \"name\" | \"age\", value: string) => {\n    setChildren((prev) =>\n      prev.map((child, i) =>\n        i === index ? { ...child, [field]: value } : child,\n      ),\n    );\n  };\n\n  useEffect(() => {\n    setFormData((prev) => ({ ...prev, children }));\n  }, [children]);\n\n  const handleSubmit = async () => {\n    if (!validateStep(currentStep)) return;\n\n    setIsSubmitting(true);\n\n    try {\n      // Create member record\n      const { data: memberData, error: memberError } = await supabase\n        .from(\"members\")\n        .insert([\n          {\n            full_name: `${formData.firstName} ${formData.middleName ? formData.middleName + \" \" : \"\"}${formData.lastName}`,\n            email: formData.email,\n            phone: formData.phone,\n            address: `${formData.streetAddress}${formData.aptSuiteBldg ? \", \" + formData.aptSuiteBldg : \"\"}, ${formData.city}, ${formData.stateProvinceRegion} ${formData.postalZipCode}`,\n            membership_type: formData.membershipType,\n            membership_status: \"pending\",\n            join_date: new Date().toISOString(),\n            registration_date: formData.registrationDate,\n            first_name: formData.firstName,\n            middle_name: formData.middleName || null,\n            last_name: formData.lastName,\n            baptismal_name: formData.baptismalName || null,\n            street_address: formData.streetAddress,\n            apt_suite_bldg: formData.aptSuiteBldg || null,\n            city: formData.city,\n            state_province_region: formData.stateProvinceRegion,\n            postal_zip_code: formData.postalZipCode,\n            country: formData.country,\n            date_of_birth: formData.dateOfBirth,\n            gender: formData.gender,\n            marital_status: formData.maritalStatus,\n            spouse_name: formData.spouse || null,\n            spouse_baptismal_name: formData.spouseBaptismalName || null,\n            spouse_phone: formData.spousePhone || null,\n            spouse_email: formData.spouseEmail || null,\n            child1_first_name: formData.child1FirstName || null,\n            child1_middle_name: formData.child1MiddleName || null,\n            child1_last_name: formData.child1LastName || null,\n            child1_date_of_birth: formData.child1DateOfBirth || null,\n            child2_first_name: formData.child2FirstName || null,\n            child2_middle_name: formData.child2MiddleName || null,\n            child2_last_name: formData.child2LastName || null,\n            child2_date_of_birth: formData.child2DateOfBirth || null,\n            emergency_contact_name: formData.emergencyName,\n            emergency_contact_phone: formData.emergencyPhone,\n            emergency_contact_relation: formData.emergencyRelation,\n            preferred_language: formData.preferredLanguage,\n            ministry_interests: formData.ministryInterests,\n            volunteer_interests: formData.volunteerInterests,\n            skills: formData.skills || null,\n            how_did_you_hear: formData.howDidYouHear || null,\n            additional_notes: formData.additionalNotes || null,\n            baptized: formData.baptized,\n            baptism_date: formData.baptismDate || null,\n            previous_member: formData.previousMember,\n            previous_church: formData.previousChurch || null,\n            children: formData.children.filter((child) => child.name.trim()),\n            email_updates: formData.emailUpdates,\n            sms_updates: formData.smsUpdates,\n            photo_consent: formData.agreeToPhotos,\n          },\n        ])\n        .select()\n        .single();\n\n      if (memberError) {\n        throw memberError;\n      }\n\n      // Determine membership fee based on type\n      const membershipFees = {\n        regular: \"100\",\n        student: \"50\",\n        senior: \"75\",\n        family: \"200\",\n      };\n      const membershipFee =\n        membershipFees[\n          formData.membershipType as keyof typeof membershipFees\n        ] || \"100\";\n\n      // Create Stripe checkout session using the existing edge function\n      const checkoutData = {\n        amount: membershipFee,\n        donationType: \"one_time\",\n        purpose: \"membership_fee\",\n        email: formData.email,\n        name: `${formData.firstName} ${formData.middleName ? formData.middleName + \" \" : \"\"}${formData.lastName}`,\n        address: `${formData.streetAddress}${formData.aptSuiteBldg ? \", \" + formData.aptSuiteBldg : \"\"}, ${formData.city}, ${formData.stateProvinceRegion} ${formData.postalZipCode}`,\n        memberId: memberData.id,\n        membershipType: formData.membershipType,\n      };\n\n      console.log(\"Invoking create-checkout function with data:\", checkoutData);\n\n      const response = await supabase.functions.invoke(\"create-checkout\", {\n        body: checkoutData,\n      });\n\n      console.log(\"Function response:\", response);\n\n      if (response.error) {\n        console.error(\"Function error:\", response.error);\n        throw new Error(\n          `Payment initiation failed: ${response.error.message || \"Unknown error\"}`,\n        );\n      }\n\n      if (!response.data?.url) {\n        console.error(\"No checkout URL in response:\", response.data);\n        throw new Error(\"No checkout URL received\");\n      }\n\n      // Redirect to Stripe checkout\n      console.log(\"Redirecting to checkout URL:\", response.data.url);\n      window.location.href = response.data.url;\n    } catch (error) {\n      console.error(\"Membership registration error:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Registration Error\",\n        description:\n          \"There was an error processing your membership registration. Please try again.\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Calendar className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">\n                {t(\"personal_information\")}\n              </h3>\n            </div>\n\n            {/* Registration Date */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"registrationDate\">\n                {t(\"date\")} {t(\"required\")}\n              </Label>\n              <Input\n                id=\"registrationDate\"\n                type=\"date\"\n                value={formData.registrationDate}\n                onChange={(e) =>\n                  handleInputChange(\"registrationDate\", e.target.value)\n                }\n                className=\"bg-gray-50\"\n                readOnly\n              />\n            </div>\n\n            {/* Name Fields */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">\n                  {t(\"first_name\")} {t(\"required\")}\n                </Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) =>\n                    handleInputChange(\"firstName\", e.target.value)\n                  }\n                  className={formErrors.firstName ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.firstName && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.firstName}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"middleName\">{t(\"middle_name\")}</Label>\n                <Input\n                  id=\"middleName\"\n                  value={formData.middleName}\n                  onChange={(e) =>\n                    handleInputChange(\"middleName\", e.target.value)\n                  }\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">\n                  {t(\"last_name\")} {t(\"required\")}\n                </Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) =>\n                    handleInputChange(\"lastName\", e.target.value)\n                  }\n                  className={formErrors.lastName ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.lastName && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.lastName}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Baptismal Name */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"baptismalName\">{t(\"baptismal_name\")}</Label>\n              <Input\n                id=\"baptismalName\"\n                value={formData.baptismalName}\n                onChange={(e) =>\n                  handleInputChange(\"baptismalName\", e.target.value)\n                }\n              />\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">\n                  {t(\"phone\")} {t(\"required\")}\n                </Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                  className={formErrors.phone ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.phone && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.phone}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">\n                  {t(\"email\")} {t(\"required\")}\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                  className={formErrors.email ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.email && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.email}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateOfBirth\">\n                  {t(\"date_of_birth\")} {t(\"required\")}\n                </Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) =>\n                    handleInputChange(\"dateOfBirth\", e.target.value)\n                  }\n                  className={formErrors.dateOfBirth ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.dateOfBirth && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.dateOfBirth}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>\n                  {t(\"gender\")} {t(\"required\")}\n                </Label>\n                <RadioGroup\n                  value={formData.gender}\n                  onValueChange={(value) => handleInputChange(\"gender\", value)}\n                  className=\"flex gap-6\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"male\" id=\"male\" />\n                    <Label htmlFor=\"male\">{t(\"male\")}</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"female\" id=\"female\" />\n                    <Label htmlFor=\"female\">{t(\"female\")}</Label>\n                  </div>\n                </RadioGroup>\n                {formErrors.gender && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.gender}</p>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <MapPin className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">\n                {t(\"address_information\")}\n              </h3>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"streetAddress\">\n                {t(\"street_address\")} {t(\"required\")}\n              </Label>\n              <Input\n                id=\"streetAddress\"\n                value={formData.streetAddress}\n                onChange={(e) =>\n                  handleInputChange(\"streetAddress\", e.target.value)\n                }\n                className={formErrors.streetAddress ? \"border-red-500\" : \"\"}\n              />\n              {formErrors.streetAddress && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.streetAddress}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"aptSuiteBldg\">{t(\"apt_suite_bldg\")}</Label>\n              <Input\n                id=\"aptSuiteBldg\"\n                value={formData.aptSuiteBldg}\n                onChange={(e) =>\n                  handleInputChange(\"aptSuiteBldg\", e.target.value)\n                }\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"city\">\n                  {t(\"city\")} {t(\"required\")}\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => handleInputChange(\"city\", e.target.value)}\n                  className={formErrors.city ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.city && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.city}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"stateProvinceRegion\">\n                  {t(\"state_province_region\")} {t(\"required\")}\n                </Label>\n                <Input\n                  id=\"stateProvinceRegion\"\n                  value={formData.stateProvinceRegion}\n                  onChange={(e) =>\n                    handleInputChange(\"stateProvinceRegion\", e.target.value)\n                  }\n                  className={\n                    formErrors.stateProvinceRegion ? \"border-red-500\" : \"\"\n                  }\n                />\n                {formErrors.stateProvinceRegion && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.stateProvinceRegion}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"postalZipCode\">\n                  {t(\"postal_zip_code\")} {t(\"required\")}\n                </Label>\n                <Input\n                  id=\"postalZipCode\"\n                  value={formData.postalZipCode}\n                  onChange={(e) =>\n                    handleInputChange(\"postalZipCode\", e.target.value)\n                  }\n                  className={formErrors.postalZipCode ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.postalZipCode && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.postalZipCode}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"country\">{t(\"country\")}</Label>\n                <Select\n                  value={formData.country}\n                  onValueChange={(value) => handleInputChange(\"country\", value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"United States\">\n                      {t(\"united_states\")}\n                    </SelectItem>\n                    <SelectItem value=\"Canada\">{t(\"canada\")}</SelectItem>\n                    <SelectItem value=\"Ethiopia\">{t(\"ethiopia\")}</SelectItem>\n                    <SelectItem value=\"Other\">{t(\"other\")}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <FileText className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">\n                Membership & Family Information\n              </h3>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"membershipType\">Membership Type *</Label>\n              <Select\n                value={formData.membershipType}\n                onValueChange={(value) =>\n                  handleInputChange(\"membershipType\", value)\n                }\n              >\n                <SelectTrigger\n                  className={formErrors.membershipType ? \"border-red-500\" : \"\"}\n                >\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"regular\">\n                    Regular Member ($100/year)\n                  </SelectItem>\n                  <SelectItem value=\"student\">\n                    Student Member ($50/year)\n                  </SelectItem>\n                  <SelectItem value=\"senior\">\n                    Senior Member ($75/year)\n                  </SelectItem>\n                  <SelectItem value=\"family\">\n                    Family Member ($200/year)\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n              {formErrors.membershipType && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.membershipType}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"previousMember\"\n                  checked={formData.previousMember}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"previousMember\", checked)\n                  }\n                />\n                <Label htmlFor=\"previousMember\">\n                  I was previously a member of another Orthodox church\n                </Label>\n              </div>\n\n              {formData.previousMember && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"previousChurch\">Previous Church Name *</Label>\n                  <Input\n                    id=\"previousChurch\"\n                    value={formData.previousChurch}\n                    onChange={(e) =>\n                      handleInputChange(\"previousChurch\", e.target.value)\n                    }\n                    className={\n                      formErrors.previousChurch ? \"border-red-500\" : \"\"\n                    }\n                  />\n                  {formErrors.previousChurch && (\n                    <p className=\"text-red-500 text-sm\">\n                      {formErrors.previousChurch}\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"baptized\"\n                  checked={formData.baptized}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"baptized\", checked)\n                  }\n                />\n                <Label htmlFor=\"baptized\">I have been baptized</Label>\n              </div>\n\n              {formData.baptized && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"baptismDate\">Baptism Date *</Label>\n                  <Input\n                    id=\"baptismDate\"\n                    type=\"date\"\n                    value={formData.baptismDate}\n                    onChange={(e) =>\n                      handleInputChange(\"baptismDate\", e.target.value)\n                    }\n                    className={formErrors.baptismDate ? \"border-red-500\" : \"\"}\n                  />\n                  {formErrors.baptismDate && (\n                    <p className=\"text-red-500 text-sm\">\n                      {formErrors.baptismDate}\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              <Label>Marital Status</Label>\n              <RadioGroup\n                value={formData.maritalStatus}\n                onValueChange={(value) =>\n                  handleInputChange(\"maritalStatus\", value)\n                }\n                className=\"grid grid-cols-2 gap-4\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"single\" id=\"single\" />\n                  <Label htmlFor=\"single\">Single</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"married\" id=\"married\" />\n                  <Label htmlFor=\"married\">Married</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"divorced\" id=\"divorced\" />\n                  <Label htmlFor=\"divorced\">Divorced</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"widowed\" id=\"widowed\" />\n                  <Label htmlFor=\"widowed\">Widowed</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {formData.maritalStatus === \"married\" && (\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold text-church-burgundy\">\n                  Spouse Information\n                </h4>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"spouse\">Spouse</Label>\n                    <Input\n                      id=\"spouse\"\n                      value={formData.spouse}\n                      onChange={(e) =>\n                        handleInputChange(\"spouse\", e.target.value)\n                      }\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"spouseBaptismalName\">\n                      Spouse Baptismal Name\n                    </Label>\n                    <Input\n                      id=\"spouseBaptismalName\"\n                      value={formData.spouseBaptismalName}\n                      onChange={(e) =>\n                        handleInputChange(\"spouseBaptismalName\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"spousePhone\">Spouse Phone</Label>\n                    <Input\n                      id=\"spousePhone\"\n                      type=\"tel\"\n                      value={formData.spousePhone}\n                      onChange={(e) =>\n                        handleInputChange(\"spousePhone\", e.target.value)\n                      }\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"spouseEmail\">Spouse Email</Label>\n                    <Input\n                      id=\"spouseEmail\"\n                      type=\"email\"\n                      value={formData.spouseEmail}\n                      onChange={(e) =>\n                        handleInputChange(\"spouseEmail\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-church-burgundy\">\n                Children Information\n              </h4>\n\n              {/* Child 1 */}\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <h5 className=\"font-medium text-gray-700\">Child 1</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child1FirstName\">First Name</Label>\n                    <Input\n                      id=\"child1FirstName\"\n                      value={formData.child1FirstName}\n                      onChange={(e) =>\n                        handleInputChange(\"child1FirstName\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child1MiddleName\">Middle Name</Label>\n                    <Input\n                      id=\"child1MiddleName\"\n                      value={formData.child1MiddleName}\n                      onChange={(e) =>\n                        handleInputChange(\"child1MiddleName\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child1LastName\">Last Name</Label>\n                    <Input\n                      id=\"child1LastName\"\n                      value={formData.child1LastName}\n                      onChange={(e) =>\n                        handleInputChange(\"child1LastName\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"child1DateOfBirth\">Date of Birth</Label>\n                  <Input\n                    id=\"child1DateOfBirth\"\n                    type=\"date\"\n                    value={formData.child1DateOfBirth}\n                    onChange={(e) =>\n                      handleInputChange(\"child1DateOfBirth\", e.target.value)\n                    }\n                  />\n                </div>\n              </div>\n\n              {/* Child 2 */}\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <h5 className=\"font-medium text-gray-700\">Child 2</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child2FirstName\">First Name</Label>\n                    <Input\n                      id=\"child2FirstName\"\n                      value={formData.child2FirstName}\n                      onChange={(e) =>\n                        handleInputChange(\"child2FirstName\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child2MiddleName\">Middle Name</Label>\n                    <Input\n                      id=\"child2MiddleName\"\n                      value={formData.child2MiddleName}\n                      onChange={(e) =>\n                        handleInputChange(\"child2MiddleName\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child2LastName\">Last Name</Label>\n                    <Input\n                      id=\"child2LastName\"\n                      value={formData.child2LastName}\n                      onChange={(e) =>\n                        handleInputChange(\"child2LastName\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"child2DateOfBirth\">Date of Birth</Label>\n                  <Input\n                    id=\"child2DateOfBirth\"\n                    type=\"date\"\n                    value={formData.child2DateOfBirth}\n                    onChange={(e) =>\n                      handleInputChange(\"child2DateOfBirth\", e.target.value)\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Heart className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">\n                Ministry Interests & Emergency Contact\n              </h3>\n            </div>\n\n            <div className=\"space-y-4\">\n              <Label>Ministry Interests (Select all that apply)</Label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {ministryOptions.map((ministry) => (\n                  <div key={ministry} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={ministry}\n                      checked={formData.ministryInterests.includes(ministry)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          handleArrayChange(\"ministryInterests\", [\n                            ...formData.ministryInterests,\n                            ministry,\n                          ]);\n                        } else {\n                          handleArrayChange(\n                            \"ministryInterests\",\n                            formData.ministryInterests.filter(\n                              (m) => m !== ministry,\n                            ),\n                          );\n                        }\n                      }}\n                    />\n                    <Label htmlFor={ministry} className=\"text-sm\">\n                      {ministry}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <Label>Volunteer Interests (Select all that apply)</Label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {volunteerOptions.map((volunteer) => (\n                  <div key={volunteer} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={volunteer}\n                      checked={formData.volunteerInterests.includes(volunteer)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          handleArrayChange(\"volunteerInterests\", [\n                            ...formData.volunteerInterests,\n                            volunteer,\n                          ]);\n                        } else {\n                          handleArrayChange(\n                            \"volunteerInterests\",\n                            formData.volunteerInterests.filter(\n                              (v) => v !== volunteer,\n                            ),\n                          );\n                        }\n                      }}\n                    />\n                    <Label htmlFor={volunteer} className=\"text-sm\">\n                      {volunteer}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"skills\">Special Skills or Talents</Label>\n              <Textarea\n                id=\"skills\"\n                value={formData.skills}\n                onChange={(e) => handleInputChange(\"skills\", e.target.value)}\n                placeholder=\"Please describe any special skills, talents, or professional expertise you'd like to share...\"\n              />\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-church-burgundy\">\n                Emergency Contact Information\n              </h4>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"emergencyName\">\n                    Emergency Contact Name *\n                  </Label>\n                  <Input\n                    id=\"emergencyName\"\n                    value={formData.emergencyName}\n                    onChange={(e) =>\n                      handleInputChange(\"emergencyName\", e.target.value)\n                    }\n                    className={formErrors.emergencyName ? \"border-red-500\" : \"\"}\n                  />\n                  {formErrors.emergencyName && (\n                    <p className=\"text-red-500 text-sm\">\n                      {formErrors.emergencyName}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"emergencyPhone\">\n                    Emergency Contact Phone *\n                  </Label>\n                  <Input\n                    id=\"emergencyPhone\"\n                    type=\"tel\"\n                    value={formData.emergencyPhone}\n                    onChange={(e) =>\n                      handleInputChange(\"emergencyPhone\", e.target.value)\n                    }\n                    className={\n                      formErrors.emergencyPhone ? \"border-red-500\" : \"\"\n                    }\n                  />\n                  {formErrors.emergencyPhone && (\n                    <p className=\"text-red-500 text-sm\">\n                      {formErrors.emergencyPhone}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"emergencyRelation\">\n                  Relationship to Emergency Contact *\n                </Label>\n                <Input\n                  id=\"emergencyRelation\"\n                  value={formData.emergencyRelation}\n                  onChange={(e) =>\n                    handleInputChange(\"emergencyRelation\", e.target.value)\n                  }\n                  className={\n                    formErrors.emergencyRelation ? \"border-red-500\" : \"\"\n                  }\n                  placeholder=\"e.g., Spouse, Parent, Sibling, Friend\"\n                />\n                {formErrors.emergencyRelation && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.emergencyRelation}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 5:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <CheckCircle className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">Final Details & Review</h3>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Preferred Language</Label>\n                <RadioGroup\n                  value={formData.preferredLanguage}\n                  onValueChange={(value) =>\n                    handleInputChange(\"preferredLanguage\", value)\n                  }\n                  className=\"flex gap-6\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"english\" id=\"english\" />\n                    <Label htmlFor=\"english\">English</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"amharic\" id=\"amharic\" />\n                    <Label htmlFor=\"amharic\">Amharic</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Preferred Contact Method</Label>\n                <RadioGroup\n                  value={formData.contactMethod}\n                  onValueChange={(value) =>\n                    handleInputChange(\"contactMethod\", value)\n                  }\n                  className=\"flex gap-6\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"email\" id=\"contact-email\" />\n                    <Label htmlFor=\"contact-email\">Email</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"phone\" id=\"contact-phone\" />\n                    <Label htmlFor=\"contact-phone\">Phone</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"emailUpdates\"\n                    checked={formData.emailUpdates}\n                    onCheckedChange={(checked) =>\n                      handleInputChange(\"emailUpdates\", checked)\n                    }\n                  />\n                  <Label htmlFor=\"emailUpdates\">\n                    I would like to receive email updates about church events\n                    and news\n                  </Label>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"smsUpdates\"\n                    checked={formData.smsUpdates}\n                    onCheckedChange={(checked) =>\n                      handleInputChange(\"smsUpdates\", checked)\n                    }\n                  />\n                  <Label htmlFor=\"smsUpdates\">\n                    I would like to receive SMS updates for urgent announcements\n                  </Label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"howDidYouHear\">\n                How did you hear about our church?\n              </Label>\n              <Select\n                value={formData.howDidYouHear}\n                onValueChange={(value) =>\n                  handleInputChange(\"howDidYouHear\", value)\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Please select...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"friend\">\n                    Friend or Family Member\n                  </SelectItem>\n                  <SelectItem value=\"website\">Church Website</SelectItem>\n                  <SelectItem value=\"social-media\">Social Media</SelectItem>\n                  <SelectItem value=\"community-event\">\n                    Community Event\n                  </SelectItem>\n                  <SelectItem value=\"drove-by\">Drove by the Church</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"additionalNotes\">\n                Additional Notes or Comments\n              </Label>\n              <Textarea\n                id=\"additionalNotes\"\n                value={formData.additionalNotes}\n                onChange={(e) =>\n                  handleInputChange(\"additionalNotes\", e.target.value)\n                }\n                placeholder=\"Please share anything else you'd like us to know...\"\n              />\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-2\">\n                <Checkbox\n                  id=\"agreeToTerms\"\n                  checked={formData.agreeToTerms}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"agreeToTerms\", checked)\n                  }\n                  className={formErrors.agreeToTerms ? \"border-red-500\" : \"\"}\n                />\n                <Label\n                  htmlFor=\"agreeToTerms\"\n                  className=\"text-sm leading-relaxed\"\n                >\n                  I agree to the church's terms and conditions, and I understand\n                  that membership requires an annual fee. I commit to\n                  participating in church activities and supporting the church\n                  community. *\n                </Label>\n              </div>\n              {formErrors.agreeToTerms && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.agreeToTerms}\n                </p>\n              )}\n\n              <div className=\"flex items-start space-x-2\">\n                <Checkbox\n                  id=\"agreeToPhotos\"\n                  checked={formData.agreeToPhotos}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"agreeToPhotos\", checked)\n                  }\n                />\n                <Label\n                  htmlFor=\"agreeToPhotos\"\n                  className=\"text-sm leading-relaxed\"\n                >\n                  I consent to having my photo taken during church events and\n                  activities for use in church publications, website, and social\n                  media.\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"bg-church-cream p-4 rounded-lg\">\n              <h4 className=\"font-semibold text-church-burgundy mb-2\">\n                Membership Fee\n              </h4>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Annual membership fee:{\" \"}\n                <span className=\"font-semibold\">\n                  $\n                  {formData.membershipType === \"regular\"\n                    ? \"100\"\n                    : formData.membershipType === \"student\"\n                      ? \"50\"\n                      : formData.membershipType === \"senior\"\n                        ? \"75\"\n                        : formData.membershipType === \"family\"\n                          ? \"200\"\n                          : \"100\"}\n                </span>\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                After submitting this form, you will be redirected to a secure\n                payment page to complete your membership registration.\n              </p>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const getStepIcon = (step: number) => {\n    if (step < currentStep) {\n      return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n    } else if (step === currentStep) {\n      return (\n        <div className=\"h-5 w-5 rounded-full bg-church-burgundy text-white flex items-center justify-center text-xs font-bold\">\n          {step}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"h-5 w-5 rounded-full bg-gray-300 text-gray-600 flex items-center justify-center text-xs font-bold\">\n          {step}\n        </div>\n      );\n    }\n  };\n\n  // Amharic translations for membership registration\n  const translations = {\n    en: {\n      title: \"Membership Registration\",\n      description: \"Join our church community by registering as a member\",\n      personal: \"Personal Information\",\n      firstName: \"First Name\",\n      lastName: \"Last Name\",\n      email: \"Email Address\",\n      phone: \"Phone Number\",\n      dateOfBirth: \"Date of Birth\",\n      gender: \"Gender\",\n      male: \"Male\",\n      female: \"Female\",\n      address: \"Address Information\",\n      streetAddress: \"Street Address\",\n      city: \"City\",\n      state: \"State\",\n      zipCode: \"ZIP Code\",\n      country: \"Country\",\n      membershipInfo: \"Membership & Family Information\",\n      membershipType: \"Membership Type\",\n      regularMember: \"Regular Member ($100/year)\",\n      studentMember: \"Student Member ($50/year)\",\n      seniorMember: \"Senior Member ($75/year)\",\n      familyMember: \"Family Member ($200/year)\",\n      previousMember: \"I was previously a member of another Orthodox church\",\n      previousChurch: \"Previous Church Name\",\n      baptized: \"I have been baptized\",\n      baptismDate: \"Baptism Date\",\n      maritalStatus: \"Marital Status\",\n      single: \"Single\",\n      married: \"Married\",\n      divorced: \"Divorced\",\n      widowed: \"Widowed\",\n      spouseName: \"Spouse's Name\",\n      children: \"Children\",\n      addChild: \"Add Child\",\n      childName: \"Child's name\",\n      age: \"Age\",\n      remove: \"Remove\",\n      ministryInterests: \"Ministry Interests & Emergency Contact\",\n      selectMinistries: \"Ministry Interests (Select all that apply)\",\n      volunteerInterests: \"Volunteer Interests (Select all that apply)\",\n      skills: \"Special Skills or Talents\",\n      skillsPlaceholder:\n        \"Please describe any special skills, talents, or professional expertise you'd like to share...\",\n      emergencyContact: \"Emergency Contact Information\",\n      emergencyName: \"Emergency Contact Name\",\n      emergencyPhone: \"Emergency Contact Phone\",\n      emergencyRelation: \"Relationship to Emergency Contact\",\n      emergencyRelationPlaceholder: \"e.g., Spouse, Parent, Sibling, Friend\",\n      finalDetails: \"Final Details & Review\",\n      preferredLanguage: \"Preferred Language\",\n      english: \"English\",\n      amharic: \"Amharic\",\n      contactMethod: \"Preferred Contact Method\",\n      emailUpdates:\n        \"I would like to receive email updates about church events and news\",\n      smsUpdates:\n        \"I would like to receive SMS updates for urgent announcements\",\n      howDidYouHear: \"How did you hear about our church?\",\n      additionalNotes: \"Additional Notes or Comments\",\n      notesPlaceholder: \"Please share anything else you'd like us to know...\",\n      agreeToTerms:\n        \"I agree to the church's terms and conditions, and I understand that membership requires an annual fee. I commit to participating in church activities and supporting the church community.\",\n      agreeToPhotos:\n        \"I consent to having my photo taken during church events and activities for use in church publications, website, and social media.\",\n      membershipFee: \"Membership Fee\",\n      annualFee: \"Annual membership fee: \",\n      paymentRedirect:\n        \"After submitting this form, you will be redirected to a secure payment page to complete your membership registration.\",\n      previous: \"Previous\",\n      next: \"Next\",\n      processing: \"Processing...\",\n      completeRegistration: \"Complete Registration & Pay $100\",\n      personal_step: \"Personal\",\n      address_step: \"Address\",\n      membership_step: \"Membership\",\n      ministry_step: \"Ministry\",\n      review_step: \"Review\",\n    },\n    am: {\n      title: \"የአባልነት ምዝገባ\",\n      description: \"እንደ አባል በመመዝገብ የቤተክርስቲያን ማህበረሰባችንን ይቀላቀሉ\",\n      personal: \"የግል መረጃ\",\n      firstName: \"መጠሪያ ስም\",\n      lastName: \"የአባት ስም\",\n      email: \"የኢሜይል አድራሻ\",\n      phone: \"ስልክ ቁጥር\",\n      dateOfBirth: \"የትውልድ ቀን\",\n      gender: \"ፆታ\",\n      male: \"ወንድ\",\n      female: \"ሴት\",\n      address: \"የአድራሻ መረጃ\",\n      streetAddress: \"የመንገድ አድራሻ\",\n      city: \"ከተማ\",\n      state: \"ግዛት\",\n      zipCode: \"ዚፕ ኮድ\",\n      country: \"ሀገር\",\n      membershipInfo: \"የአባልነት እና የቤተሰብ መረጃ\",\n      membershipType: \"የአባልነት አይነት\",\n      regularMember: \"መደበኛ አባል ($100/አመት)\",\n      studentMember: \"የተማሪ አባል ($50/አመት)\",\n      seniorMember: \"የአዛውንት አባል ($75/አመት)\",\n      familyMember: \"የቤተሰብ አባል ($200/አመት)\",\n      previousMember: \"ከዚህ በፊት የሌላ ኦርቶዶክስ ቤተክርስቲያን አባል ነበርኩ\",\n      previousChurch: \"የቀድሞ ቤተክርስቲያን ስም\",\n      baptized: \"ተጠምቄአለሁ\",\n      baptismDate: \"የጥምቀት ቀን\",\n      maritalStatus: \"የጋብቻ ሁኔታ\",\n      single: \"ያላገባ\",\n      married: \"ያገባ\",\n      divorced: \"የተፋታ\",\n      widowed: \"የትዳር አጋሩ የሞተበት\",\n      spouseName: \"የትዳር አጋር ስም\",\n      children: \"ልጆች\",\n      addChild: \"ልጅ ጨምር\",\n      childName: \"የልጅ ስም\",\n      age: \"እድሜ\",\n      remove: \"አስወግድ\",\n      ministryInterests: \"የአገልግሎት ፍላጎቶች እና የአደጋ ጊዜ ተጠሪ\",\n      selectMinistries: \"የአገልግሎት ፍላጎቶች (የሚመለከትዎትን ሁሉ ይምረጡ)\",\n      volunteerInterests: \"የበጎ ፈቃድ ፍላጎቶች (የሚመለከትዎትን ሁሉ ይምረጡ)\",\n      skills: \"ልዩ ችሎታዎች ወይም ተሰጥኦዎች\",\n      skillsPlaceholder:\n        \"እባክዎን ማካፈል የሚፈልጓቸውን ልዩ ችሎታዎች፣ ተሰጥኦዎች ወይም ሙያዊ ብቃቶች ይግለጹ...\",\n      emergencyContact: \"የአደጋ ጊዜ ተጠሪ መረጃ\",\n      emergencyName: \"የአደጋ ጊዜ ተጠሪ ስም\",\n      emergencyPhone: \"የአደጋ ጊዜ ተጠሪ ስልክ\",\n      emergencyRelation: \"ከአደጋ ጊዜ ተጠሪ ጋር ያለዎት ግንኙነት\",\n      emergencyRelationPlaceholder: \"ለምሳሌ፣ ባል/ሚስት፣ ወላጅ፣ ወንድም/እህት፣ ጓደኛ\",\n      finalDetails: \"የመጨረሻ ዝርዝሮች እና ግምገማ\",\n      preferredLanguage: \"የመረጡት ቋንቋ\",\n      english: \"እንግሊዝኛ\",\n      amharic: \"አማርኛ\",\n      contactMethod: \"የመረጡት የመገናኛ ዘዴ\",\n      emailUpdates: \"ስለ ቤተክርስቲያናችን እንዴት ሰሙ?\",\n      smsUpdates: \"ለአስቸኳይ ማስታወቂያዎች በኤስኤምኤስ መረጃዎችን መቀበል እፈልጋለሁ\",\n      howDidYouHear: \"ስለ ቤተክርስቲያናችን እንዴት ሰሙ?\",\n      additionalNotes: \"ተጨማሪ ማስታወሻዎች ወይም አስተያየቶች\",\n      notesPlaceholder: \"እባክዎን እኛ እንድናውቅ የሚፈልጉትን ማንኛውንም ነገር ያካፍሉ...\",\n      agreeToTerms:\n        \"የቤተክርስቲያኑን ውሎች እና ሁኔታዎች እስማማለሁ፣ እና አባልነት አመታዊ ክፍያ እንደሚጠይቅ ተረድቻለሁ። በቤተክርስቲያን እንቅስቃሴዎች ለመሳተፍ እና የቤተክርስቲያን ማህበረሰብን ለመደገፍ እቃጠራለሁ።\",\n      agreeToPhotos:\n        \"በቤተክርስቲያን ዝግጅቶች እና እንቅስቃሴዎች ወቅት ፎቶዬ እንዲነሳ እና በቤተክርስቲያን ህትመቶች፣ ድህረ ገጽ እና ማህበራዊ ሚዲያ ላይ እንዲውል ፈቃዴን እሰጣለሁ።\",\n      membershipFee: \"የአባልነት ክፍያ\",\n      annualFee: \"አመታዊ የአባልነት ክፍያ: \",\n      paymentRedirect:\n        \"ይህንን ቅጽ ካስገቡ በኋላ፣ የአባልነት ምዝገባዎን ለማጠናቀቅ ወደ ደህንነቱ የተጠበቀ የክፍያ ገጽ ይዞረዛሉ።\",\n      previous: \"ቀዳሚ\",\n      next: \"ቀጣይ\",\n      processing: \"በሂደት ላይ...\",\n      completeRegistration: \"ምዝገባን አጠናቅቅ እና $100 ክፍል\",\n      personal_step: \"የግል\",\n      address_step: \"አድራሻ\",\n      membership_step: \"አባልነት\",\n      ministry_step: \"አገልግሎት\",\n      review_step: \"ግምገማ\",\n    },\n  };\n\n  // Get translations based on current language\n  const getTranslation = (key: string): string => {\n    if (\n      language === \"am\" &&\n      translations.am[key as keyof typeof translations.am]\n    ) {\n      return translations.am[key as keyof typeof translations.am];\n    }\n    return translations.en[key as keyof typeof translations.en];\n  };\n\n  return (\n    <Layout>\n      <div className=\"container mx-auto p-4 max-w-4xl\">\n        <Card className=\"bg-white shadow-lg\">\n          <CardHeader className=\"text-center bg-gradient-to-r from-church-gold/10 to-church-burgundy/10 rounded-t-lg py-8 mb-4\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-church-gold/80 rounded-full mb-4 shadow-lg\">\n                <Users size={36} className=\"text-church-burgundy\" />\n              </div>\n              <CardTitle className=\"text-3xl md:text-4xl font-serif text-church-burgundy mb-2\">\n                {t(\"membership_registration_title\")}\n              </CardTitle>\n              <CardDescription className=\"text-lg text-gray-700 max-w-2xl mx-auto\">\n                {t(\"membership_registration_description\")}\n              </CardDescription>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            {/* Progress Bar */}\n            <div className=\"mb-8\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(1)}\n                  <span className=\"text-sm font-medium\">\n                    {t(\"step_personal\")}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(2)}\n                  <span className=\"text-sm font-medium\">\n                    {t(\"step_address\")}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(3)}\n                  <span className=\"text-sm font-medium\">\n                    {t(\"step_membership\")}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(4)}\n                  <span className=\"text-sm font-medium\">\n                    {t(\"step_ministry\")}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(5)}\n                  <span className=\"text-sm font-medium\">\n                    {t(\"step_review\")}\n                  </span>\n                </div>\n              </div>\n              <Progress value={progressPercentage} className=\"h-2\" />\n              <p className=\"text-sm text-gray-600 mt-2 text-center\">\n                Step {currentStep} of {totalSteps}\n              </p>\n            </div>\n\n            {/* Step Content */}\n            <div className=\"min-h-[400px]\">{renderStepContent()}</div>\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between mt-8 pt-6 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrevious}\n                disabled={currentStep === 1}\n              >\n                {t(\"previous\")}\n              </Button>\n\n              {currentStep < totalSteps ? (\n                <Button\n                  type=\"button\"\n                  onClick={handleNext}\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  {t(\"next\")}\n                </Button>\n              ) : (\n                <Button\n                  type=\"button\"\n                  onClick={handleSubmit}\n                  disabled={isSubmitting}\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      {t(\"processing\")}\n                    </>\n                  ) : (\n                    <>\n                      <CreditCard className=\"h-4 w-4 mr-2\" />\n                      {t(\"complete_registration\")} $\n                      {formData.membershipType === \"regular\"\n                        ? \"100\"\n                        : formData.membershipType === \"student\"\n                          ? \"50\"\n                          : formData.membershipType === \"senior\"\n                            ? \"75\"\n                            : formData.membershipType === \"family\"\n                              ? \"200\"\n                              : \"100\"}\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n};\n\nexport default MembershipRegistration;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/MembershipSuccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/Services.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/AdminLayout.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAuth'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAuth]","fix":{"range":[1120,1122],"text":"[checkAuth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { useNavigate, Link, Outlet, useLocation } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport AdminErrorBoundary from \"@/components/AdminErrorBoundary\";\nimport {\n  LayoutDashboard,\n  Calendar,\n  Image,\n  Users,\n  Activity,\n  MessageSquare,\n  Heart,\n  DollarSign,\n  Menu,\n  X,\n  Settings,\n  LogOut,\n  Users as UsersIcon,\n  Home,\n  TrendingUp,\n  Upload,\n  Clock,\n  CalendarCheck,\n  ChevronLeft,\n  ChevronRight,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function AdminLayout() {\n  const [loading, setLoading] = useState(true);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(() => {\n    // Persist sidebar state in localStorage\n    if (typeof window !== \"undefined\") {\n      return localStorage.getItem(\"admin-sidebar-collapsed\") === \"true\";\n    }\n    return false;\n  });\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (!session) {\n        navigate(\"/admin/login\");\n        return;\n      }\n\n      // Check if user has admin role\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", session.user.id)\n        .single();\n\n      if (error) {\n        console.error(\"Error fetching profile:\", error);\n        // If profile doesn't exist, create one for first user as admin\n        const { count: adminCount } = await supabase\n          .from(\"profiles\")\n          .select(\"*\", { count: \"exact\", head: true });\n\n        if (adminCount === 0) {\n          // First user becomes admin\n          const { error: createError } = await supabase\n            .from(\"profiles\")\n            .insert({\n              id: session.user.id,\n              email: session.user.email,\n              role: \"admin\",\n            });\n\n          if (createError) {\n            console.error(\"Error creating admin profile:\", createError);\n            await supabase.auth.signOut();\n            navigate(\"/admin/login\");\n            return;\n          }\n        } else {\n          await supabase.auth.signOut();\n          navigate(\"/admin/login\");\n          return;\n        }\n      } else if (!profile || profile.role !== \"admin\") {\n        await supabase.auth.signOut();\n        navigate(\"/admin/login\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Error checking auth:\", error);\n      navigate(\"/admin/login\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut();\n    navigate(\"/admin/login\");\n  };\n\n  const navigationItems = [\n    {\n      to: \"/\",\n      icon: Home,\n      label: \"Main Website\",\n      description: \"Return to public site\",\n      isExternal: true,\n    },\n    {\n      to: \"/admin/dashboard\",\n      icon: LayoutDashboard,\n      label: \"Dashboard\",\n      description: \"Overview and statistics\",\n    },\n    {\n      to: \"/admin/events\",\n      icon: Calendar,\n      label: \"Events\",\n      description: \"Manage church events\",\n    },\n    {\n      to: \"/admin/members\",\n      icon: Users,\n      label: \"Members\",\n      description: \"Manage church members\",\n    },\n    {\n      to: \"/admin/gallery\",\n      icon: Image,\n      label: \"Gallery\",\n      description: \"Manage photo gallery\",\n    },\n    {\n      to: \"/admin/testimonials\",\n      icon: MessageSquare,\n      label: \"Testimonials\",\n      description: \"Review testimonials\",\n    },\n    {\n      to: \"/admin/prayer-requests\",\n      icon: Heart,\n      label: \"Prayer Requests\",\n      description: \"Manage prayer requests\",\n    },\n    {\n      to: \"/admin/donations\",\n      icon: DollarSign,\n      label: \"Donations\",\n      description: \"Track donations\",\n    },\n    {\n      to: \"/admin/appointments\",\n      icon: CalendarCheck,\n      label: \"Appointments\",\n      description: \"Manage appointment requests\",\n    },\n    {\n      to: \"/admin/users\",\n      icon: UsersIcon,\n      label: \"Users\",\n      description: \"Manage admin users\",\n    },\n    {\n      to: \"/admin/analytics\",\n      icon: TrendingUp,\n      label: \"Analytics\",\n      description: \"Data insights\",\n    },\n    {\n      to: \"/admin/bulk-operations\",\n      icon: Upload,\n      label: \"Bulk Operations\",\n      description: \"Import/Export data\",\n    },\n    {\n      to: \"/admin/content-scheduler\",\n      icon: Clock,\n      label: \"Content Scheduler\",\n      description: \"Schedule content\",\n    },\n    {\n      to: \"/admin/system-health\",\n      icon: Activity,\n      label: \"System Health\",\n      description: \"System status & monitoring\",\n    },\n    {\n      to: \"/admin/settings\",\n      icon: Settings,\n      label: \"Settings\",\n      description: \"System configuration\",\n    },\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div\n          className=\"fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          \"fixed inset-y-0 left-0 z-50 bg-church-burgundy text-white transform transition-all duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0\",\n          sidebarOpen ? \"translate-x-0\" : \"-translate-x-full\",\n          sidebarCollapsed ? \"w-16\" : \"w-72\",\n        )}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-church-burgundy/20\">\n            {!sidebarCollapsed && (\n              <div>\n                <h1 className=\"text-xl font-bold text-church-gold\">\n                  Admin Panel\n                </h1>\n                <p className=\"text-sm text-white/70\">Church Management</p>\n              </div>\n            )}\n            <div className=\"flex items-center space-x-2\">\n              {/* Desktop collapse toggle */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"hidden lg:flex text-white hover:bg-church-burgundy/20\"\n                onClick={() => {\n                  const newState = !sidebarCollapsed;\n                  setSidebarCollapsed(newState);\n                  localStorage.setItem(\n                    \"admin-sidebar-collapsed\",\n                    newState.toString(),\n                  );\n                }}\n              >\n                {sidebarCollapsed ? (\n                  <ChevronRight className=\"w-5 h-5\" />\n                ) : (\n                  <ChevronLeft className=\"w-5 h-5\" />\n                )}\n              </Button>\n              {/* Mobile close button */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"lg:hidden text-white hover:bg-church-burgundy/20\"\n                onClick={() => setSidebarOpen(false)}\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 py-6 space-y-2 overflow-y-auto\">\n            {navigationItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location.pathname === item.to;\n\n              return item.isExternal ? (\n                <a\n                  key={item.to}\n                  href={item.to}\n                  className={cn(\n                    \"flex items-center p-3 rounded-lg transition-colors group\",\n                    \"text-white/90 hover:bg-church-burgundy/20 hover:text-white bg-church-burgundy/10\",\n                  )}\n                  onClick={() => setSidebarOpen(false)}\n                >\n                  <Icon className=\"w-5 h-5 mr-3 flex-shrink-0 text-church-gold\" />\n                  {!sidebarCollapsed && (\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-church-gold\">\n                        {item.label}\n                      </div>\n                      <div className=\"text-xs text-white/50\">\n                        {item.description}\n                      </div>\n                    </div>\n                  )}\n                </a>\n              ) : (\n                <Link\n                  key={item.to}\n                  to={item.to}\n                  className={cn(\n                    \"flex items-center p-3 rounded-lg transition-colors group\",\n                    isActive\n                      ? \"bg-church-gold text-church-burgundy\"\n                      : \"text-white/90 hover:bg-church-burgundy/20 hover:text-white\",\n                  )}\n                  onClick={() => setSidebarOpen(false)}\n                >\n                  <Icon\n                    className={cn(\n                      \"w-5 h-5 mr-3 flex-shrink-0\",\n                      isActive\n                        ? \"text-church-burgundy\"\n                        : \"text-white/70 group-hover:text-white\",\n                    )}\n                  />\n                  {!sidebarCollapsed && (\n                    <div className=\"flex-1\">\n                      <div\n                        className={cn(\n                          \"font-medium\",\n                          isActive ? \"text-church-burgundy\" : \"text-white\",\n                        )}\n                      >\n                        {item.label}\n                      </div>\n                      <div\n                        className={cn(\n                          \"text-xs\",\n                          isActive\n                            ? \"text-church-burgundy/70\"\n                            : \"text-white/50\",\n                        )}\n                      >\n                        {item.description}\n                      </div>\n                    </div>\n                  )}\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-church-burgundy/20\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-white hover:text-white hover:bg-church-burgundy/20\"\n              onClick={handleSignOut}\n            >\n              <LogOut className=\"w-5 h-5 mr-3\" />\n              {!sidebarCollapsed && (\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Sign Out</div>\n                  <div className=\"text-xs text-white/50\">Exit admin panel</div>\n                </div>\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Top bar */}\n        <header className=\"bg-white shadow-sm border-b border-gray-200 lg:hidden\">\n          <div className=\"flex items-center justify-between px-4 py-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(true)}\n            >\n              <Menu className=\"w-5 h-5\" />\n            </Button>\n            <h1 className=\"text-lg font-semibold text-church-burgundy\">\n              Admin Panel\n            </h1>\n            <div className=\"w-10\" /> {/* Spacer for centering */}\n          </div>\n        </header>\n\n        {/* Page content */}\n        <main className=\"flex-1 p-4 sm:p-6 lg:p-8 overflow-auto\">\n          {/* Breadcrumb Navigation */}\n          <div className=\"mb-6\">\n            <nav className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <Link\n                to=\"/admin/dashboard\"\n                className=\"hover:text-church-burgundy\"\n              >\n                Dashboard\n              </Link>\n              {location.pathname !== \"/admin/dashboard\" && (\n                <>\n                  <span>/</span>\n                  <span className=\"text-church-burgundy font-medium capitalize\">\n                    {location.pathname.split(\"/\").pop()?.replace(\"-\", \" \")}\n                  </span>\n                </>\n              )}\n            </nav>\n          </div>\n\n          <AdminErrorBoundary>\n            <Outlet />\n          </AdminErrorBoundary>\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Analytics.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.","line":93,"column":6,"nodeType":"ArrayExpression","endLine":93,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadAnalyticsData, timeRange]","fix":{"range":[2161,2172],"text":"[loadAnalyticsData, timeRange]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":651,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":651,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  Area,\n  AreaChart,\n} from \"recharts\";\nimport {\n  TrendingUp,\n  TrendingDown,\n  Users,\n  DollarSign,\n  Calendar,\n  Heart,\n  Download,\n  RefreshCw,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format, subDays, startOfMonth, endOfMonth } from \"date-fns\";\n\ninterface AnalyticsData {\n  donations: {\n    total: number;\n    monthly: Array<{ month: string; amount: number; count: number }>;\n    byPurpose: Array<{ purpose: string; amount: number; percentage: number }>;\n    trends: {\n      thisMonth: number;\n      lastMonth: number;\n      growth: number;\n    };\n  };\n  members: {\n    total: number;\n    monthly: Array<{ month: string; count: number }>;\n    byType: Array<{ type: string; count: number; percentage: number }>;\n    trends: {\n      thisMonth: number;\n      lastMonth: number;\n      growth: number;\n    };\n  };\n  events: {\n    total: number;\n    upcoming: number;\n    monthly: Array<{ month: string; count: number }>;\n    attendance: Array<{ event: string; attendance: number }>;\n  };\n  engagement: {\n    prayerRequests: number;\n    testimonials: number;\n    galleryViews: number;\n  };\n}\n\nconst COLORS = [\"#7d2224\", \"#d4af37\", \"#228b22\", \"#4169e1\", \"#ff6347\"];\n\nexport default function Analytics() {\n  const [data, setData] = useState<AnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState(\"6months\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [timeRange]);\n\n  const loadAnalyticsData = async () => {\n    try {\n      setLoading(true);\n\n      // Calculate date ranges\n      const now = new Date();\n      const monthsBack =\n        timeRange === \"3months\" ? 3 : timeRange === \"6months\" ? 6 : 12;\n      const startDate = subDays(now, monthsBack * 30);\n\n      // Fetch all data in parallel\n      const [\n        donationsRes,\n        membersRes,\n        eventsRes,\n        prayerRequestsRes,\n        testimonialsRes,\n      ] = await Promise.all([\n        supabase\n          .from(\"donations\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString()),\n        supabase\n          .from(\"members\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString()),\n        supabase\n          .from(\"events\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString()),\n        supabase\n          .from(\"prayer_requests\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabase\n          .from(\"testimonials\")\n          .select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n      // Process donations data\n      const donations = donationsRes.data || [];\n      const donationsByMonth = processMonthlyData(\n        donations,\n        \"created_at\",\n        \"amount\",\n      );\n      const donationsByPurpose = processPurposeData(donations);\n      const donationTrends = calculateTrends(donations, \"amount\");\n\n      // Process members data\n      const members = membersRes.data || [];\n      const membersByMonth = processMonthlyData(members, \"created_at\");\n      const membersByType = processTypeData(members, \"membership_type\");\n      const memberTrends = calculateTrends(members);\n\n      // Process events data\n      const events = eventsRes.data || [];\n      const eventsByMonth = processMonthlyData(events, \"created_at\");\n      const upcomingEvents = events.filter(\n        (e) => new Date(e.event_date) > now,\n      ).length;\n\n      setData({\n        donations: {\n          total: donations.reduce((sum, d) => sum + d.amount, 0),\n          monthly: donationsByMonth,\n          byPurpose: donationsByPurpose,\n          trends: donationTrends,\n        },\n        members: {\n          total: members.length,\n          monthly: membersByMonth,\n          byType: membersByType,\n          trends: memberTrends,\n        },\n        events: {\n          total: events.length,\n          upcoming: upcomingEvents,\n          monthly: eventsByMonth,\n          attendance: [], // Would need additional tracking\n        },\n        engagement: {\n          prayerRequests: prayerRequestsRes.count || 0,\n          testimonials: testimonialsRes.count || 0,\n          galleryViews: 0, // Would need view tracking\n        },\n      });\n    } catch (error) {\n      console.error(\"Error loading analytics:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load analytics data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const processMonthlyData = (\n    items: any[],\n    dateField: string,\n    valueField?: string,\n  ) => {\n    const monthlyData: Record<string, { count: number; amount: number }> = {};\n\n    items.forEach((item) => {\n      const month = format(new Date(item[dateField]), \"MMM yyyy\");\n      if (!monthlyData[month]) {\n        monthlyData[month] = { count: 0, amount: 0 };\n      }\n      monthlyData[month].count += 1;\n      if (valueField && item[valueField]) {\n        monthlyData[month].amount += item[valueField];\n      }\n    });\n\n    return Object.entries(monthlyData).map(([month, data]) => ({\n      month,\n      count: data.count,\n      amount: data.amount,\n    }));\n  };\n\n  const processPurposeData = (donations: any[]) => {\n    const purposeData: Record<string, number> = {};\n    const total = donations.reduce((sum, d) => sum + d.amount, 0);\n\n    donations.forEach((donation) => {\n      const purpose = donation.purpose || \"General Fund\";\n      purposeData[purpose] = (purposeData[purpose] || 0) + donation.amount;\n    });\n\n    return Object.entries(purposeData).map(([purpose, amount]) => ({\n      purpose,\n      amount,\n      percentage: total > 0 ? Math.round((amount / total) * 100) : 0,\n    }));\n  };\n\n  const processTypeData = (members: any[], typeField: string) => {\n    const typeData: Record<string, number> = {};\n    const total = members.length;\n\n    members.forEach((member) => {\n      const type = member[typeField] || \"Regular\";\n      typeData[type] = (typeData[type] || 0) + 1;\n    });\n\n    return Object.entries(typeData).map(([type, count]) => ({\n      type,\n      count,\n      percentage: total > 0 ? Math.round((count / total) * 100) : 0,\n    }));\n  };\n\n  const calculateTrends = (items: any[], valueField?: string) => {\n    const now = new Date();\n    const thisMonthStart = startOfMonth(now);\n    const lastMonthStart = startOfMonth(subDays(now, 30));\n    const lastMonthEnd = endOfMonth(subDays(now, 30));\n\n    const thisMonth = items.filter(\n      (item) => new Date(item.created_at) >= thisMonthStart,\n    );\n    const lastMonth = items.filter((item) => {\n      const date = new Date(item.created_at);\n      return date >= lastMonthStart && date <= lastMonthEnd;\n    });\n\n    const thisMonthValue = valueField\n      ? thisMonth.reduce((sum, item) => sum + (item[valueField] || 0), 0)\n      : thisMonth.length;\n    const lastMonthValue = valueField\n      ? lastMonth.reduce((sum, item) => sum + (item[valueField] || 0), 0)\n      : lastMonth.length;\n\n    const growth =\n      lastMonthValue > 0\n        ? Math.round(((thisMonthValue - lastMonthValue) / lastMonthValue) * 100)\n        : 0;\n\n    return {\n      thisMonth: thisMonthValue,\n      lastMonth: lastMonthValue,\n      growth,\n    };\n  };\n\n  const exportData = () => {\n    if (!data) return;\n\n    const exportData = {\n      generatedAt: new Date().toISOString(),\n      timeRange,\n      summary: {\n        totalDonations: data.donations.total,\n        totalMembers: data.members.total,\n        totalEvents: data.events.total,\n        upcomingEvents: data.events.upcoming,\n      },\n      donations: data.donations,\n      members: data.members,\n      events: data.events,\n      engagement: data.engagement,\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `church-analytics-${format(new Date(), \"yyyy-MM-dd\")}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Success\",\n      description: \"Analytics data exported successfully\",\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-500\">No analytics data available</p>\n        <Button onClick={loadAnalyticsData} className=\"mt-4\">\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n            Analytics Dashboard\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Comprehensive insights into church operations\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-full sm:w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"3months\">Last 3 Months</SelectItem>\n              <SelectItem value=\"6months\">Last 6 Months</SelectItem>\n              <SelectItem value=\"12months\">Last 12 Months</SelectItem>\n            </SelectContent>\n          </Select>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={exportData}\n              variant=\"outline\"\n              className=\"flex-1 sm:flex-none\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Export Data</span>\n              <span className=\"sm:hidden\">Export</span>\n            </Button>\n            <Button\n              onClick={loadAnalyticsData}\n              variant=\"outline\"\n              className=\"flex-1 sm:flex-none\"\n            >\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Refresh</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Total Donations\"\n          value={`$${data.donations.total.toLocaleString()}`}\n          trend={data.donations.trends.growth}\n          icon={<DollarSign className=\"h-6 w-6\" />}\n          description=\"This month vs last month\"\n        />\n        <MetricCard\n          title=\"Active Members\"\n          value={data.members.total.toString()}\n          trend={data.members.trends.growth}\n          icon={<Users className=\"h-6 w-6\" />}\n          description=\"New registrations\"\n        />\n        <MetricCard\n          title=\"Upcoming Events\"\n          value={data.events.upcoming.toString()}\n          trend={0}\n          icon={<Calendar className=\"h-6 w-6\" />}\n          description=\"Scheduled events\"\n        />\n        <MetricCard\n          title=\"Prayer Requests\"\n          value={data.engagement.prayerRequests.toString()}\n          trend={0}\n          icon={<Heart className=\"h-6 w-6\" />}\n          description=\"Community engagement\"\n        />\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"donations\">Donations</TabsTrigger>\n          <TabsTrigger value=\"members\">Members</TabsTrigger>\n          <TabsTrigger value=\"engagement\">Engagement</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Donations Trend</CardTitle>\n                <CardDescription>Donation amounts over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={data.donations.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip formatter={(value) => [`$${value}`, \"Amount\"]} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"amount\"\n                      stroke=\"#7d2224\"\n                      fill=\"#7d2224\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Member Growth</CardTitle>\n                <CardDescription>New member registrations</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={data.members.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"count\"\n                      stroke=\"#d4af37\"\n                      strokeWidth={3}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"donations\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Donations by Purpose</CardTitle>\n                <CardDescription>How donations are allocated</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={data.donations.byPurpose}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ purpose, percentage }) =>\n                        `${purpose} (${percentage}%)`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"amount\"\n                    >\n                      {data.donations.byPurpose.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => [`$${value}`, \"Amount\"]} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Donation Trends</CardTitle>\n                <CardDescription>\n                  Amount and frequency over time\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={data.donations.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"amount\" fill=\"#7d2224\" />\n                    <Bar dataKey=\"count\" fill=\"#d4af37\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"members\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Membership Types</CardTitle>\n                <CardDescription>\n                  Distribution of membership categories\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={data.members.byType}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ type, percentage }) =>\n                        `${type} (${percentage}%)`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                    >\n                      {data.members.byType.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Member Registration Trends</CardTitle>\n                <CardDescription>New members over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={data.members.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"count\"\n                      stroke=\"#228b22\"\n                      fill=\"#228b22\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"engagement\" className=\"space-y-6\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Prayer Requests\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.engagement.prayerRequests}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Total submitted</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Testimonials\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.engagement.testimonials}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Community stories</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Events</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.events.total}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Total organized</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nfunction MetricCard({\n  title,\n  value,\n  trend,\n  icon,\n  description,\n}: {\n  title: string;\n  value: string;\n  trend: number;\n  icon: React.ReactNode;\n  description: string;\n}) {\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">\n          {title}\n        </CardTitle>\n        <div className=\"text-church-burgundy\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-church-burgundy\">{value}</div>\n        <div className=\"flex items-center mt-2\">\n          {trend !== 0 && (\n            <div\n              className={`flex items-center text-xs ${\n                trend > 0 ? \"text-green-600\" : \"text-red-600\"\n              }`}\n            >\n              {trend > 0 ? (\n                <TrendingUp className=\"h-3 w-3 mr-1\" />\n              ) : (\n                <TrendingDown className=\"h-3 w-3 mr-1\" />\n              )}\n              {Math.abs(trend)}%\n            </div>\n          )}\n          <p className=\"text-xs text-gray-500 ml-2\">{description}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Appointments.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAppointments'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadAppointments, statusFilter]","fix":{"range":[2293,2307],"text":"[loadAppointments, statusFilter]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  CalendarCheck,\n  Clock,\n  User,\n  Mail,\n  Phone,\n  MessageSquare,\n  CheckCircle,\n  XCircle,\n  Calendar,\n  RefreshCw,\n  Filter,\n} from \"lucide-react\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport LoadingState from \"@/components/LoadingState\";\nimport EmptyState from \"@/components/EmptyState\";\n\ninterface Appointment {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  service_title: string;\n  requested_date: string;\n  requested_time: string;\n  notes: string | null;\n  status: string;\n  admin_response: string | null;\n  admin_notes: string | null;\n  confirmed_date: string | null;\n  confirmed_time: string | null;\n  responded_by: string | null;\n  responded_at: string | null;\n  created_at: string;\n  updated_at: string;\n  responded_by_profile?: { email: string } | null;\n}\n\nexport default function Appointments() {\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedAppointment, setSelectedAppointment] =\n    useState<Appointment | null>(null);\n  const [responseDialog, setResponseDialog] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [currentUser, setCurrentUser] = useState<any>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAppointments();\n    getCurrentUser();\n  }, [statusFilter]);\n\n  const getCurrentUser = async () => {\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n    setCurrentUser(session?.user);\n  };\n\n  const loadAppointments = async () => {\n    try {\n      setLoading(true);\n      let data;\n      if (statusFilter === \"all\") {\n        data = await api.appointments.getAppointments();\n      } else {\n        data = await api.appointments.getAppointmentsByStatus(statusFilter);\n      }\n      setAppointments(data || []);\n    } catch (error) {\n      console.error(\"Error loading appointments:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load appointments\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResponse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!selectedAppointment || !currentUser) return;\n\n    const formData = new FormData(e.currentTarget);\n    const status = formData.get(\"status\") as string;\n    const admin_response = formData.get(\"admin_response\") as string;\n    const admin_notes = formData.get(\"admin_notes\") as string;\n    const confirmed_date = formData.get(\"confirmed_date\") as string;\n    const confirmed_time = formData.get(\"confirmed_time\") as string;\n\n    try {\n      await api.appointments.respondToAppointment(selectedAppointment.id, {\n        status,\n        admin_response,\n        admin_notes: admin_notes || undefined,\n        confirmed_date: confirmed_date || undefined,\n        confirmed_time: confirmed_time || undefined,\n        responded_by: currentUser.id,\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Response sent successfully\",\n      });\n\n      setResponseDialog(false);\n      setSelectedAppointment(null);\n      loadAppointments();\n    } catch (error) {\n      console.error(\"Error responding to appointment:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send response\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: {\n        variant: \"secondary\" as const,\n        icon: Clock,\n        color: \"text-yellow-600\",\n      },\n      approved: {\n        variant: \"default\" as const,\n        icon: CheckCircle,\n        color: \"text-green-600\",\n      },\n      rejected: {\n        variant: \"destructive\" as const,\n        icon: XCircle,\n        color: \"text-red-600\",\n      },\n      completed: {\n        variant: \"outline\" as const,\n        icon: CheckCircle,\n        color: \"text-blue-600\",\n      },\n    };\n\n    const config =\n      variants[status as keyof typeof variants] || variants.pending;\n    const Icon = config.icon;\n\n    return (\n      <Badge variant={config.variant} className=\"capitalize\">\n        <Icon className={`w-3 h-3 mr-1 ${config.color}`} />\n        {status}\n      </Badge>\n    );\n  };\n\n  const openResponseDialog = (appointment: Appointment) => {\n    setSelectedAppointment(appointment);\n    setResponseDialog(true);\n  };\n\n  if (loading) {\n    return <LoadingState message=\"Loading appointments...\" />;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-church-burgundy\">\n            Appointments\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Manage appointment requests from the services page\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-full sm:w-40\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"approved\">Approved</SelectItem>\n              <SelectItem value=\"rejected\">Rejected</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={loadAppointments} variant=\"outline\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {appointments.length === 0 ? (\n        <EmptyState\n          icon={CalendarCheck}\n          title=\"No appointments found\"\n          description=\"No appointment requests match the current filter.\"\n        />\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Appointment Requests</CardTitle>\n            <CardDescription>\n              {appointments.length} appointment\n              {appointments.length !== 1 ? \"s\" : \"\"} found\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Requester</TableHead>\n                    <TableHead>Service</TableHead>\n                    <TableHead>Requested Date/Time</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Submitted</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {appointments.map((appointment) => (\n                    <TableRow key={appointment.id}>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className=\"font-medium flex items-center\">\n                            <User className=\"w-4 h-4 mr-1\" />\n                            {appointment.name}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center\">\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            {appointment.email}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center\">\n                            <Phone className=\"w-3 h-3 mr-1\" />\n                            {appointment.phone}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">\n                          {appointment.service_title}\n                        </div>\n                        {appointment.notes && (\n                          <div className=\"text-sm text-gray-500 mt-1 flex items-start\">\n                            <MessageSquare className=\"w-3 h-3 mr-1 mt-0.5 flex-shrink-0\" />\n                            <span className=\"line-clamp-2\">\n                              {appointment.notes}\n                            </span>\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center text-sm\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {format(\n                              new Date(appointment.requested_date),\n                              \"MMM d, yyyy\",\n                            )}\n                          </div>\n                          <div className=\"flex items-center text-sm text-gray-500\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            {appointment.requested_time}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(appointment.status)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm text-gray-500\">\n                          {format(\n                            new Date(appointment.created_at),\n                            \"MMM d, yyyy HH:mm\",\n                          )}\n                        </div>\n                        {appointment.responded_at && (\n                          <div className=\"text-xs text-gray-400 mt-1\">\n                            Responded:{\" \"}\n                            {format(\n                              new Date(appointment.responded_at),\n                              \"MMM d, HH:mm\",\n                            )}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => openResponseDialog(appointment)}\n                          className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                        >\n                          {appointment.status === \"pending\"\n                            ? \"Respond\"\n                            : \"Update\"}\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Response Dialog */}\n      <Dialog open={responseDialog} onOpenChange={setResponseDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Respond to Appointment Request</DialogTitle>\n            <DialogDescription>\n              {selectedAppointment && (\n                <span>\n                  Responding to {selectedAppointment.name}'s request for{\" \"}\n                  {selectedAppointment.service_title}\n                </span>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAppointment && (\n            <form onSubmit={handleResponse} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    name=\"status\"\n                    defaultValue={selectedAppointment.status}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"approved\">Approved</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmed_date\">\n                    Confirmed Date (if approved)\n                  </Label>\n                  <Input\n                    id=\"confirmed_date\"\n                    name=\"confirmed_date\"\n                    type=\"date\"\n                    defaultValue={\n                      selectedAppointment.confirmed_date ||\n                      selectedAppointment.requested_date\n                    }\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmed_time\">\n                  Confirmed Time (if approved)\n                </Label>\n                <Input\n                  id=\"confirmed_time\"\n                  name=\"confirmed_time\"\n                  type=\"time\"\n                  defaultValue={\n                    selectedAppointment.confirmed_time ||\n                    selectedAppointment.requested_time\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"admin_response\">Response Message *</Label>\n                <Textarea\n                  id=\"admin_response\"\n                  name=\"admin_response\"\n                  placeholder=\"Enter your response to the appointment request...\"\n                  defaultValue={selectedAppointment.admin_response || \"\"}\n                  required\n                  rows={4}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"admin_notes\">Internal Notes (optional)</Label>\n                <Textarea\n                  id=\"admin_notes\"\n                  name=\"admin_notes\"\n                  placeholder=\"Internal notes for admin reference...\"\n                  defaultValue={selectedAppointment.admin_notes || \"\"}\n                  rows={3}\n                />\n              </div>\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setResponseDialog(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  Send Response\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/BulkOperations.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogDescription' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedItems' is assigned a value but never used.","line":67,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":77,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":78,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'handleBulkDelete' is assigned a value but never used.","line":227,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":227,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is assigned a value but never used.","line":284,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":284,"endColumn":21}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Upload,\n  Download,\n  Trash2,\n  Mail,\n  Users,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { api } from \"@/integrations/supabase/api\";\n\ninterface BulkOperation {\n  id: string;\n  type: \"import\" | \"export\" | \"delete\" | \"email\" | \"update\";\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\";\n  progress: number;\n  total: number;\n  message: string;\n  createdAt: Date;\n}\n\nexport default function BulkOperations() {\n  const [operations, setOperations] = useState<BulkOperation[]>([]);\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [bulkEmailContent, setBulkEmailContent] = useState({\n    subject: \"\",\n    content: \"\",\n  });\n  const [importData, setImportData] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState(\"members\");\n  const { toast } = useToast();\n\n  const handleFileUpload = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    type: string,\n  ) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const content = e.target?.result as string;\n      if (file.type === \"application/json\") {\n        setImportData(content);\n      } else if (file.type === \"text/csv\") {\n        // Convert CSV to JSON format\n        const lines = content.split(\"\\n\");\n        const headers = lines[0].split(\",\");\n        const jsonData = lines\n          .slice(1)\n          .map((line) => {\n            const values = line.split(\",\");\n            const obj: any = {};\n            headers.forEach((header, index) => {\n              obj[header.trim()] = values[index]?.trim();\n            });\n            return obj;\n          })\n          .filter((obj) => Object.values(obj).some((val) => val));\n        setImportData(JSON.stringify(jsonData, null, 2));\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const handleBulkImport = async (table: string) => {\n    if (!importData.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide data to import\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const data = JSON.parse(importData);\n      if (!Array.isArray(data)) {\n        throw new Error(\"Data must be an array\");\n      }\n\n      const operation: BulkOperation = {\n        id: Date.now().toString(),\n        type: \"import\",\n        status: \"running\",\n        progress: 0,\n        total: data.length,\n        message: `Importing ${data.length} ${table} records...`,\n        createdAt: new Date(),\n      };\n\n      setOperations((prev) => [...prev, operation]);\n\n      // Process in batches\n      const batchSize = 10;\n      let processed = 0;\n\n      for (let i = 0; i < data.length; i += batchSize) {\n        const batch = data.slice(i, i + batchSize);\n\n        const { error } = await supabase.from(table).insert(batch);\n\n        if (error) {\n          console.error(`Batch ${i / batchSize + 1} failed:`, error);\n        }\n\n        processed += batch.length;\n\n        // Update progress\n        setOperations((prev) =>\n          prev.map((op) =>\n            op.id === operation.id\n              ? {\n                  ...op,\n                  progress: processed,\n                  message: `Imported ${processed}/${data.length} records`,\n                }\n              : op,\n          ),\n        );\n      }\n\n      // Mark as completed\n      setOperations((prev) =>\n        prev.map((op) =>\n          op.id === operation.id\n            ? {\n                ...op,\n                status: \"completed\",\n                message: `Successfully imported ${processed} records`,\n              }\n            : op,\n        ),\n      );\n\n      toast({\n        title: \"Success\",\n        description: `Imported ${processed} ${table} records`,\n      });\n\n      setImportData(\"\");\n    } catch (error) {\n      console.error(\"Import error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to import data. Please check the format.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkExport = async (table: string) => {\n    try {\n      const { data, error } = await supabase.from(table).select(\"*\");\n\n      if (error) throw error;\n\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `${table}-export-${new Date().toISOString().split(\"T\")[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Success\",\n        description: `Exported ${data?.length || 0} ${table} records`,\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to export data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkDelete = async (table: string, ids: string[]) => {\n    if (ids.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"No items selected for deletion\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const { error } = await supabase.from(table).delete().in(\"id\", ids);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: `Deleted ${ids.length} ${table} records`,\n      });\n\n      setSelectedItems([]);\n    } catch (error) {\n      console.error(\"Delete error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete selected items\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkEmail = async () => {\n    if (!bulkEmailContent.subject || !bulkEmailContent.content) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide both subject and content\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Get all active email subscribers\n      const subscribers = await api.emailSubscribers.getSubscribers();\n      const activeSubscribers =\n        subscribers?.filter((s) => s.status === \"active\") || [];\n\n      if (activeSubscribers.length === 0) {\n        toast({\n          title: \"Warning\",\n          description: \"No active subscribers found\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Create email campaign\n      const campaign = await api.emailCampaigns.createCampaign({\n        name: `Bulk Email - ${new Date().toLocaleDateString()}`,\n        subject: bulkEmailContent.subject,\n        content: bulkEmailContent.content,\n        status: \"sent\",\n        recipient_count: activeSubscribers.length,\n        sent_count: activeSubscribers.length,\n        sent_at: new Date().toISOString(),\n      });\n\n      toast({\n        title: \"Success\",\n        description: `Email campaign created and sent to ${activeSubscribers.length} subscribers`,\n      });\n\n      setBulkEmailContent({ subject: \"\", content: \"\" });\n    } catch (error) {\n      console.error(\"Bulk email error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send bulk email\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n            Bulk Operations\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Manage data in bulk - import, export, and batch operations\n          </p>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"members\">Members</TabsTrigger>\n          <TabsTrigger value=\"events\">Events</TabsTrigger>\n          <TabsTrigger value=\"email\">Email Campaign</TabsTrigger>\n          <TabsTrigger value=\"operations\">Operations</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"members\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"h-5 w-5 mr-2\" />\n                  Import Members\n                </CardTitle>\n                <CardDescription>\n                  Upload member data from JSON or CSV files\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"member-file\">Upload File</Label>\n                  <Input\n                    id=\"member-file\"\n                    type=\"file\"\n                    accept=\".json,.csv\"\n                    onChange={(e) => handleFileUpload(e, \"members\")}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"member-data\">Or Paste JSON Data</Label>\n                  <Textarea\n                    id=\"member-data\"\n                    placeholder='[{\"full_name\": \"John Doe\", \"email\": \"john@example.com\", \"phone\": \"123-456-7890\"}]'\n                    value={importData}\n                    onChange={(e) => setImportData(e.target.value)}\n                    rows={8}\n                  />\n                </div>\n                <Button\n                  onClick={() => handleBulkImport(\"members\")}\n                  className=\"w-full\"\n                  disabled={!importData.trim()}\n                >\n                  Import Members\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Export Members\n                </CardTitle>\n                <CardDescription>\n                  Download all member data as JSON\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Export all member records including contact information,\n                  membership details, and registration dates.\n                </p>\n                <Button\n                  onClick={() => handleBulkExport(\"members\")}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export All Members\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"events\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"h-5 w-5 mr-2\" />\n                  Import Events\n                </CardTitle>\n                <CardDescription>\n                  Upload event data from JSON or CSV files\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event-file\">Upload File</Label>\n                  <Input\n                    id=\"event-file\"\n                    type=\"file\"\n                    accept=\".json,.csv\"\n                    onChange={(e) => handleFileUpload(e, \"events\")}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event-data\">Or Paste JSON Data</Label>\n                  <Textarea\n                    id=\"event-data\"\n                    placeholder='[{\"title\": \"Sunday Service\", \"event_date\": \"2024-01-01\", \"event_time\": \"10:00\", \"location\": \"Main Hall\"}]'\n                    value={importData}\n                    onChange={(e) => setImportData(e.target.value)}\n                    rows={8}\n                  />\n                </div>\n                <Button\n                  onClick={() => handleBulkImport(\"events\")}\n                  className=\"w-full\"\n                  disabled={!importData.trim()}\n                >\n                  Import Events\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Export Events\n                </CardTitle>\n                <CardDescription>\n                  Download all event data as JSON\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Export all event records including dates, times, locations,\n                  and descriptions.\n                </p>\n                <Button\n                  onClick={() => handleBulkExport(\"events\")}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export All Events\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"email\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"h-5 w-5 mr-2\" />\n                Bulk Email Campaign\n              </CardTitle>\n              <CardDescription>\n                Send emails to all active subscribers\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email-subject\">Subject</Label>\n                <Input\n                  id=\"email-subject\"\n                  placeholder=\"Enter email subject\"\n                  value={bulkEmailContent.subject}\n                  onChange={(e) =>\n                    setBulkEmailContent((prev) => ({\n                      ...prev,\n                      subject: e.target.value,\n                    }))\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email-content\">Content</Label>\n                <Textarea\n                  id=\"email-content\"\n                  placeholder=\"Enter email content...\"\n                  value={bulkEmailContent.content}\n                  onChange={(e) =>\n                    setBulkEmailContent((prev) => ({\n                      ...prev,\n                      content: e.target.value,\n                    }))\n                  }\n                  rows={10}\n                />\n              </div>\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                <div className=\"flex items-center\">\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-600 mr-2\" />\n                  <p className=\"text-sm text-yellow-800\">\n                    This will send the email to all active subscribers. Make\n                    sure to review the content carefully.\n                  </p>\n                </div>\n              </div>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    className=\"w-full\"\n                    disabled={\n                      !bulkEmailContent.subject || !bulkEmailContent.content\n                    }\n                  >\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Send Bulk Email\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Confirm Bulk Email</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to send this email to all active\n                      subscribers? This action cannot be undone.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleBulkEmail}>\n                      Send Email\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"operations\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Operation History</CardTitle>\n              <CardDescription>\n                Track the status of bulk operations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {operations.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">No operations yet</p>\n                  <p className=\"text-sm text-gray-400 mt-1\">\n                    Bulk operations will appear here when you perform them\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {operations.map((operation) => (\n                    <div key={operation.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          {operation.status === \"completed\" ? (\n                            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                          ) : operation.status === \"failed\" ? (\n                            <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                          ) : (\n                            <div className=\"h-5 w-5 border-2 border-church-burgundy border-t-transparent rounded-full animate-spin\" />\n                          )}\n                          <span className=\"font-medium capitalize\">\n                            {operation.type} Operation\n                          </span>\n                        </div>\n                        <span className=\"text-sm text-gray-500\">\n                          {operation.createdAt.toLocaleString()}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {operation.message}\n                      </p>\n                      {operation.total > 0 && (\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-church-burgundy h-2 rounded-full transition-all duration-300\"\n                            style={{\n                              width: `${(operation.progress / operation.total) * 100}%`,\n                            }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/ContentScheduler.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAndPublishContent'. Either include it or remove the dependency array.","line":112,"column":6,"nodeType":"ArrayExpression","endLine":112,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAndPublishContent]","fix":{"range":[2876,2878],"text":"[checkAndPublishContent]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'UserPlus' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'useDataContext' is defined but never used.","line":49,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":100,"column":6,"nodeType":"ArrayExpression","endLine":100,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboardData]","fix":{"range":[2602,2604],"text":"[loadDashboardData]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":288,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":288,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":343,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":343,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":408,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":408,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":473,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":473,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":1035,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":1035,"endColumn":14}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Calendar,\n  Image,\n  Users,\n  DollarSign,\n  MessageSquare,\n  Heart,\n  TrendingUp,\n  Activity,\n  UserPlus,\n  Shield,\n  Plus,\n  Upload,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport AdminSyncStatus from \"@/components/AdminSyncStatus\";\nimport AuditLog from \"@/components/AuditLog\";\nimport ErrorDiagnostics from \"@/components/ErrorDiagnostics\";\nimport { useDataContext } from \"@/contexts/DataContext\";\nimport {\n  AdminDiagnostics,\n  type DiagnosticResult,\n} from \"@/utils/adminDiagnostics\";\n\ninterface DashboardStats {\n  totalEvents: number;\n  totalMembers: number;\n  totalDonations: number;\n  totalTestimonials: number;\n  totalPrayerRequests: number;\n  recentDonationAmount: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  type:\n    | \"event\"\n    | \"member\"\n    | \"donation\"\n    | \"testimonial\"\n    | \"prayer_request\";\n  title: string;\n  description: string;\n  created_at: string;\n}\n\nexport default function Dashboard() {\n  const [stats, setStats] = useState<DashboardStats>({\n    totalEvents: 0,\n    totalMembers: 0,\n    totalDonations: 0,\n    totalTestimonials: 0,\n    totalPrayerRequests: 0,\n    recentDonationAmount: 0,\n  });\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogLoading, setDialogLoading] = useState(false);\n  const [openDialog, setOpenDialog] = useState<string | null>(null);\n  const [diagnostics, setDiagnostics] = useState<DiagnosticResult[]>([]);\n  const [runningDiagnostics, setRunningDiagnostics] = useState(false);\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  // Data context for sync operations\n  // const { forceSync } = useDataContext(); // Commented to prevent infinite loops\n\n  useEffect(() => {\n    loadDashboardData();\n    runDiagnostics();\n  }, []);\n\n  const runDiagnostics = async () => {\n    setRunningDiagnostics(true);\n    try {\n      const results = await AdminDiagnostics.runFullDiagnostics();\n      setDiagnostics(results);\n    } catch (error) {\n      console.error(\"Diagnostics failed:\", error);\n    } finally {\n      setRunningDiagnostics(false);\n    }\n  };\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      console.log(\"Loading dashboard data...\");\n\n      // Load statistics from all tables with error handling for each\n      const results = await Promise.allSettled([\n        supabase.from(\"events\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"members\").select(\"*\", { count: \"exact\", head: true }),\n        supabase\n          .from(\"donations\")\n          .select(\"amount, created_at\")\n          .order(\"created_at\", { ascending: false }),\n        supabase\n          .from(\"testimonials\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabase\n          .from(\"prayer_requests\")\n          .select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n      // Extract results with fallbacks\n      const [\n        eventsRes,\n        membersRes,\n        donationsRes,\n        testimonialsRes,\n        prayerRequestsRes,\n      ] = results.map((result, index) => {\n        const tableNames = [\n          \"events\",\n          \"members\",\n          \"donations\",\n          \"testimonials\",\n          \"prayer_requests\",\n        ];\n        if (result.status === \"rejected\") {\n          console.error(\n            `Dashboard data load failed for ${tableNames[index]}:`,\n            result.reason,\n          );\n          toast({\n            title: \"Warning\",\n            description: `Failed to load ${tableNames[index]} data`,\n            variant: \"destructive\",\n          });\n          return { data: null, count: 0, error: result.reason };\n        }\n        return result.value;\n      });\n\n      // Calculate recent donation amount (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const recentDonations =\n        donationsRes?.data?.filter(\n          (d) => d?.created_at && new Date(d.created_at) >= thirtyDaysAgo,\n        ) || [];\n\n      const recentDonationAmount = recentDonations.reduce(\n        (sum, d) => sum + (d?.amount || 0),\n        0,\n      );\n\n      setStats({\n        totalEvents: eventsRes?.count || 0,\n        totalMembers: membersRes?.count || 0,\n        totalDonations: donationsRes?.data?.length || 0,\n        totalTestimonials: testimonialsRes?.count || 0,\n        totalPrayerRequests: prayerRequestsRes?.count || 0,\n        recentDonationAmount,\n      });\n\n      // Load recent activity\n      await loadRecentActivity();\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load dashboard data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadRecentActivity = async () => {\n    try {\n      const activities: RecentActivity[] = [];\n\n      // Get recent events with error handling\n      try {\n        const { data: events, error: eventsError } = await supabase\n          .from(\"events\")\n          .select(\"id, title, description, created_at\")\n          .order(\"created_at\", { ascending: false })\n          .limit(3);\n\n        if (eventsError) {\n          console.error(\"Error loading recent events:\", eventsError);\n        } else if (events && Array.isArray(events)) {\n          events.forEach((event) => {\n            if (event?.id && event?.title && event?.created_at) {\n              activities.push({\n                id: event.id,\n                type: \"event\",\n                title: `New Event: ${event.title}`,\n                description: event.description || \"No description\",\n                created_at: event.created_at,\n              });\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to load recent events:\", error);\n      }\n\n      // Get recent members with error handling\n      try {\n        const { data: members, error: membersError } = await supabase\n          .from(\"members\")\n          .select(\"id, full_name, created_at\")\n          .order(\"created_at\", { ascending: false })\n          .limit(3);\n\n        if (membersError) {\n          console.error(\"Error loading recent members:\", membersError);\n        } else if (members && Array.isArray(members)) {\n          members.forEach((member) => {\n            if (member?.id && member?.full_name && member?.created_at) {\n              activities.push({\n                id: member.id,\n                type: \"member\",\n                title: `New Member: ${member.full_name}`,\n                description: \"Joined the church community\",\n                created_at: member.created_at,\n              });\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to load recent members:\", error);\n      }\n\n      // Sort by creation date and take the most recent 6\n      activities.sort(\n        (a, b) =>\n          new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),\n      );\n      setRecentActivity(activities.slice(0, 6));\n    } catch (error) {\n      console.error(\"Error loading recent activity:\", error);\n    }\n  };\n\n  const getActivityIcon = (type: RecentActivity[\"type\"]) => {\n    switch (type) {\n      case \"event\":\n        return <Calendar className=\"h-4 w-4\" />;\n      case \"member\":\n        return <Users className=\"h-4 w-4\" />;\n      case \"donation\":\n        return <DollarSign className=\"h-4 w-4\" />;\n      case \"testimonial\":\n        return <MessageSquare className=\"h-4 w-4\" />;\n      case \"prayer_request\":\n        return <Heart className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  const handleCreateEvent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const eventData = {\n        title: formData.get(\"title\") as string,\n        description: formData.get(\"description\") as string,\n        event_date: formData.get(\"event_date\") as string,\n        event_time: (formData.get(\"event_time\") as string) || null,\n        location: (formData.get(\"location\") as string) || null,\n        is_featured: false,\n        image_url: null,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating event with data:\", eventData);\n\n      const { data, error } = await supabase\n        .from(\"events\")\n        .insert([eventData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error(\"Supabase error:\", error);\n        throw error;\n      }\n\n      console.log(\"Event created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to create event: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  const handleCreateMember = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const fullName = formData.get(\"full_name\") as string;\n      const nameParts = fullName.trim().split(\" \");\n      const firstName = nameParts[0] || \"\";\n      const lastName = nameParts.slice(1).join(\" \") || \"\";\n\n      const memberData = {\n        full_name: fullName,\n        email: (formData.get(\"email\") as string) || null,\n        phone: (formData.get(\"phone\") as string) || null,\n        address: (formData.get(\"address\") as string) || null,\n        membership_type:\n          (formData.get(\"membership_type\") as string) || \"regular\",\n        membership_status: \"active\",\n        join_date: new Date().toISOString(),\n        membership_date: new Date().toISOString(),\n        registration_date: new Date().toISOString().split(\"T\")[0],\n        first_name: firstName,\n        last_name: lastName,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating member with data:\", memberData);\n\n      const { data, error } = await supabase\n        .from(\"members\")\n        .insert([memberData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error(\"Supabase error:\", error);\n        throw error;\n      }\n\n      console.log(\"Member created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description: \"Member added successfully\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n    } catch (error) {\n      console.error(\"Error creating member:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to add member: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  const handleCreateAdmin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const email = formData.get(\"email\") as string;\n\n      // Check if admin already exists\n      const { data: existingAdmin } = await supabase\n        .from(\"profiles\")\n        .select(\"id\")\n        .eq(\"email\", email)\n        .single();\n\n      if (existingAdmin) {\n        throw new Error(\"Admin with this email already exists\");\n      }\n\n      const adminData = {\n        id: crypto.randomUUID(),\n        email: email,\n        role: \"admin\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating admin with data:\", adminData);\n\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .insert([adminData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error(\"Supabase error:\", error);\n        throw error;\n      }\n\n      console.log(\"Admin created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description:\n          \"Admin user created successfully. They can now register with this email.\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n    } catch (error) {\n      console.error(\"Error creating admin:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to create admin user: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  const handleUploadImage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n    const file = formData.get(\"file\") as File;\n\n    if (!file) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a file\",\n        variant: \"destructive\",\n      });\n      setDialogLoading(false);\n      return;\n    }\n\n    // Validate file type\n    if (!file.type.startsWith(\"image/\")) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a valid image file\",\n        variant: \"destructive\",\n      });\n      setDialogLoading(false);\n      return;\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"Error\",\n        description: \"File size must be less than 5MB\",\n        variant: \"destructive\",\n      });\n      setDialogLoading(false);\n      return;\n    }\n\n    try {\n      console.log(\"Starting image upload:\", file.name, file.size, file.type);\n\n      // Upload file to storage bucket\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;\n      const filePath = `gallery/${fileName}`;\n\n      const { data: uploadData, error: uploadError } = await supabase.storage\n        .from(\"images\")\n        .upload(filePath, file, {\n          cacheControl: \"3600\",\n          upsert: false,\n        });\n\n      if (uploadError) {\n        console.error(\"Upload error:\", uploadError);\n        throw uploadError;\n      }\n\n      console.log(\"File uploaded successfully:\", uploadData);\n\n      // Get the public URL\n      const {\n        data: { publicUrl },\n      } = supabase.storage.from(\"images\").getPublicUrl(filePath);\n\n      console.log(\"Public URL:\", publicUrl);\n\n      // Create database entry\n      const galleryData = {\n        title: formData.get(\"title\") as string,\n        description: (formData.get(\"description\") as string) || null,\n        image_url: publicUrl,\n        created_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating gallery entry:\", galleryData);\n\n      const { data, error: dbError } = await supabase\n        .from(\"gallery\")\n        .insert([galleryData])\n        .select()\n        .single();\n\n      if (dbError) {\n        console.error(\"Database error:\", dbError);\n        throw dbError;\n      }\n\n      console.log(\"Gallery entry created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description: \"Image uploaded successfully\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to upload image: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n          Admin Dashboard\n        </h1>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={loadDashboardData}\n            variant=\"outline\"\n            className=\"w-full sm:w-auto\"\n          >\n            Refresh Data\n          </Button>\n          <Button\n            onClick={runDiagnostics}\n            variant=\"outline\"\n            disabled={runningDiagnostics}\n            className=\"w-full sm:w-auto\"\n          >\n            {runningDiagnostics ? \"Running...\" : \"Run Diagnostics\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <StatsCard\n          title=\"Total Events\"\n          value={stats.totalEvents.toString()}\n          description=\"Scheduled events\"\n          icon={<Calendar className=\"h-6 w-6\" />}\n          trend=\"+2 this month\"\n        />\n        <StatsCard\n          title=\"Church Members\"\n          value={stats.totalMembers.toString()}\n          description=\"Registered members\"\n          icon={<Users className=\"h-6 w-6\" />}\n          trend=\"+5 this month\"\n        />\n        <StatsCard\n          title=\"Recent Donations\"\n          value={`$${stats.recentDonationAmount.toLocaleString()}`}\n          description=\"Last 30 days\"\n          icon={<DollarSign className=\"h-6 w-6\" />}\n          trend=\"+12% from last month\"\n        />\n        <StatsCard\n          title=\"Prayer Requests\"\n          value={stats.totalPrayerRequests.toString()}\n          description=\"Pending requests\"\n          icon={<Heart className=\"h-6 w-6\" />}\n          trend=\"3 new today\"\n        />\n      </div>\n\n      {/* Secondary Stats */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <StatsCard\n          title=\"Testimonials\"\n          value={stats.totalTestimonials.toString()}\n          description=\"Approved testimonials\"\n          icon={<MessageSquare className=\"h-6 w-6\" />}\n          trend=\"2 pending approval\"\n        />\n        <StatsCard\n          title=\"Total Donations\"\n          value={stats.totalDonations.toString()}\n          description=\"All time donations\"\n          icon={<TrendingUp className=\"h-6 w-6\" />}\n          trend=\"Growing steadily\"\n        />\n      </div>\n\n      {/* Recent Activity, Quick Actions, and Sync Status */}\n      <div className=\"grid gap-4 lg:grid-cols-3\">\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n            <CardDescription>\n              Latest updates across the platform\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {recentActivity.length > 0 ? (\n                recentActivity.map((activity) => (\n                  <div\n                    key={activity.id}\n                    className=\"flex items-start space-x-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors\"\n                  >\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 line-clamp-1\">\n                        {activity.title}\n                      </p>\n                      <p className=\"text-sm text-gray-500 line-clamp-2\">\n                        {activity.description}\n                      </p>\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        {format(\n                          new Date(activity.created_at),\n                          \"MMM d, yyyy h:mm a\",\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-gray-500 text-center py-4\">\n                  No recent activity\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>Common administrative tasks</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-3\">\n              {/* Create Event Dialog */}\n              <Dialog\n                open={openDialog === \"event\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"event\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Create New Event\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Event</DialogTitle>\n                    <DialogDescription>\n                      Add a new church event\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateEvent} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"title\">Event Title</Label>\n                      <Input id=\"title\" name=\"title\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea id=\"description\" name=\"description\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"event_date\">Date</Label>\n                      <Input\n                        id=\"event_date\"\n                        name=\"event_date\"\n                        type=\"date\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"event_time\">Time</Label>\n                      <Input id=\"event_time\" name=\"event_time\" type=\"time\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"location\">Location</Label>\n                      <Input id=\"location\" name=\"location\" />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Creating...\" : \"Create Event\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Add Member Dialog */}\n              <Dialog\n                open={openDialog === \"member\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"member\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    Add New Member\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Member</DialogTitle>\n                    <DialogDescription>\n                      Register a new church member\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateMember} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"full_name\">Full Name</Label>\n                      <Input id=\"full_name\" name=\"full_name\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input id=\"email\" name=\"email\" type=\"email\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"phone\">Phone</Label>\n                      <Input id=\"phone\" name=\"phone\" type=\"tel\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"address\">Address</Label>\n                      <Input id=\"address\" name=\"address\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"membership_type\">Membership Type</Label>\n                      <Select name=\"membership_type\" defaultValue=\"regular\">\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select membership type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"regular\">Regular</SelectItem>\n                          <SelectItem value=\"student\">Student</SelectItem>\n                          <SelectItem value=\"senior\">Senior</SelectItem>\n                          <SelectItem value=\"family\">Family</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Adding...\" : \"Add Member\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Add Admin Dialog */}\n              <Dialog\n                open={openDialog === \"admin\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"admin\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Add New Admin\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Admin</DialogTitle>\n                    <DialogDescription>\n                      Create a new admin user\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateAdmin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"admin_email\">Email</Label>\n                      <Input\n                        id=\"admin_email\"\n                        name=\"email\"\n                        type=\"email\"\n                        required\n                      />\n                    </div>\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                      <p className=\"text-sm text-yellow-800\">\n                        <strong>Note:</strong> The admin will need to register\n                        with this email address using the admin registration\n                        process.\n                      </p>\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Creating...\" : \"Create Admin\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Upload Image Dialog */}\n              <Dialog\n                open={openDialog === \"image\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"image\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Image className=\"h-4 w-4 mr-2\" />\n                    Upload Gallery Image\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Upload Gallery Image</DialogTitle>\n                    <DialogDescription>\n                      Add a new image to the gallery\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleUploadImage} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"file\">Image File</Label>\n                      <Input\n                        id=\"file\"\n                        name=\"file\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"image_title\">Title</Label>\n                      <Input id=\"image_title\" name=\"title\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"image_description\">Description</Label>\n                      <Textarea id=\"image_description\" name=\"description\" />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Uploading...\" : \"Upload Image\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Navigation Actions */}\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/analytics\")}\n              >\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\n                View Analytics\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/bulk-operations\")}\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Bulk Operations\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/testimonials\")}\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Review Testimonials\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/prayer-requests\")}\n              >\n                <Heart className=\"h-4 w-4 mr-2\" />\n                View Prayer Requests\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sync Status Panel */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Status</CardTitle>\n              <CardDescription>Real-time sync and git status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <AdminSyncStatus />\n            </CardContent>\n          </Card>\n\n          <ErrorDiagnostics />\n\n          {/* System Diagnostics */}\n          <Card>\n            <CardHeader>\n              <CardTitle>System Diagnostics</CardTitle>\n              <CardDescription>Component health status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {diagnostics.length > 0 ? (\n                  diagnostics.map((result, index) => (\n                    <div\n                      key={index}\n                      className={`flex items-center justify-between p-2 rounded text-sm ${\n                        result.status === \"success\"\n                          ? \"bg-green-50 text-green-800\"\n                          : result.status === \"warning\"\n                            ? \"bg-yellow-50 text-yellow-800\"\n                            : \"bg-red-50 text-red-800\"\n                      }`}\n                    >\n                      <span className=\"font-medium\">{result.component}</span>\n                      <span className=\"text-xs\">{result.message}</span>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-gray-500 text-center py-4\">\n                    {runningDiagnostics\n                      ? \"Running diagnostics...\"\n                      : \"No diagnostics run yet\"}\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Audit Log Section */}\n      <div className=\"mt-8\">\n        <AuditLog />\n      </div>\n    </div>\n  );\n}\n\nfunction StatsCard({\n  title,\n  value,\n  description,\n  icon,\n  trend,\n}: {\n  title: string;\n  value: string;\n  description: string;\n  icon: React.ReactNode;\n  trend?: string;\n}) {\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">\n          {title}\n        </CardTitle>\n        <div className=\"text-church-burgundy\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-church-burgundy\">{value}</div>\n        <p className=\"text-xs text-gray-500 mt-1\">{description}</p>\n        {trend && (\n          <p className=\"text-xs text-green-600 mt-2 flex items-center\">\n            <TrendingUp className=\"h-3 w-3 mr-1\" />\n            {trend}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Donations.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDonations'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadDonations]","fix":{"range":[1864,1866],"text":"[loadDonations]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterDonations'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":69,"suggestions":[{"desc":"Update the dependencies array to be: [donations, searchTerm, statusFilter, purposeFilter, dateRange, filterDonations]","fix":{"range":[1918,1981],"text":"[donations, searchTerm, statusFilter, purposeFilter, dateRange, filterDonations]"}}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  safeDataLoader,\n  logAdminAction,\n  formatErrorMessage,\n} from \"@/utils/adminHelpers\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Search,\n  DollarSign,\n  TrendingUp,\n  Users,\n  Calendar,\n  Download,\n  Filter,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Donation {\n  id: string;\n  amount: number;\n  donor_email: string;\n  donor_name: string | null;\n  purpose: string;\n  payment_status: string;\n  payment_id: string | null;\n  payment_method: string | null;\n  is_anonymous: boolean;\n  created_at: string;\n}\n\nexport default function AdminDonations() {\n  const [donations, setDonations] = useState<Donation[]>([]);\n  const [filteredDonations, setFilteredDonations] = useState<Donation[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [purposeFilter, setPurposeFilter] = useState(\"all\");\n  const [dateRange, setDateRange] = useState({ from: \"\", to: \"\" });\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadDonations();\n  }, []);\n\n  useEffect(() => {\n    filterDonations();\n  }, [donations, searchTerm, statusFilter, purposeFilter, dateRange]);\n\n  const loadDonations = async () => {\n    setLoading(true);\n\n    const { data, error } = await safeDataLoader(\n      () =>\n        supabase\n          .from(\"donations\")\n          .select(\"*\")\n          .order(\"created_at\", { ascending: false }),\n      \"donations\",\n    );\n\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: formatErrorMessage(error, \"Failed to load donations\"),\n        variant: \"destructive\",\n      });\n      setDonations([]);\n    } else {\n      // Ensure data has proper structure\n      const processedData = data.map((donation) => ({\n        ...donation,\n        amount: Number(donation.amount) || 0,\n        payment_status: donation.payment_status || \"pending\",\n        is_anonymous: Boolean(donation.is_anonymous),\n        donor_name: donation.donor_name || null,\n        donor_email: donation.donor_email || \"\",\n        purpose: donation.purpose || \"general_fund\",\n      }));\n\n      setDonations(processedData);\n      logAdminAction(\"load\", \"donations\", { count: processedData.length });\n    }\n\n    setLoading(false);\n  };\n\n  const filterDonations = () => {\n    let filtered = donations;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (donation) =>\n          donation.donor_email\n            ?.toLowerCase()\n            .includes(searchTerm.toLowerCase()) ||\n          donation.donor_name\n            ?.toLowerCase()\n            .includes(searchTerm.toLowerCase()) ||\n          donation.purpose.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Status filter\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(\n        (donation) => donation.payment_status === statusFilter,\n      );\n    }\n\n    // Purpose filter\n    if (purposeFilter !== \"all\") {\n      filtered = filtered.filter(\n        (donation) => donation.purpose === purposeFilter,\n      );\n    }\n\n    // Date range filter\n    if (dateRange.from) {\n      filtered = filtered.filter(\n        (donation) => new Date(donation.created_at) >= new Date(dateRange.from),\n      );\n    }\n    if (dateRange.to) {\n      filtered = filtered.filter(\n        (donation) => new Date(donation.created_at) <= new Date(dateRange.to),\n      );\n    }\n\n    setFilteredDonations(filtered);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <Badge className=\"bg-green-100 text-green-800\">Completed</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\n      case \"failed\":\n        return <Badge className=\"bg-red-100 text-red-800\">Failed</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getPurposeLabel = (purpose: string) => {\n    return purpose\n      .split(\"_\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \");\n  };\n\n  const calculateStats = () => {\n    const completedDonations = donations.filter(\n      (d) => d.payment_status === \"completed\",\n    );\n    const totalAmount = completedDonations.reduce(\n      (sum, d) => sum + d.amount,\n      0,\n    );\n    const averageAmount =\n      completedDonations.length > 0\n        ? totalAmount / completedDonations.length\n        : 0;\n    const thisMonthDonations = completedDonations.filter(\n      (d) => new Date(d.created_at).getMonth() === new Date().getMonth(),\n    );\n    const thisMonthAmount = thisMonthDonations.reduce(\n      (sum, d) => sum + d.amount,\n      0,\n    );\n\n    return {\n      totalAmount,\n      averageAmount,\n      totalDonations: completedDonations.length,\n      thisMonthAmount,\n      thisMonthCount: thisMonthDonations.length,\n    };\n  };\n\n  const exportDonations = () => {\n    const csvContent = [\n      [\n        \"Date\",\n        \"Donor Name\",\n        \"Email\",\n        \"Amount\",\n        \"Purpose\",\n        \"Status\",\n        \"Payment Method\",\n      ],\n      ...filteredDonations.map((donation) => [\n        format(new Date(donation.created_at), \"yyyy-MM-dd HH:mm\"),\n        donation.is_anonymous ? \"Anonymous\" : donation.donor_name || \"N/A\",\n        donation.is_anonymous ? \"Anonymous\" : donation.donor_email,\n        `$${donation.amount.toFixed(2)}`,\n        getPurposeLabel(donation.purpose),\n        donation.payment_status,\n        donation.payment_method || \"N/A\",\n      ]),\n    ]\n      .map((row) => row.join(\",\"))\n      .join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `donations-${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const stats = calculateStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Donations Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Track and manage church donations and contributions\n          </p>\n        </div>\n        <Button onClick={exportDonations} variant=\"outline\">\n          <Download className=\"w-4 h-4 mr-2\" />\n          Export CSV\n        </Button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <DollarSign className=\"w-4 h-4 mr-2\" />\n              Total Donations\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              ${stats.totalAmount.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.totalDonations} completed donations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Average Donation\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              ${stats.averageAmount.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-gray-500\">Per donation</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              This Month\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              ${stats.thisMonthAmount.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.thisMonthCount} donations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Unique Donors\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {new Set(donations.map((d) => d.donor_email)).size}\n            </div>\n            <p className=\"text-xs text-gray-500\">Total donors</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search donations...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status\">Status</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"purpose\">Purpose</Label>\n              <Select value={purposeFilter} onValueChange={setPurposeFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Purposes</SelectItem>\n                  <SelectItem value=\"general_fund\">General Fund</SelectItem>\n                  <SelectItem value=\"building_fund\">Building Fund</SelectItem>\n                  <SelectItem value=\"youth_programs\">Youth Programs</SelectItem>\n                  <SelectItem value=\"membership_fee\">Membership Fee</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dateFrom\">From Date</Label>\n              <Input\n                id=\"dateFrom\"\n                type=\"date\"\n                value={dateRange.from}\n                onChange={(e) =>\n                  setDateRange((prev) => ({ ...prev, from: e.target.value }))\n                }\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dateTo\">To Date</Label>\n              <Input\n                id=\"dateTo\"\n                type=\"date\"\n                value={dateRange.to}\n                onChange={(e) =>\n                  setDateRange((prev) => ({ ...prev, to: e.target.value }))\n                }\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Donations Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Donations ({filteredDonations.length})</CardTitle>\n          <CardDescription>Manage and track all donations</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Donor</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Purpose</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Payment Method</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredDonations.map((donation) => (\n                  <TableRow key={donation.id}>\n                    <TableCell>\n                      {format(\n                        new Date(donation.created_at),\n                        \"MMM d, yyyy HH:mm\",\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">\n                          {donation.is_anonymous\n                            ? \"Anonymous\"\n                            : donation.donor_name || \"N/A\"}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {donation.is_anonymous ? \"\" : donation.donor_email}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      ${donation.amount.toFixed(2)}\n                    </TableCell>\n                    <TableCell>{getPurposeLabel(donation.purpose)}</TableCell>\n                    <TableCell>\n                      {getStatusBadge(donation.payment_status)}\n                    </TableCell>\n                    <TableCell>\n                      {donation.payment_method\n                        ? donation.payment_method.charAt(0).toUpperCase() +\n                          donation.payment_method.slice(1)\n                        : \"N/A\"}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredDonations.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No donations found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/EmailMarketing.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":17,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadData]","fix":{"range":[1121,1123],"text":"[loadData]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Mail, Users, Send, Eye } from \"lucide-react\";\n\nexport default function EmailMarketing() {\n  const [subscribers, setSubscribers] = useState([]);\n  const [campaigns, setCampaigns] = useState([]);\n  const [templates, setTemplates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [sending, setSending] = useState(false);\n  const { toast } = useToast();\n\n  const [newCampaign, setNewCampaign] = useState({\n    name: \"\",\n    subject: \"\",\n    content: \"\",\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      const [subscribersData, campaignsData, templatesData] = await Promise.all(\n        [\n          supabase\n            .from(\"newsletter_subscribers\")\n            .select(\"*\")\n            .eq(\"subscribed\", true),\n          supabase\n            .from(\"email_campaigns\")\n            .select(\"*\")\n            .order(\"created_at\", { ascending: false }),\n          supabase\n            .from(\"email_templates\")\n            .select(\"*\")\n            .eq(\"template_type\", \"newsletter\"),\n        ],\n      );\n\n      if (subscribersData.data) setSubscribers(subscribersData.data);\n      if (campaignsData.data) setCampaigns(campaignsData.data);\n      if (templatesData.data) setTemplates(templatesData.data);\n    } catch (error) {\n      console.error(\"Error loading data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load email marketing data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendCampaign = async () => {\n    if (!newCampaign.name || !newCampaign.subject || !newCampaign.content) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSending(true);\n    try {\n      // Create campaign record\n      const { data: campaign, error: campaignError } = await supabase\n        .from(\"email_campaigns\")\n        .insert({\n          name: newCampaign.name,\n          subject: newCampaign.subject,\n          content: newCampaign.content,\n          status: \"sending\",\n          recipient_count: subscribers.length,\n        })\n        .select()\n        .single();\n\n      if (campaignError) throw campaignError;\n\n      // Send emails\n      const { error: emailError } = await supabase.functions.invoke(\n        \"send-email\",\n        {\n          body: {\n            type: \"newsletter\",\n            data: {\n              content: newCampaign.content,\n            },\n            recipients: subscribers.map((sub: any) => sub.email),\n          },\n        },\n      );\n\n      if (emailError) throw emailError;\n\n      // Update campaign status\n      await supabase\n        .from(\"email_campaigns\")\n        .update({\n          status: \"sent\",\n          sent_at: new Date().toISOString(),\n          sent_count: subscribers.length,\n        })\n        .eq(\"id\", campaign.id);\n\n      toast({\n        title: \"Success\",\n        description: `Newsletter sent to ${subscribers.length} subscribers`,\n      });\n\n      setNewCampaign({ name: \"\", subject: \"\", content: \"\" });\n      loadData();\n    } catch (error) {\n      console.error(\"Error sending campaign:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send newsletter\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSending(false);\n    }\n  };\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Email Marketing</h1>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Total Subscribers\n            </CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{subscribers.length}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Campaigns Sent\n            </CardTitle>\n            <Send className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {campaigns.filter((c) => c.status === \"sent\").length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Email Templates\n            </CardTitle>\n            <Mail className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{templates.length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"campaign\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"campaign\">Create Campaign</TabsTrigger>\n          <TabsTrigger value=\"subscribers\">Subscribers</TabsTrigger>\n          <TabsTrigger value=\"history\">Campaign History</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"campaign\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Create Newsletter Campaign</CardTitle>\n              <CardDescription>\n                Send a newsletter to all subscribers\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"campaignName\">Campaign Name</Label>\n                <Input\n                  id=\"campaignName\"\n                  value={newCampaign.name}\n                  onChange={(e) =>\n                    setNewCampaign((prev) => ({\n                      ...prev,\n                      name: e.target.value,\n                    }))\n                  }\n                  placeholder=\"e.g., Monthly Newsletter - January 2024\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subject\">Email Subject</Label>\n                <Input\n                  id=\"subject\"\n                  value={newCampaign.subject}\n                  onChange={(e) =>\n                    setNewCampaign((prev) => ({\n                      ...prev,\n                      subject: e.target.value,\n                    }))\n                  }\n                  placeholder=\"Newsletter subject line\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"content\">Email Content</Label>\n                <Textarea\n                  id=\"content\"\n                  rows={10}\n                  value={newCampaign.content}\n                  onChange={(e) =>\n                    setNewCampaign((prev) => ({\n                      ...prev,\n                      content: e.target.value,\n                    }))\n                  }\n                  placeholder=\"Newsletter content...\"\n                />\n              </div>\n              <Button\n                onClick={sendCampaign}\n                disabled={sending}\n                className=\"w-full\"\n              >\n                {sending\n                  ? \"Sending...\"\n                  : `Send to ${subscribers.length} Subscribers`}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"subscribers\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Newsletter Subscribers</CardTitle>\n              <CardDescription>\n                Manage your newsletter subscribers\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {subscribers.map((subscriber: any) => (\n                  <div\n                    key={subscriber.id}\n                    className=\"flex items-center justify-between p-4 border rounded\"\n                  >\n                    <div>\n                      <p className=\"font-medium\">\n                        {subscriber.name || \"Anonymous\"}\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        {subscriber.email}\n                      </p>\n                      <p className=\"text-xs text-gray-400\">\n                        Subscribed:{\" \"}\n                        {new Date(\n                          subscriber.subscription_date,\n                        ).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <Badge\n                      variant={subscriber.subscribed ? \"default\" : \"secondary\"}\n                    >\n                      {subscriber.subscribed ? \"Active\" : \"Unsubscribed\"}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Campaign History</CardTitle>\n              <CardDescription>View past newsletter campaigns</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {campaigns.map((campaign: any) => (\n                  <div\n                    key={campaign.id}\n                    className=\"flex items-center justify-between p-4 border rounded\"\n                  >\n                    <div>\n                      <p className=\"font-medium\">{campaign.name}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        {campaign.subject}\n                      </p>\n                      <p className=\"text-xs text-gray-400\">\n                        {campaign.sent_at\n                          ? `Sent: ${new Date(campaign.sent_at).toLocaleDateString()}`\n                          : `Created: ${new Date(campaign.created_at).toLocaleDateString()}`}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge\n                        variant={\n                          campaign.status === \"sent\"\n                            ? \"default\"\n                            : campaign.status === \"sending\"\n                              ? \"secondary\"\n                              : \"outline\"\n                        }\n                      >\n                        {campaign.status}\n                      </Badge>\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        {campaign.sent_count || 0} /{\" \"}\n                        {campaign.recipient_count || 0} sent\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/EmailTemplates.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTemplates'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadTemplates]","fix":{"range":[1122,1124],"text":"[loadTemplates]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Edit, Save, Trash2 } from \"lucide-react\";\n\nexport default function EmailTemplates() {\n  const [templates, setTemplates] = useState([]);\n  const [editingTemplate, setEditingTemplate] = useState(null);\n  const [newTemplate, setNewTemplate] = useState({\n    name: \"\",\n    subject: \"\",\n    content: \"\",\n    template_type: \"newsletter\",\n    is_active: true,\n  });\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadTemplates();\n  }, []);\n\n  const loadTemplates = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setTemplates(data || []);\n    } catch (error) {\n      console.error(\"Error loading templates:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load email templates\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveTemplate = async (template) => {\n    try {\n      if (template.id) {\n        const { error } = await supabase\n          .from(\"email_templates\")\n          .update(template)\n          .eq(\"id\", template.id);\n        if (error) throw error;\n      } else {\n        const { error } = await supabase\n          .from(\"email_templates\")\n          .insert([template]);\n        if (error) throw error;\n      }\n\n      toast({\n        title: \"Success\",\n        description: \"Template saved successfully\",\n      });\n\n      loadTemplates();\n      setEditingTemplate(null);\n      setNewTemplate({\n        name: \"\",\n        subject: \"\",\n        content: \"\",\n        template_type: \"newsletter\",\n        is_active: true,\n      });\n    } catch (error) {\n      console.error(\"Error saving template:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save template\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteTemplate = async (id) => {\n    try {\n      const { error } = await supabase\n        .from(\"email_templates\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Template deleted successfully\",\n      });\n\n      loadTemplates();\n    } catch (error) {\n      console.error(\"Error deleting template:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete template\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Email Templates</h1>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Create New Template</CardTitle>\n          <CardDescription>\n            Create a new email template for various purposes\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Template Name</Label>\n              <Input\n                id=\"name\"\n                value={newTemplate.name}\n                onChange={(e) =>\n                  setNewTemplate((prev) => ({ ...prev, name: e.target.value }))\n                }\n                placeholder=\"Template name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">Template Type</Label>\n              <Select\n                value={newTemplate.template_type}\n                onValueChange={(value) =>\n                  setNewTemplate((prev) => ({ ...prev, template_type: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newsletter\">Newsletter</SelectItem>\n                  <SelectItem value=\"donation_confirmation\">\n                    Donation Confirmation\n                  </SelectItem>\n                  <SelectItem value=\"admin_notification\">\n                    Admin Notification\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"subject\">Subject</Label>\n            <Input\n              id=\"subject\"\n              value={newTemplate.subject}\n              onChange={(e) =>\n                setNewTemplate((prev) => ({ ...prev, subject: e.target.value }))\n              }\n              placeholder=\"Email subject\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content</Label>\n            <Textarea\n              id=\"content\"\n              rows={8}\n              value={newTemplate.content}\n              onChange={(e) =>\n                setNewTemplate((prev) => ({ ...prev, content: e.target.value }))\n              }\n              placeholder=\"Email content (use {{variable}} for dynamic content)\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"active\"\n              checked={newTemplate.is_active}\n              onCheckedChange={(checked) =>\n                setNewTemplate((prev) => ({ ...prev, is_active: checked }))\n              }\n            />\n            <Label htmlFor=\"active\">Active</Label>\n          </div>\n          <Button onClick={() => saveTemplate(newTemplate)}>\n            Create Template\n          </Button>\n        </CardContent>\n      </Card>\n\n      <div className=\"space-y-4\">\n        {templates.map((template: any) => (\n          <Card key={template.id}>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                  <CardDescription>\n                    Type: {template.template_type} | Status:{\" \"}\n                    {template.is_active ? \"Active\" : \"Inactive\"}\n                  </CardDescription>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setEditingTemplate(template)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => deleteTemplate(template.id)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            {editingTemplate?.id === template.id && (\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Subject</Label>\n                  <Input\n                    value={editingTemplate.subject}\n                    onChange={(e) =>\n                      setEditingTemplate((prev) => ({\n                        ...prev,\n                        subject: e.target.value,\n                      }))\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Content</Label>\n                  <Textarea\n                    rows={6}\n                    value={editingTemplate.content}\n                    onChange={(e) =>\n                      setEditingTemplate((prev) => ({\n                        ...prev,\n                        content: e.target.value,\n                      }))\n                    }\n                  />\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button onClick={() => saveTemplate(editingTemplate)}>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Changes\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setEditingTemplate(null)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </CardContent>\n            )}\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Events.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ImageIcon' is defined but never used.","line":49,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'url' is defined but never used.","line":72,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":77,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":89,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":89,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":120,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEvents'. Either include it or remove the dependency array.","line":218,"column":6,"nodeType":"ArrayExpression","endLine":218,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadEvents]","fix":{"range":[5676,5678],"text":"[loadEvents]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterEvents'. Either include it or remove the dependency array.","line":222,"column":6,"nodeType":"ArrayExpression","endLine":222,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [events, filterEvents, searchTerm]","fix":{"range":[5727,5747],"text":"[events, filterEvents, searchTerm]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":255,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":255,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":289,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":289,"endColumn":44}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Calendar,\n  MapPin,\n  Clock,\n  Image as ImageIcon,\n  Upload,\n  Loader2,\n} from \"lucide-react\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface Event {\n  id: string;\n  title: string;\n  description: string | null;\n  event_date: string;\n  event_time: string | null;\n  location: string | null;\n  image_url: string | null;\n  is_featured: boolean;\n  created_at: string;\n}\n\ninterface FileUploadProps {\n  onFileUpload: (url: string) => void;\n  defaultImageUrl?: string | null;\n}\n\n// File Upload Component\nconst FileUpload: React.FC<FileUploadProps> = ({\n  onFileUpload,\n  defaultImageUrl,\n}) => {\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(\n    defaultImageUrl || null,\n  );\n  const { toast } = useToast();\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const selectedFile = e.target.files[0];\n      setFile(selectedFile);\n\n      // Create a preview URL\n      const objectUrl = URL.createObjectURL(selectedFile);\n      setPreviewUrl(objectUrl);\n    }\n  };\n\n  const uploadFile = async () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to upload\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    setProgress(0);\n\n    try {\n      // Create a unique file path\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;\n      const filePath = `events/${fileName}`;\n\n      // Upload the file to Supabase Storage - removed onUploadProgress\n      const { data, error } = await supabase.storage\n        .from(\"images\")\n        .upload(filePath, file, {\n          cacheControl: \"3600\",\n          upsert: false,\n        });\n\n      if (error) throw error;\n\n      // Simulate progress for user feedback\n      setProgress(100);\n\n      // Get the public URL\n      const { data: publicUrlData } = supabase.storage\n        .from(\"images\")\n        .getPublicUrl(filePath);\n\n      // Pass the URL back to the parent component\n      onFileUpload(publicUrlData.publicUrl);\n\n      toast({\n        title: \"Upload successful\",\n        description: \"Image has been uploaded successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      toast({\n        title: \"Upload failed\",\n        description:\n          error instanceof Error\n            ? error.message\n            : \"An error occurred during upload\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-4\">\n        <Input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileChange}\n          disabled={uploading}\n        />\n        <Button\n          type=\"button\"\n          onClick={uploadFile}\n          disabled={!file || uploading}\n          variant=\"secondary\"\n        >\n          {uploading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Uploading...\n            </>\n          ) : (\n            <>\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Upload\n            </>\n          )}\n        </Button>\n      </div>\n\n      {uploading && <Progress value={progress} className=\"h-2\" />}\n\n      {previewUrl && (\n        <div className=\"mt-4\">\n          <p className=\"text-sm font-medium mb-2\">Preview:</p>\n          <div className=\"relative w-full h-40 bg-gray-100 rounded-md overflow-hidden\">\n            <img\n              src={previewUrl}\n              alt=\"Preview\"\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default function AdminEvents() {\n  const [events, setEvents] = useState<Event[]>([]);\n  const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, []);\n\n  useEffect(() => {\n    filterEvents();\n  }, [events, searchTerm]);\n\n  const loadEvents = async () => {\n    try {\n      const data = await api.events.getEvents();\n      setEvents(data || []);\n    } catch (error) {\n      console.error(\"Error loading events:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load events\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterEvents = () => {\n    let filtered = events;\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (event) =>\n          event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          event.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          event.location?.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    setFilteredEvents(filtered);\n  };\n\n  const handleAddEvent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      await api.events.createEvent({\n        title: formData.get(\"title\") as string,\n        description: formData.get(\"description\") as string,\n        event_date: formData.get(\"event_date\") as string,\n        event_time: (formData.get(\"event_time\") as string) || null,\n        location: (formData.get(\"location\") as string) || null,\n        image_url: uploadedImageUrl || null,\n        is_featured: formData.get(\"is_featured\") === \"on\",\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Event added successfully\",\n      });\n      loadEvents();\n      setIsAddDialogOpen(false);\n      setUploadedImageUrl(null);\n      form.reset();\n    } catch (error) {\n      console.error(\"Error adding event:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add event\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateEvent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingEvent) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      await api.events.updateEvent(editingEvent.id, {\n        title: formData.get(\"title\") as string,\n        description: formData.get(\"description\") as string,\n        event_date: formData.get(\"event_date\") as string,\n        event_time: (formData.get(\"event_time\") as string) || null,\n        location: (formData.get(\"location\") as string) || null,\n        image_url: uploadedImageUrl || editingEvent.image_url,\n        is_featured: formData.get(\"is_featured\") === \"on\",\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Event updated successfully\",\n      });\n      loadEvents();\n      setEditingEvent(null);\n      setUploadedImageUrl(null);\n    } catch (error) {\n      console.error(\"Error updating event:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update event\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteEvent = async (id: string) => {\n    try {\n      await api.events.deleteEvent(id);\n      toast({\n        title: \"Success\",\n        description: \"Event deleted successfully\",\n      });\n      loadEvents();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete event\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Events Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Manage church events and announcements\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add New Event</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddEvent} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Event Title</Label>\n                  <Input id=\"title\" name=\"title\" required />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea id=\"description\" name=\"description\" rows={3} />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event_date\">Event Date</Label>\n                  <Input\n                    id=\"event_date\"\n                    name=\"event_date\"\n                    type=\"date\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event_time\">Event Time</Label>\n                  <Input id=\"event_time\" name=\"event_time\" type=\"time\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location</Label>\n                <Input id=\"location\" name=\"location\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image_upload\">Event Image</Label>\n                <FileUpload onFileUpload={setUploadedImageUrl} />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch id=\"is_featured\" name=\"is_featured\" />\n                <Label htmlFor=\"is_featured\">Featured Event</Label>\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Add Event\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {events.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Featured Events\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {events.filter((e) => e.is_featured).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Upcoming Events\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {\n                events.filter((e) => new Date(e.event_date) >= new Date())\n                  .length\n              }\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Past Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {events.filter((e) => new Date(e.event_date) < new Date()).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search Events</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by title, description, or location...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Events Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Events ({filteredEvents.length})</CardTitle>\n          <CardDescription>Manage your church events</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Date & Time</TableHead>\n                  <TableHead>Location</TableHead>\n                  <TableHead>Featured</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredEvents.map((event) => (\n                  <TableRow key={event.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{event.title}</div>\n                        {event.description && (\n                          <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                            {event.description}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {format(new Date(event.event_date), \"MMM d, yyyy\")}\n                      </div>\n                      {event.event_time && (\n                        <div className=\"flex items-center text-sm mt-1\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          {event.event_time}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {event.location ? (\n                        <div className=\"flex items-center text-sm\">\n                          <MapPin className=\"w-3 h-3 mr-1\" />\n                          {event.location}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400 text-sm\">\n                          Not specified\n                        </span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {event.is_featured && (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          Featured\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setEditingEvent(event)}\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Event</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{event.title}\n                                \"? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteEvent(event.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredEvents.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No events found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Event Dialog */}\n      <Dialog open={!!editingEvent} onOpenChange={() => setEditingEvent(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Event</DialogTitle>\n          </DialogHeader>\n          {editingEvent && (\n            <form onSubmit={handleUpdateEvent} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_title\">Event Title</Label>\n                  <Input\n                    id=\"edit_title\"\n                    name=\"title\"\n                    defaultValue={editingEvent.title}\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_description\">Description</Label>\n                <Textarea\n                  id=\"edit_description\"\n                  name=\"description\"\n                  defaultValue={editingEvent.description || \"\"}\n                  rows={3}\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_event_date\">Event Date</Label>\n                  <Input\n                    id=\"edit_event_date\"\n                    name=\"event_date\"\n                    type=\"date\"\n                    defaultValue={editingEvent.event_date.split(\"T\")[0]}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_event_time\">Event Time</Label>\n                  <Input\n                    id=\"edit_event_time\"\n                    name=\"event_time\"\n                    type=\"time\"\n                    defaultValue={editingEvent.event_time || \"\"}\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_location\">Location</Label>\n                <Input\n                  id=\"edit_location\"\n                  name=\"location\"\n                  defaultValue={editingEvent.location || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_image_upload\">Event Image</Label>\n                <FileUpload\n                  onFileUpload={setUploadedImageUrl}\n                  defaultImageUrl={editingEvent.image_url}\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"edit_is_featured\"\n                  name=\"is_featured\"\n                  defaultChecked={editingEvent.is_featured}\n                />\n                <Label htmlFor=\"edit_is_featured\">Featured Event</Label>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button type=\"submit\" className=\"flex-1\">\n                  Update Event\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditingEvent(null)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Gallery.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":12,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadImages'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadImages]","fix":{"range":[898,900],"text":"[loadImages]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":56,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { ImagePlus, Trash2, Edit } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface GalleryImage {\n  id: string;\n  title: string;\n  description: string | null;\n  image_url: string;\n  created_at: string;\n}\n\nexport default function GalleryManager() {\n  const [images, setImages] = useState<GalleryImage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [uploading, setUploading] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadImages();\n  }, []);\n\n  const loadImages = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"gallery\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n\n      setImages(data || []);\n    } catch (error) {\n      console.error(\"Error loading images:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load gallery images\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpload = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n    const file = formData.get(\"file\") as File;\n    const title = formData.get(\"title\") as string;\n    const description = formData.get(\"description\") as string;\n\n    if (!file) return;\n\n    setUploading(true);\n    try {\n      // Upload file to storage bucket\n      const fileExt = file.name.split(\".\").pop();\n      const filePath = `gallery/${Date.now()}.${fileExt}`;\n      const { error: uploadError } = await supabase.storage\n        .from(\"images\")\n        .upload(filePath, file);\n\n      if (uploadError) throw uploadError;\n\n      // Get the public URL\n      const {\n        data: { publicUrl },\n      } = supabase.storage.from(\"images\").getPublicUrl(filePath);\n\n      // Create database entry\n      const { error: dbError } = await supabase.from(\"gallery\").insert([\n        {\n          title,\n          description,\n          image_url: publicUrl,\n        },\n      ]);\n\n      if (dbError) throw dbError;\n\n      toast({\n        title: \"Success\",\n        description: \"Image uploaded successfully\",\n      });\n      loadImages();\n      form.reset();\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload image\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleDelete = async (image: GalleryImage) => {\n    try {\n      // Delete from storage\n      const urlParts = image.image_url.split(\"/\");\n      const filePath = `gallery/${urlParts[urlParts.length - 1]}`;\n      if (filePath) {\n        const { error: storageError } = await supabase.storage\n          .from(\"images\")\n          .remove([filePath]);\n\n        if (storageError)\n          console.warn(\"Storage deletion failed:\", storageError);\n      }\n\n      // Delete from database\n      const { error: dbError } = await supabase\n        .from(\"gallery\")\n        .delete()\n        .eq(\"id\", image.id);\n\n      if (dbError) throw dbError;\n\n      toast({\n        title: \"Success\",\n        description: \"Image deleted successfully\",\n      });\n      loadImages();\n    } catch (error) {\n      console.error(\"Error deleting image:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete image\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold\">Gallery</h2>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button>\n              <ImagePlus className=\"w-4 h-4 mr-2\" />\n              Add Image\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Upload Image</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleUpload} className=\"space-y-4\">\n              <div>\n                <Input type=\"file\" name=\"file\" accept=\"image/*\" required />\n              </div>\n              <div>\n                <Input name=\"title\" placeholder=\"Image Title\" required />\n              </div>\n              <div>\n                <Input name=\"description\" placeholder=\"Image Description\" />\n              </div>\n              <Button type=\"submit\" disabled={uploading}>\n                {uploading ? \"Uploading...\" : \"Upload\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {images.map((image) => (\n          <Card key={image.id}>\n            <CardContent className=\"p-4\">\n              <div className=\"aspect-w-16 aspect-h-9 mb-4\">\n                <img\n                  src={image.image_url}\n                  alt={image.title}\n                  className=\"object-cover rounded-lg w-full h-48\"\n                />\n              </div>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h3 className=\"font-semibold\">{image.title}</h3>\n                  {image.description && (\n                    <p className=\"text-sm text-gray-500\">{image.description}</p>\n                  )}\n                </div>\n                <Button\n                  variant=\"destructive\"\n                  size=\"icon\"\n                  onClick={() => handleDelete(image)}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/HealthCheck.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runHealthCheck'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [runHealthCheck]","fix":{"range":[1413,1415],"text":"[runHealthCheck]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'buckets' is assigned a value but never used.","line":87,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, XCircle, AlertCircle, RefreshCw } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface HealthStatus {\n  database: \"healthy\" | \"error\" | \"checking\";\n  auth: \"healthy\" | \"error\" | \"checking\";\n  storage: \"healthy\" | \"error\" | \"checking\";\n  tables: {\n    events: boolean;\n    members: boolean;\n    gallery: boolean;\n    testimonials: boolean;\n    prayer_requests: boolean;\n    donations: boolean;\n    profiles: boolean;\n    site_settings: boolean;\n  };\n}\n\ntype TableName =\n  | \"events\"\n  | \"members\"\n  | \"gallery\"\n  | \"testimonials\"\n  | \"prayer_requests\"\n  | \"donations\"\n  | \"profiles\"\n  | \"site_settings\";\n\nexport default function HealthCheck() {\n  const [status, setStatus] = useState<HealthStatus>({\n    database: \"checking\",\n    auth: \"checking\",\n    storage: \"checking\",\n    tables: {\n      events: false,\n      members: false,\n      gallery: false,\n      testimonials: false,\n      prayer_requests: false,\n      donations: false,\n      profiles: false,\n      site_settings: false,\n    },\n  });\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    runHealthCheck();\n  }, []);\n\n  const runHealthCheck = async () => {\n    setLoading(true);\n    const newStatus: HealthStatus = {\n      database: \"checking\",\n      auth: \"checking\",\n      storage: \"checking\",\n      tables: {\n        events: false,\n        members: false,\n        gallery: false,\n        testimonials: false,\n        prayer_requests: false,\n        donations: false,\n        profiles: false,\n        site_settings: false,\n      },\n    };\n\n    try {\n      const { error: dbError } = await supabase\n        .from(\"profiles\")\n        .select(\"count\", { count: \"exact\", head: true });\n      newStatus.database = dbError ? \"error\" : \"healthy\";\n\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      newStatus.auth = session ? \"healthy\" : \"error\";\n\n      try {\n        const { data: buckets, error: storageError } =\n          await supabase.storage.listBuckets();\n        newStatus.storage = storageError ? \"error\" : \"healthy\";\n      } catch (storageErr) {\n        console.warn(\"Storage check failed:\", storageErr);\n        newStatus.storage = \"error\";\n      }\n\n      const tables: TableName[] = Object.keys(newStatus.tables) as TableName[];\n      for (const table of tables) {\n        try {\n          const { error } = await supabase\n            .from(table)\n            .select(\"count\", { count: \"exact\", head: true });\n          newStatus.tables[table] = !error;\n        } catch {\n          newStatus.tables[table] = false;\n        }\n      }\n    } catch (error) {\n      console.error(\"Health check error:\", error);\n      toast({\n        title: \"Health Check Failed\",\n        description: \"Unable to complete system health check\",\n        variant: \"destructive\",\n      });\n    }\n\n    setStatus(newStatus);\n    setLoading(false);\n  };\n\n  const getStatusIcon = (status: \"healthy\" | \"error\" | \"checking\") => {\n    switch (status) {\n      case \"healthy\":\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case \"error\":\n        return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      case \"checking\":\n        return <AlertCircle className=\"w-5 h-5 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusText = (status: \"healthy\" | \"error\" | \"checking\") => {\n    switch (status) {\n      case \"healthy\":\n        return \"Healthy\";\n      case \"error\":\n        return \"Error\";\n      case \"checking\":\n        return \"Checking...\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            System Health Check\n          </h1>\n          <p className=\"text-gray-600\">\n            Monitor the status of all admin system components\n          </p>\n        </div>\n        <Button onClick={runHealthCheck} disabled={loading}>\n          <RefreshCw\n            className={`w-4 h-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n          />\n          Refresh\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n              Database Connection\n              {getStatusIcon(status.database)}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-semibold\">\n              {getStatusText(status.database)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n              Authentication\n              {getStatusIcon(status.auth)}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-semibold\">\n              {getStatusText(status.auth)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n              File Storage\n              {getStatusIcon(status.storage)}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-semibold\">\n              {getStatusText(status.storage)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Database Tables Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-3 md:grid-cols-3\">\n            {Object.entries(status.tables).map(([table, isHealthy]) => (\n              <div\n                key={table}\n                className=\"flex items-center justify-between p-3 border rounded-lg\"\n              >\n                <span className=\"font-medium capitalize\">\n                  {table.replace(\"_\", \" \")}\n                </span>\n                {isHealthy ? (\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                ) : (\n                  <XCircle className=\"w-5 h-5 text-red-600\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>System Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Environment:</span>\n              <span className=\"font-mono\">{import.meta.env.MODE}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Supabase URL:</span>\n              <span className=\"font-mono text-xs\">\n                {import.meta.env.VITE_SUPABASE_URL || \"Not configured\"}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Last Check:</span>\n              <span>{new Date().toLocaleString()}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Login.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":26,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":93,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":93,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'secretCode' is assigned a value but never used.","line":102,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":166,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":166,"endColumn":46}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2 } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\nexport default function AdminLogin() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n    const password = formData.get(\"password\") as string;\n\n    try {\n      const { data, error: signInError } =\n        await supabase.auth.signInWithPassword({\n          email,\n          password,\n        });\n\n      if (signInError) throw signInError;\n\n      // Check if user has admin role\n      const { data: profile, error: profileError } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", data.user.id)\n        .single();\n\n      if (profileError) {\n        console.error(\"Profile fetch error:\", profileError);\n        // If profile doesn't exist, create one for the first user as admin\n        const { count: existingProfilesCount } = await supabase\n          .from(\"profiles\")\n          .select(\"*\", { count: \"exact\", head: true });\n\n        if (existingProfilesCount === 0) {\n          // First user becomes admin\n          const { error: createError } = await supabase\n            .from(\"profiles\")\n            .insert({\n              id: data.user.id,\n              email: data.user.email,\n              role: \"admin\",\n            });\n\n          if (createError) {\n            console.error(\"Error creating admin profile:\", createError);\n            throw new Error(\"Failed to create admin profile\");\n          }\n\n          console.log(\"Created first admin user\");\n        } else {\n          throw new Error(\"Profile not found. Please contact administrator.\");\n        }\n      } else if (profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized. Admin access required.\");\n      }\n\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully logged in to admin dashboard\",\n      });\n      navigate(\"/admin/dashboard\");\n    } catch (error) {\n      setError(error instanceof Error ? error.message : \"Failed to log in\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n    const password = formData.get(\"password\") as string;\n    const confirmPassword = formData.get(\"confirmPassword\") as string;\n    const secretCode = formData.get(\"secretCode\") as string;\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\");\n      setLoading(false);\n      return;\n    }\n\n    // Check if this email was pre-authorized by an existing admin\n    const { data: existingProfile, error: profileCheckError } = await supabase\n      .from(\"profiles\")\n      .select(\"email, role\")\n      .eq(\"email\", email)\n      .single();\n\n    if (\n      profileCheckError ||\n      !existingProfile ||\n      existingProfile.role !== \"admin\"\n    ) {\n      setError(\n        \"This email is not authorized for admin registration. Please contact an existing admin to add you.\",\n      );\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const {\n        data: { user },\n        error: signUpError,\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            role: \"admin\", // This will be validated by security rules\n          },\n        },\n      });\n\n      if (signUpError) throw signUpError;\n\n      if (user) {\n        // Update the existing profile with the user ID\n        const { error: profileError } = await supabase\n          .from(\"profiles\")\n          .update({ id: user.id })\n          .eq(\"email\", user.email);\n\n        if (profileError) throw profileError;\n\n        toast({\n          title: \"Registration successful!\",\n          description: \"Please check your email to verify your account\",\n        });\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : \"Failed to register\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResetPassword = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n\n    try {\n      const { error: resetError } = await supabase.auth.resetPasswordForEmail(\n        email,\n        {\n          redirectTo: window.location.origin + \"/admin/reset-password\",\n        },\n      );\n\n      if (resetError) throw resetError;\n\n      toast({\n        title: \"Check your email\",\n        description: \"We've sent you a password reset link\",\n      });\n    } catch (error) {\n      setError(\n        error instanceof Error ? error.message : \"Failed to send reset email\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Admin Portal\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            Manage your church's digital presence\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"login\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\">Register</TabsTrigger>\n              <TabsTrigger value=\"reset\">Reset</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-email\">Email</Label>\n                  <Input\n                    id=\"login-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"admin@church.com\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <Input\n                    id=\"login-password\"\n                    name=\"password\"\n                    type=\"password\"\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    \"Sign in\"\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-email\">Email</Label>\n                  <Input\n                    id=\"register-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"admin@church.com\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-password\">Password</Label>\n                  <Input\n                    id=\"register-password\"\n                    name=\"password\"\n                    type=\"password\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    required\n                  />\n                </div>\n                <div className=\"bg-blue-50 border border-blue-200 rounded-md p-3\">\n                  <p className=\"text-sm text-blue-800\">\n                    <strong>Note:</strong> Your email must be pre-authorized by\n                    an existing admin before you can register. Contact an admin\n                    to add your email to the system first.\n                  </p>\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Registering...\n                    </>\n                  ) : (\n                    \"Register\"\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"reset\">\n              <form onSubmit={handleResetPassword} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"reset-email\">Email</Label>\n                  <Input\n                    id=\"reset-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"admin@church.com\"\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending reset link...\n                    </>\n                  ) : (\n                    \"Send Reset Link\"\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n\n          {error && (\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n        <CardFooter className=\"flex flex-col space-y-2\">\n          <p className=\"px-8 text-center text-sm text-gray-600\">\n            Secure access to manage church content, members, and settings\n          </p>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Members.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":52,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":55,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMembers'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadMembers]","fix":{"range":[2369,2371],"text":"[loadMembers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterMembers'. Either include it or remove the dependency array.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [filterMembers, members, searchTerm, statusFilter, typeFilter]","fix":{"range":[2421,2468],"text":"[filterMembers, members, searchTerm, statusFilter, typeFilter]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":167,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":167,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":205,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":205,"endColumn":45}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  safeDataLoader,\n  logAdminAction,\n  formatErrorMessage,\n} from \"@/utils/adminHelpers\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Users,\n  UserPlus,\n  Search,\n  Filter,\n  Edit,\n  Trash2,\n  Mail,\n  Phone,\n  Calendar,\n  CheckCircle,\n  XCircle,\n  Clock,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Member {\n  id: string;\n  full_name: string;\n  email: string | null;\n  phone: string | null;\n  address: string | null;\n  membership_type: \"regular\" | \"student\" | \"senior\" | \"family\";\n  membership_status: \"pending\" | \"active\" | \"inactive\";\n  join_date: string;\n  membership_date: string | null;\n  last_renewal_date: string | null;\n  next_renewal_date: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminMembers() {\n  const [members, setMembers] = useState<Member[]>([]);\n  const [filteredMembers, setFilteredMembers] = useState<Member[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingMember, setEditingMember] = useState<Member | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadMembers();\n  }, []);\n\n  useEffect(() => {\n    filterMembers();\n  }, [members, searchTerm, statusFilter, typeFilter]);\n\n  const loadMembers = async () => {\n    setLoading(true);\n\n    const { data, error } = await safeDataLoader(\n      () =>\n        supabase\n          .from(\"members\")\n          .select(\"*\")\n          .order(\"created_at\", { ascending: false }),\n      \"members\",\n    );\n\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: formatErrorMessage(error, \"Failed to load members\"),\n        variant: \"destructive\",\n      });\n      setMembers([]);\n    } else {\n      // Ensure data has proper structure\n      const processedData = data.map((member) => ({\n        ...member,\n        membership_type: member.membership_type || \"regular\",\n        membership_status: member.membership_status || \"pending\",\n        join_date: member.join_date || member.created_at,\n        updated_at: member.updated_at || member.created_at,\n      }));\n\n      setMembers(processedData);\n      logAdminAction(\"load\", \"members\", { count: processedData.length });\n    }\n\n    setLoading(false);\n  };\n\n  const filterMembers = () => {\n    let filtered = members;\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (member) =>\n          member.full_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          member.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          member.phone?.includes(searchTerm),\n      );\n    }\n\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(\n        (member) => member.membership_status === statusFilter,\n      );\n    }\n\n    if (typeFilter !== \"all\") {\n      filtered = filtered.filter(\n        (member) => member.membership_type === typeFilter,\n      );\n    }\n\n    setFilteredMembers(filtered);\n  };\n\n  const handleAddMember = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const { error } = await supabase.from(\"members\").insert([\n        {\n          full_name: formData.get(\"full_name\") as string,\n          email: formData.get(\"email\") as string,\n          phone: formData.get(\"phone\") as string,\n          address: formData.get(\"address\") as string,\n          membership_type: formData.get(\"membership_type\") as string,\n          membership_status: \"active\",\n          join_date: new Date().toISOString().split(\"T\")[0],\n          membership_date: new Date().toISOString().split(\"T\")[0],\n        },\n      ]);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member added successfully\",\n      });\n      loadMembers();\n      setIsAddDialogOpen(false);\n      form.reset();\n    } catch (error) {\n      console.error(\"Error adding member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateMember = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingMember) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const { error } = await supabase\n        .from(\"members\")\n        .update({\n          full_name: formData.get(\"full_name\") as string,\n          email: formData.get(\"email\") as string,\n          phone: formData.get(\"phone\") as string,\n          address: formData.get(\"address\") as string,\n          membership_type: formData.get(\"membership_type\") as string,\n          membership_status: formData.get(\"membership_status\") as string,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", editingMember.id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member updated successfully\",\n      });\n      loadMembers();\n      setEditingMember(null);\n    } catch (error) {\n      console.error(\"Error updating member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteMember = async (id: string) => {\n    try {\n      const { error } = await supabase.from(\"members\").delete().eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member deleted successfully\",\n      });\n      loadMembers();\n    } catch (error) {\n      console.error(\"Error deleting member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Active\n          </Badge>\n        );\n      case \"pending\":\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800\">\n            <Clock className=\"w-3 h-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case \"inactive\":\n        return (\n          <Badge className=\"bg-red-100 text-red-800\">\n            <XCircle className=\"w-3 h-3 mr-1\" />\n            Inactive\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getTypeBadge = (type: string) => {\n    const colors = {\n      regular: \"bg-blue-100 text-blue-800\",\n      student: \"bg-purple-100 text-purple-800\",\n      senior: \"bg-orange-100 text-orange-800\",\n      family: \"bg-green-100 text-green-800\",\n    };\n    return (\n      <Badge\n        className={\n          colors[type as keyof typeof colors] || \"bg-gray-100 text-gray-800\"\n        }\n      >\n        {type}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Members Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Manage church members and their information\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              Add Member\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Member</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddMember} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"full_name\">Full Name</Label>\n                <Input id=\"full_name\" name=\"full_name\" required />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input id=\"email\" name=\"email\" type=\"email\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input id=\"phone\" name=\"phone\" type=\"tel\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Address</Label>\n                <Input id=\"address\" name=\"address\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"membership_type\">Membership Type</Label>\n                <Select name=\"membership_type\" defaultValue=\"regular\">\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"regular\">Regular</SelectItem>\n                    <SelectItem value=\"student\">Student</SelectItem>\n                    <SelectItem value=\"senior\">Senior</SelectItem>\n                    <SelectItem value=\"family\">Family</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Add Member\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Members</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {members.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Active Members\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {members.filter((m) => m.membership_status === \"active\").length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Pending Members\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {members.filter((m) => m.membership_status === \"pending\").length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Family Members\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {members.filter((m) => m.membership_type === \"family\").length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search by name, email, or phone...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"regular\">Regular</SelectItem>\n                <SelectItem value=\"student\">Student</SelectItem>\n                <SelectItem value=\"senior\">Senior</SelectItem>\n                <SelectItem value=\"family\">Family</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Members Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Members ({filteredMembers.length})</CardTitle>\n          <CardDescription>Manage your church members</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Join Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredMembers.map((member) => (\n                  <TableRow key={member.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{member.full_name}</div>\n                        {member.address && (\n                          <div className=\"text-sm text-gray-500\">\n                            {member.address}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {member.email && (\n                          <div className=\"flex items-center text-sm\">\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            {member.email}\n                          </div>\n                        )}\n                        {member.phone && (\n                          <div className=\"flex items-center text-sm\">\n                            <Phone className=\"w-3 h-3 mr-1\" />\n                            {member.phone}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {getTypeBadge(member.membership_type || \"regular\")}\n                    </TableCell>\n                    <TableCell>\n                      {getStatusBadge(member.membership_status || \"active\")}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {member.join_date\n                          ? format(new Date(member.join_date), \"MMM d, yyyy\")\n                          : \"N/A\"}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setEditingMember(member)}\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Member</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete{\" \"}\n                                {member.full_name}? This action cannot be\n                                undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteMember(member.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredMembers.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No members found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Member Dialog */}\n      <Dialog\n        open={!!editingMember}\n        onOpenChange={() => setEditingMember(null)}\n      >\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Member</DialogTitle>\n          </DialogHeader>\n          {editingMember && (\n            <form onSubmit={handleUpdateMember} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_full_name\">Full Name</Label>\n                <Input\n                  id=\"edit_full_name\"\n                  name=\"full_name\"\n                  defaultValue={editingMember.full_name}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_email\">Email</Label>\n                <Input\n                  id=\"edit_email\"\n                  name=\"email\"\n                  type=\"email\"\n                  defaultValue={editingMember.email || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_phone\">Phone</Label>\n                <Input\n                  id=\"edit_phone\"\n                  name=\"phone\"\n                  type=\"tel\"\n                  defaultValue={editingMember.phone || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_address\">Address</Label>\n                <Input\n                  id=\"edit_address\"\n                  name=\"address\"\n                  defaultValue={editingMember.address || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_membership_type\">Membership Type</Label>\n                <Select\n                  name=\"membership_type\"\n                  defaultValue={editingMember.membership_type || \"regular\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"regular\">Regular</SelectItem>\n                    <SelectItem value=\"student\">Student</SelectItem>\n                    <SelectItem value=\"senior\">Senior</SelectItem>\n                    <SelectItem value=\"family\">Family</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_membership_status\">Status</Label>\n                <Select\n                  name=\"membership_status\"\n                  defaultValue={editingMember.membership_status || \"active\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button type=\"submit\" className=\"flex-1\">\n                  Update Member\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditingMember(null)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/PrayerRequests.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/PrayerRequestsComplete.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'MessageSquare' is defined but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPrayerRequests'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPrayerRequests]","fix":{"range":[1987,1989],"text":"[loadPrayerRequests]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterRequests'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [filterRequests, prayerRequests, searchTerm, statusFilter]","fix":{"range":[2040,2082],"text":"[filterRequests, prayerRequests, searchTerm, statusFilter]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":184,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":184,"endColumn":44}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Search,\n  Heart,\n  CheckCircle,\n  Clock,\n  Eye,\n  Trash2,\n  Mail,\n  User,\n  Calendar,\n  MessageSquare,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface PrayerRequest {\n  id: string;\n  name: string;\n  email: string | null;\n  request: string;\n  is_public: boolean;\n  is_answered: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminPrayerRequestsComplete() {\n  const [prayerRequests, setPrayerRequests] = useState<PrayerRequest[]>([]);\n  const [filteredRequests, setFilteredRequests] = useState<PrayerRequest[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedRequest, setSelectedRequest] = useState<PrayerRequest | null>(\n    null,\n  );\n  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadPrayerRequests();\n  }, []);\n\n  useEffect(() => {\n    filterRequests();\n  }, [prayerRequests, searchTerm, statusFilter]);\n\n  const loadPrayerRequests = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"prayer_requests\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setPrayerRequests(data || []);\n    } catch (error) {\n      console.error(\"Error loading prayer requests:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load prayer requests\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterRequests = () => {\n    let filtered = prayerRequests;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (request) =>\n          request.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          request.request.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          request.email?.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Status filter\n    if (statusFilter !== \"all\") {\n      const isAnswered = statusFilter === \"answered\";\n      filtered = filtered.filter(\n        (request) => request.is_answered === isAnswered,\n      );\n    }\n\n    setFilteredRequests(filtered);\n  };\n\n  const toggleAnsweredStatus = async (id: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from(\"prayer_requests\")\n        .update({\n          is_answered: !currentStatus,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: `Prayer request marked as ${!currentStatus ? \"answered\" : \"pending\"}`,\n      });\n      loadPrayerRequests();\n    } catch (error) {\n      console.error(\"Error updating prayer request:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update prayer request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deletePrayerRequest = async (id: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"prayer_requests\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Prayer request deleted successfully\",\n      });\n      loadPrayerRequests();\n    } catch (error) {\n      console.error(\"Error deleting prayer request:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete prayer request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const sendEmailResponse = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedRequest || !selectedRequest.email) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n    const subject = formData.get(\"subject\") as string;\n    const message = formData.get(\"message\") as string;\n\n    try {\n      // In a real implementation, you would send an email here\n      // For now, we'll just show a success message\n      console.log(\"Email would be sent to:\", selectedRequest.email);\n      console.log(\"Subject:\", subject);\n      console.log(\"Message:\", message);\n\n      toast({\n        title: \"Email Sent\",\n        description: `Response sent to ${selectedRequest.name}`,\n      });\n      setIsEmailDialogOpen(false);\n      setSelectedRequest(null);\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send email response\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const calculateStats = () => {\n    const totalRequests = prayerRequests.length;\n    const answeredRequests = prayerRequests.filter((r) => r.is_answered).length;\n    const pendingRequests = prayerRequests.filter((r) => !r.is_answered).length;\n    const publicRequests = prayerRequests.filter((r) => r.is_public).length;\n    const thisWeekRequests = prayerRequests.filter((r) => {\n      const requestDate = new Date(r.created_at);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return requestDate >= weekAgo;\n    }).length;\n\n    return {\n      totalRequests,\n      answeredRequests,\n      pendingRequests,\n      publicRequests,\n      thisWeekRequests,\n    };\n  };\n\n  const stats = calculateStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Prayer Requests Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Review and respond to prayer requests from the community\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-5\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Total Requests\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {stats.totalRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Answered\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats.answeredRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.totalRequests > 0\n                ? Math.round(\n                    (stats.answeredRequests / stats.totalRequests) * 100,\n                  )\n                : 0}\n              % of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Pending\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {stats.pendingRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">Awaiting response</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              Public\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {stats.publicRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">Visible to community</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              This Week\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {stats.thisWeekRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">New requests</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search prayer requests...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Status Filter</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={statusFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={statusFilter === \"pending\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"pending\")}\n                >\n                  Pending\n                </Button>\n                <Button\n                  variant={statusFilter === \"answered\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"answered\")}\n                >\n                  Answered\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Prayer Requests Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Prayer Requests ({filteredRequests.length})</CardTitle>\n          <CardDescription>\n            Manage and respond to community prayer requests\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Request</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Visibility</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredRequests.map((request) => (\n                  <TableRow key={request.id}>\n                    <TableCell>\n                      {format(new Date(request.created_at), \"MMM d, yyyy\")}\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{request.name}</div>\n                        {request.email && (\n                          <div className=\"text-sm text-gray-500\">\n                            {request.email}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <p className=\"truncate\">{request.request}</p>\n                        <Button\n                          variant=\"link\"\n                          size=\"sm\"\n                          className=\"p-0 h-auto text-xs\"\n                          onClick={() => setSelectedRequest(request)}\n                        >\n                          Read full request\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {request.is_answered ? (\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Answered\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Pending\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {request.is_public ? (\n                        <Badge className=\"bg-blue-100 text-blue-800\">\n                          <Eye className=\"w-3 h-3 mr-1\" />\n                          Public\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-gray-100 text-gray-800\">\n                          Private\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            toggleAnsweredStatus(\n                              request.id,\n                              request.is_answered,\n                            )\n                          }\n                          className={\n                            request.is_answered\n                              ? \"\"\n                              : \"bg-green-50 hover:bg-green-100\"\n                          }\n                        >\n                          {request.is_answered ? (\n                            <>\n                              <Clock className=\"w-3 h-3 mr-1\" />\n                              Mark Pending\n                            </>\n                          ) : (\n                            <>\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Mark Answered\n                            </>\n                          )}\n                        </Button>\n                        {request.email && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedRequest(request);\n                              setIsEmailDialogOpen(true);\n                            }}\n                          >\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            Email\n                          </Button>\n                        )}\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>\n                                Delete Prayer Request\n                              </AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this prayer\n                                request from {request.name}? This action cannot\n                                be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deletePrayerRequest(request.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredRequests.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No prayer requests found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Prayer Request Detail Dialog */}\n      <Dialog\n        open={!!selectedRequest && !isEmailDialogOpen}\n        onOpenChange={() => setSelectedRequest(null)}\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Prayer Request Details</DialogTitle>\n            <DialogDescription>\n              {selectedRequest &&\n                format(\n                  new Date(selectedRequest.created_at),\n                  \"MMMM d, yyyy 'at' h:mm a\",\n                )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRequest && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">From:</Label>\n                <p className=\"text-sm font-medium\">{selectedRequest.name}</p>\n                {selectedRequest.email && (\n                  <p className=\"text-sm text-gray-500\">\n                    {selectedRequest.email}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Prayer Request:</Label>\n                <div className=\"mt-2 p-4 bg-gray-50 rounded-md border-l-4 border-church-gold\">\n                  <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                    {selectedRequest.request}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between pt-4 border-t\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm\">Status:</Label>\n                    {selectedRequest.is_answered ? (\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Answered\n                      </Badge>\n                    ) : (\n                      <Badge className=\"bg-yellow-100 text-yellow-800\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        Pending\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm\">Visibility:</Label>\n                    {selectedRequest.is_public ? (\n                      <Badge className=\"bg-blue-100 text-blue-800\">\n                        <Eye className=\"w-3 h-3 mr-1\" />\n                        Public\n                      </Badge>\n                    ) : (\n                      <Badge className=\"bg-gray-100 text-gray-800\">\n                        Private\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      toggleAnsweredStatus(\n                        selectedRequest.id,\n                        selectedRequest.is_answered,\n                      );\n                      setSelectedRequest(null);\n                    }}\n                    className={\n                      selectedRequest.is_answered\n                        ? \"\"\n                        : \"bg-green-50 hover:bg-green-100\"\n                    }\n                  >\n                    {selectedRequest.is_answered ? (\n                      <>\n                        <Clock className=\"w-4 h-4 mr-2\" />\n                        Mark Pending\n                      </>\n                    ) : (\n                      <>\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                        Mark Answered\n                      </>\n                    )}\n                  </Button>\n                  {selectedRequest.email && (\n                    <Button\n                      onClick={() => setIsEmailDialogOpen(true)}\n                      className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                    >\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      Send Email Response\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Email Response Dialog */}\n      <Dialog open={isEmailDialogOpen} onOpenChange={setIsEmailDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Send Email Response</DialogTitle>\n            <DialogDescription>\n              Respond to {selectedRequest?.name}'s prayer request\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRequest && (\n            <form onSubmit={sendEmailResponse} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subject\">Subject</Label>\n                <Input\n                  id=\"subject\"\n                  name=\"subject\"\n                  defaultValue={`Re: Your Prayer Request`}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"message\">Message</Label>\n                <Textarea\n                  id=\"message\"\n                  name=\"message\"\n                  rows={6}\n                  placeholder={`Dear ${selectedRequest.name},\\n\\nThank you for sharing your prayer request with us. We want you to know that we are praying for you and your situation.\\n\\n[Your personal message here]\\n\\nBlessings,\\nSt. Gabriel Ethiopian Orthodox Church`}\n                  required\n                />\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1 bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  Send Email\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsEmailDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Settings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkStripeConfiguration'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":63,"suggestions":[{"desc":"Update the dependencies array to be: [checkStripeConfiguration, settings.enable_stripe, settings.stripe_publishable_key]","fix":{"range":[2742,2799],"text":"[checkStripeConfiguration, settings.enable_stripe, settings.stripe_publishable_key]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":180,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":180,"endColumn":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"../../components/ui/card\";\nimport { Label } from \"../../components/ui/label\";\nimport { Switch } from \"../../components/ui/switch\";\nimport { Input } from \"../../components/ui/input\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"../../components/ui/tabs\";\nimport { Badge } from \"../../components/ui/badge\";\nimport { Button } from \"../../components/ui/button\";\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"../../components/ui/select\";\nimport { ExternalLink, Plus, Trash2, Users, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { api } from \"../../utils/api\";\nimport { toast } from \"../../hooks/use-toast\";\nimport { supabase } from \"../../lib/supabaseClient\";\n\ninterface SiteSettings {\n  id?: number;\n  church_name: string;\n  church_address: string;\n  phone_number: string;\n  email: string;\n  admin_email: string;\n  from_email: string;\n  enable_donations: boolean;\n  enable_membership: boolean;\n  enable_email_notifications: boolean;\n  enable_newsletter: boolean;\n  enable_stripe: boolean;\n  stripe_publishable_key: string;\n  maintenance_mode: boolean;\n}\n\ninterface StripeSettings {\n  // Add actual fields as needed\n  [key: string]: any;\n}\n\ninterface EmailSettings {\n  from_email?: string;\n  from_name?: string;\n  newsletter_frequency?: string;\n  enable_newsletters?: boolean;\n  auto_welcome_email?: boolean;\n  smtp_host?: string;\n  smtp_port?: number | null;\n  smtp_username?: string;\n  smtp_password?: string;\n  [key: string]: any;\n}\n\ninterface Subscriber {\n  id: string;\n  email: string;\n  name?: string;\n  status: string;\n  subscribed_at: string;\n}\n\nexport default function Settings() {\n  const [settings, setSettings] = useState<SiteSettings>({\n    church_name: \"\",\n    church_address: \"\",\n    phone_number: \"\",\n    email: \"\",\n    admin_email: \"\",\n    from_email: \"\",\n    enable_donations: false,\n    enable_membership: false,\n    enable_email_notifications: false,\n    enable_newsletter: false,\n    enable_stripe: false,\n    stripe_publishable_key: \"\",\n    maintenance_mode: false,\n  });\n  const [stripeSettings, setStripeSettings] = useState<StripeSettings>({});\n  const [emailSettings, setEmailSettings] = useState<EmailSettings>({});\n  const [subscribers, setSubscribers] = useState<Subscriber[]>([]);\n  const [saving, setSaving] = useState(false);\n  const [stripeStatus, setStripeStatus] = useState<\"configured\" | \"unconfigured\" | \"testing\">(\"unconfigured\");\n\n  // Load all settings on mount\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  // Check Stripe configuration on settings change\n  useEffect(() => {\n    checkStripeConfiguration();\n  }, [settings.enable_stripe, settings.stripe_publishable_key]);\n\n  const loadSettings = async () => {\n    try {\n      let { data, error } = await supabase\n        .from(\"site_settings\")\n        .select(\"*\")\n        .limit(1)\n        .single();\n\n      if (error && typeof error === 'object' && 'code' in error && (error as any).code === \"PGRST116\") {\n        const { data: newData, error: insertError } = await supabase\n          .from(\"site_settings\")\n          .insert({\n            id: 1,\n            church_name: \"St. Gabriel Ethiopian Orthodox Church\",\n            church_address: \"\",\n            phone_number: \"\",\n            email: \"\",\n            admin_email: \"\",\n            from_email: \"noreply@example.com\",\n            enable_donations: true,\n            enable_membership: true,\n            enable_email_notifications: true,\n            enable_newsletter: true,\n            enable_stripe: false,\n            stripe_publishable_key: \"\",\n            maintenance_mode: false,\n          })\n          .select()\n          .single();\n\n        if (insertError) throw insertError;\n        data = newData;\n      }\n\n      if (data) {\n        setSettings(data);\n      }\n\n      // Load Stripe settings\n      const stripeData = await api.stripeSettings.getSettings();\n      if (stripeData) {\n        setStripeSettings(stripeData);\n      }\n\n      // Load Email settings\n      const emailData = await api.emailSettings.getSettings();\n      if (emailData) {\n        setEmailSettings(emailData);\n      }\n\n      // Load subscribers\n      const subscribersData = await api.emailSubscribers.getSubscribers();\n      setSubscribers(subscribersData || []);\n    } catch (error) {\n      console.error(\"Error loading settings:\", error);\n      toast({\n        description: \"Failed to load settings\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const checkStripeConfiguration = () => {\n    if (!settings.enable_stripe) {\n      setStripeStatus('unconfigured');\n    } else if (validateStripeKey(settings.stripe_publishable_key)) {\n      setStripeStatus('configured');\n    } else {\n      setStripeStatus('testing');\n    }\n  };\n\n  const validateStripeKey = (key: string) => {\n    return key.startsWith('pk_test_') || key.startsWith('pk_live_');\n  };\n\n  const handleChange = (key: string, value: any) => {\n    setSettings({ ...settings, [key]: value });\n  };\n\n  const handleEmailChange = (key: string, value: any) => {\n    setEmailSettings({ ...emailSettings, [key]: value });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n\n    try {\n      // Update site settings\n      await supabase.from(\"site_settings\").upsert(settings);\n\n      // Update Stripe settings\n      await api.stripeSettings.updateSettings(stripeSettings);\n\n      // Update Email settings\n      await api.emailSettings.updateSettings(emailSettings);\n\n      toast({\n        description: \"Settings saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      toast({\n        description: \"Failed to save settings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleDeleteSubscriber = async (id: string) => {\n    try {\n      await api.emailSubscribers.deleteSubscriber(id);\n      setSubscribers(subscribers.filter((subscriber) => subscriber.id !== id));\n      toast({\n        description: \"Subscriber deleted\",\n      });\n    } catch (error) {\n      console.error(\"Error deleting subscriber:\", error);\n      toast({\n        description: \"Failed to delete subscriber\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUnsubscribe = async (email: string) => {\n    try {\n      await api.emailSubscribers.unsubscribe(email);\n      setSubscribers(\n        subscribers.map((subscriber) =>\n          subscriber.email === email ? { ...subscriber, status: \"unsubscribed\" } : subscriber\n        )\n      );\n      toast({\n        description: \"Unsubscribed successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error unsubscribing:\", error);\n      toast({\n        description: \"Failed to unsubscribe\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStripeStatusBadge = () => {\n    switch (stripeStatus) {\n      case 'configured':\n        return <Badge variant=\"default\">Stripe Configured</Badge>;\n      case 'unconfigured':\n        return <Badge variant=\"destructive\">Stripe Unconfigured</Badge>;\n      case 'testing':\n        return <Badge variant=\"secondary\">Stripe Testing</Badge>;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <Tabs defaultValue=\"general\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"general\">General</TabsTrigger>\n            <TabsTrigger value=\"email\">Email Settings</TabsTrigger>\n            <TabsTrigger value=\"payments\">Payment Settings</TabsTrigger>\n            <TabsTrigger value=\"features\">Features</TabsTrigger>\n            <TabsTrigger value=\"subscribers\">Subscribers</TabsTrigger> {/* Added missing tab trigger */}\n          </TabsList>\n\n          <TabsContent value=\"general\">\n            <Card>\n              <CardHeader>\n                <CardTitle>General Settings</CardTitle>\n                <CardDescription>Configure basic church information</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"churchName\">Church Name</Label>\n                  <Input\n                    id=\"churchName\"\n                    value={settings.church_name || \"\"}\n                    onChange={(e) => handleChange(\"church_name\", e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Input\n                    id=\"address\"\n                    value={settings.church_address || \"\"}\n                    onChange={(e) => handleChange(\"church_address\", e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    value={settings.phone_number || \"\"}\n                    onChange={(e) => handleChange(\"phone_number\", e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Public Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={settings.email || \"\"}\n                    onChange={(e) => handleChange(\"email\", e.target.value)}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"email\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Email Configuration</CardTitle>\n                <CardDescription>Configure email settings for notifications and newsletters</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"adminEmail\">Admin Email</Label>\n                  <Input\n                    id=\"adminEmail\"\n                    type=\"email\"\n                    value={settings.admin_email || \"\"}\n                    onChange={(e) => handleChange(\"admin_email\", e.target.value)}\n                    placeholder=\"admin@church.com\"\n                  />\n                  <p className=\"text-sm text-gray-500\">Email to receive admin notifications</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fromEmail\">From Email</Label>\n                    <Input\n                      id=\"fromEmail\"\n                      type=\"email\"\n                      value={emailSettings.from_email || \"\"}\n                      onChange={(e) => handleEmailChange(\"from_email\", e.target.value)}\n                      placeholder=\"noreply@church.org\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fromName\">From Name</Label>\n                    <Input\n                      id=\"fromName\"\n                      value={emailSettings.from_name || \"\"}\n                      onChange={(e) => handleEmailChange(\"from_name\", e.target.value)}\n                      placeholder=\"St. Gabriel Church\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newsletterFreq\">Newsletter Frequency</Label>\n                  <Select\n                    value={emailSettings.newsletter_frequency || \"\"}\n                    onValueChange={(value) => handleEmailChange(\"newsletter_frequency\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Newsletter System</Label>\n                    <p className=\"text-sm text-gray-500\">Allow newsletter subscriptions and campaigns</p>\n                  </div>\n                  <Switch\n                    checked={emailSettings.enable_newsletters || false}\n                    onCheckedChange={(checked: boolean) => handleEmailChange(\"enable_newsletters\", checked)}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Auto Welcome Email</Label>\n                    <p className=\"text-sm text-gray-500\">Send welcome email to new subscribers</p>\n                  </div>\n                  <Switch\n                    checked={emailSettings.auto_welcome_email || false}\n                    onCheckedChange={(checked: boolean) => handleEmailChange(\"auto_welcome_email\", checked)}\n                  />\n                </div>\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium mb-3\">SMTP Configuration</h4>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"smtpHost\">SMTP Host</Label>\n                      <Input\n                        id=\"smtpHost\"\n                        value={emailSettings.smtp_host || \"\"}\n                        onChange={(e) => handleEmailChange(\"smtp_host\", e.target.value)}\n                        placeholder=\"smtp.gmail.com\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"smtpPort\">SMTP Port</Label>\n                      <Input\n                        id=\"smtpPort\"\n                        type=\"number\"\n                        value={emailSettings.smtp_port === undefined || emailSettings.smtp_port === null ? \"\" : emailSettings.smtp_port}\n                        onChange={(e) => handleEmailChange(\"smtp_port\", e.target.value === \"\" ? null : parseInt(e.target.value))}\n                        placeholder=\"587\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"smtpUsername\">SMTP Username</Label>\n                      <Input\n                        id=\"smtpUsername\"\n                        value={emailSettings.smtp_username || \"\"}\n                        onChange={(e) => handleEmailChange(\"smtp_username\", e.target.value)}\n                        placeholder=\"your-email@gmail.com\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"smtpPassword\">SMTP Password</Label>\n                      <Input\n                        id=\"smtpPassword\"\n                        type=\"password\"\n                        value={emailSettings.smtp_password || \"\"}\n                        onChange={(e) => handleEmailChange(\"smtp_password\", e.target.value)}\n                        placeholder=\"your-app-password\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"payments\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Payment Settings\n                  {getStripeStatusBadge()}\n                </CardTitle>\n                <CardDescription>Configure Stripe payment integration for donations and membership</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Stripe Payments</Label>\n                    <p className=\"text-sm text-gray-500\">Allow online donations and membership payments via Stripe</p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_stripe}\n                    onCheckedChange={(checked: boolean) => handleChange(\"enable_stripe\", checked)}\n                  />\n                </div>\n                {settings.enable_stripe && (\n                  <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"stripeKey\">Stripe Publishable Key</Label>\n                      <Input\n                        id=\"stripeKey\"\n                        value={settings.stripe_publishable_key || \"\"}\n                        onChange={(e) => handleChange(\"stripe_publishable_key\", e.target.value)}\n                        placeholder=\"pk_test_... or pk_live_...\"\n                        className={!validateStripeKey(settings.stripe_publishable_key || \"\") && settings.stripe_publishable_key ? \"border-red-500\" : \"\"}\n                      />\n                      <div className=\"flex items-center justify-between\">\n                        <p className=\"text-sm text-gray-500\">Your Stripe publishable key (starts with pk_test_ for testing or pk_live_ for production)</p>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.open('https://dashboard.stripe.com/apikeys', '_blank')}\n                        >\n                          <ExternalLink className=\"w-4 h-4 mr-2\" />\n                          Get Keys\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"bg-blue-50 p-3 rounded border border-blue-200\">\n                      <h4 className=\"font-medium text-blue-900 mb-2\">Stripe Configuration Status</h4>\n                      <ul className=\"space-y-1 text-sm text-blue-800\">\n                        <li className=\"flex items-center\">\n                          {settings.enable_stripe ? <CheckCircle className=\"w-4 h-4 mr-2 text-green-600\" /> : <AlertCircle className=\"w-4 h-4 mr-2 text-red-600\" />}\n                          Stripe integration {settings.enable_stripe ? 'enabled' : 'disabled'}\n                        </li>\n                        <li className=\"flex items-center\">\n                          {settings.stripe_publishable_key && validateStripeKey(settings.stripe_publishable_key) ? \n                            <CheckCircle className=\"w-4 h-4 mr-2 text-green-600\" /> : \n                            <AlertCircle className=\"w-4 h-4 mr-2 text-red-600\" />\n                          }\n                          Publishable key {settings.stripe_publishable_key && validateStripeKey(settings.stripe_publishable_key) ? 'configured' : 'missing or invalid'}\n                        </li>\n                        <li className=\"flex items-center\">\n                          <AlertCircle className=\"w-4 h-4 mr-2 text-orange-600\" />\n                          Secret key must be configured in Supabase Edge Function secrets\n                        </li>\n                      </ul>\n                    </div>\n                    {stripeStatus === 'testing' && (\n                      <div className=\"bg-yellow-50 p-3 rounded border border-yellow-200\">\n                        <p className=\"text-sm text-yellow-800\">\n                          <strong>Test Mode:</strong> You're using test keys. No real payments will be processed. Use test card number 4242424242424242 for testing.\n                        </p>\n                      </div>\n                    )}\n                    {stripeStatus === 'configured' && (\n                      <div className=\"bg-green-50 p-3 rounded border border-green-200\">\n                        <p className=\"text-sm text-green-800\">\n                          <strong>Live Mode:</strong> Real payments will be processed. Make sure your webhook endpoints are configured.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"features\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Feature Settings</CardTitle>\n                <CardDescription>Enable or disable website features</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Donations</Label>\n                    <p className=\"text-sm text-gray-500\">Allow visitors to make donations</p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_donations}\n                    onCheckedChange={(checked: boolean) => handleChange(\"enable_donations\", checked)}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Membership</Label>\n                    <p className=\"text-sm text-gray-500\">Allow visitors to register for membership</p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_membership}\n                    onCheckedChange={(checked: boolean) => handleChange(\"enable_membership\", checked)}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Email Notifications</Label>\n                    <p className=\"text-sm text-gray-500\">Send email notifications to admin</p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_email_notifications}\n                    onCheckedChange={(checked: boolean) => handleChange(\"enable_email_notifications\", checked)}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Newsletter</Label>\n                    <p className=\"text-sm text-gray-500\">Allow newsletter subscriptions</p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_newsletter}\n                    onCheckedChange={(checked: boolean) => handleChange(\"enable_newsletter\", checked)}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Maintenance Mode</Label>\n                    <p className=\"text-sm text-gray-500\">Put the website in maintenance mode</p>\n                  </div>\n                  <Switch\n                    checked={settings.maintenance_mode}\n                    onCheckedChange={(checked: boolean) => handleChange(\"maintenance_mode\", checked)}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n        <div className=\"mt-6\">\n          <Button type=\"submit\" disabled={saving}>\n            {saving ? \"Saving...\" : \"Save Settings\"}\n          </Button>\n        </div>\n      </form>\n      <TabsContent value=\"subscribers\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                Email Subscribers ({subscribers.length})\n              </span>\n              <Button size=\"sm\" variant=\"outline\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Subscriber\n              </Button>\n            </CardTitle>\n            <CardDescription>\n              Manage your email newsletter subscribers\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {subscribers.length === 0 ? (\n                <p className=\"text-center text-gray-500 py-8\">No subscribers yet. Start collecting email addresses!</p>\n              ) : (\n                subscribers.map((subscriber) => (\n                  <div key={subscriber.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div>\n                          <p className=\"font-medium\">{subscriber.email}</p>\n                          {subscriber.name && <p className=\"text-sm text-gray-500\">{subscriber.name}</p>}\n                        </div>\n                        <Badge\n                          variant={\n                            subscriber.status === \"active\"\n                              ? \"default\"\n                              : subscriber.status === \"unsubscribed\"\n                              ? \"secondary\"\n                              : \"destructive\"\n                          }\n                        >\n                          {subscriber.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        Subscribed: {new Date(subscriber.subscribed_at).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {subscriber.status === \"active\" && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleUnsubscribe(subscriber.email)}>\n                          Unsubscribe\n                        </Button>\n                      )}\n                      <Button size=\"sm\" variant=\"destructive\" onClick={() => handleDeleteSubscriber(subscriber.id)}>\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/SystemHealth.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Wifi' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'toast' is assigned a value but never used.","line":72,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runHealthChecks'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [runHealthChecks]","fix":{"range":[1793,1795],"text":"[runHealthChecks]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":111,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  RefreshCw,\n  Database,\n  Server,\n  Wifi,\n  HardDrive,\n  Activity,\n  Clock,\n  AlertCircle,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface HealthCheck {\n  name: string;\n  status: \"healthy\" | \"warning\" | \"error\";\n  message: string;\n  lastChecked: Date;\n  responseTime?: number;\n  details?: Record<string, any>;\n}\n\ninterface SystemMetrics {\n  database: {\n    connections: number;\n    queries: number;\n    avgResponseTime: number;\n    storage: {\n      used: number;\n      total: number;\n      percentage: number;\n    };\n  };\n  api: {\n    uptime: number;\n    requests: number;\n    errors: number;\n    avgResponseTime: number;\n  };\n  storage: {\n    images: {\n      count: number;\n      size: number;\n    };\n    documents: {\n      count: number;\n      size: number;\n    };\n  };\n}\n\nexport default function SystemHealth() {\n  const [healthChecks, setHealthChecks] = useState<HealthCheck[]>([]);\n  const [metrics, setMetrics] = useState<SystemMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    runHealthChecks();\n    const interval = setInterval(runHealthChecks, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, []);\n\n  const runHealthChecks = async () => {\n    setLoading(true);\n    const checks: HealthCheck[] = [];\n\n    // Database connectivity check\n    try {\n      const start = Date.now();\n      const { error } = await supabase.from(\"profiles\").select(\"id\").limit(1);\n      const responseTime = Date.now() - start;\n\n      checks.push({\n        name: \"Database Connection\",\n        status: error ? \"error\" : \"healthy\",\n        message: error\n          ? `Connection failed: ${error.message}`\n          : \"Connected successfully\",\n        lastChecked: new Date(),\n        responseTime,\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Database Connection\",\n        status: \"error\",\n        message: \"Connection failed\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Storage bucket check\n    try {\n      const start = Date.now();\n      const { data, error } = await supabase.storage\n        .from(\"images\")\n        .list(\"\", { limit: 1 });\n      const responseTime = Date.now() - start;\n\n      checks.push({\n        name: \"Storage Bucket\",\n        status: error ? \"error\" : \"healthy\",\n        message: error\n          ? `Storage error: ${error.message}`\n          : \"Storage accessible\",\n        lastChecked: new Date(),\n        responseTime,\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Storage Bucket\",\n        status: \"error\",\n        message: \"Storage check failed\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Data integrity checks\n    try {\n      const [eventsRes, membersRes, donationsRes] = await Promise.all([\n        supabase.from(\"events\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"members\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"donations\").select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n      const totalRecords =\n        (eventsRes.count || 0) +\n        (membersRes.count || 0) +\n        (donationsRes.count || 0);\n\n      checks.push({\n        name: \"Data Integrity\",\n        status: \"healthy\",\n        message: `${totalRecords} total records found`,\n        lastChecked: new Date(),\n        details: {\n          events: eventsRes.count || 0,\n          members: membersRes.count || 0,\n          donations: donationsRes.count || 0,\n        },\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Data Integrity\",\n        status: \"warning\",\n        message: \"Could not verify data integrity\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Email system check (mock)\n    checks.push({\n      name: \"Email System\",\n      status: \"healthy\",\n      message: \"Email service operational\",\n      lastChecked: new Date(),\n    });\n\n    // Payment system check (mock)\n    checks.push({\n      name: \"Payment System\",\n      status: \"healthy\",\n      message: \"Stripe integration active\",\n      lastChecked: new Date(),\n    });\n\n    setHealthChecks(checks);\n    setLastUpdate(new Date());\n\n    // Load system metrics\n    await loadSystemMetrics();\n\n    setLoading(false);\n  };\n\n  const loadSystemMetrics = async () => {\n    try {\n      // Get storage info\n      const { data: storageData } = await supabase.storage\n        .from(\"images\")\n        .list();\n\n      // Mock metrics (in a real app, these would come from monitoring services)\n      const mockMetrics: SystemMetrics = {\n        database: {\n          connections: 12,\n          queries: 1547,\n          avgResponseTime: 45,\n          storage: {\n            used: 2.3,\n            total: 10,\n            percentage: 23,\n          },\n        },\n        api: {\n          uptime: 99.8,\n          requests: 8432,\n          errors: 12,\n          avgResponseTime: 120,\n        },\n        storage: {\n          images: {\n            count: storageData?.length || 0,\n            size: 156.7, // MB\n          },\n          documents: {\n            count: 0,\n            size: 0,\n          },\n        },\n      };\n\n      setMetrics(mockMetrics);\n    } catch (error) {\n      console.error(\"Error loading metrics:\", error);\n    }\n  };\n\n  const getStatusIcon = (status: HealthCheck[\"status\"]) => {\n    switch (status) {\n      case \"healthy\":\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />;\n      case \"error\":\n        return <XCircle className=\"h-5 w-5 text-red-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: HealthCheck[\"status\"]) => {\n    const variants = {\n      healthy: \"default\",\n      warning: \"secondary\",\n      error: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status]} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const overallStatus =\n    healthChecks.length > 0\n      ? healthChecks.some((check) => check.status === \"error\")\n        ? \"error\"\n        : healthChecks.some((check) => check.status === \"warning\")\n          ? \"warning\"\n          : \"healthy\"\n      : \"healthy\";\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            System Health\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Monitor system status and performance metrics\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {lastUpdate && (\n            <span className=\"text-sm text-gray-500\">\n              Last updated: {format(lastUpdate, \"HH:mm:ss\")}\n            </span>\n          )}\n          <Button\n            onClick={runHealthChecks}\n            variant=\"outline\"\n            disabled={loading}\n          >\n            <RefreshCw\n              className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n            />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Overall Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            {getStatusIcon(overallStatus)}\n            <span>System Status</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-2xl font-bold text-church-burgundy capitalize\">\n                {overallStatus === \"healthy\"\n                  ? \"All Systems Operational\"\n                  : overallStatus === \"warning\"\n                    ? \"Some Issues Detected\"\n                    : \"Critical Issues Found\"}\n              </p>\n              <p className=\"text-gray-600\">\n                {healthChecks.filter((c) => c.status === \"healthy\").length} of{\" \"}\n                {healthChecks.length} services healthy\n              </p>\n            </div>\n            {getStatusBadge(overallStatus)}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"health\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"health\">Health Checks</TabsTrigger>\n          <TabsTrigger value=\"metrics\">System Metrics</TabsTrigger>\n          <TabsTrigger value=\"logs\">System Logs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"health\" className=\"space-y-4\">\n          {healthChecks.map((check, index) => (\n            <Card key={index}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getStatusIcon(check.status)}\n                    <div>\n                      <h3 className=\"font-medium\">{check.name}</h3>\n                      <p className=\"text-sm text-gray-600\">{check.message}</p>\n                      {check.details && (\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {Object.entries(check.details).map(([key, value]) => (\n                            <span key={key} className=\"mr-3\">\n                              {key}: {value}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    {getStatusBadge(check.status)}\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {format(check.lastChecked, \"HH:mm:ss\")}\n                    </p>\n                    {check.responseTime && (\n                      <p className=\"text-xs text-gray-500\">\n                        {check.responseTime}ms\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"metrics\" className=\"space-y-6\">\n          {metrics && (\n            <>\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Database className=\"h-4 w-4 mr-2\" />\n                      Database\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.database.connections}\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Active connections</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>Queries: {metrics.database.queries}</div>\n                      <div>\n                        Avg response: {metrics.database.avgResponseTime}ms\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Server className=\"h-4 w-4 mr-2\" />\n                      API\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.api.uptime}%\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Uptime</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>Requests: {metrics.api.requests}</div>\n                      <div>Errors: {metrics.api.errors}</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <HardDrive className=\"h-4 w-4 mr-2\" />\n                      Storage\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.database.storage.percentage}%\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Used</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>\n                        {metrics.database.storage.used}GB /{\" \"}\n                        {metrics.database.storage.total}GB\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Activity className=\"h-4 w-4 mr-2\" />\n                      Performance\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.api.avgResponseTime}ms\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Avg response time</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Storage Usage</CardTitle>\n                    <CardDescription>File storage breakdown</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Images</span>\n                      <span className=\"text-sm font-medium\">\n                        {metrics.storage.images.count} files (\n                        {metrics.storage.images.size} MB)\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Documents</span>\n                      <span className=\"text-sm font-medium\">\n                        {metrics.storage.documents.count} files (\n                        {metrics.storage.documents.size} MB)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-church-burgundy h-2 rounded-full\"\n                        style={{\n                          width: `${metrics.database.storage.percentage}%`,\n                        }}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Database Performance</CardTitle>\n                    <CardDescription>\n                      Query and connection metrics\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600\">\n                          Active Connections\n                        </p>\n                        <p className=\"text-2xl font-bold text-church-burgundy\">\n                          {metrics.database.connections}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Total Queries</p>\n                        <p className=\"text-2xl font-bold text-church-burgundy\">\n                          {metrics.database.queries}\n                        </p>\n                      </div>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600\">\n                        Average Response Time\n                      </p>\n                      <p className=\"text-lg font-semibold\">\n                        {metrics.database.avgResponseTime}ms\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"logs\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"h-5 w-5 mr-2\" />\n                Recent System Events\n              </CardTitle>\n              <CardDescription>\n                Latest system activities and alerts\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {[\n                  {\n                    time: \"10:30:15\",\n                    level: \"info\",\n                    message: \"Database backup completed successfully\",\n                  },\n                  {\n                    time: \"10:25:42\",\n                    level: \"info\",\n                    message: \"New member registration: John Doe\",\n                  },\n                  {\n                    time: \"10:20:18\",\n                    level: \"warning\",\n                    message: \"High memory usage detected (85%)\",\n                  },\n                  {\n                    time: \"10:15:33\",\n                    level: \"info\",\n                    message: \"Email campaign sent to 150 subscribers\",\n                  },\n                  {\n                    time: \"10:10:07\",\n                    level: \"error\",\n                    message: \"Failed to process payment for donation #1234\",\n                  },\n                  {\n                    time: \"10:05:21\",\n                    level: \"info\",\n                    message: \"System health check completed\",\n                  },\n                ].map((log, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center space-x-3 p-3 rounded-lg bg-gray-50\"\n                  >\n                    <div className=\"flex-shrink-0\">\n                      {log.level === \"error\" ? (\n                        <XCircle className=\"h-4 w-4 text-red-600\" />\n                      ) : log.level === \"warning\" ? (\n                        <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                      ) : (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">{log.message}</p>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">{log.time}</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Testimonials.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTestimonials'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadTestimonials]","fix":{"range":[1825,1827],"text":"[loadTestimonials]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterTestimonials'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [testimonials, searchTerm, approvalFilter, filterTestimonials]","fix":{"range":[1882,1924],"text":"[testimonials, searchTerm, approvalFilter, filterTestimonials]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Search,\n  MessageSquare,\n  CheckCircle,\n  Clock,\n  Eye,\n  EyeOff,\n  Trash2,\n  User,\n  ThumbsUp,\n  ThumbsDown,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Testimonial {\n  id: string;\n  name: string;\n  content: string;\n  is_approved: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminTestimonials() {\n  const [testimonials, setTestimonials] = useState<Testimonial[]>([]);\n  const [filteredTestimonials, setFilteredTestimonials] = useState<\n    Testimonial[]\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTestimonial, setSelectedTestimonial] =\n    useState<Testimonial | null>(null);\n  const [approvalFilter, setApprovalFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadTestimonials();\n  }, []);\n\n  useEffect(() => {\n    filterTestimonials();\n  }, [testimonials, searchTerm, approvalFilter]);\n\n  const loadTestimonials = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"testimonials\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setTestimonials(data || []);\n    } catch (error) {\n      console.error(\"Error loading testimonials:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load testimonials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterTestimonials = () => {\n    let filtered = testimonials;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (testimonial) =>\n          testimonial.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          testimonial.content.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Approval filter\n    if (approvalFilter !== \"all\") {\n      const isApproved = approvalFilter === \"approved\";\n      filtered = filtered.filter(\n        (testimonial) => testimonial.is_approved === isApproved,\n      );\n    }\n\n    setFilteredTestimonials(filtered);\n  };\n\n  const toggleApproval = async (id: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from(\"testimonials\")\n        .update({\n          is_approved: !currentStatus,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: `Testimonial ${!currentStatus ? \"approved\" : \"unapproved\"} successfully`,\n      });\n      loadTestimonials();\n    } catch (error) {\n      console.error(\"Error updating testimonial:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update testimonial\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteTestimonial = async (id: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"testimonials\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Testimonial deleted successfully\",\n      });\n      loadTestimonials();\n    } catch (error) {\n      console.error(\"Error deleting testimonial:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete testimonial\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const calculateStats = () => {\n    const totalTestimonials = testimonials.length;\n    const approvedTestimonials = testimonials.filter(\n      (t) => t.is_approved,\n    ).length;\n    const pendingTestimonials = testimonials.filter(\n      (t) => !t.is_approved,\n    ).length;\n    const thisMonthTestimonials = testimonials.filter(\n      (t) => new Date(t.created_at).getMonth() === new Date().getMonth(),\n    ).length;\n\n    return {\n      totalTestimonials,\n      approvedTestimonials,\n      pendingTestimonials,\n      thisMonthTestimonials,\n    };\n  };\n\n  const stats = calculateStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Testimonials Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Review and manage testimonials from church members\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              Total Testimonials\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {stats.totalTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Approved\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats.approvedTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.totalTestimonials > 0\n                ? Math.round(\n                    (stats.approvedTestimonials / stats.totalTestimonials) *\n                      100,\n                  )\n                : 0}\n              % of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Pending Review\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {stats.pendingTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">Awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <User className=\"w-4 h-4 mr-2\" />\n              This Month\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {stats.thisMonthTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">New testimonials</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search testimonials...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Approval Status</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={approvalFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={\n                    approvalFilter === \"approved\" ? \"default\" : \"outline\"\n                  }\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"approved\")}\n                >\n                  Approved\n                </Button>\n                <Button\n                  variant={approvalFilter === \"pending\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"pending\")}\n                >\n                  Pending\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Testimonials Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Testimonials ({filteredTestimonials.length})</CardTitle>\n          <CardDescription>\n            Review and manage community testimonials\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Testimonial</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTestimonials.map((testimonial) => (\n                  <TableRow key={testimonial.id}>\n                    <TableCell>\n                      {format(new Date(testimonial.created_at), \"MMM d, yyyy\")}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"font-medium\">{testimonial.name}</div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <p className=\"truncate\">{testimonial.content}</p>\n                        <Button\n                          variant=\"link\"\n                          size=\"sm\"\n                          className=\"p-0 h-auto text-xs\"\n                          onClick={() => setSelectedTestimonial(testimonial)}\n                        >\n                          Read full testimonial\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {testimonial.is_approved ? (\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Approved\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Pending\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            toggleApproval(\n                              testimonial.id,\n                              testimonial.is_approved,\n                            )\n                          }\n                          className={\n                            testimonial.is_approved\n                              ? \"\"\n                              : \"bg-green-50 hover:bg-green-100\"\n                          }\n                        >\n                          {testimonial.is_approved ? (\n                            <>\n                              <ThumbsDown className=\"w-3 h-3 mr-1\" />\n                              Unapprove\n                            </>\n                          ) : (\n                            <>\n                              <ThumbsUp className=\"w-3 h-3 mr-1\" />\n                              Approve\n                            </>\n                          )}\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>\n                                Delete Testimonial\n                              </AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this testimonial\n                                from {testimonial.name}? This action cannot be\n                                undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() =>\n                                  deleteTestimonial(testimonial.id)\n                                }\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredTestimonials.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No testimonials found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Testimonial Detail Dialog */}\n      <Dialog\n        open={!!selectedTestimonial}\n        onOpenChange={() => setSelectedTestimonial(null)}\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Testimonial Details</DialogTitle>\n            <DialogDescription>\n              {selectedTestimonial &&\n                format(\n                  new Date(selectedTestimonial.created_at),\n                  \"MMMM d, yyyy 'at' h:mm a\",\n                )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTestimonial && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">From:</Label>\n                <p className=\"text-sm font-medium\">\n                  {selectedTestimonial.name}\n                </p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Testimonial:</Label>\n                <div className=\"mt-2 p-4 bg-gray-50 rounded-md border-l-4 border-church-gold\">\n                  <p className=\"text-sm leading-relaxed whitespace-pre-wrap italic\">\n                    \"{selectedTestimonial.content}\"\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between pt-4 border-t\">\n                <div className=\"flex items-center space-x-2\">\n                  <Label className=\"text-sm\">Status:</Label>\n                  {selectedTestimonial.is_approved ? (\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Approved\n                    </Badge>\n                  ) : (\n                    <Badge className=\"bg-yellow-100 text-yellow-800\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      Pending Review\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      toggleApproval(\n                        selectedTestimonial.id,\n                        selectedTestimonial.is_approved,\n                      );\n                      setSelectedTestimonial(null);\n                    }}\n                    className={\n                      selectedTestimonial.is_approved\n                        ? \"\"\n                        : \"bg-green-50 hover:bg-green-100\"\n                    }\n                  >\n                    {selectedTestimonial.is_approved ? (\n                      <>\n                        <ThumbsDown className=\"w-4 h-4 mr-2\" />\n                        Unapprove\n                      </>\n                    ) : (\n                      <>\n                        <ThumbsUp className=\"w-4 h-4 mr-2\" />\n                        Approve\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/pages/admin/Users.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit2' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'ShieldAlert' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'editingUser' is assigned a value but never used.","line":82,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'setEditingUser' is assigned a value but never used.","line":82,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUsers]","fix":{"range":[2014,2016],"text":"[fetchUsers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterUsers'. Either include it or remove the dependency array.","line":90,"column":6,"nodeType":"ArrayExpression","endLine":90,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [users, searchTerm, filterUsers]","fix":{"range":[2064,2083],"text":"[users, searchTerm, filterUsers]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":130,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":130,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":138,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'handleRoleChange' is assigned a value but never used.","line":163,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":25}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { api } from \"@/integrations/supabase/api\";\nimport {\n  Loader2,\n  UserPlus,\n  Edit2,\n  Trash2,\n  Mail,\n  ShieldCheck,\n  ShieldAlert,\n  UserX,\n  Search,\n  Crown,\n  Shield,\n  ArrowUp,\n  ArrowDown,\n} from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n  created_at: string;\n}\n\nexport default function Users() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false);\n  const [userToDelete, setUserToDelete] = useState<User | null>(null);\n  const [adminCount, setAdminCount] = useState(0);\n  const [userCount, setUserCount] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    filterUsers();\n  }, [users, searchTerm]);\n\n  const fetchUsers = async () => {\n    try {\n      const { data: profiles, error } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setUsers(profiles);\n\n      // Count admins and regular users\n      const admins = profiles.filter((user) => user.role === \"admin\");\n      setAdminCount(admins.length);\n      setUserCount(profiles.length - admins.length);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch users\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterUsers = () => {\n    if (!searchTerm) {\n      setFilteredUsers(users);\n      return;\n    }\n\n    const filtered = users.filter((user) =>\n      user.email.toLowerCase().includes(searchTerm.toLowerCase()),\n    );\n    setFilteredUsers(filtered);\n  };\n\n  const handleAddUser = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n    const role = formData.get(\"role\") as string;\n\n    try {\n      // Create a new user profile directly\n      const { data, error } = await supabase.from(\"profiles\").insert([\n        {\n          email,\n          role,\n        },\n      ]);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User added successfully\",\n      });\n      setIsAddDialogOpen(false);\n      fetchUsers();\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRoleChange = async (userId: string, newRole: string) => {\n    try {\n      // Check if trying to demote the last admin\n      if (newRole === \"user\" && adminCount <= 1) {\n        const user = users.find((u) => u.id === userId);\n        if (user?.role === \"admin\") {\n          toast({\n            title: \"Cannot Demote\",\n            description: \"Cannot demote the last admin user\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: newRole })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePromoteToAdmin = async (userId: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: \"admin\" })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User promoted to admin successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error promoting user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to promote user to admin\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDemoteFromAdmin = async (userId: string) => {\n    try {\n      // Check if this is the last admin\n      if (adminCount <= 1) {\n        toast({\n          title: \"Cannot Demote\",\n          description: \"Cannot demote the last admin user\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: \"user\" })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Admin demoted to user successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error demoting admin:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to demote admin\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const confirmDeleteUser = (user: User) => {\n    setUserToDelete(user);\n    setIsConfirmDeleteOpen(true);\n  };\n\n  const handleDeleteUser = async () => {\n    if (!userToDelete) return;\n\n    try {\n      // Check if this is the last admin\n      if (userToDelete.role === \"admin\" && adminCount <= 1) {\n        toast({\n          title: \"Cannot Delete\",\n          description: \"Cannot delete the last admin user\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .delete()\n        .eq(\"id\", userToDelete.id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsConfirmDeleteOpen(false);\n      setUserToDelete(null);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            User Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Add, edit, or remove users and manage their roles\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New User</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddUser} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"user@example.com\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"role\">Role</Label>\n                <Select name=\"role\" defaultValue=\"user\">\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"user\">User</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-church-burgundy hover:bg-church-burgundy/90\"\n              >\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add User\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Admin Users</CardTitle>\n            <CardDescription>\n              Users with administrative privileges\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <Crown className=\"h-5 w-5 text-yellow-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {adminCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Regular Users</CardTitle>\n            <CardDescription>Users with standard access</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <Shield className=\"h-5 w-5 text-blue-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {userCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <CardDescription>All registered users</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <ShieldCheck className=\"h-5 w-5 text-green-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-green-600\">\n                {adminCount + userCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search Users</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by email...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"border rounded-lg\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Email</TableHead>\n              <TableHead>Role</TableHead>\n              <TableHead>Admin Actions</TableHead>\n              <TableHead>Created At</TableHead>\n              <TableHead className=\"w-[120px]\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredUsers.map((user) => (\n              <TableRow key={user.id}>\n                <TableCell>{user.email}</TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    {user.role === \"admin\" ? (\n                      <div className=\"flex items-center space-x-1 px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs font-medium\">\n                        <Crown className=\"h-3 w-3\" />\n                        <span>Admin</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium\">\n                        <Shield className=\"h-3 w-3\" />\n                        <span>User</span>\n                      </div>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    {user.role === \"admin\" ? (\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-orange-600 hover:text-orange-700 border-orange-200 hover:border-orange-300\"\n                            disabled={adminCount <= 1}\n                          >\n                            <ArrowDown className=\"h-3 w-3 mr-1\" />\n                            Demote\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Demote Admin</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to demote {user.email} from\n                              admin to regular user?\n                              {adminCount <= 1 && (\n                                <p className=\"text-red-500 mt-2 font-bold\">\n                                  Warning: Cannot demote the last admin user.\n                                </p>\n                              )}\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDemoteFromAdmin(user.id)}\n                              className=\"bg-orange-600 hover:bg-orange-700\"\n                              disabled={adminCount <= 1}\n                            >\n                              <ArrowDown className=\"h-4 w-4 mr-2\" />\n                              Demote to User\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    ) : (\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-green-600 hover:text-green-700 border-green-200 hover:border-green-300\"\n                          >\n                            <ArrowUp className=\"h-3 w-3 mr-1\" />\n                            Promote\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>\n                              Promote to Admin\n                            </AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to promote {user.email} to\n                              admin? This will give them full administrative\n                              privileges.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handlePromoteToAdmin(user.id)}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                            >\n                              <ArrowUp className=\"h-4 w-4 mr-2\" />\n                              Promote to Admin\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  {new Date(user.created_at).toLocaleDateString()}\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex space-x-2\">\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"text-red-500 hover:text-red-700\"\n                          onClick={() => confirmDeleteUser(user)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete User</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete {user.email}? This\n                            action cannot be undone.\n                            {user.role === \"admin\" && adminCount <= 1 && (\n                              <p className=\"text-red-500 mt-2 font-bold\">\n                                Warning: Cannot delete the last admin user.\n                              </p>\n                            )}\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={handleDeleteUser}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                            disabled={user.role === \"admin\" && adminCount <= 1}\n                          >\n                            <UserX className=\"h-4 w-4 mr-2\" />\n                            Delete User\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        {filteredUsers.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500\">\n            No users found matching your criteria.\n          </div>\n        )}\n      </div>\n\n      {/* Delete User Confirmation Dialog */}\n      <AlertDialog\n        open={isConfirmDeleteOpen}\n        onOpenChange={setIsConfirmDeleteOpen}\n      >\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {userToDelete?.email}? This action\n              cannot be undone.\n              {userToDelete?.role === \"admin\" && adminCount <= 1 && (\n                <p className=\"text-red-500 mt-2 font-bold\">\n                  Warning: Cannot delete the last admin user.\n                </p>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteUser}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={userToDelete?.role === \"admin\" && adminCount <= 1}\n            >\n              <UserX className=\"h-4 w-4 mr-2\" />\n              Delete User\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/scripts/create-admin-v2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/scripts/create-admin-v3.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":23,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":82,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from \"@supabase/supabase-js\";\nimport type { Database } from \"../integrations/supabase/types\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\n// Get Supabase URL and anon key from environment variables or use defaults\nconst supabaseUrl = \"https://nvigfdxosyqhnoljtfld.supabase.co\";\nconst supabaseKey =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52aWdmZHhvc3lxaG5vbGp0ZmxkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNjU0MjMsImV4cCI6MjA2Mjc0MTQyM30.3fkZqIajZVAg__YHUr7rbBMOxXwVSjKBgcoQkKCqAPY\";\n\nasync function createAdminUser() {\n  console.log(\"Initializing Supabase client...\");\n  const supabase = createClient<Database>(supabaseUrl, supabaseKey);\n\n  try {\n    // Step 1: Create the user\n    console.log(\"Creating user account...\");\n    const { data: authData, error: signUpError } = await supabase.auth.signUp({\n      email: \"khaliddawit7546@gmail.com\",\n      password: \"12345678\",\n      options: {\n        emailRedirectTo: `${process.env.VITE_PUBLIC_SITE_URL || \"http://localhost:8080\"}/admin/login`,\n      },\n    });\n\n    if (signUpError) {\n      throw new Error(`Signup Error: ${signUpError.message}`);\n    }\n\n    if (!authData.user) {\n      throw new Error(\"No user data returned from signup\");\n    }\n\n    console.log(\"User created successfully!\");\n    console.log(\"User ID:\", authData.user.id);\n    console.log(\"Email:\", authData.user.email);\n\n    // Step 2: Set admin role in profiles table\n    console.log(\"Setting admin role...\");\n    const { error: insertError } = await supabase.from(\"profiles\").insert({\n      id: authData.user.id,\n      role: \"admin\",\n    });\n\n    if (insertError) {\n      console.error(\"Insert Error:\", insertError);\n      throw new Error(`Profile Creation Error: ${insertError.message}`);\n    }\n\n    // Step 3: Verify the profile was created\n    const { data: profile, error: fetchError } = await supabase\n      .from(\"profiles\")\n      .select(\"*\")\n      .eq(\"id\", authData.user.id)\n      .single();\n\n    if (fetchError) {\n      throw new Error(`Profile Fetch Error: ${fetchError.message}`);\n    }\n\n    if (!profile) {\n      throw new Error(\"Profile creation failed - no profile found\");\n    }\n\n    console.log(\"=================================\");\n    console.log(\"Admin user created successfully!\");\n    console.log(\"=================================\");\n    console.log(\"Email:\", \"khaliddawit7546@gmail.com\");\n    console.log(\"Password:\", \"12345678\");\n    console.log(\"Role:\", profile.role);\n    console.log(\"=================================\");\n    console.log(\"Please check your email to confirm your account\");\n    console.log(\"After confirmation, you can login at /admin/login\");\n  } catch (error) {\n    console.error(\"Error:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", error.message);\n      console.error(\"Stack trace:\", error.stack);\n    }\n  } finally {\n    process.exit(0);\n  }\n}\n\ncreateAdminUser().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/scripts/create-admin-v4.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/scripts/create-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/scripts/create-test-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/scripts/setup-admin.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":5,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":7,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":10}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from \"@supabase/supabase-js\";\nimport type { Database } from \"../integrations/supabase/types\";\n\nconst supabaseUrl =\n  process.env.VITE_SUPABASE_URL || \"https://nvigfdxosyqhnoljtfld.supabase.co\";\nconst supabaseKey =\n  process.env.VITE_SUPABASE_ANON_KEY ||\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52aWdmZHhvc3lxaG5vbGp0ZmxkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNjU0MjMsImV4cCI6MjA2Mjc0MTQyM30.3fkZqIajZVAg__YHUr7rbBMOxXwVSjKBgcoQkKCqAPY\";\n\nconst ADMIN_EMAIL = \"admin@church.test\";\nconst ADMIN_PASSWORD = \"admin1234\";\n\nasync function setupAdmin() {\n  const supabase = createClient<Database>(supabaseUrl, supabaseKey);\n\n  try {\n    // First, sign in with the existing account\n    const { data: signInData, error: signInError } =\n      await supabase.auth.signInWithPassword({\n        email: ADMIN_EMAIL,\n        password: ADMIN_PASSWORD,\n      });\n\n    if (signInError) {\n      // If sign in fails, try to sign up\n      console.log(\"Attempting to create new admin user...\");\n      const { data: signUpData, error: signUpError } =\n        await supabase.auth.signUp({\n          email: ADMIN_EMAIL,\n          password: ADMIN_PASSWORD,\n        });\n\n      if (signUpError) {\n        throw new Error(`Sign up failed: ${signUpError.message}`);\n      }\n\n      if (!signUpData.user) {\n        throw new Error(\"No user data returned from sign up\");\n      }\n\n      console.log(\"User created successfully\");\n      console.log(\"User ID:\", signUpData.user.id);\n\n      // Create admin profile\n      const { error: profileError } = await supabase.from(\"profiles\").upsert({\n        id: signUpData.user.id,\n        role: \"admin\",\n      });\n\n      if (profileError) {\n        console.error(\"Profile Error:\", profileError);\n        throw profileError;\n      }\n\n      console.log(\"=================================\");\n      console.log(\"Admin user created successfully!\");\n      console.log(\"=================================\");\n      console.log(\"Email: khaliddawit7546@gmail.com\");\n      console.log(\"Password: 12345678\");\n      console.log(\"=================================\");\n      console.log(\"Please check your email to confirm your account\");\n      console.log(\"After confirmation, you can login at /admin/login\");\n    } else {\n      // User exists, update their role to admin\n      console.log(\"User already exists, updating role to admin...\");\n\n      const { error: profileError } = await supabase.from(\"profiles\").upsert({\n        id: signInData.user.id,\n        role: \"admin\",\n      });\n\n      if (profileError) {\n        console.error(\"Profile Error:\", profileError);\n        throw profileError;\n      }\n\n      console.log(\"=================================\");\n      console.log(\"User role updated to admin!\");\n      console.log(\"=================================\");\n      console.log(\"Email: khaliddawit7546@gmail.com\");\n      console.log(\"Password: 12345678\");\n      console.log(\"=================================\");\n      console.log(\"You can now login at /admin/login\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error message:\", error.message);\n    }\n  }\n}\n\nsetupAdmin().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/services/DataSyncService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/services/GitSyncService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/test/Layout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/test/error-handling.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/test/error-handling.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/test/router-context.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/test/test-utils.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":16,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":16,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":16,"column":52,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":57},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"This rule can't verify that `export *` only exports components.","line":31,"column":1,"nodeType":"ExportAllDeclaration","messageId":"exportAll","endLine":31,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Custom test utilities for rendering React components with all providers.\n *\n * Usage:\n *   import { render } from './test-utils';\n *   render(<MyComponent />);\n *\n * This wraps components in MemoryRouter and LanguageProvider.\n */\n\nimport { ReactElement } from \"react\";\nimport { render, RenderOptions } from \"@testing-library/react\";\nimport { MemoryRouter } from \"react-router-dom\";\nimport { LanguageProvider } from \"../contexts/LanguageContext\";\n\nconst AllTheProviders = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <MemoryRouter initialEntries={[\"/\"]}>\n      <LanguageProvider>\n        {children}\n      </LanguageProvider>\n    </MemoryRouter>\n  );\n};\n\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, \"wrapper\">\n) => render(ui, { wrapper: AllTheProviders, ...options });\n\nexport * from \"@testing-library/react\";\nexport { customRender as render };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/types/env.d.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ImportMeta' is defined but never used.","line":18,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_APP_NAME: string;\n  readonly VITE_APP_URL: string;\n  readonly VITE_SUPABASE_URL: string;\n  readonly VITE_SUPABASE_ANON_KEY: string;\n  readonly VITE_STRIPE_PUBLISHABLE_KEY: string;\n  readonly VITE_API_URL: string;\n  readonly VITE_ENABLE_ADMIN_REGISTRATION: string;\n  readonly VITE_ENABLE_MAINTENANCE_MODE: string;\n  readonly VITE_GA_TRACKING_ID: string;\n  readonly VITE_FACEBOOK_URL: string;\n  readonly VITE_TWITTER_URL: string;\n  readonly VITE_YOUTUBE_URL: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/types/member.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/types/supabase.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":694,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":694,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":697,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":697,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":700,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":700,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":703,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":703,"endColumn":9}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      appointments: {\n        Row: {\n          admin_notes: string | null\n          admin_response: string | null\n          confirmed_date: string | null\n          confirmed_time: string | null\n          created_at: string | null\n          email: string\n          id: string\n          name: string\n          notes: string | null\n          phone: string\n          requested_date: string\n          requested_time: string\n          responded_at: string | null\n          responded_by: string | null\n          service_title: string\n          status: string | null\n          updated_at: string | null\n        }\n        Insert: {\n          admin_notes?: string | null\n          admin_response?: string | null\n          confirmed_date?: string | null\n          confirmed_time?: string | null\n          created_at?: string | null\n          email: string\n          id?: string\n          name: string\n          notes?: string | null\n          phone: string\n          requested_date: string\n          requested_time: string\n          responded_at?: string | null\n          responded_by?: string | null\n          service_title: string\n          status?: string | null\n          updated_at?: string | null\n        }\n        Update: {\n          admin_notes?: string | null\n          admin_response?: string | null\n          confirmed_date?: string | null\n          confirmed_time?: string | null\n          created_at?: string | null\n          email?: string\n          id?: string\n          name?: string\n          notes?: string | null\n          phone?: string\n          requested_date?: string\n          requested_time?: string\n          responded_at?: string | null\n          responded_by?: string | null\n          service_title?: string\n          status?: string | null\n          updated_at?: string | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"appointments_responded_by_fkey\"\n            columns: [\"responded_by\"]\n            isOneToOne: false\n            referencedRelation: \"profiles\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      donations: {\n        Row: {\n          amount: number\n          created_at: string\n          donor_email: string | null\n          donor_name: string | null\n          id: string\n          is_anonymous: boolean | null\n          payment_id: string | null\n          payment_method: string | null\n          payment_status: string | null\n          purpose: string | null\n          updated_at: string\n        }\n        Insert: {\n          amount: number\n          created_at?: string\n          donor_email?: string | null\n          donor_name?: string | null\n          id?: string\n          is_anonymous?: boolean | null\n          payment_id?: string | null\n          payment_method?: string | null\n          payment_status?: string | null\n          purpose?: string | null\n          updated_at?: string\n        }\n        Update: {\n          amount?: number\n          created_at?: string\n          donor_email?: string | null\n          donor_name?: string | null\n          id?: string\n          is_anonymous?: boolean | null\n          payment_id?: string | null\n          payment_method?: string | null\n          payment_status?: string | null\n          purpose?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      email_campaigns: {\n        Row: {\n          content: string\n          created_at: string | null\n          created_by: string | null\n          id: string\n          name: string\n          recipient_count: number | null\n          scheduled_at: string | null\n          sent_at: string | null\n          sent_count: number | null\n          status: string | null\n          subject: string\n          updated_at: string | null\n        }\n        Insert: {\n          content: string\n          created_at?: string | null\n          created_by?: string | null\n          id?: string\n          name: string\n          recipient_count?: number | null\n          scheduled_at?: string | null\n          sent_at?: string | null\n          sent_count?: number | null\n          status?: string | null\n          subject: string\n          updated_at?: string | null\n        }\n        Update: {\n          content?: string\n          created_at?: string | null\n          created_by?: string | null\n          id?: string\n          name?: string\n          recipient_count?: number | null\n          scheduled_at?: string | null\n          sent_at?: string | null\n          sent_count?: number | null\n          status?: string | null\n          subject?: string\n          updated_at?: string | null\n        }\n        Relationships: []\n      }\n      email_settings: {\n        Row: {\n          auto_welcome_email: boolean | null\n          created_at: string | null\n          enable_newsletters: boolean | null\n          from_email: string | null\n          from_name: string | null\n          id: number\n          newsletter_frequency: string | null\n          smtp_host: string | null\n          smtp_password: string | null\n          smtp_port: number | null\n          smtp_username: string | null\n          updated_at: string | null\n        }\n        Insert: {\n          auto_welcome_email?: boolean | null\n          created_at?: string | null\n          enable_newsletters?: boolean | null\n          from_email?: string | null\n          from_name?: string | null\n          id?: number\n          newsletter_frequency?: string | null\n          smtp_host?: string | null\n          smtp_password?: string | null\n          smtp_port?: number | null\n          smtp_username?: string | null\n          updated_at?: string | null\n        }\n        Update: {\n          auto_welcome_email?: boolean | null\n          created_at?: string | null\n          enable_newsletters?: boolean | null\n          from_email?: string | null\n          from_name?: string | null\n          id?: number\n          newsletter_frequency?: string | null\n          smtp_host?: string | null\n          smtp_password?: string | null\n          smtp_port?: number | null\n          smtp_username?: string | null\n          updated_at?: string | null\n        }\n        Relationships: []\n      }\n      email_subscribers: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          name: string | null\n          preferences: Json | null\n          status: string | null\n          subscribed_at: string | null\n          unsubscribed_at: string | null\n          updated_at: string | null\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          name?: string | null\n          preferences?: Json | null\n          status?: string | null\n          subscribed_at?: string | null\n          unsubscribed_at?: string | null\n          updated_at?: string | null\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          name?: string | null\n          preferences?: Json | null\n          status?: string | null\n          subscribed_at?: string | null\n          unsubscribed_at?: string | null\n          updated_at?: string | null\n        }\n        Relationships: []\n      }\n      email_templates: {\n        Row: {\n          content: string\n          created_at: string | null\n          id: string\n          is_active: boolean | null\n          name: string\n          subject: string\n          template_type: string\n          updated_at: string | null\n        }\n        Insert: {\n          content: string\n          created_at?: string | null\n          id?: string\n          is_active?: boolean | null\n          name: string\n          subject: string\n          template_type: string\n          updated_at?: string | null\n        }\n        Update: {\n          content?: string\n          created_at?: string | null\n          id?: string\n          is_active?: boolean | null\n          name?: string\n          subject?: string\n          template_type?: string\n          updated_at?: string | null\n        }\n        Relationships: []\n      }\n      events: {\n        Row: {\n          created_at: string\n          description: string | null\n          event_date: string\n          event_time: string | null\n          id: string\n          image_url: string | null\n          is_featured: boolean | null\n          location: string | null\n          title: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          event_date: string\n          event_time?: string | null\n          id?: string\n          image_url?: string | null\n          is_featured?: boolean | null\n          location?: string | null\n          title: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          event_date?: string\n          event_time?: string | null\n          id?: string\n          image_url?: string | null\n          is_featured?: boolean | null\n          location?: string | null\n          title?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      gallery: {\n        Row: {\n          category: string | null\n          created_at: string\n          description: string | null\n          id: string\n          image_url: string\n          is_featured: boolean | null\n          title: string\n          updated_at: string\n        }\n        Insert: {\n          category?: string | null\n          created_at?: string\n          description?: string | null\n          id?: string\n          image_url: string\n          is_featured?: boolean | null\n          title: string\n          updated_at?: string\n        }\n        Update: {\n          category?: string | null\n          created_at?: string\n          description?: string | null\n          id?: string\n          image_url?: string\n          is_featured?: boolean | null\n          title?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      members: {\n        Row: {\n          address: string | null\n          created_at: string\n          email: string | null\n          full_name: string\n          id: string\n          join_date: string | null\n          last_renewal_date: string | null\n          membership_date: string | null\n          membership_status: string | null\n          membership_type: string | null\n          next_renewal_date: string | null\n          phone: string | null\n          updated_at: string\n        }\n        Insert: {\n          address?: string | null\n          created_at?: string\n          email?: string | null\n          full_name: string\n          id?: string\n          join_date?: string | null\n          last_renewal_date?: string | null\n          membership_date?: string | null\n          membership_status?: string | null\n          membership_type?: string | null\n          next_renewal_date?: string | null\n          phone?: string | null\n          updated_at?: string\n        }\n        Update: {\n          address?: string | null\n          created_at?: string\n          email?: string | null\n          full_name?: string\n          id?: string\n          join_date?: string | null\n          last_renewal_date?: string | null\n          membership_date?: string | null\n          membership_status?: string | null\n          membership_type?: string | null\n          next_renewal_date?: string | null\n          phone?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      newsletter_subscribers: {\n        Row: {\n          created_at: string | null\n          email: string\n          id: string\n          name: string | null\n          subscribed: boolean | null\n          subscription_date: string | null\n          unsubscribe_token: string | null\n          updated_at: string | null\n        }\n        Insert: {\n          created_at?: string | null\n          email: string\n          id?: string\n          name?: string | null\n          subscribed?: boolean | null\n          subscription_date?: string | null\n          unsubscribe_token?: string | null\n          updated_at?: string | null\n        }\n        Update: {\n          created_at?: string | null\n          email?: string\n          id?: string\n          name?: string | null\n          subscribed?: boolean | null\n          subscription_date?: string | null\n          unsubscribe_token?: string | null\n          updated_at?: string | null\n        }\n        Relationships: []\n      }\n      prayer_requests: {\n        Row: {\n          created_at: string\n          email: string | null\n          id: string\n          is_answered: boolean | null\n          is_public: boolean | null\n          name: string\n          request: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          email?: string | null\n          id?: string\n          is_answered?: boolean | null\n          is_public?: boolean | null\n          name: string\n          request: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          email?: string | null\n          id?: string\n          is_answered?: boolean | null\n          is_public?: boolean | null\n          name?: string\n          request?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      profiles: {\n        Row: {\n          created_at: string\n          email: string | null\n          id: string\n          role: string | null\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          email?: string | null\n          id?: string\n          role?: string | null\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          email?: string | null\n          id?: string\n          role?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      scheduled_content: {\n        Row: {\n          content: Json\n          created_at: string | null\n          created_by: string | null\n          id: string\n          published_at: string | null\n          recurring: Json | null\n          scheduled_for: string\n          status: string\n          title: string\n          type: string\n          updated_at: string | null\n        }\n        Insert: {\n          content: Json\n          created_at?: string | null\n          created_by?: string | null\n          id?: string\n          published_at?: string | null\n          recurring?: Json | null\n          scheduled_for: string\n          status?: string\n          title: string\n          type: string\n          updated_at?: string | null\n        }\n        Update: {\n          content?: Json\n          created_at?: string | null\n          created_by?: string | null\n          id?: string\n          published_at?: string | null\n          recurring?: Json | null\n          scheduled_for?: string\n          status?: string\n          title?: string\n          type?: string\n          updated_at?: string | null\n        }\n        Relationships: []\n      }\n      sermons: {\n        Row: {\n          audio_url: string | null\n          created_at: string\n          description: string | null\n          id: string\n          is_featured: boolean | null\n          preacher: string | null\n          scripture_reference: string | null\n          sermon_date: string\n          title: string\n          updated_at: string\n        }\n        Insert: {\n          audio_url?: string | null\n          created_at?: string\n          description?: string | null\n          id?: string\n          is_featured?: boolean | null\n          preacher?: string | null\n          scripture_reference?: string | null\n          sermon_date: string\n          title: string\n          updated_at?: string\n        }\n        Update: {\n          audio_url?: string | null\n          created_at?: string\n          description?: string | null\n          id?: string\n          is_featured?: boolean | null\n          preacher?: string | null\n          scripture_reference?: string | null\n          sermon_date?: string\n          title?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      site_settings: {\n        Row: {\n          admin_email: string | null\n          church_address: string | null\n          church_name: string | null\n          created_at: string\n          email: string | null\n          enable_donations: boolean | null\n          enable_email_notifications: boolean | null\n          enable_membership: boolean | null\n          enable_newsletter: boolean | null\n          enable_stripe: boolean | null\n          from_email: string | null\n          id: number\n          maintenance_mode: boolean | null\n          phone_number: string | null\n          stripe_publishable_key: string | null\n          updated_at: string\n        }\n        Insert: {\n          admin_email?: string | null\n          church_address?: string | null\n          church_name?: string | null\n          created_at?: string\n          email?: string | null\n          enable_donations?: boolean | null\n          enable_email_notifications?: boolean | null\n          enable_membership?: boolean | null\n          enable_newsletter?: boolean | null\n          enable_stripe?: boolean | null\n          from_email?: string | null\n          id?: number\n          maintenance_mode?: boolean | null\n          phone_number?: string | null\n          stripe_publishable_key?: string | null\n          updated_at?: string\n        }\n        Update: {\n          admin_email?: string | null\n          church_address?: string | null\n          church_name?: string | null\n          created_at?: string\n          email?: string | null\n          enable_donations?: boolean | null\n          enable_email_notifications?: boolean | null\n          enable_membership?: boolean | null\n          enable_newsletter?: boolean | null\n          enable_stripe?: boolean | null\n          from_email?: string | null\n          id?: number\n          maintenance_mode?: boolean | null\n          phone_number?: string | null\n          stripe_publishable_key?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      stripe_settings: {\n        Row: {\n          created_at: string | null\n          default_currency: string | null\n          enable_stripe: boolean | null\n          id: number\n          stripe_mode: string | null\n          stripe_publishable_key: string | null\n          stripe_secret_key: string | null\n          stripe_webhook_secret: string | null\n          updated_at: string | null\n        }\n        Insert: {\n          created_at?: string | null\n          default_currency?: string | null\n          enable_stripe?: boolean | null\n          id?: number\n          stripe_mode?: string | null\n          stripe_publishable_key?: string | null\n          stripe_secret_key?: string | null\n          stripe_webhook_secret?: string | null\n          updated_at?: string | null\n        }\n        Update: {\n          created_at?: string | null\n          default_currency?: string | null\n          enable_stripe?: boolean | null\n          id?: number\n          stripe_mode?: string | null\n          stripe_publishable_key?: string | null\n          stripe_secret_key?: string | null\n          stripe_webhook_secret?: string | null\n          updated_at?: string | null\n        }\n        Relationships: []\n      }\n      testimonials: {\n        Row: {\n          content: string\n          created_at: string\n          id: string\n          is_approved: boolean | null\n          name: string\n          updated_at: string\n        }\n        Insert: {\n          content: string\n          created_at?: string\n          id?: string\n          is_approved?: boolean | null\n          name: string\n          updated_at?: string\n        }\n        Update: {\n          content?: string\n          created_at?: string\n          id?: string\n          is_approved?: boolean | null\n          name?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R\n      }\n      ? R\n      : never\n    : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I\n      }\n      ? I\n      : never\n    : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U\n      }\n      ? U\n      : never\n    : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/utils/adminDiagnostics.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":16,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":64,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":94,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\nexport interface DiagnosticResult {\n  component: string;\n  status: \"success\" | \"warning\" | \"error\";\n  message: string;\n  details?: any;\n}\n\nexport class AdminDiagnostics {\n  static async runFullDiagnostics(): Promise<DiagnosticResult[]> {\n    const results: DiagnosticResult[] = [];\n\n    // Test database connectivity\n    try {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n      if (error) throw error;\n      results.push({\n        component: \"Database Connection\",\n        status: \"success\",\n        message: \"Database connection successful\",\n      });\n    } catch (error) {\n      results.push({\n        component: \"Database Connection\",\n        status: \"error\",\n        message: \"Database connection failed\",\n        details: error,\n      });\n    }\n\n    // Test authentication\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (session) {\n        results.push({\n          component: \"Authentication\",\n          status: \"success\",\n          message: \"User authenticated successfully\",\n        });\n      } else {\n        results.push({\n          component: \"Authentication\",\n          status: \"warning\",\n          message: \"No active session found\",\n        });\n      }\n    } catch (error) {\n      results.push({\n        component: \"Authentication\",\n        status: \"error\",\n        message: \"Authentication check failed\",\n        details: error,\n      });\n    }\n\n    // Test storage access\n    try {\n      const { data, error } = await supabase.storage\n        .from(\"images\")\n        .list(\"\", { limit: 1 });\n      if (error) throw error;\n      results.push({\n        component: \"Storage Access\",\n        status: \"success\",\n        message: \"Storage access successful\",\n      });\n    } catch (error) {\n      results.push({\n        component: \"Storage Access\",\n        status: \"error\",\n        message: \"Storage access failed\",\n        details: error,\n      });\n    }\n\n    // Test each table\n    const tables = [\n      \"events\",\n      \"members\",\n      \"gallery\",\n      \"donations\",\n      \"testimonials\",\n      \"prayer_requests\",\n      \"sermons\",\n    ];\n    for (const table of tables) {\n      try {\n        const { data, error } = await supabase.from(table).select(\"*\").limit(1);\n        if (error) throw error;\n        results.push({\n          component: `Table: ${table}`,\n          status: \"success\",\n          message: `Table ${table} accessible`,\n        });\n      } catch (error) {\n        results.push({\n          component: `Table: ${table}`,\n          status: \"error\",\n          message: `Table ${table} access failed`,\n          details: error,\n        });\n      }\n    }\n\n    return results;\n  }\n\n  static async testImagePaths(): Promise<DiagnosticResult[]> {\n    const results: DiagnosticResult[] = [];\n    const imagePaths = [\n      \"/images/gallery/church-service.jpg\",\n      \"/images/religious/palm-sunday.jpg\",\n      \"/images/religious/crucifixion.jpg\",\n      \"/images/religious/procession.jpg\",\n      \"/images/gallery/timket.jpg\",\n      \"/images/gallery/ceremony-1.jpg\",\n      \"/images/gallery/ceremony-2.jpg\",\n      \"/images/gallery/ceremony-3.jpg\",\n    ];\n\n    for (const path of imagePaths) {\n      try {\n        const response = await fetch(path, { method: \"HEAD\" });\n        if (response.ok) {\n          results.push({\n            component: `Image: ${path}`,\n            status: \"success\",\n            message: `Image accessible`,\n          });\n        } else {\n          results.push({\n            component: `Image: ${path}`,\n            status: \"error\",\n            message: `Image not found (${response.status})`,\n          });\n        }\n      } catch (error) {\n        results.push({\n          component: `Image: ${path}`,\n          status: \"error\",\n          message: `Image check failed`,\n          details: error,\n        });\n      }\n    }\n\n    return results;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/utils/adminHelpers.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":245,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":248,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":248,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":249,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":249,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\n/**\n * Utility functions for admin operations with proper error handling\n */\n\nexport interface DatabaseHealthCheck {\n  isHealthy: boolean;\n  errors: string[];\n  tables: Record<string, boolean>;\n}\n\n/**\n * Check the health of all database tables used by the admin system\n */\nexport async function checkDatabaseHealth(): Promise<DatabaseHealthCheck> {\n  const result: DatabaseHealthCheck = {\n    isHealthy: true,\n    errors: [],\n    tables: {},\n  };\n\n  const tables = [\n    \"profiles\",\n    \"events\",\n    \"members\",\n    \"donations\",\n    \"sermons\",\n    \"gallery\",\n    \"testimonials\",\n    \"prayer_requests\",\n    \"appointments\",\n  ];\n\n  for (const table of tables) {\n    try {\n      const { error } = await supabase.from(table).select(\"count\").limit(1);\n\n      if (error) {\n        result.tables[table] = false;\n        result.errors.push(`${table}: ${error.message}`);\n        result.isHealthy = false;\n      } else {\n        result.tables[table] = true;\n      }\n    } catch (err) {\n      result.tables[table] = false;\n      result.errors.push(\n        `${table}: ${err instanceof Error ? err.message : \"Unknown error\"}`,\n      );\n      result.isHealthy = false;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Safe data loader with error handling and retries\n */\nexport async function safeDataLoader<T>(\n  operation: () => Promise<{ data: T[] | null; error: any }>,\n  tableName: string,\n  retries: number = 2,\n): Promise<{ data: T[]; error: string | null }> {\n  let lastError: any = null;\n\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    try {\n      console.log(\n        `Loading ${tableName} data (attempt ${attempt + 1}/${retries + 1})`,\n      );\n\n      const result = await operation();\n\n      if (result.error) {\n        lastError = result.error;\n        console.error(\n          `${tableName} load error (attempt ${attempt + 1}):`,\n          result.error,\n        );\n\n        // Wait before retry (exponential backoff)\n        if (attempt < retries) {\n          await new Promise((resolve) =>\n            setTimeout(resolve, Math.pow(2, attempt) * 1000),\n          );\n          continue;\n        }\n      } else {\n        console.log(\n          `Successfully loaded ${tableName} data:`,\n          result.data?.length || 0,\n          \"records\",\n        );\n        return { data: result.data || [], error: null };\n      }\n    } catch (err) {\n      lastError = err;\n      console.error(\n        `${tableName} load exception (attempt ${attempt + 1}):`,\n        err,\n      );\n\n      if (attempt < retries) {\n        await new Promise((resolve) =>\n          setTimeout(resolve, Math.pow(2, attempt) * 1000),\n        );\n        continue;\n      }\n    }\n  }\n\n  const errorMessage =\n    lastError instanceof Error\n      ? lastError.message\n      : typeof lastError === \"string\"\n        ? lastError\n        : `Failed to load ${tableName} after ${retries + 1} attempts`;\n\n  return { data: [], error: errorMessage };\n}\n\n/**\n * Validate admin authentication and permissions\n */\nexport async function validateAdminAuth(): Promise<{\n  isValid: boolean;\n  user: any;\n  error?: string;\n}> {\n  try {\n    const {\n      data: { session },\n      error: sessionError,\n    } = await supabase.auth.getSession();\n\n    if (sessionError) {\n      return {\n        isValid: false,\n        user: null,\n        error: `Session error: ${sessionError.message}`,\n      };\n    }\n\n    if (!session) {\n      return { isValid: false, user: null, error: \"No active session\" };\n    }\n\n    // Check if user has admin role\n    const { data: profile, error: profileError } = await supabase\n      .from(\"profiles\")\n      .select(\"role, email\")\n      .eq(\"id\", session.user.id)\n      .single();\n\n    if (profileError) {\n      return {\n        isValid: false,\n        user: null,\n        error: `Profile error: ${profileError.message}`,\n      };\n    }\n\n    if (!profile || profile.role !== \"admin\") {\n      return { isValid: false, user: null, error: \"Insufficient permissions\" };\n    }\n\n    return {\n      isValid: true,\n      user: {\n        ...session.user,\n        role: profile.role,\n        email: profile.email || session.user.email,\n      },\n    };\n  } catch (error) {\n    return {\n      isValid: false,\n      user: null,\n      error:\n        error instanceof Error ? error.message : \"Authentication check failed\",\n    };\n  }\n}\n\n/**\n * Safe operation wrapper with error handling\n */\nexport async function safeOperation<T>(\n  operation: () => Promise<T>,\n  operationName: string,\n): Promise<{ success: boolean; data?: T; error?: string }> {\n  try {\n    console.log(`Starting operation: ${operationName}`);\n    const data = await operation();\n    console.log(`Operation completed successfully: ${operationName}`);\n    return { success: true, data };\n  } catch (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : \"Unknown error\";\n    console.error(`Operation failed: ${operationName}`, error);\n    return { success: false, error: errorMessage };\n  }\n}\n\n/**\n * Format error messages for user display\n */\nexport function formatErrorMessage(error: any, context?: string): string {\n  if (!error) return \"Unknown error occurred\";\n\n  let message = \"\";\n\n  if (typeof error === \"string\") {\n    message = error;\n  } else if (error.message) {\n    message = error.message;\n  } else if (error.error_description) {\n    message = error.error_description;\n  } else {\n    message = \"An unexpected error occurred\";\n  }\n\n  // Add context if provided\n  if (context) {\n    message = `${context}: ${message}`;\n  }\n\n  // Make database errors more user-friendly\n  if (message.includes(\"relation\") && message.includes(\"does not exist\")) {\n    message = \"Database table not found. Please contact support.\";\n  } else if (message.includes(\"permission denied\")) {\n    message = \"Access denied. Please check your permissions.\";\n  } else if (message.includes(\"connection\")) {\n    message = \"Database connection error. Please try again.\";\n  }\n\n  return message;\n}\n\n/**\n * Debounce function to prevent rapid successive calls\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n/**\n * Log admin actions for audit trail\n */\nexport function logAdminAction(action: string, table: string, details?: any) {\n  const logEntry = {\n    timestamp: new Date().toISOString(),\n    action,\n    table,\n    details,\n    url: window.location.pathname,\n    userAgent: navigator.userAgent,\n  };\n\n  console.log(\"Admin Action:\", logEntry);\n\n  // Store in localStorage for debugging\n  try {\n    const logs = JSON.parse(localStorage.getItem(\"admin_action_logs\") || \"[]\");\n    logs.unshift(logEntry);\n    // Keep only last 50 logs\n    const recentLogs = logs.slice(0, 50);\n    localStorage.setItem(\"admin_action_logs\", JSON.stringify(recentLogs));\n  } catch (error) {\n    console.warn(\"Failed to store admin action log:\", error);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/utils/api.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_settings' is defined but never used.","line":5,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'_settings' is defined but never used.","line":9,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":13,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'_email' is defined but never used.","line":14,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":39}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced stub for API utility. Replace with real implementation as needed.\nexport const api = {\n  stripeSettings: {\n    getSettings: async () => ({}),\n    updateSettings: async (_settings: any) => {},\n  },\n  emailSettings: {\n    getSettings: async () => ({}),\n    updateSettings: async (_settings: any) => {},\n  },\n  emailSubscribers: {\n    getSubscribers: async () => [],\n    deleteSubscriber: async (_id: string) => {},\n    unsubscribe: async (_email: string) => {},\n  },\n  emailTemplates: {\n    getTemplates: async () => [],\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/utils/debugSync.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'dataSyncService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'DataSyncService' is not defined.","line":118,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":118,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\n\nexport interface DebugInfo {\n  timestamp: string;\n  component: string;\n  action: string;\n  data?: any;\n  error?: string;\n}\n\nclass DebugSyncClass {\n  private logs: DebugInfo[] = [];\n  private maxLogs = 100;\n\n  log(component: string, action: string, data?: any, error?: string): void {\n    const logEntry: DebugInfo = {\n      timestamp: new Date().toISOString(),\n      component,\n      action,\n      data,\n      error,\n    };\n\n    this.logs.unshift(logEntry);\n\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(0, this.maxLogs);\n    }\n\n    console.log(`[DebugSync] ${component}: ${action}`, data);\n\n    if (error) {\n      console.error(`[DebugSync] ${component} Error:`, error);\n    }\n  }\n\n  getLogs(): DebugInfo[] {\n    return [...this.logs];\n  }\n\n  clearLogs(): void {\n    this.logs = [];\n    console.log(\"[DebugSync] Logs cleared\");\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      this.log(\"DebugSync\", \"Testing database connection\");\n\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\", { count: \"exact\", head: true });\n\n      if (error) {\n        this.log(\"DebugSync\", \"Connection test failed\", null, error.message);\n        return false;\n      }\n\n      this.log(\"DebugSync\", \"Connection test successful\", { count: data });\n      return true;\n    } catch (err) {\n      this.log(\"DebugSync\", \"Connection test error\", null, String(err));\n      return false;\n    }\n  }\n\n  async testTableAccess(): Promise<{ [key: string]: boolean }> {\n    const tables = [\n      \"events\",\n      \"gallery\",\n      \"sermons\",\n      \"testimonials\",\n      \"prayer_requests\",\n      \"donations\",\n      \"members\",\n      \"profiles\",\n    ] as const;\n\n    const results: { [key: string]: boolean } = {};\n\n    for (const table of tables) {\n      try {\n        this.log(\"DebugSync\", `Testing table access: ${table}`);\n\n        const { error } = await supabase\n          .from(table)\n          .select(\"count\", { count: \"exact\", head: true });\n\n        results[table] = !error;\n\n        if (error) {\n          this.log(\n            \"DebugSync\",\n            `Table access failed: ${table}`,\n            null,\n            error.message,\n          );\n        } else {\n          this.log(\"DebugSync\", `Table access successful: ${table}`);\n        }\n      } catch (err) {\n        results[table] = false;\n        this.log(\n          \"DebugSync\",\n          `Table access error: ${table}`,\n          null,\n          String(err),\n        );\n      }\n    }\n\n    return results;\n  }\n\n  triggerForceRefresh(): void {\n    this.log(\"DebugSync\", \"Triggering force refresh\");\n    DataSyncService.forceRefresh();\n  }\n\n  getSystemInfo(): any {\n    return {\n      userAgent: navigator.userAgent,\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      environment: import.meta.env.MODE,\n    };\n  }\n}\n\nexport const debugSync = new DebugSyncClass();\n\n// Make it available globally for debugging\nif (typeof window !== \"undefined\") {\n  (window as any).debugSync = debugSync;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/utils/error-handling.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'status' is defined but never used.","line":6,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'code' is defined but never used.","line":7,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":36,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":38,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":13}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from \"@/components/ui/use-toast\";\n\nexport class APIError extends Error {\n  constructor(\n    message: string,\n    public status?: number,\n    public code?: string,\n  ) {\n    super(message);\n    this.name = \"APIError\";\n  }\n}\n\nexport const handleAPIError = (error: unknown): APIError => {\n  if (error instanceof APIError) {\n    return error;\n  }\n\n  const apiError = new APIError(\n    error instanceof Error ? error.message : \"An unexpected error occurred\",\n  );\n\n  // Log error for monitoring\n  console.error(\"API Error:\", error);\n\n  // Show toast notification\n  toast({\n    title: \"Error\",\n    description: apiError.message,\n    variant: \"destructive\",\n  });\n\n  return apiError;\n};\n\nexport const withErrorHandling = <T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n): ((...args: Parameters<T>) => Promise<ReturnType<T>>) => {\n  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      throw handleAPIError(error);\n    }\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/utils/safeUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/utils/systemTest.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":11,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":125,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// System Test Utilities\n// This file contains utilities to test various system components\n\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { api } from \"@/integrations/supabase/api\";\n\nexport const systemTest = {\n  // Test database connectivity\n  async testDatabaseConnection() {\n    try {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n      if (error) throw error;\n      console.log(\"✅ Database connection successful\");\n      return true;\n    } catch (error) {\n      console.error(\"❌ Database connection failed:\", error);\n      return false;\n    }\n  },\n\n  // Test authentication\n  async testAuthentication() {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      console.log(\"✅ Authentication system working\");\n      return { success: true, hasSession: !!session };\n    } catch (error) {\n      console.error(\"❌ Authentication test failed:\", error);\n      return { success: false, hasSession: false };\n    }\n  },\n\n  // Test API endpoints\n  async testAPIEndpoints() {\n    const results = {\n      events: false,\n      sermons: false,\n      gallery: false,\n      testimonials: false,\n      prayerRequests: false,\n      members: false,\n      donations: false,\n    };\n\n    try {\n      // Test events API\n      await api.events.getEvents();\n      results.events = true;\n      console.log(\"✅ Events API working\");\n    } catch (error) {\n      console.error(\"❌ Events API failed:\", error);\n    }\n\n    try {\n      // Test sermons API\n      await api.sermons.getSermons();\n      results.sermons = true;\n      console.log(\"✅ Sermons API working\");\n    } catch (error) {\n      console.error(\"❌ Sermons API failed:\", error);\n    }\n\n    try {\n      // Test gallery API\n      await api.gallery.getGalleryImages();\n      results.gallery = true;\n      console.log(\"✅ Gallery API working\");\n    } catch (error) {\n      console.error(\"❌ Gallery API failed:\", error);\n    }\n\n    try {\n      // Test testimonials API\n      await api.testimonials.getTestimonials();\n      results.testimonials = true;\n      console.log(\"✅ Testimonials API working\");\n    } catch (error) {\n      console.error(\"❌ Testimonials API failed:\", error);\n    }\n\n    try {\n      // Test prayer requests API\n      await api.prayerRequests.getPrayerRequests();\n      results.prayerRequests = true;\n      console.log(\"✅ Prayer Requests API working\");\n    } catch (error) {\n      console.error(\"❌ Prayer Requests API failed:\", error);\n    }\n\n    try {\n      // Test members API\n      await api.members.getMembers();\n      results.members = true;\n      console.log(\"✅ Members API working\");\n    } catch (error) {\n      console.error(\"❌ Members API failed:\", error);\n    }\n\n    try {\n      // Test donations API\n      await api.donations.getDonations();\n      results.donations = true;\n      console.log(\"✅ Donations API working\");\n    } catch (error) {\n      console.error(\"❌ Donations API failed:\", error);\n    }\n\n    return results;\n  },\n\n  // Test edge functions\n  async testEdgeFunctions() {\n    const results = {\n      createCheckout: false,\n      sendEmail: false,\n    };\n\n    try {\n      // Test create-checkout function (without actually creating a checkout)\n      const { error } = await supabase.functions.invoke(\n        \"supabase-functions-create-checkout\",\n        {\n          body: {\n            amount: \"1\",\n            donationType: \"one_time\",\n            purpose: \"test\",\n            email: \"test@example.com\",\n            name: \"Test User\",\n            address: \"Test Address\",\n            isAnonymous: false,\n            includeBulletin: false,\n            memorial: \"\",\n          },\n        },\n      );\n\n      // If we get a response (even an error), the function is accessible\n      results.createCheckout = true;\n      console.log(\"✅ Create Checkout function accessible\");\n    } catch (error) {\n      console.error(\"❌ Create Checkout function failed:\", error);\n    }\n\n    return results;\n  },\n\n  // Run comprehensive system test\n  async runFullSystemTest() {\n    console.log(\"🔍 Starting comprehensive system test...\");\n\n    const results = {\n      database: false,\n      authentication: { success: false, hasSession: false },\n      api: {},\n      edgeFunctions: {},\n      timestamp: new Date().toISOString(),\n    };\n\n    // Test database\n    results.database = await this.testDatabaseConnection();\n\n    // Test authentication\n    results.authentication = await this.testAuthentication();\n\n    // Test API endpoints\n    results.api = await this.testAPIEndpoints();\n\n    // Test edge functions\n    results.edgeFunctions = await this.testEdgeFunctions();\n\n    // Summary\n    const apiSuccessCount = Object.values(results.api).filter(Boolean).length;\n    const apiTotalCount = Object.keys(results.api).length;\n    const edgeFunctionSuccessCount = Object.values(\n      results.edgeFunctions,\n    ).filter(Boolean).length;\n    const edgeFunctionTotalCount = Object.keys(results.edgeFunctions).length;\n\n    console.log(\"\\n📊 System Test Summary:\");\n    console.log(`Database: ${results.database ? \"✅\" : \"❌\"}`);\n    console.log(\n      `Authentication: ${results.authentication.success ? \"✅\" : \"❌\"}`,\n    );\n    console.log(`API Endpoints: ${apiSuccessCount}/${apiTotalCount} working`);\n    console.log(\n      `Edge Functions: ${edgeFunctionSuccessCount}/${edgeFunctionTotalCount} accessible`,\n    );\n\n    return results;\n  },\n};\n\n// Make it available globally for debugging\nif (typeof window !== \"undefined\") {\n  (window as any).systemTest = systemTest;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/_shared/cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/_shared/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/_shared/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/admin-dashboard-enhanced/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":15,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":52,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":70,"endColumn":12},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":72,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":72,"endColumn":32},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":73,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":75,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":76,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":76,"endColumn":80},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":79,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":79,"endColumn":47},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":80,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":80,"endColumn":51},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":81,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":81,"endColumn":45},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":82,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":82,"endColumn":47},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":83,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":83,"endColumn":61},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":84,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":84,"endColumn":57},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":85,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":85,"endColumn":47},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":86,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":86,"endColumn":55},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":88,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":90,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":91,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":94,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":96,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":98,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":100,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":102,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":104,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":104,"endColumn":80},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":106,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":108,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":110,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":112,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":114,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":154,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":160,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":160,"endColumn":33},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":211,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":219,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":249,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":249,"endColumn":69},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":250,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":250,"endColumn":42},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":251,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":251,"endColumn":80},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":253,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":267,"endColumn":14},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":269,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":315,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":321,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":321,"endColumn":66},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":322,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":325,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'calculateGrowthTrend' is defined but never used.","line":358,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":358,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'groupByField' is defined but never used.","line":384,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":384,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'createTimeline' is defined but never used.","line":393,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":393,"endColumn":26},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":407,"column":20,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":407,"endColumn":34,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[12949,12973],"text":"Object.prototype.hasOwnProperty.call(timeline, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const action = url.searchParams.get(\"action\") || \"dashboard\";\n\n    // Verify admin authentication\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) {\n      throw new Error(\"Authorization required\");\n    }\n\n    const token = authHeader.replace(\"Bearer \", \"\");\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseClient.auth.getUser(token);\n\n    if (authError || !user) {\n      throw new Error(\"Unauthorized\");\n    }\n\n    // Verify admin role\n    const { data: profile, error: profileError } = await supabaseClient\n      .from(\"profiles\")\n      .select(\"role\")\n      .eq(\"id\", user.id)\n      .single();\n\n    if (profileError || profile?.role !== \"admin\") {\n      throw new Error(\"Admin access required\");\n    }\n\n    switch (action) {\n      case \"dashboard\":\n        // Enhanced dashboard with comprehensive statistics\n        const [\n          membersRes,\n          donationsRes,\n          eventsRes,\n          sermonsRes,\n          prayerRequestsRes,\n          testimonialsRes,\n          galleryRes,\n          subscribersRes,\n        ] = await Promise.all([\n          supabaseClient.from(\"members\").select(\"*\"),\n          supabaseClient.from(\"donations\").select(\"*\"),\n          supabaseClient.from(\"events\").select(\"*\"),\n          supabaseClient.from(\"sermons\").select(\"*\"),\n          supabaseClient.from(\"prayer_requests\").select(\"*\"),\n          supabaseClient.from(\"testimonials\").select(\"*\"),\n          supabaseClient.from(\"gallery\").select(\"*\"),\n          supabaseClient.from(\"email_subscribers\").select(\"*\"),\n        ]);\n\n        const now = new Date();\n        const thirtyDaysAgo = new Date(\n          now.getTime() - 30 * 24 * 60 * 60 * 1000,\n        );\n        const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n        // Calculate comprehensive statistics\n        const members = membersRes.data || [];\n        const donations = donationsRes.data || [];\n        const events = eventsRes.data || [];\n        const sermons = sermonsRes.data || [];\n        const prayerRequests = prayerRequestsRes.data || [];\n        const testimonials = testimonialsRes.data || [];\n        const gallery = galleryRes.data || [];\n        const subscribers = subscribersRes.data || [];\n\n        const recentDonations = donations.filter(\n          (d) => new Date(d.created_at) >= thirtyDaysAgo,\n        );\n        const totalDonationAmount = recentDonations.reduce(\n          (sum, d) => sum + (d.amount || 0),\n          0,\n        );\n\n        const upcomingEvents = events.filter(\n          (e) => new Date(e.event_date) > now,\n        );\n\n        const recentMembers = members.filter(\n          (m) => new Date(m.created_at) >= sevenDaysAgo,\n        );\n\n        const pendingTestimonials = testimonials.filter((t) => !t.is_approved);\n\n        const unansweredPrayerRequests = prayerRequests.filter(\n          (p) => !p.is_answered,\n        );\n\n        const activeSubscribers = subscribers.filter(\n          (s) => s.status === \"active\",\n        );\n\n        const dashboardData = {\n          overview: {\n            totalMembers: members.length,\n            newMembersThisWeek: recentMembers.length,\n            totalDonations: totalDonationAmount,\n            donationCount: recentDonations.length,\n            upcomingEvents: upcomingEvents.length,\n            totalEvents: events.length,\n            totalSermons: sermons.length,\n            pendingTestimonials: pendingTestimonials.length,\n            unansweredPrayerRequests: unansweredPrayerRequests.length,\n            galleryImages: gallery.length,\n            activeSubscribers: activeSubscribers.length,\n          },\n          recentActivity: {\n            newMembers: recentMembers.slice(0, 5).map((m) => ({\n              id: m.id,\n              name: m.full_name,\n              date: m.created_at,\n              type: \"member\",\n            })),\n            recentDonations: recentDonations.slice(0, 5).map((d) => ({\n              id: d.id,\n              amount: d.amount,\n              donor: d.donor_name || \"Anonymous\",\n              date: d.created_at,\n              type: \"donation\",\n            })),\n            upcomingEvents: upcomingEvents.slice(0, 5).map((e) => ({\n              id: e.id,\n              title: e.title,\n              date: e.event_date,\n              type: \"event\",\n            })),\n          },\n          trends: {\n            memberGrowth: this.calculateGrowthTrend(members, \"created_at\"),\n            donationTrend: this.calculateGrowthTrend(donations, \"created_at\"),\n            eventActivity: this.calculateGrowthTrend(events, \"created_at\"),\n          },\n        };\n\n        return formatSuccessResponse({ dashboard: dashboardData });\n\n      case \"system_health\":\n        // Enhanced system health check\n        const healthChecks = [];\n\n        // Database health\n        try {\n          const start = Date.now();\n          await supabaseClient\n            .from(\"profiles\")\n            .select(\"count\", { count: \"exact\", head: true });\n          const responseTime = Date.now() - start;\n\n          healthChecks.push({\n            component: \"Database\",\n            status: \"healthy\",\n            message: \"Database connection successful\",\n            responseTime,\n            details: { responseTime: `${responseTime}ms` },\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Database\",\n            status: \"error\",\n            message: \"Database connection failed\",\n            error: error.message,\n          });\n        }\n\n        // Storage health\n        try {\n          const start = Date.now();\n          const { data } = await supabaseClient.storage\n            .from(\"images\")\n            .list(\"\", { limit: 1 });\n          const responseTime = Date.now() - start;\n\n          healthChecks.push({\n            component: \"Storage\",\n            status: \"healthy\",\n            message: \"Storage accessible\",\n            responseTime,\n            details: { files: data?.length || 0 },\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Storage\",\n            status: \"error\",\n            message: \"Storage access failed\",\n            error: error.message,\n          });\n        }\n\n        // Table integrity checks\n        const tables = [\n          \"members\",\n          \"events\",\n          \"donations\",\n          \"sermons\",\n          \"testimonials\",\n          \"prayer_requests\",\n          \"gallery\",\n        ];\n\n        for (const table of tables) {\n          try {\n            const { count, error } = await supabaseClient\n              .from(table)\n              .select(\"*\", { count: \"exact\", head: true });\n\n            if (error) throw error;\n\n            healthChecks.push({\n              component: `Table: ${table}`,\n              status: \"healthy\",\n              message: `${count || 0} records`,\n              details: { recordCount: count || 0 },\n            });\n          } catch (error) {\n            healthChecks.push({\n              component: `Table: ${table}`,\n              status: \"error\",\n              message: \"Table access failed\",\n              error: error.message,\n            });\n          }\n        }\n\n        return formatSuccessResponse({ health: healthChecks });\n\n      case \"analytics\":\n        // Enhanced analytics data\n        const timeRange = url.searchParams.get(\"timeRange\") || \"30\";\n        const days = parseInt(timeRange);\n        const startDate = new Date(now.getTime() - days * 24 * 60 * 60 * 1000);\n\n        const [analyticsMembers, analyticsDonations, analyticsEvents] =\n          await Promise.all([\n            supabaseClient\n              .from(\"members\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"donations\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"events\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n          ]);\n\n        const analyticsData = {\n          timeRange: `${days} days`,\n          members: {\n            total: analyticsMembers.data?.length || 0,\n            byType: this.groupByField(\n              analyticsMembers.data || [],\n              \"membership_type\",\n            ),\n            byStatus: this.groupByField(\n              analyticsMembers.data || [],\n              \"membership_status\",\n            ),\n            timeline: this.createTimeline(\n              analyticsMembers.data || [],\n              \"created_at\",\n              days,\n            ),\n          },\n          donations: {\n            total:\n              analyticsDonations.data?.reduce(\n                (sum, d) => sum + (d.amount || 0),\n                0,\n              ) || 0,\n            count: analyticsDonations.data?.length || 0,\n            byPurpose: this.groupByField(\n              analyticsDonations.data || [],\n              \"purpose\",\n            ),\n            timeline: this.createTimeline(\n              analyticsDonations.data || [],\n              \"created_at\",\n              days,\n            ),\n          },\n          events: {\n            total: analyticsEvents.data?.length || 0,\n            upcoming:\n              analyticsEvents.data?.filter((e) => new Date(e.event_date) > now)\n                .length || 0,\n            timeline: this.createTimeline(\n              analyticsEvents.data || [],\n              \"created_at\",\n              days,\n            ),\n          },\n        };\n\n        return formatSuccessResponse({ analytics: analyticsData });\n\n      case \"export\":\n        // Data export functionality\n        const exportType = url.searchParams.get(\"type\") || \"all\";\n        const exportData: any = {\n          exportedAt: new Date().toISOString(),\n          exportType,\n        };\n\n        if (exportType === \"all\" || exportType === \"members\") {\n          const { data: exportMembers } = await supabaseClient\n            .from(\"members\")\n            .select(\"*\");\n          exportData.members = exportMembers;\n        }\n\n        if (exportType === \"all\" || exportType === \"donations\") {\n          const { data: exportDonations } = await supabaseClient\n            .from(\"donations\")\n            .select(\"*\");\n          exportData.donations = exportDonations;\n        }\n\n        if (exportType === \"all\" || exportType === \"events\") {\n          const { data: exportEvents } = await supabaseClient\n            .from(\"events\")\n            .select(\"*\");\n          exportData.events = exportEvents;\n        }\n\n        return formatSuccessResponse({ export: exportData });\n\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n\n  // Helper methods\n  function calculateGrowthTrend(data: any[], dateField: string) {\n    const now = new Date();\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n    const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n\n    const thisMonthCount = data.filter(\n      (item) => new Date(item[dateField]) >= thisMonth,\n    ).length;\n    const lastMonthCount = data.filter((item) => {\n      const date = new Date(item[dateField]);\n      return date >= lastMonth && date <= lastMonthEnd;\n    }).length;\n\n    const growth =\n      lastMonthCount > 0\n        ? Math.round(((thisMonthCount - lastMonthCount) / lastMonthCount) * 100)\n        : 0;\n\n    return {\n      thisMonth: thisMonthCount,\n      lastMonth: lastMonthCount,\n      growth,\n    };\n  }\n\n  function groupByField(data: any[], field: string) {\n    const groups: Record<string, number> = {};\n    data.forEach((item) => {\n      const value = item[field] || \"Unknown\";\n      groups[value] = (groups[value] || 0) + 1;\n    });\n    return groups;\n  }\n\n  function createTimeline(data: any[], dateField: string, days: number) {\n    const timeline: Record<string, number> = {};\n    const now = new Date();\n\n    // Initialize timeline with zeros\n    for (let i = 0; i < days; i++) {\n      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n      const dateKey = date.toISOString().split(\"T\")[0];\n      timeline[dateKey] = 0;\n    }\n\n    // Count items by date\n    data.forEach((item) => {\n      const dateKey = new Date(item[dateField]).toISOString().split(\"T\")[0];\n      if (timeline.hasOwnProperty(dateKey)) {\n        timeline[dateKey]++;\n      }\n    });\n\n    return Object.entries(timeline)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([date, count]) => ({ date, count }));\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/admin-dashboard/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":15,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":52,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":83,"endColumn":12},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":85,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":86,"endColumn":73},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":87,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":87,"endColumn":62},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":89,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":100,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":106,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":132,"endColumn":12},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":134,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":139,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":145,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":145,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'settings' is assigned a value but never used.","line":165,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":165,"endColumn":33},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":207,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":207,"endColumn":66},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":208,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":208,"endColumn":36},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":248,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":248,"endColumn":58},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":249,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":249,"endColumn":72},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":250,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":252,"endColumn":25},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":254,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":254,"endColumn":37}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const action = url.searchParams.get(\"action\") || \"dashboard\";\n\n    // Verify admin authentication\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) {\n      throw new Error(\"Authorization required\");\n    }\n\n    const token = authHeader.replace(\"Bearer \", \"\");\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseClient.auth.getUser(token);\n\n    if (authError || !user) {\n      throw new Error(\"Unauthorized\");\n    }\n\n    // Verify admin role\n    const { data: profile, error: profileError } = await supabaseClient\n      .from(\"profiles\")\n      .select(\"role\")\n      .eq(\"id\", user.id)\n      .single();\n\n    if (profileError || profile?.role !== \"admin\") {\n      throw new Error(\"Admin access required\");\n    }\n\n    switch (action) {\n      case \"dashboard\":\n        // Get dashboard statistics\n        const [\n          membersRes,\n          donationsRes,\n          eventsRes,\n          sermonsRes,\n          prayerRequestsRes,\n          testimonialsRes,\n        ] = await Promise.all([\n          supabaseClient.from(\"membership_statistics\").select(\"*\").single(),\n          supabaseClient\n            .from(\"donations\")\n            .select(\"amount, created_at\")\n            .gte(\n              \"created_at\",\n              new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n            ),\n          supabaseClient\n            .from(\"events\")\n            .select(\"*\", { count: \"exact\", head: true })\n            .gte(\"event_date\", new Date().toISOString().split(\"T\")[0]),\n          supabaseClient\n            .from(\"sermons\")\n            .select(\"*\", { count: \"exact\", head: true }),\n          supabaseClient\n            .from(\"prayer_requests\")\n            .select(\"*\", { count: \"exact\", head: true })\n            .eq(\"is_answered\", false),\n          supabaseClient\n            .from(\"testimonials\")\n            .select(\"*\", { count: \"exact\", head: true })\n            .eq(\"is_approved\", false),\n        ]);\n\n        const totalDonations =\n          donationsRes.data?.reduce((sum, d) => sum + d.amount, 0) || 0;\n        const donationCount = donationsRes.data?.length || 0;\n\n        const dashboardData = {\n          members: membersRes.data || {},\n          donations: {\n            total: totalDonations,\n            count: donationCount,\n            thisMonth: totalDonations,\n          },\n          upcomingEvents: eventsRes.count || 0,\n          totalSermons: sermonsRes.count || 0,\n          pendingPrayerRequests: prayerRequestsRes.count || 0,\n          pendingTestimonials: testimonialsRes.count || 0,\n        };\n\n        return formatSuccessResponse({ dashboard: dashboardData });\n\n      case \"recent_activity\":\n        // Get recent activity across all tables\n        const [\n          recentMembers,\n          recentDonations,\n          recentEvents,\n          recentPrayerRequests,\n        ] = await Promise.all([\n          supabaseClient\n            .from(\"members\")\n            .select(\"id, full_name, created_at, membership_status\")\n            .order(\"created_at\", { ascending: false })\n            .limit(5),\n          supabaseClient\n            .from(\"donations\")\n            .select(\"id, amount, donor_name, created_at\")\n            .order(\"created_at\", { ascending: false })\n            .limit(5),\n          supabaseClient\n            .from(\"events\")\n            .select(\"id, title, event_date, created_at\")\n            .order(\"created_at\", { ascending: false })\n            .limit(5),\n          supabaseClient\n            .from(\"prayer_requests\")\n            .select(\"id, name, created_at\")\n            .order(\"created_at\", { ascending: false })\n            .limit(5),\n        ]);\n\n        const recentActivity = {\n          members: recentMembers.data || [],\n          donations: recentDonations.data || [],\n          events: recentEvents.data || [],\n          prayerRequests: recentPrayerRequests.data || [],\n        };\n\n        return formatSuccessResponse({ activity: recentActivity });\n\n      case \"system_health\":\n        // Check system health\n        const healthChecks = [];\n\n        try {\n          await supabaseClient\n            .from(\"profiles\")\n            .select(\"count\", { count: \"exact\", head: true });\n          healthChecks.push({\n            component: \"Database\",\n            status: \"healthy\",\n            message: \"Database connection successful\",\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Database\",\n            status: \"error\",\n            message: \"Database connection failed\",\n          });\n        }\n\n        try {\n          const { data: settings } = await supabaseClient\n            .from(\"site_settings\")\n            .select(\"*\")\n            .single();\n          healthChecks.push({\n            component: \"Site Settings\",\n            status: \"healthy\",\n            message: \"Site settings loaded\",\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Site Settings\",\n            status: \"warning\",\n            message: \"Site settings not configured\",\n          });\n        }\n\n        try {\n          const { data: stripeSettings } = await supabaseClient\n            .from(\"stripe_settings\")\n            .select(\"*\")\n            .single();\n          const stripeStatus = stripeSettings?.enable_stripe\n            ? \"configured\"\n            : \"disabled\";\n          healthChecks.push({\n            component: \"Stripe\",\n            status: \"healthy\",\n            message: `Stripe is ${stripeStatus}`,\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Stripe\",\n            status: \"warning\",\n            message: \"Stripe settings not configured\",\n          });\n        }\n\n        return formatSuccessResponse({ health: healthChecks });\n\n      case \"export_data\":\n        // Export data for backup\n        const exportType = url.searchParams.get(\"type\") || \"all\";\n        const exportData: any = {};\n\n        if (exportType === \"all\" || exportType === \"members\") {\n          const { data: members } = await supabaseClient\n            .from(\"members\")\n            .select(\"*\");\n          exportData.members = members;\n        }\n\n        if (exportType === \"all\" || exportType === \"donations\") {\n          const { data: donations } = await supabaseClient\n            .from(\"donations\")\n            .select(\"*\");\n          exportData.donations = donations;\n        }\n\n        if (exportType === \"all\" || exportType === \"events\") {\n          const { data: events } = await supabaseClient\n            .from(\"events\")\n            .select(\"*\");\n          exportData.events = events;\n        }\n\n        if (exportType === \"all\" || exportType === \"sermons\") {\n          const { data: sermons } = await supabaseClient\n            .from(\"sermons\")\n            .select(\"*\");\n          exportData.sermons = sermons;\n        }\n\n        return formatSuccessResponse({\n          export: {\n            type: exportType,\n            timestamp: new Date().toISOString(),\n            data: exportData,\n          },\n        });\n\n      case \"cleanup\":\n        // Cleanup old data\n        const cleanupType = url.searchParams.get(\"type\");\n        const daysOld = parseInt(url.searchParams.get(\"days\") || \"90\");\n        const cutoffDate = new Date(\n          Date.now() - daysOld * 24 * 60 * 60 * 1000,\n        ).toISOString();\n\n        let cleanupResult: any = {};\n\n        if (cleanupType === \"logs\" || cleanupType === \"all\") {\n          // Clean up old audit logs if they exist\n          cleanupResult.logs = \"No audit logs table found\";\n        }\n\n        if (cleanupType === \"inactive_members\" || cleanupType === \"all\") {\n          const { count } = await supabaseClient\n            .from(\"members\")\n            .delete()\n            .eq(\"membership_status\", \"inactive\")\n            .lt(\"created_at\", cutoffDate);\n          cleanupResult.inactive_members = `Cleaned up ${count || 0} inactive members`;\n        }\n\n        return formatSuccessResponse({ cleanup: cleanupResult });\n\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/analytics-reports/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":15,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":35,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":38,"endColumn":55},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":40,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":41,"endColumn":65},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":42,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":46,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":47,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":47,"endColumn":65},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":59,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":62,"endColumn":55},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":64,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":64,"endColumn":80},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":65,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":65,"endColumn":81},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":76,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":87,"endColumn":14},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":98,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":112,"endColumn":14}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const reportType = url.searchParams.get(\"type\") || \"overview\";\n    const timeRange = url.searchParams.get(\"timeRange\") || \"6months\";\n\n    // Calculate date ranges\n    const now = new Date();\n    const monthsBack =\n      timeRange === \"3months\" ? 3 : timeRange === \"6months\" ? 6 : 12;\n    const startDate = new Date(\n      now.getTime() - monthsBack * 30 * 24 * 60 * 60 * 1000,\n    );\n\n    let reportData: any = {};\n\n    switch (reportType) {\n      case \"donations\":\n        const { data: donations } = await supabaseClient\n          .from(\"donations\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString());\n\n        const totalAmount =\n          donations?.reduce((sum, d) => sum + d.amount, 0) || 0;\n        const monthlyData = processMonthlyData(\n          donations || [],\n          \"created_at\",\n          \"amount\",\n        );\n        const purposeData = processPurposeData(donations || []);\n\n        reportData = {\n          total: totalAmount,\n          count: donations?.length || 0,\n          monthly: monthlyData,\n          byPurpose: purposeData,\n          trends: calculateTrends(donations || [], \"amount\"),\n        };\n        break;\n\n      case \"members\":\n        const { data: members } = await supabaseClient\n          .from(\"members\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString());\n\n        const membersByMonth = processMonthlyData(members || [], \"created_at\");\n        const membersByType = processTypeData(members || [], \"membership_type\");\n\n        reportData = {\n          total: members?.length || 0,\n          monthly: membersByMonth,\n          byType: membersByType,\n          trends: calculateTrends(members || []),\n        };\n        break;\n\n      case \"engagement\":\n        const [prayerRequestsRes, testimonialsRes, eventsRes] =\n          await Promise.all([\n            supabaseClient\n              .from(\"prayer_requests\")\n              .select(\"*\", { count: \"exact\", head: true }),\n            supabaseClient\n              .from(\"testimonials\")\n              .select(\"*\", { count: \"exact\", head: true }),\n            supabaseClient\n              .from(\"events\")\n              .select(\"*\", { count: \"exact\", head: true }),\n          ]);\n\n        reportData = {\n          prayerRequests: prayerRequestsRes.count || 0,\n          testimonials: testimonialsRes.count || 0,\n          events: eventsRes.count || 0,\n        };\n        break;\n\n      default:\n        // Overview report\n        const [donationsOverview, membersOverview, eventsOverview] =\n          await Promise.all([\n            supabaseClient\n              .from(\"donations\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"members\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"events\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n          ]);\n\n        reportData = {\n          donations: {\n            total:\n              donationsOverview.data?.reduce((sum, d) => sum + d.amount, 0) ||\n              0,\n            count: donationsOverview.data?.length || 0,\n          },\n          members: {\n            total: membersOverview.data?.length || 0,\n          },\n          events: {\n            total: eventsOverview.data?.length || 0,\n            upcoming:\n              eventsOverview.data?.filter((e) => new Date(e.event_date) > now)\n                .length || 0,\n          },\n        };\n    }\n\n    return formatSuccessResponse({\n      reportType,\n      timeRange,\n      generatedAt: new Date().toISOString(),\n      data: reportData,\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n\n// Helper functions\nfunction processMonthlyData(\n  items: any[],\n  dateField: string,\n  valueField?: string,\n) {\n  const monthlyData: Record<string, { count: number; amount: number }> = {};\n\n  items.forEach((item) => {\n    const date = new Date(item[dateField]);\n    const month = date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n    });\n    if (!monthlyData[month]) {\n      monthlyData[month] = { count: 0, amount: 0 };\n    }\n    monthlyData[month].count += 1;\n    if (valueField && item[valueField]) {\n      monthlyData[month].amount += item[valueField];\n    }\n  });\n\n  return Object.entries(monthlyData).map(([month, data]) => ({\n    month,\n    count: data.count,\n    amount: data.amount,\n  }));\n}\n\nfunction processPurposeData(donations: any[]) {\n  const purposeData: Record<string, number> = {};\n  const total = donations.reduce((sum, d) => sum + d.amount, 0);\n\n  donations.forEach((donation) => {\n    const purpose = donation.purpose || \"General Fund\";\n    purposeData[purpose] = (purposeData[purpose] || 0) + donation.amount;\n  });\n\n  return Object.entries(purposeData).map(([purpose, amount]) => ({\n    purpose,\n    amount,\n    percentage: total > 0 ? Math.round((amount / total) * 100) : 0,\n  }));\n}\n\nfunction processTypeData(members: any[], typeField: string) {\n  const typeData: Record<string, number> = {};\n  const total = members.length;\n\n  members.forEach((member) => {\n    const type = member[typeField] || \"Regular\";\n    typeData[type] = (typeData[type] || 0) + 1;\n  });\n\n  return Object.entries(typeData).map(([type, count]) => ({\n    type,\n    count,\n    percentage: total > 0 ? Math.round((count / total) * 100) : 0,\n  }));\n}\n\nfunction calculateTrends(items: any[], valueField?: string) {\n  const now = new Date();\n  const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n  const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n  const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n\n  const thisMonth = items.filter(\n    (item) => new Date(item.created_at) >= thisMonthStart,\n  );\n  const lastMonth = items.filter((item) => {\n    const date = new Date(item.created_at);\n    return date >= lastMonthStart && date <= lastMonthEnd;\n  });\n\n  const thisMonthValue = valueField\n    ? thisMonth.reduce((sum, item) => sum + (item[valueField] || 0), 0)\n    : thisMonth.length;\n  const lastMonthValue = valueField\n    ? lastMonth.reduce((sum, item) => sum + (item[valueField] || 0), 0)\n    : lastMonth.length;\n\n  const growth =\n    lastMonthValue > 0\n      ? Math.round(((thisMonthValue - lastMonthValue) / lastMonthValue) * 100)\n      : 0;\n\n  return {\n    thisMonth: thisMonthValue,\n    lastMonth: lastMonthValue,\n    growth,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/bulk-operations/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":15,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":30,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":30,"endColumn":31},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":31,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":31,"endColumn":32},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":32,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":32,"endColumn":34},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":64,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":66,"endColumn":24},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":84,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":87,"endColumn":26},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":104,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":104,"endColumn":61},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":111,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":111,"endColumn":59},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":125,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":125,"endColumn":66},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":132,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":132,"endColumn":36},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":152,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":164,"endColumn":21}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const { operation, table, data, ids, filters } = await req.json();\n\n    let result: any = {};\n\n    switch (operation) {\n      case \"bulk_import\":\n        if (!Array.isArray(data)) {\n          throw new Error(\"Data must be an array for bulk import\");\n        }\n\n        // Process in batches to avoid timeout\n        const batchSize = 100;\n        let totalProcessed = 0;\n        const errors: any[] = [];\n\n        for (let i = 0; i < data.length; i += batchSize) {\n          const batch = data.slice(i, i + batchSize);\n\n          try {\n            const { error } = await supabaseClient.from(table).insert(batch);\n\n            if (error) {\n              errors.push({ batch: i / batchSize + 1, error: error.message });\n            } else {\n              totalProcessed += batch.length;\n            }\n          } catch (batchError) {\n            errors.push({\n              batch: i / batchSize + 1,\n              error: String(batchError),\n            });\n          }\n        }\n\n        result = {\n          operation: \"bulk_import\",\n          table,\n          totalRecords: data.length,\n          processed: totalProcessed,\n          errors: errors.length,\n          errorDetails: errors,\n        };\n        break;\n\n      case \"bulk_export\":\n        const { data: exportData, error: exportError } = await supabaseClient\n          .from(table)\n          .select(\"*\");\n\n        if (exportError) throw exportError;\n\n        result = {\n          operation: \"bulk_export\",\n          table,\n          recordCount: exportData?.length || 0,\n          data: exportData,\n          exportedAt: new Date().toISOString(),\n        };\n        break;\n\n      case \"bulk_delete\":\n        if (!Array.isArray(ids) || ids.length === 0) {\n          throw new Error(\"IDs array is required for bulk delete\");\n        }\n\n        const { error: deleteError } = await supabaseClient\n          .from(table)\n          .delete()\n          .in(\"id\", ids);\n\n        if (deleteError) throw deleteError;\n\n        result = {\n          operation: \"bulk_delete\",\n          table,\n          deletedCount: ids.length,\n          deletedIds: ids,\n        };\n        break;\n\n      case \"bulk_update\":\n        if (!data || !filters) {\n          throw new Error(\"Data and filters are required for bulk update\");\n        }\n\n        let query = supabaseClient.from(table).update(data);\n\n        // Apply filters\n        Object.entries(filters).forEach(([key, value]) => {\n          query = query.eq(key, value);\n        });\n\n        const { error: updateError, count } = await query;\n\n        if (updateError) throw updateError;\n\n        result = {\n          operation: \"bulk_update\",\n          table,\n          updatedCount: count || 0,\n          updateData: data,\n          filters,\n        };\n        break;\n\n      case \"bulk_email\":\n        const { subject, content, recipientType = \"all\" } = data;\n\n        if (!subject || !content) {\n          throw new Error(\"Subject and content are required for bulk email\");\n        }\n\n        // Get recipients based on type\n        let recipients: any[] = [];\n\n        if (recipientType === \"subscribers\") {\n          const { data: subscribersData } = await supabaseClient\n            .from(\"email_subscribers\")\n            .select(\"email, name\")\n            .eq(\"status\", \"active\");\n          recipients = subscribersData || [];\n        } else if (recipientType === \"members\") {\n          const { data: membersData } = await supabaseClient\n            .from(\"members\")\n            .select(\"email, full_name\")\n            .not(\"email\", \"is\", null)\n            .eq(\"membership_status\", \"active\");\n          recipients =\n            membersData?.map((m) => ({ email: m.email, name: m.full_name })) ||\n            [];\n        }\n\n        // Create email campaign record\n        const { data: campaign, error: campaignError } = await supabaseClient\n          .from(\"email_campaigns\")\n          .insert({\n            name: `Bulk Email - ${new Date().toLocaleDateString()}`,\n            subject,\n            content,\n            status: \"sent\",\n            recipient_count: recipients.length,\n            sent_count: recipients.length,\n            sent_at: new Date().toISOString(),\n          })\n          .select()\n          .single();\n\n        if (campaignError) throw campaignError;\n\n        result = {\n          operation: \"bulk_email\",\n          campaignId: campaign.id,\n          recipientCount: recipients.length,\n          subject,\n          sentAt: new Date().toISOString(),\n        };\n        break;\n\n      default:\n        throw new Error(`Unknown operation: ${operation}`);\n    }\n\n    return formatSuccessResponse(result);\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/content-scheduler/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":10,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":17,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":193,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":197,"endColumn":23},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":204,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":204,"endColumn":39},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":208,"column":15,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":212,"endColumn":27},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":218,"column":15,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":223,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'publishResult' is assigned a value but never used.","line":235,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":235,"endColumn":28},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":248,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":248,"endColumn":54},{"ruleId":"no-undef","severity":2,"message":"'publishResult' is not defined.","line":271,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":271,"endColumn":60}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const contentId = url.searchParams.get(\"id\");\n    const action = url.searchParams.get(\"action\");\n\n    // Verify admin authentication\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) {\n      throw new Error(\"Authorization required\");\n    }\n\n    const token = authHeader.replace(\"Bearer \", \"\");\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseClient.auth.getUser(token);\n\n    if (authError || !user) {\n      throw new Error(\"Unauthorized\");\n    }\n\n    // Verify admin role\n    const { data: profile, error: profileError } = await supabaseClient\n      .from(\"profiles\")\n      .select(\"role\")\n      .eq(\"id\", user.id)\n      .single();\n\n    if (profileError || profile?.role !== \"admin\") {\n      throw new Error(\"Admin access required\");\n    }\n\n    if (req.method === \"GET\") {\n      if (action === \"pending\") {\n        // Get pending scheduled content\n        const { data: pendingContent, error } = await supabaseClient\n          .from(\"scheduled_content\")\n          .select(\"*\")\n          .eq(\"status\", \"scheduled\")\n          .lte(\"scheduled_for\", new Date().toISOString())\n          .order(\"scheduled_for\", { ascending: true });\n\n        if (error) throw error;\n\n        return formatSuccessResponse({ content: pendingContent });\n      } else if (contentId) {\n        // Get specific scheduled content\n        const { data: content, error } = await supabaseClient\n          .from(\"scheduled_content\")\n          .select(\"*\")\n          .eq(\"id\", contentId)\n          .single();\n\n        if (error) throw error;\n\n        return formatSuccessResponse({ content });\n      } else {\n        // Get all scheduled content\n        const status = url.searchParams.get(\"status\");\n        const type = url.searchParams.get(\"type\");\n        const page = parseInt(url.searchParams.get(\"page\") || \"1\");\n        const limit = parseInt(url.searchParams.get(\"limit\") || \"20\");\n        const offset = (page - 1) * limit;\n\n        let query = supabaseClient\n          .from(\"scheduled_content\")\n          .select(\"*\", { count: \"exact\" })\n          .order(\"scheduled_for\", { ascending: false })\n          .range(offset, offset + limit - 1);\n\n        if (status) {\n          query = query.eq(\"status\", status);\n        }\n        if (type) {\n          query = query.eq(\"type\", type);\n        }\n\n        const { data: content, error, count } = await query;\n\n        if (error) throw error;\n\n        return formatSuccessResponse({\n          content,\n          pagination: {\n            page,\n            limit,\n            total: count || 0,\n            totalPages: Math.ceil((count || 0) / limit),\n          },\n        });\n      }\n    } else if (req.method === \"POST\") {\n      // Create scheduled content\n      const contentData = await req.json();\n\n      // Validate required fields\n      if (\n        !contentData.title ||\n        !contentData.content ||\n        !contentData.type ||\n        !contentData.scheduled_for\n      ) {\n        throw new Error(\"Title, content, type, and scheduled_for are required\");\n      }\n\n      // Validate content type\n      const validTypes = [\"event\", \"sermon\", \"announcement\", \"newsletter\"];\n      if (!validTypes.includes(contentData.type)) {\n        throw new Error(\"Invalid content type\");\n      }\n\n      // Sanitize input data\n      const sanitizedData = {\n        title: sanitizeString(contentData.title, 200),\n        content: contentData.content, // JSON content, don't sanitize\n        type: contentData.type,\n        scheduled_for: contentData.scheduled_for,\n        recurring: contentData.recurring || null,\n        status: \"scheduled\",\n        created_by: user.id,\n      };\n\n      const { data: newContent, error } = await supabaseClient\n        .from(\"scheduled_content\")\n        .insert([sanitizedData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ content: newContent }, 201);\n    } else if (req.method === \"PUT\" && contentId) {\n      // Update scheduled content\n      const updates = await req.json();\n\n      // Sanitize updates\n      const sanitizedUpdates = {\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n\n      if (updates.title) {\n        sanitizedUpdates.title = sanitizeString(updates.title, 200);\n      }\n\n      const { data: updatedContent, error } = await supabaseClient\n        .from(\"scheduled_content\")\n        .update(sanitizedUpdates)\n        .eq(\"id\", contentId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ content: updatedContent });\n    } else if (req.method === \"DELETE\" && contentId) {\n      // Delete scheduled content\n      const { error } = await supabaseClient\n        .from(\"scheduled_content\")\n        .delete()\n        .eq(\"id\", contentId);\n\n      if (error) throw error;\n\n      return formatSuccessResponse({\n        message: \"Scheduled content deleted successfully\",\n      });\n    } else if (req.method === \"PATCH\" && contentId && action) {\n      // Special actions on scheduled content\n      let updateData: any = { updated_at: new Date().toISOString() };\n\n      switch (action) {\n        case \"publish\":\n          // Publish the scheduled content immediately\n          const { data: content } = await supabaseClient\n            .from(\"scheduled_content\")\n            .select(\"*\")\n            .eq(\"id\", contentId)\n            .single();\n\n          if (!content) {\n            throw new Error(\"Content not found\");\n          }\n\n          // Create the actual content based on type\n          let publishResult: any = {};\n\n          switch (content.type) {\n            case \"event\":\n              const { data: newEvent, error: eventError } = await supabaseClient\n                .from(\"events\")\n                .insert([content.content])\n                .select()\n                .single();\n              if (eventError) throw eventError;\n              publishResult = { event: newEvent };\n              break;\n\n            case \"sermon\":\n              const { data: newSermon, error: sermonError } =\n                await supabaseClient\n                  .from(\"sermons\")\n                  .insert([content.content])\n                  .select()\n                  .single();\n              if (sermonError) throw sermonError;\n              publishResult = { sermon: newSermon };\n              break;\n\n            case \"announcement\":\n              // For announcements, we might want to send emails or create notifications\n              publishResult = { announcement: \"Published as notification\" };\n              break;\n\n            case \"newsletter\":\n              // For newsletters, trigger email campaign\n              publishResult = { newsletter: \"Email campaign triggered\" };\n              break;\n          }\n\n          updateData.status = \"published\";\n          updateData.published_at = new Date().toISOString();\n          break;\n\n        case \"cancel\":\n          updateData.status = \"cancelled\";\n          break;\n\n        case \"reschedule\":\n          const { scheduled_for } = await req.json();\n          if (!scheduled_for) {\n            throw new Error(\"New scheduled_for date is required\");\n          }\n          updateData.scheduled_for = scheduled_for;\n          updateData.status = \"scheduled\";\n          break;\n\n        default:\n          throw new Error(`Unknown action: ${action}`);\n      }\n\n      const { data: updatedContent, error } = await supabaseClient\n        .from(\"scheduled_content\")\n        .update(updateData)\n        .eq(\"id\", contentId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({\n        content: updatedContent,\n        publishResult: action === \"publish\" ? publishResult : undefined,\n      });\n    }\n\n    return formatErrorResponse(new Error(\"Method not allowed\"), 405);\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/create-checkout/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":71,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":86,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":87,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":87,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":115,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":11}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n  validateEmail,\n  checkRateLimit,\n} from \"@shared/utils.ts\";\nimport Stripe from \"https://esm.sh/stripe@14.21.0\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\ninterface CheckoutRequest {\n  amount: string;\n  donationType: string;\n  purpose: string;\n  email: string;\n  name?: string;\n  address?: string;\n  memberId?: string;\n}\n\n// Input validation helper\nfunction validateInput(data: CheckoutRequest): {\n  isValid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  // Validate amount\n  const amount = parseFloat(data.amount);\n  if (isNaN(amount) || amount < 1 || amount > 10000) {\n    errors.push(\"Amount must be between $1 and $10,000\");\n  }\n\n  // Validate donation type\n  const validDonationTypes = [\"one_time\", \"monthly\", \"quarterly\", \"annually\"];\n  if (!validDonationTypes.includes(data.donationType)) {\n    errors.push(\"Invalid donation type\");\n  }\n\n  // Validate purpose\n  const validPurposes = [\n    \"general_fund\",\n    \"building_fund\",\n    \"youth_programs\",\n    \"charity\",\n    \"membership_fee\",\n  ];\n  if (!validPurposes.includes(data.purpose)) {\n    errors.push(\"Invalid donation purpose\");\n  }\n\n  // Validate email format\n  if (!validateEmail(data.email)) {\n    errors.push(\"Invalid email format\");\n  }\n\n  // Sanitize string inputs\n  if (data.name && sanitizeString(data.name, 100) !== data.name) {\n    errors.push(\"Name contains invalid characters or is too long\");\n  }\n\n  if (data.address && sanitizeString(data.address, 200) !== data.address) {\n    errors.push(\"Address contains invalid characters or is too long\");\n  }\n\n  return { isValid: errors.length === 0, errors };\n}\n\nDeno.serve(async (req: Request) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  // Rate limiting\n  const clientIP =\n    req.headers.get(\"x-forwarded-for\") ||\n    req.headers.get(\"x-real-ip\") ||\n    \"unknown\";\n  if (!checkRateLimit(clientIP, 10, 60000)) {\n    return formatErrorResponse(new Error(\"Rate limit exceeded\"), 429);\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const requestData: CheckoutRequest = await req.json();\n\n    // Validate input data\n    const validation = validateInput(requestData);\n    if (!validation.isValid) {\n      return new Response(\n        JSON.stringify({ error: validation.errors.join(\", \") }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 400,\n        },\n      );\n    }\n\n    const { amount, donationType, purpose, email, name, address, memberId } =\n      requestData;\n\n    if (!amount || !donationType || !purpose || !email) {\n      throw new Error(\n        \"Missing required fields: amount, donationType, purpose, email\",\n      );\n    }\n\n    // Use demo key for testing - in production, set STRIPE_SECRET_KEY environment variable\n    const stripeKey =\n      Deno.env.get(\"STRIPE_SECRET_KEY\") || \"sk_test_51234567890abcdef\";\n\n    if (!stripeKey || stripeKey === \"sk_test_51234567890abcdef\") {\n      console.log(\"Using demo Stripe key - this is for testing purposes only\");\n    }\n\n    const stripe = new Stripe(stripeKey, {\n      apiVersion: \"2023-10-16\",\n    });\n\n    const customers = await stripe.customers.list({ email, limit: 1 });\n    let customerId;\n    if (customers.data.length > 0) {\n      customerId = customers.data[0].id;\n\n      if (name || address) {\n        await stripe.customers.update(customerId, {\n          name: name || undefined,\n          address: address\n            ? {\n                line1: address,\n              }\n            : undefined,\n        });\n      }\n    } else {\n      const customer = await stripe.customers.create({\n        email,\n        name: name || undefined,\n        address: address\n          ? {\n              line1: address,\n            }\n          : undefined,\n      });\n      customerId = customer.id;\n    }\n\n    const amountInCents = Math.round(parseFloat(amount) * 100);\n    const productName =\n      purpose === \"general_fund\"\n        ? \"General Fund Donation\"\n        : purpose === \"building_fund\"\n          ? \"Building Fund Donation\"\n          : purpose === \"youth_programs\"\n            ? \"Youth Programs Donation\"\n            : purpose === \"membership_fee\"\n              ? \"Membership Fee\"\n              : \"Charitable Donation\";\n\n    const isRecurring = donationType !== \"one_time\";\n\n    const sessionConfig: Stripe.Checkout.SessionCreateParams = {\n      customer: customerId,\n      payment_method_types: [\"card\"],\n      line_items: [\n        {\n          price_data: {\n            currency: \"usd\",\n            product_data: {\n              name: productName,\n              description: `${purpose.replace(\"_\", \" \")} - ${isRecurring ? \"Recurring\" : \"One-time\"} donation`,\n            },\n            unit_amount: amountInCents,\n            ...(isRecurring && {\n              recurring: {\n                interval:\n                  donationType === \"monthly\"\n                    ? \"month\"\n                    : donationType === \"quarterly\"\n                      ? \"month\"\n                      : \"year\",\n                interval_count: donationType === \"quarterly\" ? 3 : 1,\n              },\n            }),\n          },\n          quantity: 1,\n        },\n      ],\n      mode: isRecurring ? \"subscription\" : \"payment\",\n      success_url: `${req.headers.get(\"origin\")}/donation-success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${req.headers.get(\"origin\")}/donation`,\n      metadata: {\n        purpose,\n        email,\n        donationType,\n        memberId: memberId || \"\",\n        demo_mode: \"true\",\n      },\n    };\n\n    const session = await stripe.checkout.sessions.create(sessionConfig);\n\n    try {\n      console.log(\"Storing donation record in database\");\n      const { data: donationData, error: donationError } = await supabaseClient\n        .from(\"donations\")\n        .insert([\n          {\n            amount: parseFloat(amount),\n            donor_email: email,\n            donor_name: name || null,\n            purpose: purpose,\n            payment_status: \"pending\",\n            payment_id: session.id,\n            payment_method: \"stripe\",\n            is_anonymous: false,\n            created_at: new Date().toISOString(),\n          },\n        ])\n        .select()\n        .single();\n\n      if (donationError) {\n        console.error(\"Error storing donation record:\", donationError);\n      } else {\n        console.log(\"Donation record stored successfully:\", donationData);\n      }\n    } catch (dbError) {\n      console.error(\"Exception storing donation record:\", dbError);\n    }\n\n    return formatSuccessResponse({ url: session.url });\n  } catch (error) {\n    console.error(\"Error in create-checkout function:\", error);\n    const errorMessage =\n      error instanceof Error ? error.message : \"Unknown error\";\n    return formatErrorResponse(new Error(errorMessage), 500);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/generate-admin-code/backup/deps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/generate-admin-code/backup/index.new.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'GenerateCodeResponse' is defined but never used.","line":4,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":20,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":21,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\ninterface GenerateCodeResponse {\n  code: string;\n}\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      throw new Error('No authorization header');\n    }\n\n    const { data: user, error: authError } = await supabaseClient.auth.getUser(\n      authHeader.replace('Bearer ', '')\n    );\n\n    if (authError || !user) {\n      throw new Error('Invalid authentication token');\n    }\n\n    const { data, error } = await supabaseClient\n      .rpc('generate_admin_registration_code');\n\n    if (error) throw error;\n\n    return new Response(\n      JSON.stringify({ code: data }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 200,\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        status: 'error'\n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 400,\n      }\n    );\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/generate-admin-code/backup/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'GenerateCodeResponse' is defined but never used.","line":3,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":19,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":20,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve, createClient } from \"./deps.ts\";\n\ninterface GenerateCodeResponse {\n  code: string;\n}\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      throw new Error('No authorization header');\n    }\n\n    const { data: user, error: authError } = await supabaseClient.auth.getUser(\n      authHeader.replace('Bearer ', '')\n    );\n\n    if (authError || !user) {\n      throw new Error('Invalid authentication token');\n    }\n\n    const { data, error } = await supabaseClient\n      .rpc('generate_admin_registration_code');\n\n    if (error) throw error;\n\n    return new Response(\n      JSON.stringify({ code: data }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 200,\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        status: 'error'\n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 400,\n      }\n    );\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/generate-admin-code/deps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/generate-admin-code/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":17,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":18,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":28,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nserve(async (req: Request) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    // Generate a random 6-digit code\n    const code = Math.floor(100000 + Math.random() * 900000).toString();\n    \n    // Set expiration to 1 hour from now\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000).toISOString();\n\n    const { data, error } = await supabaseClient\n      .from(\"admin_registration_codes\")\n      .insert([\n        {\n          code,\n          expires_at: expiresAt,\n          is_used: false,\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return new Response(JSON.stringify({ code, expires_at: expiresAt }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"Error generating admin code:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n    return new Response(JSON.stringify({ error: errorMessage }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/get-session/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":27,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport Stripe from \"https://esm.sh/stripe@14.21.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface SessionRequest {\n  session_id: string;\n}\n\nserve(async (req: Request) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const requestData: SessionRequest = await req.json();\n    const { session_id } = requestData;\n    \n    if (!session_id) {\n      throw new Error(\"Missing session_id parameter\");\n    }\n\n    const stripe = new Stripe(Deno.env.get(\"STRIPE_SECRET_KEY\") || \"\", {\n      apiVersion: \"2023-10-16\",\n    });\n\n    const session = await stripe.checkout.sessions.retrieve(session_id, {\n      expand: ['payment_intent', 'subscription', 'customer']\n    });\n\n    return new Response(JSON.stringify({ session }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"Error in get-session function:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n    return new Response(JSON.stringify({ error: errorMessage }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/membership-management/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":11,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":17,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":18,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":11}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n  validateEmail,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const memberId = url.searchParams.get(\"id\");\n    const action = url.searchParams.get(\"action\");\n\n    if (req.method === \"GET\") {\n      if (action === \"statistics\") {\n        // Get membership statistics\n        const { data: stats, error } = await supabaseClient\n          .from(\"membership_statistics\")\n          .select(\"*\")\n          .single();\n\n        if (error) throw error;\n\n        return formatSuccessResponse({ statistics: stats });\n      } else if (action === \"active\") {\n        // Get active members\n        const { data: activeMembers, error } = await supabaseClient\n          .from(\"active_members\")\n          .select(\"*\")\n          .limit(100);\n\n        if (error) throw error;\n\n        return formatSuccessResponse({ members: activeMembers });\n      } else if (memberId) {\n        // Get specific member\n        const { data: member, error } = await supabaseClient\n          .from(\"members\")\n          .select(\"*\")\n          .eq(\"id\", memberId)\n          .single();\n\n        if (error) throw error;\n\n        return formatSuccessResponse({ member });\n      } else {\n        // Get all members with pagination\n        const page = parseInt(url.searchParams.get(\"page\") || \"1\");\n        const limit = parseInt(url.searchParams.get(\"limit\") || \"50\");\n        const offset = (page - 1) * limit;\n        const status = url.searchParams.get(\"status\");\n        const type = url.searchParams.get(\"type\");\n\n        let query = supabaseClient\n          .from(\"members\")\n          .select(\"*\", { count: \"exact\" })\n          .order(\"created_at\", { ascending: false })\n          .range(offset, offset + limit - 1);\n\n        if (status) {\n          query = query.eq(\"membership_status\", status);\n        }\n        if (type) {\n          query = query.eq(\"membership_type\", type);\n        }\n\n        const { data: members, error, count } = await query;\n\n        if (error) throw error;\n\n        return formatSuccessResponse({\n          members,\n          pagination: {\n            page,\n            limit,\n            total: count || 0,\n            totalPages: Math.ceil((count || 0) / limit),\n          },\n        });\n      }\n    } else if (req.method === \"POST\") {\n      // Create new member registration\n      const memberData = await req.json();\n\n      // Validate required fields\n      if (!memberData.full_name || !memberData.email) {\n        throw new Error(\"Full name and email are required\");\n      }\n\n      // Validate email format\n      if (!validateEmail(memberData.email)) {\n        throw new Error(\"Invalid email format\");\n      }\n\n      // Sanitize input data\n      const sanitizedData = {\n        ...memberData,\n        full_name: sanitizeString(memberData.full_name, 100),\n        first_name: sanitizeString(memberData.first_name, 50),\n        middle_name: sanitizeString(memberData.middle_name, 50),\n        last_name: sanitizeString(memberData.last_name, 50),\n        email: sanitizeString(memberData.email, 100),\n        phone: sanitizeString(memberData.phone, 20),\n        address: sanitizeString(memberData.address, 200),\n        registration_date: new Date().toISOString().split(\"T\")[0],\n        membership_status: \"pending\",\n        integration_status: \"new\",\n        follow_up_required: true,\n        registration_ip_address:\n          req.headers.get(\"x-forwarded-for\") || req.headers.get(\"x-real-ip\"),\n        registration_user_agent: req.headers.get(\"user-agent\"),\n        terms_accepted_at: memberData.terms_accepted\n          ? new Date().toISOString()\n          : null,\n        privacy_policy_accepted_at: memberData.privacy_accepted\n          ? new Date().toISOString()\n          : null,\n        data_processing_consent: memberData.data_processing_consent || false,\n      };\n\n      // Check for duplicate email\n      const { data: existingMember } = await supabaseClient\n        .from(\"members\")\n        .select(\"id\")\n        .eq(\"email\", sanitizedData.email)\n        .single();\n\n      if (existingMember) {\n        throw new Error(\"A member with this email already exists\");\n      }\n\n      // Insert new member\n      const { data: newMember, error } = await supabaseClient\n        .from(\"members\")\n        .insert([sanitizedData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Add to newsletter if consented\n      if (memberData.newsletter_consent && memberData.email) {\n        await supabaseClient.from(\"newsletter_subscribers\").insert([\n          {\n            email: memberData.email,\n            name: memberData.full_name,\n            subscribed: true,\n          },\n        ]);\n      }\n\n      return formatSuccessResponse({ member: newMember }, 201);\n    } else if (req.method === \"PUT\" && memberId) {\n      // Update member\n      const updates = await req.json();\n\n      // Sanitize update data\n      const sanitizedUpdates = {\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n\n      if (updates.full_name) {\n        sanitizedUpdates.full_name = sanitizeString(updates.full_name, 100);\n      }\n      if (updates.email && !validateEmail(updates.email)) {\n        throw new Error(\"Invalid email format\");\n      }\n\n      const { data: updatedMember, error } = await supabaseClient\n        .from(\"members\")\n        .update(sanitizedUpdates)\n        .eq(\"id\", memberId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ member: updatedMember });\n    } else if (req.method === \"DELETE\" && memberId) {\n      // Delete member (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Admin access required\");\n      }\n\n      const { error } = await supabaseClient\n        .from(\"members\")\n        .delete()\n        .eq(\"id\", memberId);\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ message: \"Member deleted successfully\" });\n    } else if (req.method === \"PATCH\" && memberId && action) {\n      // Special actions on members\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      let updateData: any = { updated_at: new Date().toISOString() };\n\n      switch (action) {\n        case \"approve\":\n          updateData.membership_status = \"active\";\n          updateData.membership_date = new Date().toISOString().split(\"T\")[0];\n          break;\n        case \"reject\":\n          updateData.membership_status = \"inactive\";\n          break;\n        case \"mark_paid\":\n          updateData.membership_fee_paid = true;\n          updateData.payment_reference = (await req.json()).payment_reference;\n          break;\n        case \"issue_card\":\n          updateData.membership_card_issued = true;\n          updateData.membership_card_number = `SGEC-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n          break;\n        case \"complete_orientation\":\n          updateData.orientation_completed = true;\n          updateData.orientation_date = new Date().toISOString().split(\"T\")[0];\n          updateData.integration_status = \"in_progress\";\n          break;\n        case \"mark_integrated\":\n          updateData.integration_status = \"integrated\";\n          updateData.follow_up_required = false;\n          break;\n        default:\n          throw new Error(`Unknown action: ${action}`);\n      }\n\n      const { data: updatedMember, error } = await supabaseClient\n        .from(\"members\")\n        .update(updateData)\n        .eq(\"id\", memberId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ member: updatedMember });\n    }\n\n    return formatErrorResponse(new Error(\"Method not allowed\"), 405);\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/prayer-requests/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":12,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":19,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":20,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n  validateEmail,\n  checkRateLimit,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nDeno.serve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const requestId = url.searchParams.get(\"id\");\n\n    if (req.method === \"GET\") {\n      // Check if user is admin\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      // Get all prayer requests or a specific one\n      let query = supabaseClient.from(\"prayer_requests\").select(\"*\");\n\n      if (requestId) {\n        query = query.eq(\"id\", requestId).single();\n      } else {\n        // Order by creation date, newest first\n        query = query.order(\"created_at\", { ascending: false });\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_requests: data });\n    } else if (req.method === \"POST\") {\n      // Create a new prayer request\n      const { name, email, request, is_public } = await req.json();\n\n      if (!name || !request) {\n        throw new Error(\"Name and prayer request are required\");\n      }\n\n      // Rate limiting for prayer request submissions\n      const clientIP =\n        req.headers.get(\"x-forwarded-for\") ||\n        req.headers.get(\"x-real-ip\") ||\n        \"unknown\";\n      if (!checkRateLimit(`prayer_${clientIP}`, 5, 300000)) {\n        // 5 requests per 5 minutes\n        throw new Error(\n          \"Too many prayer requests. Please wait before submitting another.\",\n        );\n      }\n\n      // Validate email if provided\n      if (email && !validateEmail(email)) {\n        throw new Error(\"Invalid email format\");\n      }\n\n      const { data, error } = await supabaseClient\n        .from(\"prayer_requests\")\n        .insert({\n          name: sanitizeString(name, 100),\n          email: email ? sanitizeString(email, 100) : null,\n          request: sanitizeString(request, 1000),\n          is_public: is_public || false,\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_request: data }, 201);\n    } else if (req.method === \"PUT\" && requestId) {\n      // Update a prayer request (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { is_answered } = await req.json();\n\n      const { data, error } = await supabaseClient\n        .from(\"prayer_requests\")\n        .update({\n          is_answered,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", requestId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_request: data });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), {\n      status: 405,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/send-email/deno.d.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Deno' is defined but never used.","line":1,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":3,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":11,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'handler' is defined but never used.","line":15,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":64},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":15,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'init' is defined but never used.","line":16,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'apiKey' is defined but never used.","line":22,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":24,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":8}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare namespace Deno {\n  export interface env {\n    get(key: string): string | undefined;\n  }\n}\n\ndeclare module \"std/http/server.ts\" {\n  export interface ServeInit {\n    port?: number;\n    hostname?: string;\n    handler?: (request: Request) => Response | Promise<Response>;\n  }\n  \n  export function serve(\n    handler: (request: Request) => Response | Promise<Response>,\n    init?: ServeInit\n  ): void;\n}\n\ndeclare module \"resend\" {\n  export class Resend {\n    constructor(apiKey: string);\n    emails: {\n      send(options: {\n        from: string;\n        to: string[];\n        subject: string;\n        html: string;\n      }): Promise<any>;\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/send-email/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/testimonials/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":12,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":19,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":20,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n  validateEmail,\n  checkRateLimit,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nDeno.serve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const testimonialId = url.searchParams.get(\"id\");\n\n    if (req.method === \"GET\") {\n      // Get all testimonials or a specific one\n      let query = supabaseClient.from(\"testimonials\").select(\"*\");\n\n      if (testimonialId) {\n        query = query.eq(\"id\", testimonialId).single();\n      } else {\n        // Order by creation date, newest first\n        query = query.order(\"created_at\", { ascending: false });\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonials: data });\n    } else if (req.method === \"POST\") {\n      // Create a new testimonial\n      const { name, email, content } = await req.json();\n\n      if (!name || !content) {\n        throw new Error(\"Name and testimonial content are required\");\n      }\n\n      // Rate limiting for testimonial submissions\n      const clientIP =\n        req.headers.get(\"x-forwarded-for\") ||\n        req.headers.get(\"x-real-ip\") ||\n        \"unknown\";\n      if (!checkRateLimit(`testimonial_${clientIP}`, 3, 300000)) {\n        // 3 requests per 5 minutes\n        throw new Error(\n          \"Too many testimonials. Please wait before submitting another.\",\n        );\n      }\n\n      // Validate email if provided\n      if (email && !validateEmail(email)) {\n        throw new Error(\"Invalid email format\");\n      }\n\n      const { data, error } = await supabaseClient\n        .from(\"testimonials\")\n        .insert({\n          name: sanitizeString(name, 100),\n          content: sanitizeString(content, 1000),\n          is_approved: false, // All testimonials need approval\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonial: data }, 201);\n    } else if (req.method === \"PUT\" && testimonialId) {\n      // Update a testimonial (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { is_approved } = await req.json();\n\n      const { data, error } = await supabaseClient\n        .from(\"testimonials\")\n        .update({\n          is_approved,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", testimonialId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonial: data });\n    } else if (req.method === \"DELETE\" && testimonialId) {\n      // Delete a testimonial (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { error } = await supabaseClient\n        .from(\"testimonials\")\n        .delete()\n        .eq(\"id\", testimonialId);\n\n      if (error) throw error;\n\n      return formatSuccessResponse({\n        message: \"Testimonial deleted successfully\",\n      });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), {\n      status: 405,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/supabase/functions/webhook-handler/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":6,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":18,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":22,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":23,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":11}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport Stripe from \"https://esm.sh/stripe@14.21.0\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst stripe = new Stripe(Deno.env.get(\"STRIPE_SECRET_KEY\") || \"\", {\n  apiVersion: \"2023-10-16\",\n});\n\nserve(async (req) => {\n  const signature = req.headers.get(\"stripe-signature\");\n  \n  try {\n    const body = await req.text();\n    const event = stripe.webhooks.constructEvent(\n      body,\n      signature!,\n      Deno.env.get(\"STRIPE_WEBHOOK_SECRET\") || \"\"\n    );\n\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\"\n    );\n\n    if (event.type === \"checkout.session.completed\") {\n      const session = event.data.object as Stripe.Checkout.Session;\n      \n      // Update donation status\n      const { error: updateError } = await supabaseClient\n        .from(\"donations\")\n        .update({ \n          payment_status: \"completed\",\n          updated_at: new Date().toISOString()\n        })\n        .eq(\"payment_id\", session.id);\n\n      if (updateError) {\n        console.error(\"Error updating donation:\", updateError);\n      }\n\n      // Get donation details for email\n      const { data: donation } = await supabaseClient\n        .from(\"donations\")\n        .select(\"*\")\n        .eq(\"payment_id\", session.id)\n        .single();\n\n      if (donation) {\n        // Get site settings\n        const { data: settings } = await supabaseClient\n          .from(\"site_settings\")\n          .select(\"admin_email, enable_email_notifications\")\n          .single();\n\n        // Send confirmation email to donor\n        if (donation.donor_email && !donation.is_anonymous) {\n          await supabaseClient.functions.invoke(\"send-email\", {\n            body: {\n              type: \"donation_confirmation\",\n              data: {\n                donor_name: donation.donor_name,\n                amount: donation.amount,\n                purpose: donation.purpose,\n                date: new Date(donation.created_at).toLocaleDateString()\n              },\n              recipients: [donation.donor_email]\n            }\n          });\n        }\n\n        // Send notification to admin\n        if (settings?.admin_email && settings?.enable_email_notifications) {\n          await supabaseClient.functions.invoke(\"send-email\", {\n            body: {\n              type: \"admin_notification\",\n              data: {\n                donor_name: donation.donor_name || \"Anonymous\",\n                donor_email: donation.donor_email || \"Not provided\",\n                amount: donation.amount,\n                purpose: donation.purpose,\n                date: new Date(donation.created_at).toLocaleDateString(),\n                status: \"completed\"\n              },\n              recipients: [settings.admin_email]\n            }\n          });\n        }\n      }\n    }\n\n    return new Response(JSON.stringify({ received: true }), { status: 200 });\n  } catch (error) {\n    console.error(\"Webhook error:\", error);\n    return new Response(`Webhook error: ${error.message}`, { status: 400 });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/tailwind.config.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":109,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":109,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  content: [\"./index.html\", \"./src/**/*.{js,ts,jsx,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        church: {\n          burgundy: \"hsl(var(--church-burgundy) / <alpha-value>)\",\n          gold: \"hsl(var(--church-gold) / <alpha-value>)\",\n          green: \"hsl(var(--church-green) / <alpha-value>)\",\n          cream: \"hsl(var(--church-cream) / <alpha-value>)\",\n          yellow: \"hsl(43 96% 56% / <alpha-value>)\",\n          red: \"hsl(0 84% 60% / <alpha-value>)\",\n          dark: \"hsl(0 0% 15% / <alpha-value>)\",\n          light: \"hsl(0 0% 98% / <alpha-value>)\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      container: {\n        center: true,\n        padding: \"2rem\",\n        screens: {\n          sm: \"640px\",\n          md: \"768px\",\n          lg: \"1024px\",\n          xl: \"1280px\",\n          \"2xl\": \"1400px\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\", transform: \"translateY(10px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"slide-in\": {\n          from: { transform: \"translateX(-100%)\" },\n          to: { transform: \"translateX(0)\" },\n        },\n        \"slide-up\": {\n          from: { opacity: \"0\", transform: \"translateY(30px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": { boxShadow: \"0 0 20px rgba(218, 165, 32, 0.3)\" },\n          \"50%\": { boxShadow: \"0 0 40px rgba(218, 165, 32, 0.6)\" },\n        },\n        \"gradient-shift\": {\n          \"0%, 100%\": { backgroundPosition: \"0% 50%\" },\n          \"50%\": { backgroundPosition: \"100% 50%\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n        \"slide-up\": \"slide-up 0.6s ease-out\",\n        \"pulse-glow\": \"pulse-glow 3s ease-in-out infinite\",\n        \"gradient-shift\": \"gradient-shift 8s ease infinite\",\n      },\n    },\n  },\n  plugins: [require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/debre-bisrat-web-portal/vitest.config.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":22,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vitest\" />\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react-swc';\nimport path from 'path';\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    setupFiles: './src/test/setup.ts',\n    coverage: {\n      reporter: ['text', 'json', 'html'],\n      exclude: [\n        'node_modules/',\n        'src/test/setup.ts',\n      ],\n    },\n  },\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n});\n","usedDeprecatedRules":[]}]
