[{"filePath":"/app/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/public/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/router-context.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/scripts/test-supabase-connection.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":4,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":4,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":6,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":6,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":10,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":19,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":22,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":12}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Node.js script to test Supabase connection using process.env\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;\nconst supabaseAnonKey =\n  process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error(\"Missing Supabase environment variables\");\n  process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nasync function testConnection() {\n  const { data, error } = await supabase.from(\"members\").select(\"*\").limit(1);\n  if (error) {\n    console.error(\"Supabase connection failed:\", error.message);\n    process.exit(1);\n  } else {\n    console.log(\"Supabase connection successful. Example row:\", data[0]);\n    process.exit(0);\n  }\n}\n\ntestConnection();\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/test-supabase-connection.mjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":4,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":4,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":6,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":6,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":10,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":19,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":22,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":12}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Node.js ESM script to test Supabase connection using process.env\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;\nconst supabaseAnonKey =\n  process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error(\"Missing Supabase environment variables\");\n  process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nasync function testConnection() {\n  const { data, error } = await supabase.from(\"members\").select(\"*\").limit(1);\n  if (error) {\n    console.error(\"Supabase connection failed:\", error.message);\n    process.exit(1);\n  } else {\n    console.log(\"Supabase connection successful. Example row:\", data[0]);\n    process.exit(0);\n  }\n}\n\ntestConnection();\n","usedDeprecatedRules":[]},{"filePath":"/app/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminAuthGuard.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":7,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAdminAuth'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [checkAdminAuth, navigate]","fix":{"range":[927,937],"text":"[checkAdminAuth, navigate]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Loader2 } from \"lucide-react\";\nimport { authService } from \"@/lib/auth/AuthService\";\n\ninterface AdminAuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminAuthGuard({ children }: AdminAuthGuardProps) {\n  const [loading, setLoading] = useState(true);\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    checkAdminAuth();\n\n    // Set up auth state change listener\n    const {\n      data: { subscription },\n    } = authService.onAuthStateChange(async (event) => {\n      if (event === \"SIGNED_OUT\") {\n        setIsAuthorized(false);\n        navigate(\"/admin/login\");\n      } else if (event === \"SIGNED_IN\" || event === \"TOKEN_REFRESHED\") {\n        await checkAdminAuth();\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [navigate]);\n\n  const checkAdminAuth = async () => {\n    try {\n      setLoading(true);\n      const isAdmin = await authService.isAdmin();\n\n      if (!isAdmin) {\n        navigate(\"/admin/login\");\n        return;\n      }\n\n      setIsAuthorized(true);\n    } catch (error) {\n      console.error(\"Error checking admin auth:\", error);\n      navigate(\"/admin/login\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"h-6 w-6 animate-spin text-church-burgundy\" />\n          <span className=\"text-gray-600\">Verifying access...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthorized) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminConfirmDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface AdminConfirmDialogProps {\n  trigger: React.ReactNode;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm: () => Promise<void> | void;\n  destructive?: boolean;\n  loading?: boolean;\n}\n\nexport default function AdminConfirmDialog({\n  trigger,\n  title,\n  description,\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\",\n  onConfirm,\n  destructive = false,\n  loading = false,\n}: AdminConfirmDialogProps) {\n  const [open, setOpen] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true);\n      await onConfirm();\n      setOpen(false);\n    } catch (error) {\n      console.error(\"Confirmation action failed:\", error);\n      // Error handling is typically done in the parent component\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>{trigger}</AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isLoading || loading}>\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleConfirm}\n            disabled={isLoading || loading}\n            className={destructive ? \"bg-red-600 hover:bg-red-700\" : \"\"}\n          >\n            {isLoading || loading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Processing...\n              </>\n            ) : (\n              confirmText\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminDataTable.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":26,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":32,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":44,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Search, ChevronLeft, ChevronRight, Filter } from \"lucide-react\";\nimport { useDebounce } from \"@/hooks/useDebounce\";\n\ninterface Column<T> {\n  key: keyof T | string;\n  label: string;\n  render?: (item: T) => React.ReactNode;\n  sortable?: boolean;\n  filterable?: boolean;\n}\n\ninterface AdminDataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  title: string;\n  description?: string;\n  searchPlaceholder?: string;\n  pageSize?: number;\n  actions?: (item: T) => React.ReactNode;\n  loading?: boolean;\n  onRefresh?: () => void;\n}\n\nexport default function AdminDataTable<T extends Record<string, any>>({\n  data,\n  columns,\n  title,\n  description,\n  searchPlaceholder = \"Search...\",\n  pageSize = 10,\n  actions,\n  loading = false,\n  onRefresh,\n}: AdminDataTableProps<T>) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\");\n  const [filters, setFilters] = useState<Record<string, string>>({});\n\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n\n  const filteredAndSortedData = useMemo(() => {\n    let result = [...data];\n\n    // Apply search filter\n    if (debouncedSearchTerm) {\n      result = result.filter((item) =>\n        Object.values(item).some((value) =>\n          String(value)\n            .toLowerCase()\n            .includes(debouncedSearchTerm.toLowerCase()),\n        ),\n      );\n    }\n\n    // Apply column filters\n    Object.entries(filters).forEach(([column, filterValue]) => {\n      if (filterValue) {\n        result = result.filter((item) =>\n          String(item[column])\n            .toLowerCase()\n            .includes(filterValue.toLowerCase()),\n        );\n      }\n    });\n\n    // Apply sorting\n    if (sortColumn) {\n      result.sort((a, b) => {\n        const aValue = a[sortColumn];\n        const bValue = b[sortColumn];\n\n        if (aValue < bValue) return sortDirection === \"asc\" ? -1 : 1;\n        if (aValue > bValue) return sortDirection === \"asc\" ? 1 : -1;\n        return 0;\n      });\n    }\n\n    return result;\n  }, [data, debouncedSearchTerm, filters, sortColumn, sortDirection]);\n\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return filteredAndSortedData.slice(startIndex, startIndex + pageSize);\n  }, [filteredAndSortedData, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(filteredAndSortedData.length / pageSize);\n\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortColumn(column);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const handleFilterChange = (column: string, value: string) => {\n    setFilters((prev) => ({ ...prev, [column]: value }));\n    setCurrentPage(1); // Reset to first page when filtering\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>{title}</CardTitle>\n          {description && <CardDescription>{description}</CardDescription>}\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>{title}</CardTitle>\n            {description && <CardDescription>{description}</CardDescription>}\n          </div>\n          {onRefresh && (\n            <Button onClick={onRefresh} variant=\"outline\" size=\"sm\">\n              Refresh\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Search and Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder={searchPlaceholder}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Column Filters */}\n          {columns\n            .filter((col) => col.filterable)\n            .map((column) => (\n              <Select\n                key={String(column.key)}\n                value={filters[String(column.key)] || \"\"}\n                onValueChange={(value) =>\n                  handleFilterChange(String(column.key), value)\n                }\n              >\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder={`Filter ${column.label}`} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All {column.label}</SelectItem>\n                  {/* Add specific filter options based on column data */}\n                </SelectContent>\n              </Select>\n            ))}\n        </div>\n\n        {/* Data Table */}\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableHead\n                    key={String(column.key)}\n                    className={\n                      column.sortable ? \"cursor-pointer hover:bg-gray-50\" : \"\"\n                    }\n                    onClick={() =>\n                      column.sortable && handleSort(String(column.key))\n                    }\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>{column.label}</span>\n                      {column.sortable && sortColumn === String(column.key) && (\n                        <span className=\"text-xs\">\n                          {sortDirection === \"asc\" ? \"↑\" : \"↓\"}\n                        </span>\n                      )}\n                    </div>\n                  </TableHead>\n                ))}\n                {actions && <TableHead>Actions</TableHead>}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {paginatedData.length === 0 ? (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length + (actions ? 1 : 0)}\n                    className=\"text-center py-8\"\n                  >\n                    <div className=\"text-gray-500\">\n                      {debouncedSearchTerm ||\n                      Object.values(filters).some((f) => f)\n                        ? \"No results found matching your criteria\"\n                        : \"No data available\"}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                paginatedData.map((item, index) => (\n                  <TableRow key={index}>\n                    {columns.map((column) => (\n                      <TableCell key={String(column.key)}>\n                        {column.render\n                          ? column.render(item)\n                          : String(item[column.key] || \"\")}\n                      </TableCell>\n                    ))}\n                    {actions && <TableCell>{actions(item)}</TableCell>}\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between mt-6\">\n            <div className=\"text-sm text-gray-600\">\n              Showing {(currentPage - 1) * pageSize + 1} to{\" \"}\n              {Math.min(currentPage * pageSize, filteredAndSortedData.length)}{\" \"}\n              of {filteredAndSortedData.length} results\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage((prev) => Math.max(1, prev - 1))}\n                disabled={currentPage === 1}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n              <span className=\"text-sm\">\n                Page {currentPage} of {totalPages}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() =>\n                  setCurrentPage((prev) => Math.min(totalPages, prev + 1))\n                }\n                disabled={currentPage === totalPages}\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminDiagnostics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminErrorBoundary.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":26,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'errorInfo' is defined but never used.","line":26,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":54},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":33,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { AlertTriangle, RefreshCw, Home, Bug, Database } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface AdminErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n  errorId?: string;\n  isRetrying: boolean;\n  connectionStatus: \"checking\" | \"connected\" | \"disconnected\";\n}\n\ninterface AdminErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<{ error?: Error; resetError: () => void }>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n}\n\nclass AdminErrorBoundary extends React.Component<\n  AdminErrorBoundaryProps,\n  AdminErrorBoundaryState\n> {\n  private retryTimeoutId?: NodeJS.Timeout;\n\n  constructor(props: AdminErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      isRetrying: false,\n      connectionStatus: \"checking\",\n    };\n  }\n\n  static getDerivedStateFromError(\n    error: Error,\n  ): Partial<AdminErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n      errorId: Date.now().toString(),\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"Admin Error Boundary caught error:\", error, errorInfo);\n\n    this.setState({ errorInfo });\n\n    // Check database connection\n    this.checkConnection();\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // Log error details\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      errorId: this.state.errorId,\n    };\n\n    console.error(\"Admin error details:\", errorData);\n\n    // Store in localStorage for debugging\n    try {\n      const existingErrors = JSON.parse(\n        localStorage.getItem(\"admin_errors\") || \"[]\",\n      );\n      existingErrors.unshift(errorData);\n      const recentErrors = existingErrors.slice(0, 5);\n      localStorage.setItem(\"admin_errors\", JSON.stringify(recentErrors));\n    } catch (storageError) {\n      console.error(\"Failed to store admin error:\", storageError);\n    }\n  }\n\n  checkConnection = async () => {\n    this.setState({ connectionStatus: \"checking\" });\n    try {\n      const { error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n\n      if (error) {\n        throw error;\n      }\n\n      this.setState({ connectionStatus: \"connected\" });\n    } catch (error) {\n      console.error(\"Database connection check failed:\", error);\n      this.setState({ connectionStatus: \"disconnected\" });\n    }\n  };\n\n  resetError = () => {\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n      errorId: undefined,\n      isRetrying: false,\n    });\n\n    // Clear problematic cache data\n    if (typeof window !== \"undefined\") {\n      try {\n        const keysToRemove = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (\n            key &&\n            (key.includes(\"admin_cache\") || key.includes(\"sync_cache\"))\n          ) {\n            keysToRemove.push(key);\n          }\n        }\n        keysToRemove.forEach((key) => localStorage.removeItem(key));\n      } catch (e) {\n        console.warn(\"Failed to clear cache:\", e);\n      }\n    }\n  };\n\n  retryWithDelay = () => {\n    this.setState({ isRetrying: true });\n\n    this.retryTimeoutId = setTimeout(() => {\n      this.resetError();\n    }, 2000);\n  };\n\n  componentWillUnmount() {\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        const FallbackComponent = this.props.fallback;\n        return (\n          <FallbackComponent\n            error={this.state.error}\n            resetError={this.resetError}\n          />\n        );\n      }\n\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n          <Card className=\"w-full max-w-3xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n                <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-red-900 text-xl\">\n                Admin System Error\n              </CardTitle>\n              <CardDescription className=\"text-base\">\n                The admin panel encountered an error. Don't worry - your data is\n                safe.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Connection Status */}\n              <Alert>\n                <Database className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Database Status:\n                  <span\n                    className={`ml-2 font-semibold ${\n                      this.state.connectionStatus === \"connected\"\n                        ? \"text-green-600\"\n                        : this.state.connectionStatus === \"disconnected\"\n                          ? \"text-red-600\"\n                          : \"text-yellow-600\"\n                    }`}\n                  >\n                    {this.state.connectionStatus === \"connected\"\n                      ? \"Connected\"\n                      : this.state.connectionStatus === \"disconnected\"\n                        ? \"Disconnected\"\n                        : \"Checking...\"}\n                  </span>\n                </AlertDescription>\n              </Alert>\n\n              {/* Error Details */}\n              {this.state.error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-red-900 mb-2 flex items-center\">\n                    <Bug className=\"w-4 h-4 mr-2\" />\n                    Error Details:\n                  </h4>\n                  <p className=\"text-sm text-red-800 font-mono break-all mb-2\">\n                    {this.state.error.message}\n                  </p>\n                  {this.state.errorId && (\n                    <p className=\"text-xs text-red-600\">\n                      Error ID: {this.state.errorId}\n                    </p>\n                  )}\n                </div>\n              )}\n\n              {/* Troubleshooting Steps */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-blue-900 mb-2\">\n                  Troubleshooting Steps:\n                </h4>\n                <ol className=\"text-sm text-blue-800 space-y-1 list-decimal list-inside\">\n                  <li>Try refreshing the page</li>\n                  <li>Check your internet connection</li>\n                  <li>Clear browser cache and cookies</li>\n                  <li>If the problem persists, contact support</li>\n                </ol>\n              </div>\n\n              {/* Development Info */}\n              {!import.meta.env.PROD && this.state.errorInfo && (\n                <details className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <summary className=\"font-semibold text-gray-900 cursor-pointer\">\n                    Technical Details (Development)\n                  </summary>\n                  <pre className=\"text-xs text-gray-700 mt-2 overflow-auto max-h-40 whitespace-pre-wrap\">\n                    {this.state.error?.stack}\n                  </pre>\n                  <pre className=\"text-xs text-gray-600 mt-2 overflow-auto max-h-32 whitespace-pre-wrap\">\n                    {this.state.errorInfo.componentStack}\n                  </pre>\n                </details>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button\n                  onClick={this.retryWithDelay}\n                  disabled={this.state.isRetrying}\n                  className=\"flex-1 bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  <RefreshCw\n                    className={`w-4 h-4 mr-2 ${this.state.isRetrying ? \"animate-spin\" : \"\"}`}\n                  />\n                  {this.state.isRetrying ? \"Retrying...\" : \"Retry\"}\n                </Button>\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh Page\n                </Button>\n                <Button\n                  onClick={() => (window.location.href = \"/admin/dashboard\")}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Dashboard\n                </Button>\n              </div>\n\n              {/* Help Text */}\n              <div className=\"text-center text-sm text-gray-500\">\n                <p>\n                  If this problem persists, please contact support with Error\n                  ID:{\" \"}\n                  <code className=\"bg-gray-100 px-1 rounded font-mono\">\n                    {this.state.errorId}\n                  </code>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default AdminErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminFormWrapper.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'formData' is defined but never used.","line":9,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface AdminFormWrapperProps {\n  children: React.ReactNode;\n  onSubmit: (formData: FormData) => Promise<void>;\n  submitText?: string;\n  successMessage?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport default function AdminFormWrapper({\n  children,\n  onSubmit,\n  submitText = \"Save Changes\",\n  successMessage = \"Changes saved successfully\",\n  className = \"\",\n  disabled = false,\n}: AdminFormWrapperProps) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(false);\n\n    try {\n      const formData = new FormData(e.currentTarget);\n      await onSubmit(formData);\n      setSuccess(true);\n      toast({\n        title: \"Success\",\n        description: successMessage,\n      });\n\n      // Clear success message after 3 seconds\n      setTimeout(() => setSuccess(false), 3000);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"An error occurred\";\n      setError(errorMessage);\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={`space-y-6 ${className}`}>\n      {children}\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {success && (\n        <Alert className=\"border-green-200 bg-green-50\">\n          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          <AlertDescription className=\"text-green-800\">\n            {successMessage}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"flex justify-end space-x-4\">\n        <Button\n          type=\"submit\"\n          disabled={loading || disabled}\n          className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n        >\n          {loading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            submitText\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminSessionManager.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":32,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":33,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":34,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":31}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock } from \"lucide-react\";\n\ninterface AdminSessionManagerProps {\n  children: React.ReactNode;\n}\n\nconst SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\nconst WARNING_TIME = 5 * 60 * 1000; // 5 minutes before timeout\n\nexport default function AdminSessionManager({\n  children,\n}: AdminSessionManagerProps) {\n  const [showWarning, setShowWarning] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    let activityTimer: NodeJS.Timeout;\n    let warningTimer: NodeJS.Timeout;\n    let countdownTimer: NodeJS.Timeout;\n    let lastActivity = Date.now();\n\n    const resetTimers = () => {\n      lastActivity = Date.now();\n      clearTimeout(activityTimer);\n      clearTimeout(warningTimer);\n      clearTimeout(countdownTimer);\n      setShowWarning(false);\n\n      // Set warning timer\n      warningTimer = setTimeout(() => {\n        setShowWarning(true);\n        setTimeLeft(WARNING_TIME);\n\n        // Start countdown\n        countdownTimer = setInterval(() => {\n          setTimeLeft((prev) => {\n            if (prev <= 1000) {\n              handleSessionTimeout();\n              return 0;\n            }\n            return prev - 1000;\n          });\n        }, 1000);\n      }, SESSION_TIMEOUT - WARNING_TIME);\n\n      // Set session timeout\n      activityTimer = setTimeout(handleSessionTimeout, SESSION_TIMEOUT);\n    };\n\n    const handleSessionTimeout = async () => {\n      try {\n        await supabase.auth.signOut();\n        toast({\n          title: \"Session Expired\",\n          description: \"Your session has expired. Please log in again.\",\n          variant: \"destructive\",\n        });\n        navigate(\"/admin/login\");\n      } catch (error) {\n        console.error(\"Error during session timeout:\", error);\n      }\n    };\n\n    const handleActivity = () => {\n      if (Date.now() - lastActivity > 60000) {\n        // Only reset if more than 1 minute since last activity\n        resetTimers();\n      }\n    };\n\n    // Track user activity\n    const events = [\n      \"mousedown\",\n      \"mousemove\",\n      \"keypress\",\n      \"scroll\",\n      \"touchstart\",\n      \"click\",\n    ];\n    events.forEach((event) => {\n      document.addEventListener(event, handleActivity, true);\n    });\n\n    // Initialize timers\n    resetTimers();\n\n    return () => {\n      clearTimeout(activityTimer);\n      clearTimeout(warningTimer);\n      clearTimeout(countdownTimer);\n      events.forEach((event) => {\n        document.removeEventListener(event, handleActivity, true);\n      });\n    };\n  }, [navigate, toast]);\n\n  const handleExtendSession = () => {\n    setShowWarning(false);\n    // Reset timers by triggering activity\n    document.dispatchEvent(new Event(\"mousedown\"));\n  };\n\n  const handleLogout = async () => {\n    try {\n      await supabase.auth.signOut();\n      navigate(\"/admin/login\");\n    } catch (error) {\n      console.error(\"Error during logout:\", error);\n    }\n  };\n\n  const formatTime = (ms: number) => {\n    const minutes = Math.floor(ms / 60000);\n    const seconds = Math.floor((ms % 60000) / 1000);\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  return (\n    <>\n      {children}\n\n      <Dialog open={showWarning} onOpenChange={() => {}}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Clock className=\"mr-2 h-5 w-5 text-orange-500\" />\n              Session Expiring Soon\n            </DialogTitle>\n            <DialogDescription>\n              Your admin session will expire in {formatTime(timeLeft)}. Would\n              you like to extend your session?\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter className=\"flex-col sm:flex-row gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              className=\"w-full sm:w-auto\"\n            >\n              Logout Now\n            </Button>\n            <Button\n              onClick={handleExtendSession}\n              className=\"w-full sm:w-auto bg-church-burgundy hover:bg-church-burgundy/90\"\n            >\n              Extend Session\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminSyncStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AuditLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ErrorBoundary.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Bug' is defined but never used.","line":2,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'useToast' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":24,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'errorInfo' is defined but never used.","line":24,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":54}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { AlertTriangle, RefreshCw, Home, Bug } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n  errorId?: string;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<{ error?: Error; resetError: () => void }>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n}\n\nclass ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n      errorId: Date.now().toString(),\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"Error caught by boundary:\", error, errorInfo);\n\n    // Store error info in state\n    this.setState({ errorInfo });\n\n    // Extract component name from stack trace for better error context\n    const componentMatch =\n      errorInfo.componentStack?.match(/\\s+at\\s+([\\w.]+)/)?.[1];\n    const componentName = componentMatch || \"unknown component\";\n\n    // Log to DataSyncService with improved context\n    dataSyncService.logError(\n      \"React Error Boundary\",\n      error,\n      `Component: ${componentName}`,\n    );\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // Log to external service in production\n    if (import.meta.env.PROD) {\n      this.logToExternalService(error, errorInfo);\n    }\n\n    // Report error to console with structured data for debugging\n    console.group(\"React Error Details\");\n    console.error(\"Error:\", error.message);\n    console.error(\"Component:\", componentName);\n    console.error(\"Stack:\", error.stack);\n    console.error(\"Component Stack:\", errorInfo.componentStack);\n    console.groupEnd();\n  }\n\n  private logToExternalService = (error: Error, errorInfo: React.ErrorInfo) => {\n    // In production, integrate with error tracking service like Sentry\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      errorId: this.state.errorId,\n    };\n\n    // TODO: Send to error tracking service\n    console.error(\"Production error logged:\", errorData);\n\n    // For now, store in localStorage as fallback\n    try {\n      const existingErrors = JSON.parse(\n        localStorage.getItem(\"app_errors\") || \"[]\",\n      );\n      existingErrors.push(errorData);\n      // Keep only last 10 errors\n      const recentErrors = existingErrors.slice(-10);\n      localStorage.setItem(\"app_errors\", JSON.stringify(recentErrors));\n    } catch (storageError) {\n      console.error(\"Failed to store error in localStorage:\", storageError);\n    }\n  };\n\n  resetError = () => {\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n      errorId: undefined,\n    });\n\n    // Clear any cached data that might be causing issues\n    if (typeof window !== \"undefined\") {\n      try {\n        // Clear relevant localStorage items (but preserve important user data)\n        const keysToRemove: string[] = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (\n            key &&\n            (key.includes(\"admin_cache\") ||\n              key.includes(\"sync_cache\") ||\n              key.includes(\"temp_\") ||\n              key.includes(\"error_\") ||\n              key.includes(\"debug_\"))\n          ) {\n            keysToRemove.push(key);\n          }\n        }\n        keysToRemove.forEach((key) => localStorage.removeItem(key));\n\n        // Clear only temporary session storage items\n        const sessionKeysToRemove: string[] = [];\n        for (let i = 0; i < sessionStorage.length; i++) {\n          const key = sessionStorage.key(i);\n          if (\n            key &&\n            (key.includes(\"temp_\") ||\n              key.includes(\"cache_\") ||\n              key.includes(\"error_\"))\n          ) {\n            sessionKeysToRemove.push(key);\n          }\n        }\n        sessionKeysToRemove.forEach((key) => sessionStorage.removeItem(key));\n\n        // Reset any error flags in the data sync service\n        try {\n          dataSyncService.clearLogs();\n        } catch (syncError) {\n          console.warn(\"Failed to clear data sync logs:\", syncError);\n        }\n\n        // Log recovery attempt\n        console.log(\n          \"Error boundary reset - cleared temporary storage and error logs\",\n        );\n      } catch (e) {\n        console.warn(\"Failed to clear storage:\", e);\n      }\n    }\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        const FallbackComponent = this.props.fallback;\n        return (\n          <FallbackComponent\n            error={this.state.error}\n            resetError={this.resetError}\n          />\n        );\n      }\n\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n          <Card className=\"w-full max-w-2xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n                <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-red-900 text-xl\">\n                Oops! Something went wrong\n              </CardTitle>\n              <CardDescription className=\"text-base\">\n                We encountered an unexpected error. Our team has been notified.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Error Details */}\n              {this.state.error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-red-900 mb-2\">\n                    Error Details:\n                  </h4>\n                  <p className=\"text-sm text-red-800 font-mono break-all\">\n                    {this.state.error.message}\n                  </p>\n                  {this.state.errorId && (\n                    <p className=\"text-xs text-red-600 mt-2\">\n                      Error ID: {this.state.errorId}\n                    </p>\n                  )}\n                </div>\n              )}\n\n              {/* Development Info */}\n              {!import.meta.env.PROD && this.state.errorInfo && (\n                <details className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <summary className=\"font-semibold text-gray-900 cursor-pointer\">\n                    Technical Details (Development)\n                  </summary>\n                  <pre className=\"text-xs text-gray-700 mt-2 overflow-auto max-h-40\">\n                    {this.state.error?.stack}\n                  </pre>\n                  <pre className=\"text-xs text-gray-600 mt-2 overflow-auto max-h-32\">\n                    {this.state.errorInfo.componentStack}\n                  </pre>\n                </details>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button\n                  onClick={this.resetError}\n                  className=\"flex-1 bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Try Again\n                </Button>\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh Page\n                </Button>\n                <Button\n                  onClick={() => (window.location.href = \"/\")}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Go Home\n                </Button>\n              </div>\n\n              {/* Help Text */}\n              <div className=\"text-center text-sm text-gray-500\">\n                <p>\n                  If this problem persists, please contact support with Error\n                  ID:{\" \"}\n                  <code className=\"bg-gray-100 px-1 rounded\">\n                    {this.state.errorId}\n                  </code>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ErrorDiagnostics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ImageSlider.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'interval' is assigned a value but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface ImageSliderProps {\n  slides: {\n    image: string;\n    title: string;\n    content: string;\n  }[];\n  autoPlay?: boolean;\n  interval?: number;\n}\n\nexport default function ImageSlider({\n  slides = [],\n  autoPlay = false,\n  interval = 3000,\n}: ImageSliderProps) {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [imageLoaded, setImageLoaded] = useState<boolean[]>(\n    new Array(slides.length).fill(false),\n  );\n\n  useEffect(() => {\n    if (!autoPlay || slides.length <= 1) return;\n\n    const autoAdvance = setInterval(() => {\n      setCurrentSlide((prev) => (prev === slides.length - 1 ? 0 : prev + 1));\n    }, 7000); // 7 seconds for better readability\n\n    return () => clearInterval(autoAdvance);\n  }, [autoPlay, slides.length]);\n\n  // Preload next image for better performance\n  useEffect(() => {\n    if (slides.length > 0) {\n      const nextIndex = (currentSlide + 1) % slides.length;\n      const img = new Image();\n      img.src = slides[nextIndex].image;\n    }\n  }, [currentSlide, slides]);\n\n  const handleImageLoad = (index: number) => {\n    setImageLoaded((prev) => {\n      const newLoaded = [...prev];\n      newLoaded[index] = true;\n      return newLoaded;\n    });\n  };\n\n  const handleImageError = (index: number) => {\n    console.warn(`Image at index ${index} failed to load.`);\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide(currentSlide === 0 ? slides.length - 1 : currentSlide - 1);\n  };\n\n  const nextSlide = () => {\n    setCurrentSlide(currentSlide === slides.length - 1 ? 0 : currentSlide + 1);\n  };\n\n  if (!slides || slides.length === 0) {\n    return (\n      <div className=\"w-full h-64 bg-gray-200 flex items-center justify-center\">\n        No slides available\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative w-full h-[450px] md:h-[550px] lg:h-[650px] overflow-hidden rounded-2xl shadow-2xl border border-church-gold/20\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-church-burgundy/5 via-transparent to-church-gold/5 pointer-events-none z-10\"></div>\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-all duration-1200 ease-in-out ${\n            index === currentSlide\n              ? \"opacity-100 scale-100\"\n              : \"opacity-0 scale-110 pointer-events-none\"\n          }`}\n        >\n          {!imageLoaded[index] && index === currentSlide && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-br from-church-burgundy/10 to-church-gold/10\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-church-gold border-t-transparent\"></div>\n            </div>\n          )}\n          <img\n            src={slide.image}\n            alt={`Slide ${index + 1}`}\n            className={`w-full h-full object-cover transition-all duration-1000 ${\n              imageLoaded[index] ? \"opacity-100\" : \"opacity-0\"\n            }`}\n            onLoad={() => handleImageLoad(index)}\n            onError={() => handleImageError(index)}\n            loading={index === 0 ? \"eager\" : \"lazy\"}\n          />\n          {/* Reduced gradient overlay for better image visibility */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-black/10 to-black/20\"></div>\n          <div className=\"absolute inset-0 bg-gradient-to-br from-church-burgundy/20 via-transparent to-church-gold/15\"></div>\n\n          {/* Content overlay with reduced opacity for better background visibility */}\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white p-6 md:p-8 z-20\">\n            <div className=\"text-center max-w-5xl mx-auto backdrop-blur-md bg-gradient-to-br from-church-burgundy/35 via-church-burgundy/25 to-church-burgundy/40 rounded-2xl p-8 md:p-10 border border-church-gold/40 shadow-2xl animate-slide-up\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-church-gold/8 via-transparent to-church-gold/4 rounded-2xl\"></div>\n              <div className=\"relative z-10\">\n                <h2\n                  className=\"text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold mb-4 md:mb-6 text-church-gold font-serif\"\n                  style={{\n                    textShadow:\n                      \"4px 4px 8px rgba(0,0,0,0.95), 2px 2px 4px rgba(0,0,0,0.8)\",\n                  }}\n                >\n                  {slide.title}\n                </h2>\n                <div className=\"w-24 h-1 bg-gradient-to-r from-transparent via-church-gold to-transparent mx-auto mb-4 md:mb-6\"></div>\n                <p\n                  className=\"text-base md:text-lg lg:text-xl xl:text-2xl text-center leading-relaxed font-medium text-white/98\"\n                  style={{\n                    textShadow:\n                      \"3px 3px 6px rgba(0,0,0,0.9), 1px 1px 3px rgba(0,0,0,0.7)\",\n                  }}\n                >\n                  {slide.content}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n\n      <button\n        onClick={prevSlide}\n        className=\"absolute left-4 md:left-6 top-1/2 transform -translate-y-1/2 bg-church-burgundy/80 hover:bg-church-burgundy/90 text-church-gold p-3 md:p-4 rounded-full transition-all duration-300 hover:scale-110 backdrop-blur-md border border-church-gold/30 shadow-lg z-30\"\n        aria-label=\"Previous image\"\n      >\n        <ChevronLeft className=\"w-5 h-5 md:w-6 md:h-6\" />\n      </button>\n\n      <button\n        onClick={nextSlide}\n        className=\"absolute right-4 md:right-6 top-1/2 transform -translate-y-1/2 bg-church-burgundy/80 hover:bg-church-burgundy/90 text-church-gold p-3 md:p-4 rounded-full transition-all duration-300 hover:scale-110 backdrop-blur-md border border-church-gold/30 shadow-lg z-30\"\n        aria-label=\"Next image\"\n      >\n        <ChevronRight className=\"w-5 h-5 md:w-6 md:h-6\" />\n      </button>\n\n      <div className=\"absolute bottom-6 md:bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 z-30\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`relative transition-all duration-400 ${\n              index === currentSlide\n                ? \"w-4 h-4 md:w-5 md:h-5\"\n                : \"w-3 h-3 md:w-4 md:h-4 hover:scale-110\"\n            }`}\n            aria-label={`Go to slide ${index + 1}`}\n          >\n            <div\n              className={`w-full h-full rounded-full transition-all duration-400 ${\n                index === currentSlide\n                  ? \"bg-church-gold shadow-lg animate-pulse-glow\"\n                  : \"bg-white/60 hover:bg-white/80 backdrop-blur-sm\"\n              }`}\n            />\n            {index === currentSlide && (\n              <div className=\"absolute inset-0 rounded-full border-2 border-church-gold/50 animate-ping\"></div>\n            )}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-black/30 via-black/20 to-black/30\">\n        <div\n          className=\"h-full bg-gradient-to-r from-church-gold via-church-gold/80 to-church-gold transition-all duration-500 ease-out shadow-sm\"\n          style={{\n            width: `${((currentSlide + 1) / slides.length) * 100}%`,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ImageWithFallback.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'optimizedSrc' is assigned a value but never used.","line":30,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { imageProcessor } from \"@/lib/image/ImageProcessor\";\n\ninterface ImageWithFallbackProps {\n  src: string;\n  fallbackSrc?: string;\n  alt: string;\n  className?: string;\n  onError?: () => void;\n  width?: number;\n  height?: number;\n  quality?: number;\n  priority?: boolean;\n}\n\nconst ImageWithFallback: React.FC<ImageWithFallbackProps> = ({\n  src,\n  fallbackSrc = import.meta.env.BASE_URL + \"images/gallery/church-service.jpg\",\n  alt,\n  className = \"\",\n  onError,\n  width,\n  height,\n  quality = 80,\n  priority = false,\n}) => {\n  const [imgSrc, setImgSrc] = useState<string>(src);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [optimizedSrc, setOptimizedSrc] = useState<string | null>(null);\n\n  // Process image with our image processor\n  useEffect(() => {\n    let isMounted = true;\n    setIsLoading(true);\n\n    const processImage = async () => {\n      try {\n        const processed = await imageProcessor.loadImage(src, {\n          width,\n          height,\n          quality,\n        });\n\n        if (isMounted) {\n          setOptimizedSrc(processed);\n          setImgSrc(processed);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error(\"Image processing error:\", err);\n        if (isMounted) {\n          setOptimizedSrc(null);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    processImage();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [src, width, height, quality]);\n\n  const handleError = () => {\n    if (!hasError && imgSrc !== fallbackSrc) {\n      // Try to optimize the fallback image as well\n      imageProcessor\n        .loadImage(fallbackSrc, { width, height, quality })\n        .then((optimizedFallback) => {\n          setImgSrc(optimizedFallback);\n          setHasError(true);\n          onError?.();\n        })\n        .catch(() => {\n          // If optimization fails, use the original fallback\n          setImgSrc(fallbackSrc);\n          setHasError(true);\n          onError?.();\n        });\n    }\n  };\n\n  // Preload next images if this is a priority image\n  useEffect(() => {\n    if (priority && src) {\n      // Find nearby images with the same pattern and preload them\n      const srcPattern = src.replace(/\\d+(\\.\\w+)$/, \"\");\n      const srcExtension = src.match(/(\\.\\w+)$/)?.[1] || \"\";\n\n      // Preload next 2 images if they follow a numeric pattern\n      const match = src.match(/(\\d+)(\\.\\w+)$/);\n      if (match) {\n        const currentNum = parseInt(match[1]);\n        for (let i = 1; i <= 2; i++) {\n          const nextSrc = `${srcPattern}${currentNum + i}${srcExtension}`;\n          imageProcessor.preloadImage(nextSrc, { width, height, quality });\n        }\n      }\n    }\n  }, [priority, src, width, height, quality]);\n\n  return (\n    <div className=\"relative\">\n      {isLoading && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 animate-pulse\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      )}\n      <img\n        src={imgSrc}\n        alt={alt}\n        className={`${className} ${isLoading ? \"opacity-0\" : \"opacity-100\"} transition-opacity duration-300`}\n        onError={handleError}\n        loading={priority ? \"eager\" : \"lazy\"}\n        width={width}\n        height={height}\n        onLoad={() => setIsLoading(false)}\n      />\n    </div>\n  );\n};\n\nexport default ImageWithFallback;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/LoadingState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/NewsletterSubscription.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":9,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":43,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":30}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useToast } from \"../hooks/use-toast\";\n\nexport default function NewsletterSubscription() {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) return;\n\n    setIsLoading(true);\n    try {\n      // Here you would typically save to a newsletter table\n      // For now, just show success message\n      toast({\n        title: \"Success!\",\n        description: \"Thank you for subscribing to our newsletter.\",\n      });\n      setEmail(\"\");\n    } catch (error) {\n      console.error(\"Newsletter subscription error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to subscribe. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <h3 className=\"text-lg font-semibold mb-4\">\n        Subscribe to Our Newsletter\n      </h3>\n      <form onSubmit={handleSubmit} className=\"flex gap-2\">\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setEmail(e.target.value)\n          }\n          placeholder=\"Enter your email\"\n          className=\"flex-1 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          required\n        />\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\n        >\n          {isLoading ? \"Subscribing...\" : \"Subscribe\"}\n        </button>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/auth/ProtectedRoute.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":5,"column":58,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\nexport function ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const {\n          data: { session },\n        } = await supabase.auth.getSession();\n        setIsAuthenticated(!!session);\n      } catch (error) {\n        console.error(\"Auth check failed:\", error);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuth();\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setIsAuthenticated(!!session);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"h-32 w-32 animate-spin rounded-full border-b-2 border-t-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/admin/login\" state={{ from: location }} replace />;\n  }\n\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/carousel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":19,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: \"horizontal\" | \"vertical\";\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins,\n    );\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n    const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return;\n      }\n\n      setCanScrollPrev(api.canScrollPrev());\n      setCanScrollNext(api.canScrollNext());\n    }, []);\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev();\n    }, [api]);\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext();\n    }, [api]);\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault();\n          scrollPrev();\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault();\n          scrollNext();\n        }\n      },\n      [scrollPrev, scrollNext],\n    );\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return;\n      }\n\n      setApi(api);\n    }, [api, setApi]);\n\n    React.useEffect(() => {\n      if (!api) {\n        return;\n      }\n\n      onSelect(api);\n      api.on(\"reInit\", onSelect);\n      api.on(\"select\", onSelect);\n\n      return () => {\n        api?.off(\"select\", onSelect);\n      };\n    }, [api, onSelect]);\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  },\n);\nCarousel.displayName = \"Carousel\";\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel();\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n});\nCarouselContent.displayName = \"CarouselContent\";\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel();\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nCarouselItem.displayName = \"CarouselItem\";\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  );\n});\nCarouselPrevious.displayName = \"CarouselPrevious\";\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  );\n});\nCarouselNext.displayName = \"CarouselNext\";\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/chart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'k' is defined but never used.","line":10,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":5},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":70,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":8}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig;\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = \"Chart\";\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color,\n  );\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`,\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: \"line\" | \"dot\" | \"dashed\";\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        );\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className,\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || item.payload.fill || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\",\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            },\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\",\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = \"ChartTooltip\";\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    if (!payload?.length) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className,\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\",\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n);\nChartLegendContent.displayName = \"ChartLegend\";\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":169,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":169,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  );\n});\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n});\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n});\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n});\nFormMessage.displayName = \"FormMessage\";\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\",\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/optimized-image.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":6,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'lowQualitySrc'. Either include it or remove the dependency array.","line":67,"column":6,"nodeType":"ArrayExpression","endLine":67,"endColumn":60,"suggestions":[{"desc":"Update the dependencies array to be: [src, width, height, quality, format, blur, grayscale, lowQualitySrc]","fix":{"range":[1577,1631],"text":"[src, width, height, quality, format, blur, grayscale, lowQualitySrc]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { imageProcessor } from \"@/lib/image/ImageProcessor\";\n\ninterface OptimizedImageProps\n  extends React.ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  alt: string;\n  className?: string;\n  lowQualitySrc?: string;\n  width?: number;\n  height?: number;\n  quality?: number;\n  format?: \"webp\" | \"jpeg\" | \"png\";\n  blur?: number;\n  grayscale?: boolean;\n  priority?: boolean;\n}\n\nexport function OptimizedImage({\n  src,\n  alt,\n  className,\n  lowQualitySrc,\n  width,\n  height,\n  quality,\n  format,\n  blur,\n  grayscale,\n  priority = false,\n  ...props\n}: OptimizedImageProps) {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  const [currentSrc, setCurrentSrc] = useState(lowQualitySrc || src);\n  const [optimizedSrc, setOptimizedSrc] = useState<string | null>(null);\n\n  // Process image with our image processor\n  useEffect(() => {\n    let isMounted = true;\n\n    const processImage = async () => {\n      try {\n        const options = { width, height, quality, format, blur, grayscale };\n        const processed = await imageProcessor.loadImage(src, options);\n\n        if (isMounted) {\n          setOptimizedSrc(processed);\n          if (!lowQualitySrc) {\n            setCurrentSrc(processed);\n          }\n        }\n      } catch (err) {\n        console.error(\"Image processing error:\", err);\n        if (isMounted) {\n          setOptimizedSrc(null);\n        }\n      }\n    };\n\n    processImage();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [src, width, height, quality, format, blur, grayscale]);\n\n  // Handle image loading\n  useEffect(() => {\n    if (!optimizedSrc) return;\n\n    const img = new Image();\n    img.src = optimizedSrc;\n\n    img.onload = () => {\n      setCurrentSrc(optimizedSrc);\n      setLoaded(true);\n    };\n\n    img.onerror = () => {\n      console.warn(\"Failed to load optimized image, falling back to original\");\n      setCurrentSrc(src);\n\n      // Try loading the original image\n      const fallbackImg = new Image();\n      fallbackImg.src = src;\n\n      fallbackImg.onload = () => {\n        setLoaded(true);\n      };\n\n      fallbackImg.onerror = () => {\n        setError(true);\n      };\n    };\n  }, [optimizedSrc, src]);\n\n  // Preload next images if this is a priority image\n  useEffect(() => {\n    if (priority && src) {\n      // Find nearby images with the same pattern and preload them\n      const srcPattern = src.replace(/\\d+(\\.\\w+)$/, \"\");\n      const srcExtension = src.match(/(\\.\\w+)$/)?.[1] || \"\";\n\n      // Preload next 2 images if they follow a numeric pattern\n      const match = src.match(/(\\d+)(\\.\\w+)$/);\n      if (match) {\n        const currentNum = parseInt(match[1]);\n        for (let i = 1; i <= 2; i++) {\n          const nextSrc = `${srcPattern}${currentNum + i}${srcExtension}`;\n          imageProcessor.preloadImage(nextSrc, {\n            width,\n            height,\n            quality,\n            format,\n          });\n        }\n      }\n    }\n  }, [priority, src, width, height, quality, format]);\n\n  if (error) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-gray-100\",\n          className,\n        )}\n      >\n        <span className=\"text-sm text-gray-500\">Failed to load image</span>\n      </div>\n    );\n  }\n\n  return (\n    <img\n      src={currentSrc}\n      alt={alt}\n      width={width}\n      height={height}\n      loading={priority ? \"eager\" : \"lazy\"}\n      className={cn(\n        \"transition-opacity duration-300\",\n        !loaded && \"filter blur-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/resizable.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":9,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":25,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GripVertical } from \"lucide-react\";\nimport * as ResizablePrimitive from \"react-resizable-panels\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className,\n    )}\n    {...props}\n  />\n);\n\nconst ResizablePanel = ResizablePrimitive.Panel;\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean;\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className,\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n);\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":30,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":32,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":32},{"ruleId":"no-redeclare","severity":2,"message":"'SidebarContext' is already defined.","line":37,"column":7,"nodeType":"Identifier","messageId":"redeclared","endLine":37,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":53,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":76,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":41},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":784,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":784,"endColumn":13}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width-mobile] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event: React.MouseEvent) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] after:-translate-x-1/2 after:bg-sidebar-border after:opacity-0 after:transition-opacity after:duration-200 group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    asChild?: boolean;\n  }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n  }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => {\n  return (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  );\n});\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => {\n  return (\n    <li\n      ref={ref}\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  );\n});\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!size-8\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => {\n  return (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => {\n  return <li ref={ref} {...props} />;\n});\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-foreground/50\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/skeleton.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":6,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sonner.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":4,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\";\nimport { Toaster as Sonner, toast } from \"sonner\";\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>;\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { Toaster, toast };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toaster.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":24,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":25,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":26,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useToast } from \"@/hooks/use-toast\";\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({\n        id,\n        title,\n        description,\n        action,\n        ...props\n      }: {\n        id: string;\n        title?: React.ReactNode;\n        description?: React.ReactNode;\n        action?: React.ReactElement;\n        [key: string]: any;\n      }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/contexts/DataContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":21,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":38},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":142,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":142,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface DataContextType {\n  connectionHealth: boolean;\n  syncStatus: Record<string, string>;\n  gitStatus: {\n    branch: string;\n    hasChanges: boolean;\n    changedFiles: string[];\n  };\n  lastRefresh: Date | null;\n  isRefreshing: boolean;\n  forceSync: () => Promise<void>;\n  autoCommitAndPush: (message: string) => Promise<boolean>;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\ninterface DataProviderProps {\n  children: ReactNode;\n}\n\nexport function DataProvider({ children }: DataProviderProps) {\n  const [connectionHealth, setConnectionHealth] = useState(true);\n  const [syncStatus, setSyncStatus] = useState<Record<string, string>>({\n    events: \"SUBSCRIBED\",\n    gallery: \"SUBSCRIBED\",\n    sermons: \"SUBSCRIBED\",\n    members: \"SUBSCRIBED\",\n    testimonials: \"SUBSCRIBED\",\n    prayer_requests: \"SUBSCRIBED\",\n    donations: \"SUBSCRIBED\",\n  });\n  const [gitStatus, setGitStatus] = useState({\n    branch: \"main\",\n    hasChanges: false,\n    changedFiles: [],\n  });\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(new Date());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const refreshAllData = async () => {\n    if (isRefreshing) {\n      console.log(\"Refresh already in progress, skipping...\");\n      return;\n    }\n\n    setIsRefreshing(true);\n    try {\n      console.log(\"Starting data refresh...\");\n\n      // Test database connection first\n      const { error: connectionError } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n\n      if (connectionError) {\n        throw new Error(\n          `Database connection failed: ${connectionError.message}`,\n        );\n      }\n\n      setConnectionHealth(true);\n      setLastRefresh(new Date());\n\n      // Update sync status for common tables\n      setSyncStatus({\n        events: \"SUBSCRIBED\",\n        members: \"SUBSCRIBED\",\n        sermons: \"SUBSCRIBED\",\n        gallery: \"SUBSCRIBED\",\n        testimonials: \"SUBSCRIBED\",\n        prayer_requests: \"SUBSCRIBED\",\n        donations: \"SUBSCRIBED\",\n      });\n\n      console.log(\"Data refresh completed successfully\");\n    } catch (error) {\n      console.error(\"Force sync failed:\", error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const forceSync = async () => {\n    console.log(\"Force syncing data...\");\n    // Debounce force sync to prevent infinite loops\n    if (isRefreshing) {\n      console.log(\"Sync already in progress, skipping...\");\n      return;\n    }\n    await refreshAllData();\n  };\n\n  const autoCommitAndPush = async (message: string): Promise<boolean> => {\n    try {\n      console.log(\"Auto commit and push:\", message);\n      // Simulate git operations\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n      setGitStatus((prev) => ({\n        ...prev,\n        hasChanges: false,\n        changedFiles: [],\n      }));\n      return true;\n    } catch (error) {\n      console.error(\"Auto commit and push failed:\", error);\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    // Simulate periodic health checks\n    const interval = setInterval(() => {\n      setLastRefresh(new Date());\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const value: DataContextType = {\n    connectionHealth,\n    syncStatus,\n    gitStatus,\n    lastRefresh,\n    isRefreshing,\n    forceSync,\n    autoCommitAndPush,\n  };\n\n  return <DataContext.Provider value={value}>{children}</DataContext.Provider>;\n}\n\nexport function useDataContext() {\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error(\"useDataContext must be used within a DataProvider\");\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/contexts/LanguageContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'lang' is defined but never used.","line":7,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":8,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":400,"column":28,"nodeType":"Identifier","messageId":"namedExport","endLine":400,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\ntype Language = \"en\" | \"am\";\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\n// Create the language context\nconst LanguageContext = createContext<LanguageContextType | undefined>(\n  undefined,\n);\n\n// Translations object for all strings in both languages\nconst translations: Record<string, Record<Language, string>> = {\n  // Navigation\n  home: { en: \"Home\", am: \"መነሻ\" },\n  about: { en: \"About Us\", am: \"ስለ እኛ\" },\n  events: { en: \"Events\", am: \"ዝግጅቶች\" },\n  services: { en: \"Services\", am: \"አገልግሎቶች\" },\n  gallery: { en: \"Gallery\", am: \"ፎቶዎች\" },\n  donation: { en: \"Donation\", am: \"ልገሳ\" },\n  membership: { en: \"Membership\", am: \"አባልነት\" },\n  contact: { en: \"Contact Us\", am: \"ያግኙን\" },\n\n  // Home page\n  welcome: {\n    en: \"Welcome to the Debre Bisrat Dagimawi Kulibi St.Gabriel EOTC, Silver Spring, Maryland\",\n    am: \"እንኳን ወደ ደብረ ብሥራት ዳግማዊ ቁልቢ ቅዱስ ገብርኤል የኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያን ድረ ገጽ በሰላም መጡ።\",\n  },\n  bible_verse: {\n    en: \"Give, and it will be given to you. A good measure, pressed down, shaken together and running over, will be poured into your lap. For with the measure you use, it will be measured to you.\",\n    am: \"ስጡ፤ ለእናንተም ይሰጣችኋል። መልካም መጠን የተደቆሰና የተነቀነቀ የተትረፈረፈም ይሰጣችኋል፤ በምትሰፍሩበት መስፈሪያ ለእናንተ ይሰፈርላችኋልና።\",\n  },\n  bible_reference: { en: \"Luke 6:38, NIV\", am: \"ሉቃስ 6:38\" },\n\n  // Common form fields\n  full_name: { en: \"Full Name\", am: \"ሙሉ ስም\" },\n  email: { en: \"Email Address\", am: \"የኢሜል አድራሻ\" },\n  phone: { en: \"Phone Number\", am: \"ስልክ ቁጥር\" },\n  address: { en: \"Address\", am: \"አድራሻ\" },\n  preferred_language: { en: \"Preferred Language\", am: \"የተመረጠ ቋንቋ\" },\n  english: { en: \"English\", am: \"እንግሊዝኛ\" },\n  amharic: { en: \"Amharic\", am: \"አማርኛ\" },\n  submit: { en: \"Submit\", am: \"አስገባ\" },\n  processing: { en: \"Processing...\", am: \"በመስራት ላይ...\" },\n\n  // Donation page\n  donation_title: { en: \"Support Our Church\", am: \"ቤተክርስቲያናችንን ይደግፉ\" },\n  donation_subtitle: {\n    en: \"Make a Difference in Our Community\",\n    am: \"በማህበረሰባችን ውስጥ ለውጥ ያድርጉ\",\n  },\n  donation_description: {\n    en: \"Your generous contributions help us maintain our church, support community programs, and continue our mission.\",\n    am: \"የእርስዎ ገንዘብ ቤተክርስቲያናችንን ለመጠበቅ፣ የማህበረሰብ ፕሮግራሞችን ለመደገፍ እና ተልዕኮአችንን ለመቀጠል ይረዳናል።\",\n  },\n  donation_amount: { en: \"Donation Amount\", am: \"የልገሳ መጠን\" },\n  donation_type: { en: \"Donation Type\", am: \"የልገሳ አይነት\" },\n  one_time: { en: \"One-time\", am: \"አንድ ጊዜ\" },\n  monthly: { en: \"Monthly\", am: \"ወርሃዊ\" },\n  quarterly: { en: \"Quarterly\", am: \"በየሶስት ወሩ\" },\n  annually: { en: \"Annually\", am: \"አመታዊ\" },\n  donate_now: { en: \"Donate Now\", am: \"አሁን ይለግሱ\" },\n  donation_purpose: { en: \"Purpose of Donation\", am: \"የልገሳ ዓላማ\" },\n  general_fund: { en: \"General Fund\", am: \"አጠቃላይ\" },\n  building_fund: { en: \"Building Fund\", am: \"የህንፃ\" },\n  youth_programs: { en: \"Youth Programs\", am: \"የወጣቶች ፕሮግራም\" },\n  charity: { en: \"Charity\", am: \"ለጋስነት\" },\n  suggested_amounts: { en: \"Suggested Amounts\", am: \"የሚመከሩ መጠኖች\" },\n  custom_amount: { en: \"Custom Amount\", am: \"የተለየ መጠን\" },\n  contact_preference: { en: \"Contact Preference\", am: \"የመገናኛ ምርጫ\" },\n  email_contact: { en: \"Email\", am: \"ኢሜል\" },\n  phone_contact: { en: \"Phone\", am: \"ስልክ\" },\n  anonymous_donation: {\n    en: \"Make this donation anonymous\",\n    am: \"ይህንን ልገሳ ስም ሳይገለጽ ማድረግ\",\n  },\n  anonymous_note: {\n    en: \"Your contact information will not be shared publicly\",\n    am: \"የእርስዎ የመገናኛ መረጃ በይፋ አይጋራም\",\n  },\n  tax_deductible: { en: \"Tax Deductible\", am: \"ከግብር የሚቀነስ\" },\n  tax_deductible_note: {\n    en: \"This donation is tax-deductible. You will receive a receipt for your records.\",\n    am: \"ይህ ልገሳ ከግብር የሚቀነስ ነው። ለመዝገብዎ ደረሰኝ ይደርስዎታል።\",\n  },\n  secure_payment: { en: \"Secure Payment\", am: \"ደህንነቱ የተጠበቀ ክፍያ\" },\n  secure_payment_note: {\n    en: \"Your payment information is encrypted and secure\",\n    am: \"የእርስዎ የክፍያ መረጃ የተመሰጠረ እና ደህንነቱ የተጠበቀ ነው\",\n  },\n  donation_impact: { en: \"Your Impact\", am: \"የእርስዎ ተጽዕኖ\" },\n  general_fund_impact: {\n    en: \"Supports daily operations, utilities, and maintenance of our church facilities\",\n    am: \"የቤተክርስቲያናችንን የዕለት ተዕለት ሥራዎች፣ መገልገያዎች እና ጥገና ይደግፋል\",\n  },\n  building_fund_impact: {\n    en: \"Helps with construction, renovation, and expansion of church buildings\",\n    am: \"የቤተክርስቲያን ህንፃዎች ግንባታ፣ ማሻሻያ እና ማስፋፊያ ይረዳል\",\n  },\n  youth_programs_impact: {\n    en: \"Funds Sunday school, youth activities, and educational programs\",\n    am: \"የሰንበት ትምህርት ቤት፣ የወጣቶች እንቅስቃሴዎች እና የትምህርት ፕሮግራሞችን ይደግፋል\",\n  },\n  charity_impact: {\n    en: \"Supports community outreach, food programs, and assistance to those in need\",\n    am: \"የማህበረሰብ ድጋፍ፣ የምግብ ፕሮግራሞች እና ለተቸገሩ ሰዎች እርዳታ ይሰጣል\",\n  },\n  donor_recognition: { en: \"Donor Recognition\", am: \"የለጋሽ እውቅና\" },\n  include_in_bulletin: {\n    en: \"Include my name in the church bulletin (unless anonymous)\",\n    am: \"ስሜን በቤተክርስቲያን መግለጫ ውስጥ ያካትቱ (ስም ሳይገለጽ ካልሆነ በስተቀር)\",\n  },\n  memorial_dedication: {\n    en: \"Memorial or Dedication (Optional)\",\n    am: \"መታሰቢያ ወይም መሰጠት (አማራጭ)\",\n  },\n  memorial_placeholder: {\n    en: \"In memory of... or In honor of...\",\n    am: \"በ... ትዝታ ወይም በ... ክብር\",\n  },\n  proceed_to_payment: {\n    en: \"Proceed to Secure Payment\",\n    am: \"ወደ ደህንነቱ የተጠበቀ ክፍያ ይሂዱ\",\n  },\n\n  // Services page\n  services_title: { en: \"Church Services\", am: \"የቤተክርስቲያን አገልግሎቶች\" },\n  services_description: {\n    en: \"Learn about the various religious services offered at our church throughout the year.\",\n    am: \"በዓመቱ ውስጥ ቤተክርስቲያናችን ስለሚሰጣቸው የተለያዩ ሃይማኖታዊ አገልግሎቶች ይወቁ።\",\n  },\n  regular_services: { en: \"Regular Services\", am: \"መደበኛ አገልግሎቶች\" },\n  special_services: {\n    en: \"Special Services & Holidays\",\n    am: \"ልዩ አገልግሎቶች እና በዓላት\",\n  },\n  children_services: { en: \"Children's Services\", am: \"የልጆች አገልግሎቶች\" },\n\n  // Gallery page\n  gallery_title: { en: \"Photo Gallery\", am: \"ፎቶ ማዕከል\" },\n  gallery_description: {\n    en: \"Explore photos from our church events, celebrations, and community gatherings.\",\n    am: \"ከቤተክርስቲያን ዝግጅቶቻችን፣ ከበዓላት እና ከማህበረሰብ ስብሰባዎች ፎቶዎችን ይመልከቱ።\",\n  },\n  church_building: { en: \"Church Building\", am: \"የቤተክርስቲያን ህንፃ\" },\n  congregation: { en: \"Congregation\", am: \"ምዕመናን\" },\n  celebrations: { en: \"Celebrations\", am: \"በዓላት\" },\n  community_events: { en: \"Community Events\", am: \"የማህበረሰብ ዝግጅቶች\" },\n\n  // Contact page\n  contact_title: { en: \"Contact Us\", am: \"ያግኙን\" },\n  contact_description: {\n    en: \"Have questions? Reach out to us through any of the methods below or use the contact form.\",\n    am: \"ጥያቄዎች አሉዎት? ከታች ባሉት ማንኛውም መንገዶች ወይም የመገናኛ ቅጹን በመጠቀም ያግኙን።\",\n  },\n  message: { en: \"Message\", am: \"መልዕክት\" },\n  send_message: { en: \"Send Message\", am: \"መልዕክት ላክ\" },\n  language_switch: { en: \"አማርኛ\", am: \"English\" },\n\n  // Footer\n  copyright: {\n    en: \"© 2025 Debre Bisrat Dagimawi Kulibi St.Gabriel EOTC. All rights reserved.\",\n    am: \"© 2025 ደብረ ብሥራት ዳግማዊ ቁልቢ ቅዱስ ገብርኤል የኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያን። መብቱ በህግ የተጠበቀ ነው።\",\n  },\n\n  // Membership Registration\n  membership_registration_title: {\n    en: \"Membership Registration\",\n    am: \"የአባልነት ምዝገባ\",\n  },\n  membership_registration_description: {\n    en: \"Join our church community by registering as a member. Annual membership fee is $100.\",\n    am: \"በአባልነት በመመዝገብ የቤተክርስቲያን ማህበረሰባችንን ይቀላቀሉ። የዓመት አባልነት ክፍያ $100 ነው።\",\n  },\n  membership_type: {\n    en: \"Membership Type\",\n    am: \"የአባልነት ዓይነት\",\n  },\n  select_membership_type: {\n    en: \"Select Membership Type\",\n    am: \"የአባልነት ዓይነት ይምረጡ\",\n  },\n  individual_membership: {\n    en: \"Individual Membership\",\n    am: \"የግል አባልነት\",\n  },\n  family_membership: {\n    en: \"Family Membership\",\n    am: \"የቤተሰብ አባልነት\",\n  },\n  membership_fee_notice: {\n    en: \"Annual Membership Fee: $100\",\n    am: \"የዓመት አባልነት ክፍያ፡ $100\",\n  },\n  membership_fee_description: {\n    en: \"This fee helps support our church's activities and maintenance.\",\n    am: \"ይህ ክፍያ የቤተክርስቲያናችንን እንቅስቃሴዎች እና ጥገና ይደግፋል።\",\n  },\n  register_and_pay: {\n    en: \"Register & Pay $100\",\n    am: \"ይመዝገቡ እና $100 ይክፈሉ\",\n  },\n\n  // Membership Registration Form Fields\n  first_name: { en: \"First Name\", am: \"መጠሪያ ስም\" },\n  middle_name: { en: \"Middle Name\", am: \"የአባት ስም\" },\n  last_name: { en: \"Last Name\", am: \"የአያት ስም\" },\n  baptismal_name: { en: \"Baptismal Name\", am: \"የጥምቀት ስም\" },\n  date_of_birth: { en: \"Date of Birth\", am: \"የትውልድ ቀን\" },\n  gender: { en: \"Gender\", am: \"ፆታ\" },\n  male: { en: \"Male\", am: \"ወንድ\" },\n  female: { en: \"Female\", am: \"ሴት\" },\n  street_address: { en: \"Street Address\", am: \"የመንገድ አድራሻ\" },\n  apt_suite_bldg: {\n    en: \"Apt, Suite, Bldg. (optional)\",\n    am: \"አፓርትመንት፣ ሱት፣ ህንፃ (አማራጭ)\",\n  },\n  city: { en: \"City\", am: \"ከተማ\" },\n  state_province_region: { en: \"State/Province/Region\", am: \"ግዛት/ክልል/ወረዳ\" },\n  postal_zip_code: { en: \"Postal/Zip Code\", am: \"ፖስታ/ዚፕ ኮድ\" },\n  country: { en: \"Country\", am: \"ሀገር\" },\n  united_states: { en: \"United States\", am: \"አሜሪካ\" },\n  canada: { en: \"Canada\", am: \"ካናዳ\" },\n  ethiopia: { en: \"Ethiopia\", am: \"ኢትዮጵያ\" },\n  other: { en: \"Other\", am: \"ሌላ\" },\n  regular_member: {\n    en: \"Regular Member ($100/year)\",\n    am: \"መደበኛ አባል ($100/አመት)\",\n  },\n  student_member: { en: \"Student Member ($50/year)\", am: \"የተማሪ አባል ($50/አመት)\" },\n  senior_member: { en: \"Senior Member ($75/year)\", am: \"የአዛውንት አባል ($75/አመት)\" },\n  family_member: {\n    en: \"Family Member ($200/year)\",\n    am: \"የቤተሰብ አባል ($200/አመት)\",\n  },\n  previous_member_orthodox: {\n    en: \"I was previously a member of another Orthodox church\",\n    am: \"ከዚህ በፊት የሌላ ኦርቶዶክስ ቤተክርስቲያን አባል ነበርኩ\",\n  },\n  previous_church_name: { en: \"Previous Church Name\", am: \"የቀድሞ ቤተክርስቲያን ስም\" },\n  baptized: { en: \"I have been baptized\", am: \"ተጠምቄአለሁ\" },\n  baptism_date: { en: \"Baptism Date\", am: \"የጥምቀት ቀን\" },\n  marital_status: { en: \"Marital Status\", am: \"የጋብቻ ሁኔታ\" },\n  single: { en: \"Single\", am: \"ያላገባ\" },\n  married: { en: \"Married\", am: \"ያገባ\" },\n  divorced: { en: \"Divorced\", am: \"የተፋታ\" },\n  widowed: { en: \"Widowed\", am: \"የትዳር አጋሩ የሞተበት\" },\n  spouse_information: { en: \"Spouse Information\", am: \"የትዳር አጋር መረጃ\" },\n  spouse: { en: \"Spouse\", am: \"የትዳር አጋር\" },\n  spouse_baptismal_name: {\n    en: \"Spouse Baptismal Name\",\n    am: \"የትዳር አጋር የጥምቀት ስም\",\n  },\n  spouse_phone: { en: \"Spouse Phone\", am: \"የትዳር አጋር ስልክ\" },\n  spouse_email: { en: \"Spouse Email\", am: \"የትዳር አጋር ኢሜል\" },\n  children_information: { en: \"Children Information\", am: \"የልጆች መረጃ\" },\n  child_1: { en: \"Child 1\", am: \"ልጅ 1\" },\n  child_2: { en: \"Child 2\", am: \"ልጅ 2\" },\n  ministry_interests: {\n    en: \"Ministry Interests (Select all that apply)\",\n    am: \"የአገልግሎት ፍላጎቶች (የሚመለከትዎትን ሁሉ ይምረጡ)\",\n  },\n  volunteer_interests: {\n    en: \"Volunteer Interests (Select all that apply)\",\n    am: \"የበጎ ፈቃድ ፍላጎቶች (የሚመለከትዎትን ሁሉ ይምረጡ)\",\n  },\n  special_skills: {\n    en: \"Special Skills or Talents\",\n    am: \"ልዩ ችሎታዎች ወይም ተሰጥኦዎች\",\n  },\n  skills_placeholder: {\n    en: \"Please describe any special skills, talents, or professional expertise you'd like to share...\",\n    am: \"እባክዎን ማካፈል የሚፈልጓቸውን ልዩ ችሎታዎች፣ ተሰጥኦዎች ወይም ሙያዊ ብቃቶች ይግለጹ...\",\n  },\n  emergency_contact_info: {\n    en: \"Emergency Contact Information\",\n    am: \"የአደጋ ጊዜ ተጠሪ መረጃ\",\n  },\n  emergency_contact_name: {\n    en: \"Emergency Contact Name\",\n    am: \"የአደጋ ጊዜ ተጠሪ ስም\",\n  },\n  emergency_contact_phone: {\n    en: \"Emergency Contact Phone\",\n    am: \"የአደጋ ጊዜ ተጠሪ ስልክ\",\n  },\n  emergency_contact_relation: {\n    en: \"Relationship to Emergency Contact\",\n    am: \"ከአደጋ ጊዜ ተጠሪ ጋር ያለዎት ግንኙነት\",\n  },\n  emergency_relation_placeholder: {\n    en: \"e.g., Spouse, Parent, Sibling, Friend\",\n    am: \"ለምሳሌ፣ ባል/ሚስት፣ ወላጅ፣ ወንድም/እህት፣ ጓደኛ\",\n  },\n  final_details_review: {\n    en: \"Final Details & Review\",\n    am: \"የመጨረሻ ዝርዝሮች እና ግምገማ\",\n  },\n  email_updates_consent: {\n    en: \"I would like to receive email updates about church events and news\",\n    am: \"ስለ ቤተክርስቲያን ዝግጅቶች እና ዜናዎች በኢሜይል መረጃዎችን መቀበል እፈልጋለሁ\",\n  },\n  sms_updates_consent: {\n    en: \"I would like to receive SMS updates for urgent announcements\",\n    am: \"ለአስቸኳይ ማስታወቂያዎች በኤስኤምኤስ መረጃዎችን መቀበል እፈልጋለሁ\",\n  },\n  how_did_you_hear: {\n    en: \"How did you hear about our church?\",\n    am: \"ስለ ቤተክርስቲያናችን እንዴት ሰሙ?\",\n  },\n  please_select: { en: \"Please select...\", am: \"እባክዎን ይምረጡ...\" },\n  friend_family: { en: \"Friend or Family Member\", am: \"ጓደኛ ወይም የቤተሰብ አባል\" },\n  church_website: { en: \"Church Website\", am: \"የቤተክርስቲያን ድህረ ገጽ\" },\n  social_media: { en: \"Social Media\", am: \"ማህበራዊ ሚዲያ\" },\n  community_event: { en: \"Community Event\", am: \"የማህበረሰብ ዝግጅት\" },\n  drove_by: { en: \"Drove by the Church\", am: \"ቤተክርስቲያኑን አልፌ ሳይ\" },\n  additional_notes: {\n    en: \"Additional Notes or Comments\",\n    am: \"ተጨማሪ ማስታወሻዎች ወይም አስተያየቶች\",\n  },\n  notes_placeholder: {\n    en: \"Please share anything else you'd like us to know...\",\n    am: \"እባክዎን እኛ እንድናውቅ የሚፈልጉትን ማንኛውንም ነገር ያካፍሉ...\",\n  },\n  agree_terms: {\n    en: \"I agree to the church's terms and conditions, and I understand that membership requires an annual fee. I commit to participating in church activities and supporting the church community.\",\n    am: \"የቤተክርስቲያኑን ውሎች እና ሁኔታዎች እስማማለሁ፣ እና አባልነት አመታዊ ክፍያ እንደሚጠይቅ ተረድቻለሁ። በቤተክርስቲያን እንቅስቃሴዎች ለመሳተፍ እና የቤተክርስቲያን ማህበረሰብን ለመደገፍ እቃጠራለሁ።\",\n  },\n  photo_consent: {\n    en: \"I consent to having my photo taken during church events and activities for use in church publications, website, and social media.\",\n    am: \"በቤተክርስቲያን ዝግጅቶች እና እንቅስቃሴዎች ወቅት ፎቶዬ እንዲነሳ እና በቤተክርስቲያን ህትመቶች፣ ድህረ ገጽ እና ማህበራዊ ሚዲያ ላይ እንዲውል ፈቃዴን እሰጣለሁ።\",\n  },\n  membership_fee: { en: \"Membership Fee\", am: \"የአባልነት ክፍያ\" },\n  annual_membership_fee: {\n    en: \"Annual membership fee:\",\n    am: \"አመታዊ የአባልነት ክፍያ:\",\n  },\n  payment_redirect_notice: {\n    en: \"After submitting this form, you will be redirected to a secure payment page to complete your membership registration.\",\n    am: \"ይህንን ቅጽ ካስገቡ በኋላ፣ የአባልነት ምዝገባዎን ለማጠናቀቅ ወደ ደህንነቱ የተጠበቀ የክፍያ ገጽ ይዞረዛሉ።\",\n  },\n  previous: { en: \"Previous\", am: \"ቀዳሚ\" },\n  next: { en: \"Next\", am: \"ቀጣይ\" },\n  complete_registration: {\n    en: \"Complete Registration & Pay\",\n    am: \"ምዝገባን አጠናቅቅ እና ክፈል\",\n  },\n  personal_information: { en: \"Personal Information\", am: \"የግል መረጃ\" },\n  address_information: { en: \"Address Information\", am: \"የአድራሻ መረጃ\" },\n  membership_family_info: {\n    en: \"Membership & Family Information\",\n    am: \"የአባልነት እና የቤተሰብ መረጃ\",\n  },\n  ministry_emergency_contact: {\n    en: \"Ministry Interests & Emergency Contact\",\n    am: \"የአገልግሎት ፍላጎቶች እና የአደጋ ጊዜ ተጠሪ\",\n  },\n  step_personal: { en: \"Personal\", am: \"የግል\" },\n  step_address: { en: \"Address\", am: \"አድራሻ\" },\n  step_membership: { en: \"Membership\", am: \"አባልነት\" },\n  step_ministry: { en: \"Ministry\", am: \"አገልግሎት\" },\n  step_review: { en: \"Review\", am: \"ግምገማ\" },\n  date: { en: \"Date\", am: \"ቀን\" },\n  required: { en: \"*\", am: \"*\" },\n};\n\n// Language Provider component\nfunction LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>(\"en\");\n\n  // Translation function\n  const t = (key: string): string => {\n    if (!translations[key]) {\n      console.warn(`Translation key not found: ${key}`);\n      return key;\n    }\n    return translations[key][language];\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\n// Custom hook for using the language context\nfunction useLanguage(): LanguageContextType {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n}\n\nexport { LanguageProvider, useLanguage };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-performance-monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-toast.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'state' is defined but never used.","line":124,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useAdminAuth.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkUserRole' and 'initializeAuth'. Either include them or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [checkUserRole, initializeAuth, navigate]","fix":{"range":[917,927],"text":"[checkUserRole, initializeAuth, navigate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { authService, AuthUser } from \"@/lib/auth/AuthService\";\nimport \"@/lib/auth/strategies\";\n\nexport const useAdminAuth = () => {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Initialize auth state\n    initializeAuth();\n\n    // Listen for auth state changes\n    const {\n      data: { subscription },\n    } = authService.onAuthStateChange(async (event, session) => {\n      if (event === \"SIGNED_OUT\" || !session) {\n        setUser(null);\n        setIsAdmin(false);\n        navigate(\"/admin/login\");\n      } else if (event === \"SIGNED_IN\" && session) {\n        await checkUserRole();\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [navigate]);\n\n  const initializeAuth = async () => {\n    try {\n      setLoading(true);\n      const { success, session } = await authService.getSession();\n\n      if (success && session) {\n        await checkUserRole();\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Error initializing auth:\", error);\n      setLoading(false);\n    }\n  };\n\n  const checkUserRole = async () => {\n    try {\n      const { success, user, error } = await authService.getCurrentUser();\n\n      if (success && user) {\n        setUser(user);\n        const isUserAdmin = user.role === \"admin\";\n        setIsAdmin(isUserAdmin);\n\n        if (!isUserAdmin) {\n          navigate(\"/admin/login\");\n        }\n      } else {\n        console.error(\"Error getting current user:\", error);\n        navigate(\"/admin/login\");\n      }\n    } catch (error) {\n      console.error(\"Error checking user role:\", error);\n      navigate(\"/admin/login\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const { success, error } = await authService.signOut();\n      if (!success) {\n        console.error(\"Error signing out:\", error);\n      }\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      const result = await authService.authenticate(\"emailPassword\", {\n        email,\n        password,\n      });\n\n      if (result.success && result.user) {\n        setUser(result.user);\n        setIsAdmin(result.user.role === \"admin\");\n        return { success: true };\n      } else {\n        return {\n          success: false,\n          error: result.error || \"Authentication failed\",\n        };\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : \"Unknown error during login\",\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    user,\n    loading,\n    isAdmin,\n    signOut,\n    login,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useDataRefresh.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":18,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'forceSync' is assigned a value but never used.","line":25,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":38},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":139,"column":48,"nodeType":"SpreadElement","endLine":139,"endColumn":63},{"ruleId":"no-unused-vars","severity":2,"message":"'pauseRefresh' is assigned a value but never used.","line":141,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":141,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'resumeRefresh' is assigned a value but never used.","line":146,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useCallback, useState } from \"react\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport { useDataContext } from \"@/contexts/DataContext\";\n\n/**\n * Simplified data refresh hook without complex event listeners\n * @param refreshFunction - Function to call for refreshing data\n * @param intervalMs - Refresh interval in milliseconds (default: 5 minutes)\n * @param dependencies - Dependencies array to restart the interval\n * @param tableName - Optional table name for logging\n */\nexport const useDataRefresh = (\n  refreshFunction: () => void | Promise<void>,\n  intervalMs: number = 30 * 60 * 1000, // Increased to 30 minutes to reduce frequency\n  dependencies: unknown[] = [],\n  tableName?: string,\n) => {\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const isActiveRef = useRef(true);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  const isRefreshingRef = useRef(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const refreshFunctionRef = useRef(refreshFunction);\n  const { connectionHealth, forceSync } = useDataContext();\n\n  useEffect(() => {\n    refreshFunctionRef.current = refreshFunction;\n  }, [refreshFunction]);\n\n  useEffect(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Simple refresh function with debouncing\n    const enhancedRefreshFunction = async () => {\n      if (!isActiveRef.current || isRefreshingRef.current) {\n        console.log(\n          `Skipping refresh for ${tableName || \"component\"} - already refreshing or inactive`,\n        );\n        return;\n      }\n\n      isRefreshingRef.current = true;\n      const maxRetries = 3;\n      let retryCount = 0;\n\n      while (retryCount < maxRetries) {\n        try {\n          await refreshFunctionRef.current();\n          const now = new Date();\n          setLastRefresh(now);\n          console.log(\n            `Data refresh successful for ${tableName || \"component\"}`,\n          );\n          break;\n        } catch (error) {\n          retryCount++;\n          console.error(\n            `Error during data refresh (attempt ${retryCount}/${maxRetries}):`,\n            error,\n          );\n\n          if (retryCount < maxRetries) {\n            await new Promise((resolve) =>\n              setTimeout(resolve, 1000 * Math.pow(2, retryCount - 1)),\n            );\n          } else {\n            console.error(\n              `Max retry attempts reached for ${tableName || \"component\"} refresh`,\n            );\n          }\n        }\n      }\n\n      isRefreshingRef.current = false;\n      setIsRefreshing(false);\n    };\n\n    intervalRef.current = setInterval(async () => {\n      if (isActiveRef.current && connectionHealth) {\n        await enhancedRefreshFunction();\n      } else if (!connectionHealth) {\n        console.warn(\"Skipping refresh due to connection health issues\");\n      }\n    }, intervalMs);\n\n    const handleDataChange = () => {\n      console.log(\n        `Real-time data change detected for ${tableName || \"component\"}`,\n      );\n      enhancedRefreshFunction();\n    };\n\n    const handleForceRefresh = () => {\n      console.log(`Force refresh triggered for ${tableName || \"component\"}`);\n      enhancedRefreshFunction();\n    };\n\n    const handleAdminAction = () => {\n      console.log(\n        `Admin action detected, refreshing ${tableName || \"component\"}`,\n      );\n      enhancedRefreshFunction();\n    };\n\n    if (tableName) {\n      dataSyncService.addSubscription(tableName, handleDataChange);\n      window.addEventListener(`${tableName}Changed`, handleDataChange);\n    }\n\n    window.addEventListener(\"dataChanged\", handleDataChange);\n    window.addEventListener(\"forceRefresh\", handleForceRefresh);\n    window.addEventListener(\"adminActionCompleted\", handleAdminAction);\n\n    window.addEventListener(\"dataChanged\", handleDataChange);\n    window.addEventListener(\"forceRefresh\", handleForceRefresh);\n    window.addEventListener(\"adminActionCompleted\", handleAdminAction);\n    window.addEventListener(\"dataRefresh\", handleDataChange);\n\n    enhancedRefreshFunction();\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n\n      if (tableName) {\n        dataSyncService.removeSubscription(tableName);\n        window.removeEventListener(`${tableName}Changed`, handleDataChange);\n      }\n\n      window.removeEventListener(\"dataChanged\", handleDataChange);\n      window.removeEventListener(\"forceRefresh\", handleForceRefresh);\n      window.removeEventListener(\"adminActionCompleted\", handleAdminAction);\n      window.removeEventListener(\"dataRefresh\", handleDataChange);\n    };\n  }, [tableName, connectionHealth, intervalMs, ...dependencies]);\n\n  const pauseRefresh = useCallback(() => {\n    isActiveRef.current = false;\n    console.log(`Paused refresh for ${tableName || \"component\"}`);\n  }, [tableName]);\n\n  const resumeRefresh = useCallback(() => {\n    isActiveRef.current = true;\n    console.log(`Resumed refresh for ${tableName || \"component\"}`);\n  }, [tableName]);\n\n  const manualRefresh = useCallback(async () => {\n    if (!isRefreshingRef.current) {\n      console.log(`Manual refresh triggered for ${tableName || \"component\"}`);\n      isRefreshingRef.current = true;\n      setIsRefreshing(true);\n      try {\n        await refreshFunction();\n        const now = new Date();\n        setLastRefresh(now);\n      } catch (error) {\n        console.error(\n          `Manual refresh error for ${tableName || \"component\"}:`,\n          error,\n        );\n      } finally {\n        isRefreshingRef.current = false;\n        setIsRefreshing(false);\n      }\n    }\n  }, [refreshFunction, tableName]);\n\n  const forceSyncData = useCallback(async () => {\n    console.log(`Force sync triggered for ${tableName || \"component\"}`);\n    await manualRefresh();\n  }, [manualRefresh, tableName]);\n\n  return {\n    manualRefresh,\n    forceSyncData,\n    lastRefresh,\n    isActive: isActiveRef.current,\n    isRefreshing,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/integrations/supabase/api.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'AppointmentCreateInput' is defined but never used.","line":6,"column":6,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"./client\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport type { Database } from '@/types/supabase';\n\ntype Appointment = Database['public']['Tables']['appointments']['Row'];\ntype AppointmentCreateInput = Database['public']['Tables']['appointments']['Insert'];\n\nexport const api = {\n  // Events API\n  events: {\n    getEvents: async () => {\n      const { data, error } = await supabase\n        .from(\"events\")\n        .select(\"*\")\n        .order(\"event_date\", { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    },\n    getUpcomingEvents: async (limit = 10) => {\n      const today = new Date().toISOString().split(\"T\")[0];\n      const { data, error } = await supabase\n        .from(\"events\")\n        .select(\"*\")\n        .gte(\"event_date\", today)\n        .order(\"event_date\", { ascending: true })\n        .limit(limit);\n\n      if (error) throw error;\n      return data || [];\n    },\n    createEvent: async (event: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"events\")\n        .insert([event])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"events\", data);\n      return data;\n    },\n    updateEvent: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"events\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"events\", data);\n      return data;\n    },\n    deleteEvent: async (id: string) => {\n      const { error } = await supabase.from(\"events\").delete().eq(\"id\", id);\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"events\", { id });\n      return true;\n    },\n  },\n\n  // Members API\n  members: {\n    getMembers: async () => {\n      const { data, error } = await supabase\n        .from(\"members\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    createMember: async (member: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"members\")\n        .insert([member])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"members\", data);\n      return data;\n    },\n    updateMember: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"members\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"members\", data);\n      return data;\n    },\n    deleteMember: async (id: string) => {\n      const { error } = await supabase.from(\"members\").delete().eq(\"id\", id);\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"members\", { id });\n      return true;\n    },\n  },\n\n  // Sermons API\n  sermons: {\n    getSermons: async () => {\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .select(\"*\")\n        .order(\"sermon_date\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    createSermon: async (sermon: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .insert([sermon])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"sermons\", data);\n      return data;\n    },\n    updateSermon: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"sermons\", data);\n      return data;\n    },\n    deleteSermon: async (id: string) => {\n      const { error } = await supabase.from(\"sermons\").delete().eq(\"id\", id);\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"sermons\", { id });\n      return true;\n    },\n  },\n\n  // Testimonials API\n  testimonials: {\n    getTestimonials: async (approvedOnly = false) => {\n      let query = supabase.from(\"testimonials\").select(\"*\");\n\n      if (approvedOnly) {\n        query = query.eq(\"is_approved\", true);\n      }\n\n      const { data, error } = await query.order(\"created_at\", {\n        ascending: false,\n      });\n      if (error) throw error;\n      return data;\n    },\n    createTestimonial: async (testimonial: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"testimonials\")\n        .insert([testimonial])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"testimonials\", data);\n      return data;\n    },\n    updateTestimonial: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"testimonials\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"testimonials\", data);\n      return data;\n    },\n    deleteTestimonial: async (id: string) => {\n      const { error } = await supabase\n        .from(\"testimonials\")\n        .delete()\n        .eq(\"id\", id);\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"testimonials\", { id });\n      return true;\n    },\n  },\n\n  // Prayer Requests API\n  prayerRequests: {\n    getPrayerRequests: async (approvedOnly = false) => {\n      let query = supabase.from(\"prayer_requests\").select(\"*\");\n\n      if (approvedOnly) {\n        query = query.eq(\"is_approved\", true);\n      }\n\n      const { data, error } = await query.order(\"created_at\", {\n        ascending: false,\n      });\n      if (error) throw error;\n      return data;\n    },\n    createPrayerRequest: async (request: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"prayer_requests\")\n        .insert([request])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"prayer_requests\", data);\n      return data;\n    },\n    updatePrayerRequest: async (\n      id: string,\n      updates: Record<string, unknown>,\n    ) => {\n      const { data, error } = await supabase\n        .from(\"prayer_requests\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"prayer_requests\", data);\n      return data;\n    },\n    deletePrayerRequest: async (id: string) => {\n      const { error } = await supabase\n        .from(\"prayer_requests\")\n        .delete()\n        .eq(\"id\", id);\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"prayer_requests\", { id });\n      return true;\n    },\n  },\n\n  // Donations API\n  donations: {\n    getDonations: async () => {\n      const { data, error } = await supabase\n        .from(\"donations\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    createDonation: async (donation: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"donations\")\n        .insert([donation])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"donations\", data);\n      return data;\n    },\n    updateDonation: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"donations\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"donations\", data);\n      return data;\n    },\n  },\n\n  // Gallery API\n  gallery: {\n    getGalleryImages: async () => {\n      const { data, error } = await supabase\n        .from(\"gallery\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    createGalleryImage: async (image: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"gallery\")\n        .insert([image])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"gallery\", data);\n      return data;\n    },\n    deleteGalleryImage: async (id: string) => {\n      const { error } = await supabase.from(\"gallery\").delete().eq(\"id\", id);\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"gallery\", { id });\n      return true;\n    },\n  },\n\n  // Users API\n  users: {\n    getUsers: async () => {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    createUser: async (user: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .insert([user])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"profiles\", data);\n      return data;\n    },\n    updateUser: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"profiles\", data);\n      return data;\n    },\n    deleteUser: async (id: string) => {\n      const { error } = await supabase.from(\"profiles\").delete().eq(\"id\", id);\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"profiles\", { id });\n      return true;\n    },\n  },\n\n  // Appointments API\n  appointments: {\n    getAppointments: async () => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .select(\n          `\n          *,\n          responded_by_profile:profiles!appointments_responded_by_fkey(email)\n        `,\n        )\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getAppointmentById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .select(\n          `\n          *,\n          responded_by_profile:profiles!appointments_responded_by_fkey(email)\n        `,\n        )\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    createAppointment: async (appointment: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .insert([appointment])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data as Appointment;\n    },\n    updateAppointment: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"appointments\", data);\n      return data as Appointment;\n    },\n    respondToAppointment: async (\n      id: string,\n      response: {\n        status: string;\n        admin_response: string;\n        admin_notes?: string;\n        confirmed_date?: string;\n        confirmed_time?: string;\n        responded_by: string;\n      },\n    ) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .update({\n          ...response,\n          responded_at: new Date().toISOString(),\n        })\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\n        \"respond_appointment\",\n        \"appointments\",\n        data,\n      );\n      return data;\n    },\n    deleteAppointment: async (id: string) => {\n      const { error } = await supabase\n        .from(\"appointments\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"appointments\", { id });\n      return true;\n    },\n    getAppointmentsByStatus: async (status: string) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .select(\n          `\n          *,\n          responded_by_profile:profiles!appointments_responded_by_fkey(email)\n        `,\n        )\n        .eq(\"status\", status)\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n  },\n\n  // Site Settings API\n  siteSettings: {\n    getSettings: async () => {\n      const { data, error } = await supabase\n        .from(\"site_settings\")\n        .select(\"*\")\n        .limit(1)\n        .single();\n\n      if (error && error.code !== \"PGRST116\") throw error;\n      return data;\n    },\n    updateSettings: async (settings: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"site_settings\")\n        .upsert({ id: 1, ...settings, updated_at: new Date().toISOString() })\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"site_settings\", data);\n      return data;\n    },\n  },\n\n  // Stripe Settings API\n  stripeSettings: {\n    getSettings: async () => {\n      const { data, error } = await supabase\n        .from(\"stripe_settings\")\n        .select(\"*\")\n        .limit(1)\n        .single();\n\n      if (error && error.code !== \"PGRST116\") throw error;\n      return data;\n    },\n    updateSettings: async (settings: any) => {\n      const { data, error } = await supabase\n        .from(\"stripe_settings\")\n        .upsert({ id: 1, ...settings, updated_at: new Date().toISOString() })\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"stripe_settings\", data);\n      return data;\n    },\n  },\n\n  // Email Settings API\n  emailSettings: {\n    getSettings: async () => {\n      const { data, error } = await supabase\n        .from(\"email_settings\")\n        .select(\"*\")\n        .limit(1)\n        .single();\n\n      if (error && error.code !== \"PGRST116\") throw error;\n      return data;\n    },\n    updateSettings: async (settings: any) => {\n      const { data, error } = await supabase\n        .from(\"email_settings\")\n        .upsert({ id: 1, ...settings, updated_at: new Date().toISOString() })\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"email_settings\", data);\n      return data;\n    },\n  },\n\n  // Email Subscribers API\n  emailSubscribers: {\n    getSubscribers: async () => {\n      const { data, error } = await supabase\n        .from(\"email_subscribers\")\n        .select(\"*\")\n        .order(\"subscribed_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getNewsletterSubscribers: async () => {\n      const { data, error } = await supabase\n        .from(\"newsletter_subscribers\")\n        .select(\"*\")\n        .eq(\"subscribed\", true)\n        .order(\"subscription_date\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    addSubscriber: async (subscriber: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"email_subscribers\")\n        .insert([subscriber])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"email_subscribers\", data);\n      return data;\n    },\n    updateSubscriber: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"email_subscribers\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"email_subscribers\", data);\n      return data;\n    },\n    deleteSubscriber: async (id: string) => {\n      const { error } = await supabase\n        .from(\"email_subscribers\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"email_subscribers\", { id });\n      return true;\n    },\n    unsubscribe: async (email: string) => {\n      const { data, error } = await supabase\n        .from(\"email_subscribers\")\n        .update({\n          status: \"unsubscribed\",\n          unsubscribed_at: new Date().toISOString(),\n        })\n        .eq(\"email\", email)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\n        \"unsubscribe\",\n        \"email_subscribers\",\n        data,\n      );\n      return data;\n    },\n  },\n\n  // Email Templates API\n  emailTemplates: {\n    getTemplates: async () => {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getNewsletterTemplates: async () => {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .select(\"*\")\n        .eq(\"template_type\", \"newsletter\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    createTemplate: async (template: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .insert([template])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"email_templates\", data);\n      return data;\n    },\n    updateTemplate: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"email_templates\", data);\n      return data;\n    },\n    deleteTemplate: async (id: string) => {\n      const { error } = await supabase\n        .from(\"email_templates\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"email_templates\", { id });\n      return true;\n    },\n  },\n\n  // Email Campaigns API\n  emailCampaigns: {\n    getCampaigns: async () => {\n      const { data, error } = await supabase\n        .from(\"email_campaigns\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    createCampaign: async (campaign: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"email_campaigns\")\n        .insert([campaign])\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"create\", \"email_campaigns\", data);\n      return data;\n    },\n    updateCampaign: async (id: string, updates: Record<string, unknown>) => {\n      const { data, error } = await supabase\n        .from(\"email_campaigns\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"update\", \"email_campaigns\", data);\n      return data;\n    },\n    deleteCampaign: async (id: string) => {\n      const { error } = await supabase\n        .from(\"email_campaigns\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      dataSyncService.notifyAdminAction(\"delete\", \"email_campaigns\", { id });\n      return true;\n    },\n  },\n\n  // Analytics API\n  analytics: {\n    getDashboardStats: async () => {\n      try {\n        const [\n          events,\n          members,\n          donations,\n          testimonials,\n          prayerRequests,\n          sermons,\n        ] = await Promise.all([\n          supabase.from(\"events\").select(\"*\", { count: \"exact\", head: true }),\n          supabase.from(\"members\").select(\"*\", { count: \"exact\", head: true }),\n          supabase.from(\"donations\").select(\"amount, created_at\"),\n          supabase\n            .from(\"testimonials\")\n            .select(\"*\", { count: \"exact\", head: true }),\n          supabase\n            .from(\"prayer_requests\")\n            .select(\"*\", { count: \"exact\", head: true }),\n          supabase.from(\"sermons\").select(\"*\", { count: \"exact\", head: true }),\n        ]);\n\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n        const recentDonations = Array.isArray(donations.data)\n          ? donations.data.filter(\n              (d) => d?.created_at && new Date(d.created_at) >= thirtyDaysAgo,\n            )\n          : [];\n\n        const recentDonationAmount = recentDonations.reduce(\n          (sum, d) => sum + (d?.amount || 0),\n          0,\n        );\n\n        return {\n          totalEvents: events.count || 0,\n          totalMembers: members.count || 0,\n          totalDonations: Array.isArray(donations.data)\n            ? donations.data.length\n            : 0,\n          totalTestimonials: testimonials.count || 0,\n          totalPrayerRequests: prayerRequests.count || 0,\n          totalSermons: sermons.count || 0,\n          recentDonationAmount,\n        };\n      } catch (error) {\n        console.error(\"Error getting dashboard stats:\", error);\n        throw error;\n      }\n    },\n    getRecentActivity: async (limit = 6) => {\n      try {\n        const activities: Array<{\n          id: string;\n          type: string;\n          title: string;\n          description: string;\n          created_at: string;\n        }> = [];\n\n        // Get recent events\n        const { data: events } = await supabase\n          .from(\"events\")\n          .select(\"id, title, description, created_at\")\n          .order(\"created_at\", { ascending: false })\n          .limit(3);\n\n        if (Array.isArray(events)) {\n          events.forEach((event) => {\n            if (event?.id && event?.title && event?.created_at) {\n              activities.push({\n                id: event.id,\n                type: \"event\",\n                title: `New Event: ${event.title}`,\n                description: event.description || \"No description\",\n                created_at: event.created_at,\n              });\n            }\n          });\n        }\n\n        // Get recent members\n        const { data: members } = await supabase\n          .from(\"members\")\n          .select(\"id, full_name, created_at\")\n          .order(\"created_at\", { ascending: false })\n          .limit(3);\n\n        if (Array.isArray(members)) {\n          members.forEach((member) => {\n            if (member?.id && member?.full_name && member?.created_at) {\n              activities.push({\n                id: member.id,\n                type: \"member\",\n                title: `New Member: ${member.full_name}`,\n                description: \"Joined the church community\",\n                created_at: member.created_at,\n              });\n            }\n          });\n        }\n\n        // Sort by creation date and take the most recent\n        activities.sort(\n          (a, b) =>\n            new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),\n        );\n\n        return activities.slice(0, limit);\n      } catch (error) {\n        console.error(\"Error getting recent activity:\", error);\n        return [];\n      }\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/integrations/supabase/types.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":946,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":946,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":949,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":949,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":952,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":952,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":955,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":955,"endColumn":9}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[];\n\nexport type Database = {\n  public: {\n    Tables: {\n      appointments: {\n        Row: {\n          admin_notes: string | null;\n          admin_response: string | null;\n          confirmed_date: string | null;\n          confirmed_time: string | null;\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string;\n          notes: string | null;\n          phone: string;\n          requested_date: string;\n          requested_time: string;\n          responded_at: string | null;\n          responded_by: string | null;\n          service_title: string;\n          status: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          admin_notes?: string | null;\n          admin_response?: string | null;\n          confirmed_date?: string | null;\n          confirmed_time?: string | null;\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name: string;\n          notes?: string | null;\n          phone: string;\n          requested_date: string;\n          requested_time: string;\n          responded_at?: string | null;\n          responded_by?: string | null;\n          service_title: string;\n          status?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          admin_notes?: string | null;\n          admin_response?: string | null;\n          confirmed_date?: string | null;\n          confirmed_time?: string | null;\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string;\n          notes?: string | null;\n          phone?: string;\n          requested_date?: string;\n          requested_time?: string;\n          responded_at?: string | null;\n          responded_by?: string | null;\n          service_title?: string;\n          status?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"appointments_responded_by_fkey\";\n            columns: [\"responded_by\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      donations: {\n        Row: {\n          amount: number;\n          created_at: string;\n          donor_email: string | null;\n          donor_name: string | null;\n          id: string;\n          is_anonymous: boolean | null;\n          payment_id: string | null;\n          payment_method: string | null;\n          payment_status: string | null;\n          purpose: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          amount: number;\n          created_at?: string;\n          donor_email?: string | null;\n          donor_name?: string | null;\n          id?: string;\n          is_anonymous?: boolean | null;\n          payment_id?: string | null;\n          payment_method?: string | null;\n          payment_status?: string | null;\n          purpose?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          amount?: number;\n          created_at?: string;\n          donor_email?: string | null;\n          donor_name?: string | null;\n          id?: string;\n          is_anonymous?: boolean | null;\n          payment_id?: string | null;\n          payment_method?: string | null;\n          payment_status?: string | null;\n          purpose?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      email_campaigns: {\n        Row: {\n          content: string;\n          created_at: string | null;\n          created_by: string | null;\n          id: string;\n          name: string;\n          recipient_count: number | null;\n          scheduled_at: string | null;\n          sent_at: string | null;\n          sent_count: number | null;\n          status: string | null;\n          subject: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          content: string;\n          created_at?: string | null;\n          created_by?: string | null;\n          id?: string;\n          name: string;\n          recipient_count?: number | null;\n          scheduled_at?: string | null;\n          sent_at?: string | null;\n          sent_count?: number | null;\n          status?: string | null;\n          subject: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          content?: string;\n          created_at?: string | null;\n          created_by?: string | null;\n          id?: string;\n          name?: string;\n          recipient_count?: number | null;\n          scheduled_at?: string | null;\n          sent_at?: string | null;\n          sent_count?: number | null;\n          status?: string | null;\n          subject?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_settings: {\n        Row: {\n          auto_welcome_email: boolean | null;\n          created_at: string | null;\n          enable_newsletters: boolean | null;\n          from_email: string | null;\n          from_name: string | null;\n          id: number;\n          newsletter_frequency: string | null;\n          smtp_host: string | null;\n          smtp_password: string | null;\n          smtp_port: number | null;\n          smtp_username: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          auto_welcome_email?: boolean | null;\n          created_at?: string | null;\n          enable_newsletters?: boolean | null;\n          from_email?: string | null;\n          from_name?: string | null;\n          id?: number;\n          newsletter_frequency?: string | null;\n          smtp_host?: string | null;\n          smtp_password?: string | null;\n          smtp_port?: number | null;\n          smtp_username?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          auto_welcome_email?: boolean | null;\n          created_at?: string | null;\n          enable_newsletters?: boolean | null;\n          from_email?: string | null;\n          from_name?: string | null;\n          id?: number;\n          newsletter_frequency?: string | null;\n          smtp_host?: string | null;\n          smtp_password?: string | null;\n          smtp_port?: number | null;\n          smtp_username?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_subscribers: {\n        Row: {\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string | null;\n          preferences: Json | null;\n          status: string | null;\n          subscribed_at: string | null;\n          unsubscribed_at: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name?: string | null;\n          preferences?: Json | null;\n          status?: string | null;\n          subscribed_at?: string | null;\n          unsubscribed_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string | null;\n          preferences?: Json | null;\n          status?: string | null;\n          subscribed_at?: string | null;\n          unsubscribed_at?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_templates: {\n        Row: {\n          content: string;\n          created_at: string | null;\n          id: string;\n          is_active: boolean | null;\n          name: string;\n          subject: string;\n          template_type: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          content: string;\n          created_at?: string | null;\n          id?: string;\n          is_active?: boolean | null;\n          name: string;\n          subject: string;\n          template_type: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          content?: string;\n          created_at?: string | null;\n          id?: string;\n          is_active?: boolean | null;\n          name?: string;\n          subject?: string;\n          template_type?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      events: {\n        Row: {\n          created_at: string;\n          description: string | null;\n          event_date: string;\n          event_time: string | null;\n          id: string;\n          image_url: string | null;\n          is_featured: boolean | null;\n          location: string | null;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          description?: string | null;\n          event_date: string;\n          event_time?: string | null;\n          id?: string;\n          image_url?: string | null;\n          is_featured?: boolean | null;\n          location?: string | null;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          description?: string | null;\n          event_date?: string;\n          event_time?: string | null;\n          id?: string;\n          image_url?: string | null;\n          is_featured?: boolean | null;\n          location?: string | null;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      gallery: {\n        Row: {\n          category: string | null;\n          created_at: string;\n          description: string | null;\n          id: string;\n          image_url: string;\n          is_featured: boolean | null;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          category?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          image_url: string;\n          is_featured?: boolean | null;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          category?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          image_url?: string;\n          is_featured?: boolean | null;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      members: {\n        Row: {\n          address: string | null;\n          created_at: string;\n          email: string | null;\n          full_name: string;\n          id: string;\n          join_date: string | null;\n          last_renewal_date: string | null;\n          membership_date: string | null;\n          membership_status: string | null;\n          membership_type: string | null;\n          next_renewal_date: string | null;\n          phone: string | null;\n          updated_at: string;\n          registration_date: string | null;\n          first_name: string | null;\n          middle_name: string | null;\n          last_name: string | null;\n          baptismal_name: string | null;\n          street_address: string | null;\n          apt_suite_bldg: string | null;\n          city: string | null;\n          state_province_region: string | null;\n          postal_zip_code: string | null;\n          country: string | null;\n          date_of_birth: string | null;\n          gender: string | null;\n          marital_status: string | null;\n          spouse_name: string | null;\n          spouse_baptismal_name: string | null;\n          spouse_phone: string | null;\n          spouse_email: string | null;\n          child1_first_name: string | null;\n          child1_middle_name: string | null;\n          child1_last_name: string | null;\n          child1_date_of_birth: string | null;\n          child2_first_name: string | null;\n          child2_middle_name: string | null;\n          child2_last_name: string | null;\n          child2_date_of_birth: string | null;\n          emergency_contact_name: string | null;\n          emergency_contact_phone: string | null;\n          emergency_contact_relation: string | null;\n          preferred_language: string | null;\n          ministry_interests: string[] | null;\n          volunteer_interests: string[] | null;\n          skills: string | null;\n          how_did_you_hear: string | null;\n          additional_notes: string | null;\n          baptized: boolean | null;\n          baptism_date: string | null;\n          previous_member: boolean | null;\n          previous_church: string | null;\n          children: Json | null;\n          email_updates: boolean | null;\n          sms_updates: boolean | null;\n          photo_consent: boolean | null;\n          occupation: string | null;\n          contact_method: string | null;\n          membership_fee_paid: boolean | null;\n          payment_reference: string | null;\n          registration_notes: string | null;\n          church_activities_interest: string[] | null;\n          dietary_restrictions: string | null;\n          medical_conditions: string | null;\n          transportation_needed: boolean | null;\n          volunteer_availability: string | null;\n          social_media_consent: boolean | null;\n          newsletter_consent: boolean | null;\n          data_processing_consent: boolean | null;\n          membership_card_issued: boolean | null;\n          membership_card_number: string | null;\n          referral_source: string | null;\n          family_size: number | null;\n          household_income_range: string | null;\n          education_level: string | null;\n          languages_spoken: string[] | null;\n          baptism_location: string | null;\n          confirmation_status: boolean | null;\n          confirmation_date: string | null;\n          godparents: string | null;\n          spiritual_father: string | null;\n          church_school_interest: boolean | null;\n          youth_group_interest: boolean | null;\n          choir_interest: boolean | null;\n          bible_study_interest: boolean | null;\n          prayer_group_interest: boolean | null;\n          community_service_interest: boolean | null;\n          leadership_experience: string | null;\n          special_needs: string | null;\n          emergency_medical_info: string | null;\n          insurance_info: string | null;\n          membership_sponsor: string | null;\n          membership_sponsor_phone: string | null;\n          registration_ip_address: string | null;\n          registration_user_agent: string | null;\n          terms_accepted_at: string | null;\n          privacy_policy_accepted_at: string | null;\n          membership_agreement_signed: boolean | null;\n          background_check_required: boolean | null;\n          background_check_completed: boolean | null;\n          background_check_date: string | null;\n          orientation_completed: boolean | null;\n          orientation_date: string | null;\n          mentor_assigned: string | null;\n          integration_status: string | null;\n          last_contact_date: string | null;\n          follow_up_required: boolean | null;\n          membership_level: string | null;\n          voting_rights: boolean | null;\n          committee_eligibility: boolean | null;\n          leadership_eligibility: boolean | null;\n        };\n        Insert: {\n          address?: string | null;\n          created_at?: string;\n          email?: string | null;\n          full_name: string;\n          id?: string;\n          join_date?: string | null;\n          last_renewal_date?: string | null;\n          membership_date?: string | null;\n          membership_status?: string | null;\n          membership_type?: string | null;\n          next_renewal_date?: string | null;\n          phone?: string | null;\n          updated_at?: string;\n          registration_date?: string | null;\n          first_name?: string | null;\n          middle_name?: string | null;\n          last_name?: string | null;\n          baptismal_name?: string | null;\n          street_address?: string | null;\n          apt_suite_bldg?: string | null;\n          city?: string | null;\n          state_province_region?: string | null;\n          postal_zip_code?: string | null;\n          country?: string | null;\n          date_of_birth?: string | null;\n          gender?: string | null;\n          marital_status?: string | null;\n          spouse_name?: string | null;\n          spouse_baptismal_name?: string | null;\n          spouse_phone?: string | null;\n          spouse_email?: string | null;\n          child1_first_name?: string | null;\n          child1_middle_name?: string | null;\n          child1_last_name?: string | null;\n          child1_date_of_birth?: string | null;\n          child2_first_name?: string | null;\n          child2_middle_name?: string | null;\n          child2_last_name?: string | null;\n          child2_date_of_birth?: string | null;\n          emergency_contact_name?: string | null;\n          emergency_contact_phone?: string | null;\n          emergency_contact_relation?: string | null;\n          preferred_language?: string | null;\n          ministry_interests?: string[] | null;\n          volunteer_interests?: string[] | null;\n          skills?: string | null;\n          how_did_you_hear?: string | null;\n          additional_notes?: string | null;\n          baptized?: boolean | null;\n          baptism_date?: string | null;\n          previous_member?: boolean | null;\n          previous_church?: string | null;\n          children?: Json | null;\n          email_updates?: boolean | null;\n          sms_updates?: boolean | null;\n          photo_consent?: boolean | null;\n          occupation?: string | null;\n          contact_method?: string | null;\n          membership_fee_paid?: boolean | null;\n          payment_reference?: string | null;\n          registration_notes?: string | null;\n          church_activities_interest?: string[] | null;\n          dietary_restrictions?: string | null;\n          medical_conditions?: string | null;\n          transportation_needed?: boolean | null;\n          volunteer_availability?: string | null;\n          social_media_consent?: boolean | null;\n          newsletter_consent?: boolean | null;\n          data_processing_consent?: boolean | null;\n          membership_card_issued?: boolean | null;\n          membership_card_number?: string | null;\n          referral_source?: string | null;\n          family_size?: number | null;\n          household_income_range?: string | null;\n          education_level?: string | null;\n          languages_spoken?: string[] | null;\n          baptism_location?: string | null;\n          confirmation_status?: boolean | null;\n          confirmation_date?: string | null;\n          godparents?: string | null;\n          spiritual_father?: string | null;\n          church_school_interest?: boolean | null;\n          youth_group_interest?: boolean | null;\n          choir_interest?: boolean | null;\n          bible_study_interest?: boolean | null;\n          prayer_group_interest?: boolean | null;\n          community_service_interest?: boolean | null;\n          leadership_experience?: string | null;\n          special_needs?: string | null;\n          emergency_medical_info?: string | null;\n          insurance_info?: string | null;\n          membership_sponsor?: string | null;\n          membership_sponsor_phone?: string | null;\n          registration_ip_address?: string | null;\n          registration_user_agent?: string | null;\n          terms_accepted_at?: string | null;\n          privacy_policy_accepted_at?: string | null;\n          membership_agreement_signed?: boolean | null;\n          background_check_required?: boolean | null;\n          background_check_completed?: boolean | null;\n          background_check_date?: string | null;\n          orientation_completed?: boolean | null;\n          orientation_date?: string | null;\n          mentor_assigned?: string | null;\n          integration_status?: string | null;\n          last_contact_date?: string | null;\n          follow_up_required?: boolean | null;\n          membership_level?: string | null;\n          voting_rights?: boolean | null;\n          committee_eligibility?: boolean | null;\n          leadership_eligibility?: boolean | null;\n        };\n        Update: {\n          address?: string | null;\n          created_at?: string;\n          email?: string | null;\n          full_name?: string;\n          id?: string;\n          join_date?: string | null;\n          last_renewal_date?: string | null;\n          membership_date?: string | null;\n          membership_status?: string | null;\n          membership_type?: string | null;\n          next_renewal_date?: string | null;\n          phone?: string | null;\n          updated_at?: string;\n          registration_date?: string | null;\n          first_name?: string | null;\n          middle_name?: string | null;\n          last_name?: string | null;\n          baptismal_name?: string | null;\n          street_address?: string | null;\n          apt_suite_bldg?: string | null;\n          city?: string | null;\n          state_province_region?: string | null;\n          postal_zip_code?: string | null;\n          country?: string | null;\n          date_of_birth?: string | null;\n          gender?: string | null;\n          marital_status?: string | null;\n          spouse_name?: string | null;\n          spouse_baptismal_name?: string | null;\n          spouse_phone?: string | null;\n          spouse_email?: string | null;\n          child1_first_name?: string | null;\n          child1_middle_name?: string | null;\n          child1_last_name?: string | null;\n          child1_date_of_birth?: string | null;\n          child2_first_name?: string | null;\n          child2_middle_name?: string | null;\n          child2_last_name?: string | null;\n          child2_date_of_birth?: string | null;\n          emergency_contact_name?: string | null;\n          emergency_contact_phone?: string | null;\n          emergency_contact_relation?: string | null;\n          preferred_language?: string | null;\n          ministry_interests?: string[] | null;\n          volunteer_interests?: string[] | null;\n          skills?: string | null;\n          how_did_you_hear?: string | null;\n          additional_notes?: string | null;\n          baptized?: boolean | null;\n          baptism_date?: string | null;\n          previous_member?: boolean | null;\n          previous_church?: string | null;\n          children?: Json | null;\n          email_updates?: boolean | null;\n          sms_updates?: boolean | null;\n          photo_consent?: boolean | null;\n          occupation?: string | null;\n          contact_method?: string | null;\n          membership_fee_paid?: boolean | null;\n          payment_reference?: string | null;\n          registration_notes?: string | null;\n          church_activities_interest?: string[] | null;\n          dietary_restrictions?: string | null;\n          medical_conditions?: string | null;\n          transportation_needed?: boolean | null;\n          volunteer_availability?: string | null;\n          social_media_consent?: boolean | null;\n          newsletter_consent?: boolean | null;\n          data_processing_consent?: boolean | null;\n          membership_card_issued?: boolean | null;\n          membership_card_number?: string | null;\n          referral_source?: string | null;\n          family_size?: number | null;\n          household_income_range?: string | null;\n          education_level?: string | null;\n          languages_spoken?: string[] | null;\n          baptism_location?: string | null;\n          confirmation_status?: boolean | null;\n          confirmation_date?: string | null;\n          godparents?: string | null;\n          spiritual_father?: string | null;\n          church_school_interest?: boolean | null;\n          youth_group_interest?: boolean | null;\n          choir_interest?: boolean | null;\n          bible_study_interest?: boolean | null;\n          prayer_group_interest?: boolean | null;\n          community_service_interest?: boolean | null;\n          leadership_experience?: string | null;\n          special_needs?: string | null;\n          emergency_medical_info?: string | null;\n          insurance_info?: string | null;\n          membership_sponsor?: string | null;\n          membership_sponsor_phone?: string | null;\n          registration_ip_address?: string | null;\n          registration_user_agent?: string | null;\n          terms_accepted_at?: string | null;\n          privacy_policy_accepted_at?: string | null;\n          membership_agreement_signed?: boolean | null;\n          background_check_required?: boolean | null;\n          background_check_completed?: boolean | null;\n          background_check_date?: string | null;\n          orientation_completed?: boolean | null;\n          orientation_date?: string | null;\n          mentor_assigned?: string | null;\n          integration_status?: string | null;\n          last_contact_date?: string | null;\n          follow_up_required?: boolean | null;\n          membership_level?: string | null;\n          voting_rights?: boolean | null;\n          committee_eligibility?: boolean | null;\n          leadership_eligibility?: boolean | null;\n        };\n        Relationships: [];\n      };\n      newsletter_subscribers: {\n        Row: {\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string | null;\n          subscribed: boolean | null;\n          subscription_date: string | null;\n          unsubscribe_token: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name?: string | null;\n          subscribed?: boolean | null;\n          subscription_date?: string | null;\n          unsubscribe_token?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string | null;\n          subscribed?: boolean | null;\n          subscription_date?: string | null;\n          unsubscribe_token?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      prayer_requests: {\n        Row: {\n          created_at: string;\n          email: string | null;\n          id: string;\n          is_answered: boolean | null;\n          is_public: boolean | null;\n          name: string;\n          request: string;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          is_answered?: boolean | null;\n          is_public?: boolean | null;\n          name: string;\n          request: string;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          is_answered?: boolean | null;\n          is_public?: boolean | null;\n          name?: string;\n          request?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      profiles: {\n        Row: {\n          created_at: string;\n          email: string | null;\n          id: string;\n          role: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          role?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          role?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      sermons: {\n        Row: {\n          audio_url: string | null;\n          created_at: string;\n          description: string | null;\n          id: string;\n          is_featured: boolean | null;\n          preacher: string | null;\n          scripture_reference: string | null;\n          sermon_date: string;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          audio_url?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          is_featured?: boolean | null;\n          preacher?: string | null;\n          scripture_reference?: string | null;\n          sermon_date: string;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          audio_url?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          is_featured?: boolean | null;\n          preacher?: string | null;\n          scripture_reference?: string | null;\n          sermon_date?: string;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      site_settings: {\n        Row: {\n          admin_email: string | null;\n          church_address: string | null;\n          church_name: string | null;\n          created_at: string;\n          email: string | null;\n          enable_donations: boolean | null;\n          enable_email_notifications: boolean | null;\n          enable_membership: boolean | null;\n          enable_newsletter: boolean | null;\n          enable_stripe: boolean | null;\n          from_email: string | null;\n          id: number;\n          maintenance_mode: boolean | null;\n          phone_number: string | null;\n          stripe_publishable_key: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          admin_email?: string | null;\n          church_address?: string | null;\n          church_name?: string | null;\n          created_at?: string;\n          email?: string | null;\n          enable_donations?: boolean | null;\n          enable_email_notifications?: boolean | null;\n          enable_membership?: boolean | null;\n          enable_newsletter?: boolean | null;\n          enable_stripe?: boolean | null;\n          from_email?: string | null;\n          id?: number;\n          maintenance_mode?: boolean | null;\n          phone_number?: string | null;\n          stripe_publishable_key?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          admin_email?: string | null;\n          church_address?: string | null;\n          church_name?: string | null;\n          created_at?: string;\n          email?: string | null;\n          enable_donations?: boolean | null;\n          enable_email_notifications?: boolean | null;\n          enable_membership?: boolean | null;\n          enable_newsletter?: boolean | null;\n          enable_stripe?: boolean | null;\n          from_email?: string | null;\n          id?: number;\n          maintenance_mode?: boolean | null;\n          phone_number?: string | null;\n          stripe_publishable_key?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      stripe_settings: {\n        Row: {\n          created_at: string | null;\n          default_currency: string | null;\n          enable_stripe: boolean | null;\n          id: number;\n          stripe_mode: string | null;\n          stripe_publishable_key: string | null;\n          stripe_secret_key: string | null;\n          stripe_webhook_secret: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          default_currency?: string | null;\n          enable_stripe?: boolean | null;\n          id?: number;\n          stripe_mode?: string | null;\n          stripe_publishable_key?: string | null;\n          stripe_secret_key?: string | null;\n          stripe_webhook_secret?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          default_currency?: string | null;\n          enable_stripe?: boolean | null;\n          id?: number;\n          stripe_mode?: string | null;\n          stripe_publishable_key?: string | null;\n          stripe_secret_key?: string | null;\n          stripe_webhook_secret?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      testimonials: {\n        Row: {\n          content: string;\n          created_at: string;\n          id: string;\n          is_approved: boolean | null;\n          name: string;\n          updated_at: string;\n        };\n        Insert: {\n          content: string;\n          created_at?: string;\n          id?: string;\n          is_approved?: boolean | null;\n          name: string;\n          updated_at?: string;\n        };\n        Update: {\n          content?: string;\n          created_at?: string;\n          id?: string;\n          is_approved?: boolean | null;\n          name?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n    };\n    Views: {\n      [_ in never]: never;\n    };\n    Functions: {\n      [_ in never]: never;\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n    CompositeTypes: {\n      [_ in never]: never;\n    };\n  };\n};\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">];\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R;\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R;\n      }\n      ? R\n      : never\n    : never;\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I;\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I;\n      }\n      ? I\n      : never\n    : never;\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U;\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U;\n      }\n      ? U\n      : never\n    : never;\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never;\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never;\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/lib/api.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_settings' is defined but never used.","line":9,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'_settings' is defined but never used.","line":17,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":25,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":39}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal placeholder for @/lib/api to prevent import errors\n// You should implement actual API logic as needed\n\nconst api = {\n  stripeSettings: {\n    async getSettings() {\n      return {};\n    },\n    async updateSettings(_settings: any) {\n      return {};\n    },\n  },\n  emailSettings: {\n    async getSettings() {\n      return {};\n    },\n    async updateSettings(_settings: any) {\n      return {};\n    },\n  },\n  emailSubscribers: {\n    async getSubscribers() {\n      return [];\n    },\n    async deleteSubscriber(_id: string) {\n      return {};\n    },\n  },\n  emailTemplates: {\n    async getTemplates() {\n      return [];\n    },\n  },\n};\n\nexport default api;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/lib/auth/AuthService.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'credentials' is defined but never used.","line":15,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'session' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\nimport { User, Session } from \"@supabase/supabase-js\";\n\nexport interface AuthUser extends User {\n  role?: string;\n}\n\nexport interface AuthResult {\n  success: boolean;\n  user?: AuthUser | null;\n  error?: string;\n}\n\nexport interface AuthStrategy {\n  authenticate(credentials: Record<string, any>): Promise<AuthResult>;\n}\n\nexport type AuthStateChangeCallback = (\n  event: string,\n  session: Session | null,\n) => void;\n\n/**\n * Authentication Service\n * Provides a centralized service for handling authentication operations\n */\nexport class AuthService {\n  private static instance: AuthService;\n  private authStrategies: Map<string, AuthStrategy> = new Map();\n\n  private constructor() {}\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): AuthService {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n    }\n    return AuthService.instance;\n  }\n\n  /**\n   * Register an authentication strategy\n   */\n  public registerStrategy(name: string, strategy: AuthStrategy): void {\n    this.authStrategies.set(name, strategy);\n  }\n\n  /**\n   * Authenticate using a specific strategy\n   */\n  public async authenticate(\n    strategyName: string,\n    credentials: Record<string, any>,\n  ): Promise<AuthResult> {\n    const strategy = this.authStrategies.get(strategyName);\n    if (!strategy) {\n      return {\n        success: false,\n        error: `Authentication strategy '${strategyName}' not found`,\n      };\n    }\n\n    try {\n      return await strategy.authenticate(credentials);\n    } catch (error) {\n      console.error(\n        `Authentication error with strategy ${strategyName}:`,\n        error,\n      );\n      return {\n        success: false,\n        error:\n          error instanceof Error\n            ? error.message\n            : \"Unknown authentication error\",\n      };\n    }\n  }\n\n  /**\n   * Get current session\n   */\n  public async getSession() {\n    try {\n      const { data, error } = await supabase.auth.getSession();\n      if (error) throw error;\n      return { success: true, session: data.session };\n    } catch (error) {\n      console.error(\"Error getting session:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Get current user with role\n   */\n  public async getCurrentUser(): Promise<AuthResult> {\n    try {\n      const {\n        data: { session },\n        error: sessionError,\n      } = await supabase.auth.getSession();\n\n      if (sessionError || !session) {\n        return {\n          success: false,\n          error: sessionError?.message || \"No active session\",\n        };\n      }\n\n      const { data: profile, error: profileError } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", session.user.id)\n        .single();\n\n      if (profileError) {\n        console.error(\"Error fetching user profile:\", profileError);\n      }\n\n      const user: AuthUser = {\n        ...session.user,\n        role: profile?.role,\n      };\n\n      return { success: true, user };\n    } catch (error) {\n      console.error(\"Error getting current user:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Check if user has admin role\n   */\n  public async isAdmin(): Promise<boolean> {\n    const { success, user } = await this.getCurrentUser();\n    return success && user?.role === \"admin\";\n  }\n\n  /**\n   * Sign out current user\n   */\n  public async signOut(): Promise<AuthResult> {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Subscribe to auth state changes\n   */\n  public onAuthStateChange(callback: AuthStateChangeCallback) {\n    return supabase.auth.onAuthStateChange(callback);\n  }\n\n  /**\n   * Register a new user\n   */\n  public async register(\n    email: string,\n    password: string,\n    userData?: Record<string, any>,\n  ): Promise<AuthResult> {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userData,\n        },\n      });\n\n      if (error) throw error;\n\n      return {\n        success: true,\n        user: data.user as AuthUser,\n      };\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : \"Unknown registration error\",\n      };\n    }\n  }\n\n  /**\n   * Reset password\n   */\n  public async resetPassword(email: string): Promise<AuthResult> {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: window.location.origin + \"/reset-password\",\n      });\n\n      if (error) throw error;\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      return {\n        success: false,\n        error:\n          error instanceof Error\n            ? error.message\n            : \"Unknown password reset error\",\n      };\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  public async updateProfile(\n    userId: string,\n    profileData: Record<string, any>,\n  ): Promise<AuthResult> {\n    try {\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update(profileData)\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      return {\n        success: false,\n        error:\n          error instanceof Error\n            ? error.message\n            : \"Unknown profile update error\",\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const authService = AuthService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/app/src/lib/auth/strategies/EmailPasswordStrategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/auth/strategies/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/env.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'ImportMetaEnv' is not defined.","line":32,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'ImportMetaEnv' is not defined.","line":53,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":63}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Environment variable defaults for development\nconst ENV_DEFAULTS = {\n  VITE_APP_NAME: \"St. Gabriel Ethiopian Orthodox Church\",\n  VITE_SUPABASE_URL: \"\",\n  VITE_SUPABASE_ANON_KEY: \"\",\n  VITE_API_URL: \"https://nvigfdxosyqhnoljtfld.supabase.co\",\n} as const;\n\n// Set defaults immediately to prevent runtime errors\nif (typeof window !== \"undefined\") {\n  Object.entries(ENV_DEFAULTS).forEach(([key, value]) => {\n    if (!import.meta.env[key]) {\n      // @ts-ignore\n      import.meta.env[key] = value;\n    }\n  });\n}\n\n// Critical environment variables that must be set in production\nconst CRITICAL_ENV_VARS = [\n  \"VITE_SUPABASE_URL\",\n  \"VITE_SUPABASE_ANON_KEY\",\n] as const;\n\n/**\n * Get an environment variable with fallback to defaults\n * @param key - The key of the environment variable\n * @param defaultValue - The default value if the environment variable is not set\n * @returns The value of the environment variable\n */\nexport const getEnvVar = (\n  key: keyof ImportMetaEnv,\n  defaultValue: string = \"\",\n): string => {\n  const value = import.meta.env[key];\n  if (value) return value;\n\n  // Check if we have a default for this key\n  if (key in ENV_DEFAULTS) {\n    return ENV_DEFAULTS[key as keyof typeof ENV_DEFAULTS];\n  }\n\n  return defaultValue;\n};\n\n/**\n * Check if a feature flag is enabled\n * @param flag - The name of the feature flag\n * @returns boolean indicating if the feature is enabled\n */\nexport const isFeatureEnabled = (flag: string): boolean => {\n  const value = getEnvVar(\n    `VITE_ENABLE_${flag.toUpperCase()}` as keyof ImportMetaEnv,\n    \"false\",\n  );\n  return value.toLowerCase() === \"true\";\n};\n\n/**\n * Validate environment variables with development-friendly approach\n * @throws Error only if critical variables are missing in production\n */\nexport const validateEnv = (): void => {\n  const isDevelopment =\n    import.meta.env.DEV || import.meta.env.VITE_TEMPO === \"true\";\n\n  // In development, we're more lenient and provide defaults\n  if (isDevelopment) {\n    // Ensure defaults are set\n    Object.entries(ENV_DEFAULTS).forEach(([key, value]) => {\n      if (!import.meta.env[key]) {\n        // @ts-ignore\n        import.meta.env[key] = value;\n      }\n    });\n\n    console.info(`ℹ️  Development mode: Using default environment variables`);\n    return; // Don't throw in development\n  }\n\n  // In production, be strict about critical variables\n  const missingCritical = CRITICAL_ENV_VARS.filter(\n    (key) => !import.meta.env[key],\n  );\n\n  if (missingCritical.length > 0) {\n    throw new Error(\n      `Missing critical environment variables: ${missingCritical.join(\", \")}\\n` +\n        \"Please set these variables in your project settings before deploying to production.\",\n    );\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/lib/image/ImageCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/image/ImageProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/supabaseClient.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_table' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'_query' is defined but never used.","line":4,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'_n' is defined but never used.","line":5,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'_data' is defined but never used.","line":16,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'_data' is defined but never used.","line":24,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":30}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced stub for supabase client to match Settings.tsx usage\nexport const supabase = {\n  from: (_table: string) => ({\n    select: (_query?: string) => ({\n      limit: (_n?: number) => ({\n        single: async () => ({\n          data: {},\n          error: null,\n        }),\n      }),\n      single: async () => ({\n        data: {},\n        error: null,\n      }),\n    }),\n    insert: (_data: any) => ({\n      select: () => ({\n        single: async () => ({\n          data: {},\n          error: null,\n        }),\n      }),\n    }),\n    upsert: async (_data: any) => ({\n      data: {},\n      error: null,\n    }),\n  }),\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Contact.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'success' is not defined.","line":220,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'success' is not defined.","line":221,"column":66,"nodeType":"Identifier","messageId":"undef","endLine":221,"endColumn":73},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":223,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":223,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":224,"column":64,"nodeType":"Identifier","messageId":"undef","endLine":224,"endColumn":69}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { Home, Phone, Mail, Facebook } from \"lucide-react\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst Contact: React.FC = () => {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Simulate form submission\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      toast({\n        title: \"Message Sent\",\n        description: \"Thank you for your message. We'll get back to you soon.\",\n      });\n\n      // Reset form\n      (e.target as HTMLFormElement).reset();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return (\n    <Layout>\n      <div className=\"py-12 bg-white shadow-md\">\n        <div className=\"container mx-auto px-6\">\n          <h1 className=\"text-4xl md:text-5xl font-serif text-center mb-8\">\n            {language === \"am\" ? \"ያግኙን\" : \"Contact Us\"}\n          </h1>\n        </div>\n      </div>\n\n      <section className=\"py-12 px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"max-w-5xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12\">\n            <div className=\"bg-white p-8 rounded-lg shadow-md\">\n              <h2 className=\"text-3xl font-serif text-church-burgundy mb-6\">\n                {language === \"am\" ? \"ያግኙን\" : \"Get In Touch\"}\n              </h2>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-church-burgundy rounded-full p-2 mt-1\">\n                    <Home className=\"text-white\" size={18} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-1\">\n                      {language === \"am\" ? \"አድራሻ\" : \"Address\"}\n                    </h3>\n                    <address className=\"not-italic\">\n                      16020 Batson Rd,\n                      <br />\n                      Spencerville, MD 20868\n                    </address>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-church-burgundy rounded-full p-2 mt-1\">\n                    <Phone className=\"text-white\" size={18} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-1\">\n                      {language === \"am\" ? \"ስልክ\" : \"Phone\"}\n                    </h3>\n                    <a\n                      href=\"tel:+12403818146\"\n                      className=\"hover:text-church-burgundy transition-colors\"\n                    >\n                      (240)-381-8146\n                    </a>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-church-burgundy rounded-full p-2 mt-1\">\n                    <Mail className=\"text-white\" size={18} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-1\">\n                      {language === \"am\" ? \"ኢሜይል\" : \"Email\"}\n                    </h3>\n                    <a\n                      href=\"mailto:info@stgabrielsilverspring.org\"\n                      className=\"hover:text-church-burgundy transition-colors\"\n                    >\n                      info@stgabrielsilverspring.org\n                    </a>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-church-burgundy rounded-full p-2 mt-1\">\n                    <Facebook className=\"text-white\" size={18} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-1\">Facebook</h3>\n                    <a\n                      href=\"https://www.facebook.com/EthiopianOrthodoxSt.GabrielChurchSilverspringMD\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      className=\"hover:text-church-burgundy transition-colors\"\n                    >\n                      EthiopianOrthodoxSt.GabrielChurchSilverspringMD\n                    </a>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-8\">\n                <h3 className=\"font-semibold text-lg mb-1\">\n                  {language === \"am\" ? \"ድህረ ገጾች\" : \"Websites\"}\n                </h3>\n                <div className=\"space-y-2\">\n                  <div>\n                    <a\n                      href=\"https://stgabrielmd.org\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      className=\"hover:text-church-burgundy transition-colors\"\n                    >\n                      https://stgabrielmd.org\n                    </a>\n                  </div>\n                  <div>\n                    <a\n                      href=\"http://www.EthiopianOrthodoxSt.GabrielChurchSilverspringMD.com\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      className=\"hover:text-church-burgundy transition-colors\"\n                    >\n                      www.EthiopianOrthodoxSt.GabrielChurchSilverspringMD.com\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <div className=\"bg-white p-8 rounded-lg shadow-md\">\n                <h2 className=\"text-3xl font-serif text-church-burgundy mb-6\">\n                  {language === \"am\" ? \"መልዕክት ይላኩልን\" : \"Send Us a Message\"}\n                </h2>\n                <form className=\"space-y-4\" onSubmit={handleSubmit}>\n                  <div>\n                    <label htmlFor=\"name\" className=\"block mb-1 font-medium\">\n                      {language === \"am\" ? \"ስም\" : \"Name\"}\n                    </label>\n                    <Input\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      required\n                      placeholder={language === \"am\" ? \"ስምዎን\" : \"Your name\"}\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"email\" className=\"block mb-1 font-medium\">\n                      {language === \"am\" ? \"ኢሜይል\" : \"Email\"}\n                    </label>\n                    <Input\n                      type=\"email\"\n                      id=\"email\"\n                      name=\"email\"\n                      required\n                      placeholder={language === \"am\" ? \"ኢሜይልዎን\" : \"Your email\"}\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"subject\" className=\"block mb-1 font-medium\">\n                      {language === \"am\" ? \"ርዕስ\" : \"Subject\"}\n                    </label>\n                    <Input\n                      type=\"text\"\n                      id=\"subject\"\n                      name=\"subject\"\n                      required\n                      placeholder={\n                        language === \"am\" ? \"የመልዕክት ርዕስ\" : \"Message subject\"\n                      }\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"message\" className=\"block mb-1 font-medium\">\n                      {language === \"am\" ? \"መልዕክት\" : \"Message\"}\n                    </label>\n                    <Textarea\n                      id=\"message\"\n                      name=\"message\"\n                      rows={5}\n                      required\n                      placeholder={\n                        language === \"am\" ? \"መልዕክትዎን\" : \"Your message\"\n                      }\n                    />\n                  </div>\n\n                  {success && (\n                    <div className=\"text-green-600 font-medium\">{success}</div>\n                  )}\n                  {error && (\n                    <div className=\"text-red-600 font-medium\">{error}</div>\n                  )}\n\n                  <div>\n                    <Button\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                      className=\"bg-church-burgundy hover:bg-church-burgundy/90 text-white px-8 py-3\"\n                    >\n                      {isSubmitting ? (\n                        <div className=\"flex items-center\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          {language === \"am\" ? \"በመላክ ላይ...\" : \"Sending...\"}\n                        </div>\n                      ) : language === \"am\" ? (\n                        \"መልዕክት ላክ\"\n                      ) : (\n                        \"Send Message\"\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-12\">\n        <div className=\"container mx-auto px-6\">\n          <h2 className=\"text-3xl font-serif text-center mb-8\">\n            {language === \"am\" ? \"አድራሻ\" : \"Location\"}\n          </h2>\n          <div className=\"max-w-5xl mx-auto h-96 rounded-lg overflow-hidden shadow-lg\">\n            <iframe\n              title=\"Church Location\"\n              width=\"100%\"\n              height=\"100%\"\n              frameBorder=\"0\"\n              style={{ border: 0 }}\n              src={`https://www.google.com/maps/embed/v1/place?q=16020+Batson+Rd,+Spencerville,+MD+20868&key=AIzaSyBFw0Qbyq9zTFTd-tUY6dZWTgaQzuU17R8`}\n              allowFullScreen\n            ></iframe>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n};\n\nexport default Contact;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Donation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/DonationDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/DonationSuccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Events.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'events.length'. Either include it or remove the dependency array.","line":250,"column":6,"nodeType":"ArrayExpression","endLine":250,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [events.length]","fix":{"range":[9563,9565],"text":"[events.length]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEvents'. Either include it or remove the dependency array.","line":254,"column":6,"nodeType":"ArrayExpression","endLine":254,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadEvents]","fix":{"range":[9612,9614],"text":"[loadEvents]"}}]},{"ruleId":"no-undef","severity":2,"message":"'useDataRefresh' is not defined.","line":257,"column":44,"nodeType":"Identifier","messageId":"undef","endLine":257,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { format } from \"date-fns\";\nimport {\n  Calendar,\n  MapPin,\n  Clock,\n  RefreshCw,\n  Church,\n  Users,\n  BookOpen,\n} from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nconst baseUrl = import.meta.env.BASE_URL;\n\n// Placeholder Events Component\nconst PlaceholderEvents = () => {\n  const { language } = useLanguage();\n  const placeholderEvents = [\n    {\n      id: \"placeholder-1\",\n      title: language === \"en\" ? \"Sunday Divine Liturgy\" : \"የእሁድ ቅዳሴ\",\n      description:\n        language === \"en\"\n          ? \"Join us every Sunday for our traditional Divine Liturgy service. Experience the ancient traditions of the Ethiopian Orthodox Tewahedo Church.\"\n          : \"በየእሁድ ለባህላዊ የቅዳሴ አገልግሎታችን ይቀላቀሉን። የኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያንን ጥንታዊ ወጎች ይለማመዱ።\",\n      date: \"Every Sunday\",\n      time: \"7:00 AM - 12:00 PM\",\n      location: \"Main Sanctuary\",\n      image: baseUrl + \"images/gallery/church-service.jpg\",\n      icon: Church,\n    },\n    {\n      id: \"placeholder-2\",\n      title:\n        language === \"en\"\n          ? \"St. Gabriel Monthly Commemoration\"\n          : \"የቅዱስ ገብርኤል ወርሃዊ ተዝካር\",\n      description:\n        language === \"en\"\n          ? \"Monthly celebration honoring St. Gabriel the Archangel, our church's patron saint. Special prayers and blessings.\"\n          : \"የቤተክርስቲያናችንን ጠባቂ ቅዱስ ገብርኤል መልአከ አምላክን የሚያከብር ወርሃዊ በዓል። ልዩ ጸሎቶች እና በረከቶች።\",\n      date: \"19th of Every Month\",\n      time: \"10:00 AM - 2:00 PM\",\n      location: \"Church Grounds\",\n      image: baseUrl + \"images/religious/palm-sunday.jpg\",\n      icon: Church,\n    },\n    {\n      id: \"placeholder-3\",\n      title:\n        language === \"en\"\n          ? \"Sunday School for Children\"\n          : \"የሰንበት ትምህርት ቤት ለልጆች\",\n      description:\n        language === \"en\"\n          ? \"Educational program for children ages 5-12. Learn about Orthodox faith, Bible stories, and Ethiopian traditions.\"\n          : \"ከ5-12 ዓመት ለሆኑ ልጆች የትምህርት ፕሮግራም። ስለ ኦርቶዶክስ እምነት፣ የመጽሐፍ ቅዱስ ታሪኮች እና የኢትዮጵያ ወጎች ይማሩ።\",\n      date: \"Every Sunday\",\n      time: \"9:00 AM - 12:00 PM\",\n      location: \"Education Hall\",\n      image: baseUrl + \"images/gallery/ceremony-1.jpg\",\n      icon: BookOpen,\n    },\n    {\n      id: \"placeholder-4\",\n      title: language === \"en\" ? \"Community Fellowship\" : \"የማህበረሰብ ህብረት\",\n      description:\n        language === \"en\"\n          ? \"Monthly community gathering for fellowship, sharing meals, and strengthening bonds within our church family.\"\n          : \"ለህብረት፣ ምግብ ለመካፈል እና በቤተክርስቲያን ቤተሰባችን ውስጥ ትስስርን ለማጠናከር ወርሃዊ የማህበረሰብ ስብሰባ።\",\n      date: \"First Saturday of Every Month\",\n      time: \"2:00 PM - 6:00 PM\",\n      location: \"Community Hall\",\n      image: baseUrl + \"images/gallery/ceremony-2.jpg\",\n      icon: Users,\n    },\n    {\n      id: \"placeholder-5\",\n      title: language === \"en\" ? \"Youth Program\" : \"የወጣቶች ፕሮግራም\",\n      description:\n        language === \"en\"\n          ? \"Weekly program for teenagers focusing on spiritual growth, community service, and cultural activities.\"\n          : \"በመንፈሳዊ ዕድገት፣ የማህበረሰብ አገልግሎት እና የባህል ስራዎች ላይ የሚያተኩር ለወጣቶች ሳምንታዊ ፕሮግራም።\",\n      date: \"Every Saturday\",\n      time: \"3:00 PM - 6:00 PM\",\n      location: \"Youth Center\",\n      image: baseUrl + \"images/gallery/ceremony-3.jpg\",\n      icon: Users,\n    },\n    {\n      id: \"placeholder-6\",\n      title: language === \"en\" ? \"Amharic Language Classes\" : \"የአማርኛ ቋንቋ ትምህርት\",\n      description:\n        language === \"en\"\n          ? \"Learn to read and write in Amharic. Classes for all ages to connect with Ethiopian heritage and culture.\"\n          : \"አማርኛ ማንበብና መጻፍ ይማሩ። ከኢትዮጵያዊ ሀረግ እና ባህል ጋር ለመገናኘት ለሁሉም ዕድሜ ክፍሎች።\",\n      date: \"Every Saturday\",\n      time: \"10:00 AM - 12:00 PM\",\n      location: \"Language Center\",\n      image: baseUrl + \"images/gallery/timket.jpg\",\n      icon: BookOpen,\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"text-center py-8 mb-8 bg-church-cream/30 rounded-lg\">\n        <h3 className=\"text-2xl font-bold text-church-burgundy mb-2\">\n          {language === \"en\"\n            ? \"Regular Church Activities\"\n            : \"መደበኛ የቤተክርስቲያን ስራዎች\"}\n        </h3>\n        <p className=\"text-gray-600 max-w-2xl mx-auto\">\n          {language === \"en\"\n            ? \"While we don't have specific upcoming events scheduled, here are our regular activities and services that happen throughout the year.\"\n            : \"ልዩ የወደፊት ዝግጅቶች ባይኖሩንም፣ በዓመቱ ውስጥ የሚካሄዱ መደበኛ ስራዎቻችን እና አገልግሎቶቻችን እነኚሁ ናቸው።\"}\n        </p>\n      </div>\n\n      <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n        {placeholderEvents.map((event) => {\n          const IconComponent = event.icon;\n          return (\n            <Card\n              key={event.id}\n              className=\"overflow-hidden hover:shadow-lg transition-shadow\"\n            >\n              <div className=\"h-56 bg-cover bg-center relative overflow-hidden\">\n                <img\n                  src={event.image}\n                  alt={event.title}\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    const target = e.target as HTMLImageElement;\n                    if (target.src.includes(\"church-service.jpg\")) {\n                      target.src =\n                        baseUrl + \"images/gallery/church-gathering.jpg\";\n                    } else if (target.src.includes(\"church-gathering.jpg\")) {\n                      target.src = baseUrl + \"images/gallery/ceremony-1.jpg\";\n                    } else if (target.src.includes(\"ceremony-1.jpg\")) {\n                      target.src = baseUrl + \"images/gallery/timket.jpg\";\n                    } else {\n                      target.src =\n                        baseUrl + \"images/gallery/church-service.jpg\";\n                    }\n                  }}\n                />\n                <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center\">\n                  <IconComponent className=\"h-12 w-12 text-white\" />\n                </div>\n              </div>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold text-church-burgundy mb-2\">\n                  {event.title}\n                </h3>\n                <div className=\"flex items-center text-gray-600 mb-2\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm font-medium\">{event.date}</span>\n                </div>\n                <div className=\"flex items-center text-gray-600 mb-2\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">{event.time}</span>\n                </div>\n                <div className=\"flex items-center text-gray-600 mb-4\">\n                  <MapPin className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">{event.location}</span>\n                </div>\n                <p className=\"text-gray-600 mb-6 text-sm leading-relaxed\">\n                  {event.description}\n                </p>\n                <div className=\"flex justify-between\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"text-church-burgundy border-church-burgundy hover:bg-church-burgundy hover:text-white\"\n                  >\n                    {language === \"en\" ? \"Learn More\" : \"ተጨማሪ መረጃ\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\ninterface Event {\n  id: string;\n  title: string;\n  description: string | null;\n  event_date: string;\n  event_time: string | null;\n  location: string | null;\n  image_url: string | null;\n  is_featured: boolean;\n  created_at: string;\n}\n\n// Religious event images mapping with verified paths\nconst religiousEventImages = [\n  baseUrl + \"images/religious/palm-sunday.jpg\",\n  baseUrl + \"images/religious/crucifixion.jpg\",\n  baseUrl + \"images/religious/procession.jpg\",\n  baseUrl + \"images/gallery/timket.jpg\",\n  baseUrl + \"images/gallery/church-service.jpg\",\n  baseUrl + \"images/gallery/church-gathering.jpg\",\n  baseUrl + \"images/gallery/ceremony-1.jpg\",\n  baseUrl + \"images/gallery/ceremony-2.jpg\",\n  baseUrl + \"images/gallery/ceremony-3.jpg\",\n];\n\n// Function to get a religious image based on event data\nconst getReligiousImage = (event: Event): string => {\n  // If the event already has an image, use it\n  if (event.image_url) return event.image_url;\n\n  // Otherwise, assign a religious image based on the event id (for consistency)\n  const imageIndex =\n    parseInt(event.id.charAt(0), 16) % religiousEventImages.length;\n  return religiousEventImages[imageIndex];\n};\n\nexport default function Events() {\n  const { t } = useLanguage();\n  const [events, setEvents] = useState<Event[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const loadEvents = useCallback(async () => {\n    try {\n      setLoading(true);\n      const data = await api.events.getEvents();\n      const validatedData = Array.isArray(data) ? data : [];\n      setEvents(validatedData);\n    } catch (error) {\n      console.error(\"Error loading events:\", error);\n      // Only show error if we have no events to display\n      if (events.length === 0) {\n        console.error(\"Failed to load events on initial load\");\n        setEvents([]);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    loadEvents();\n  }, []);\n\n  // Use enhanced data refresh hook\n  const { manualRefresh, forceSyncData } = useDataRefresh(\n    loadEvents,\n    5 * 60 * 1000, // Refresh every 5 minutes\n    [],\n    \"events\",\n  );\n\n  const handleManualRefresh = async () => {\n    console.log(\"Manual refresh triggered for events\");\n    await manualRefresh();\n    await forceSyncData();\n  };\n\n  return (\n    <Layout>\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-church-burgundy mb-4\">\n            {t(\"events\") || \"Church Events\"}\n          </h1>\n          <p className=\"text-gray-600 max-w-2xl mx-auto mb-4\">\n            Join us for our upcoming events and celebrations. Our church hosts\n            various activities throughout the year for all members of our\n            community.\n          </p>\n          <Button\n            onClick={handleManualRefresh}\n            variant=\"outline\"\n            size=\"sm\"\n            disabled={loading}\n            className=\"inline-flex items-center\"\n          >\n            <RefreshCw\n              className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n            />\n            Refresh Events\n          </Button>\n        </div>\n\n        {loading ? (\n          <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"overflow-hidden\">\n                <Skeleton className=\"h-48 w-full\" />\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-4 w-1/2 mb-4\" />\n                  <Skeleton className=\"h-20 w-full mb-4\" />\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-10 w-24\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : events.length > 0 ? (\n          <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n            {events.map((event) => (\n              <Card key={event.id} className=\"overflow-hidden\">\n                <div className=\"h-56 bg-cover bg-center relative overflow-hidden\">\n                  <img\n                    src={getReligiousImage(event)}\n                    alt={event.title}\n                    className=\"w-full h-full object-cover\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      if (target.src.includes(\"church-service.jpg\")) {\n                        target.src =\n                          baseUrl + \"images/gallery/church-gathering.jpg\";\n                      } else if (target.src.includes(\"church-gathering.jpg\")) {\n                        target.src = baseUrl + \"images/gallery/ceremony-1.jpg\";\n                      } else if (target.src.includes(\"ceremony-1.jpg\")) {\n                        target.src = baseUrl + \"images/gallery/timket.jpg\";\n                      } else {\n                        target.src =\n                          baseUrl + \"images/gallery/church-service.jpg\";\n                      }\n                    }}\n                  />\n                </div>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-bold text-church-burgundy mb-2\">\n                    {event.title}\n                  </h3>\n                  <div className=\"flex items-center text-gray-600 mb-4\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    <span>\n                      {format(new Date(event.event_date), \"MMMM d, yyyy\")}\n                    </span>\n                    {event.event_time && (\n                      <>\n                        <Clock className=\"h-4 w-4 ml-4 mr-2\" />\n                        <span>{event.event_time}</span>\n                      </>\n                    )}\n                  </div>\n                  {event.location && (\n                    <div className=\"flex items-center text-gray-600 mb-4\">\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      <span>{event.location}</span>\n                    </div>\n                  )}\n                  <p className=\"text-gray-600 mb-6 line-clamp-3\">\n                    {event.description}\n                  </p>\n                  <div className=\"flex justify-between\">\n                    <Button variant=\"outline\" className=\"text-church-burgundy\">\n                      Learn More\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <PlaceholderEvents />\n        )}\n      </div>\n    </Layout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Gallery.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchGalleryImages'. Either include it or remove the dependency array.","line":253,"column":6,"nodeType":"ArrayExpression","endLine":253,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchGalleryImages, language]","fix":{"range":[8423,8433],"text":"[fetchGalleryImages, language]"}}]},{"ruleId":"no-undef","severity":2,"message":"'useDataRefresh' is not defined.","line":256,"column":44,"nodeType":"Identifier","messageId":"undef","endLine":256,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { Image, X, ChevronLeft, ChevronRight, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface GalleryImageProps {\n  src: string;\n  alt: string;\n  onClick?: () => void;\n}\n\nconst GalleryImage: React.FC<GalleryImageProps> = ({ src, alt, onClick }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <div\n      className=\"relative aspect-square overflow-hidden rounded-md bg-muted cursor-pointer\"\n      onClick={onClick}\n    >\n      <img\n        src={src}\n        alt={alt}\n        className={`h-full w-full object-cover transition-opacity duration-500 ${loaded ? \"opacity-100\" : \"opacity-0\"}`}\n        onLoad={() => setLoaded(true)}\n      />\n      {!loaded && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-muted\">\n          <Image className=\"h-10 w-10 text-muted-foreground/30\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface ImageModalProps {\n  image: {\n    src: string;\n    title: string;\n    description: string;\n    onNext: () => void;\n    onPrevious: () => void;\n  } | null;\n  onClose: () => void;\n}\n\nconst ImageModal: React.FC<ImageModalProps> = ({ image, onClose }) => {\n  if (!image) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 p-4\">\n      <div className=\"relative max-w-6xl w-full h-full flex items-center justify-center\">\n        <button\n          onClick={onClose}\n          className=\"absolute top-4 right-4 text-white hover:text-church-gold transition-colors z-10\"\n          aria-label=\"Close modal\"\n        >\n          <X size={24} />\n        </button>\n        <button\n          onClick={image.onPrevious}\n          className=\"absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-church-gold transition-colors p-2\"\n          aria-label=\"Previous image\"\n        >\n          <ChevronLeft size={40} />\n        </button>\n        <button\n          onClick={image.onNext}\n          className=\"absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-church-gold transition-colors p-2\"\n          aria-label=\"Next image\"\n        >\n          <ChevronRight size={40} />\n        </button>\n        <img\n          src={image.src}\n          alt={image.title}\n          className=\"max-h-[90vh] w-auto max-w-full object-contain\"\n        />\n      </div>\n    </div>\n  );\n};\n\ninterface GalleryImageData {\n  id: string;\n  title: string;\n  description: string | null;\n  image_url: string;\n  created_at: string;\n}\n\nconst Gallery: React.FC = () => {\n  const { t, language } = useLanguage();\n  const [selectedImageIndex, setSelectedImageIndex] = useState<number | null>(\n    null,\n  );\n  const [galleryImages, setGalleryImages] = useState<GalleryImageData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Use actual images from public/images folder\n  const baseUrl = import.meta.env.BASE_URL;\n  const fallbackImages = React.useMemo(\n    () => [\n      {\n        id: \"gallery-1\",\n        title:\n          language === \"en\" ? \"Church Aerial View\" : \"የቤተክርስቲያን አየር ላይ እይታ\",\n        description:\n          language === \"en\"\n            ? \"Beautiful aerial view of our church grounds\"\n            : \"የቤተክርስቲያናችን ግቢ ውብ የአየር ላይ እይታ\",\n        image_url: baseUrl + \"images/gallery/church-aerial.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-2\",\n        title: language === \"en\" ? \"Divine Liturgy Service\" : \"የቅዳሴ አገልግሎት\",\n        description:\n          language === \"en\"\n            ? \"Sunday Divine Liturgy in progress\"\n            : \"የእሁድ ቅዳሴ በሂደት ላይ\",\n        image_url: baseUrl + \"images/gallery/church-service.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-3\",\n        title: language === \"en\" ? \"Timket Celebration\" : \"የጥምቀት በዓል\",\n        description:\n          language === \"en\" ? \"Annual Timket celebration\" : \"ዓመታዊ የጥምቀት በዓል\",\n        image_url: baseUrl + \"images/gallery/timket.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-4\",\n        title: language === \"en\" ? \"Church Ceremony\" : \"የቤተክርስቲያን ሥርዓት\",\n        description:\n          language === \"en\" ? \"Special church ceremony\" : \"ልዩ የቤተክርስቲያን ሥርዓት\",\n        image_url: baseUrl + \"images/gallery/ceremony-1.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-5\",\n        title: language === \"en\" ? \"Community Gathering\" : \"የማህበረሰብ ስብሰባ\",\n        description:\n          language === \"en\"\n            ? \"Church community gathering\"\n            : \"የቤተክርስቲያን ማህበረሰብ ስብሰባ\",\n        image_url: baseUrl + \"images/gallery/ceremony-2.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-6\",\n        title: language === \"en\" ? \"Religious Ceremony\" : \"ሃይማኖታዊ ሥርዓት\",\n        description:\n          language === \"en\"\n            ? \"Traditional religious ceremony\"\n            : \"ባህላዊ ሃይማኖታዊ ሥርዓት\",\n        image_url: baseUrl + \"images/gallery/ceremony-3.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-7\",\n        title: language === \"en\" ? \"Church Winter View\" : \"የቤተክርስቲያን የክረምት እይታ\",\n        description:\n          language === \"en\"\n            ? \"Church building in winter\"\n            : \"በክረምት ወቅት የቤተክርስቲያን ህንጻ\",\n        image_url: baseUrl + \"images/gallery/church-winter.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-8\",\n        title: language === \"en\" ? \"Church Sanctuary\" : \"የቤተክርስቲያን መቅደስ\",\n        description:\n          language === \"en\"\n            ? \"Interior view of the sanctuary\"\n            : \"የመቅደሱ ውስጣዊ እይታ\",\n        image_url: baseUrl + \"images/gallery/church/sanctuary.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-9\",\n        title: language === \"en\" ? \"Church Altar\" : \"የቤተክርስቲያን መሠዊያ\",\n        description: language === \"en\" ? \"Sacred altar area\" : \"ቅዱስ መሠዊያ አካባቢ\",\n        image_url: baseUrl + \"images/gallery/church/altar.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-10\",\n        title: language === \"en\" ? \"Timket Procession\" : \"የጥምቀት ሰልፍ\",\n        description:\n          language === \"en\"\n            ? \"Traditional Timket procession\"\n            : \"ባህላዊ የጥምቀት ሰልፍ\",\n        image_url: baseUrl + \"images/gallery/nd14_timket_09-3x1500-1.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-11\",\n        title: language === \"en\" ? \"Church Community\" : \"የቤተክርስቲያን ማህበረሰብ\",\n        description:\n          language === \"en\"\n            ? \"Church community members\"\n            : \"የቤተክርስቲያን ማህበረሰብ አባላት\",\n        image_url: baseUrl + \"images/gallery/photo_2023-09-22_18-56-49.jpg\",\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: \"gallery-12\",\n        title: language === \"en\" ? \"Church Activities\" : \"የቤተክርስቲያን ስራዎች\",\n        description:\n          language === \"en\"\n            ? \"Various church activities\"\n            : \"የተለያዩ የቤተክርስቲያን ስራዎች\",\n        image_url: baseUrl + \"images/gallery/photo_2023-09-22_18-56-51.jpg\",\n        created_at: new Date().toISOString(),\n      },\n    ],\n    [language, baseUrl],\n  );\n\n  const fetchGalleryImages = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await api.gallery.getGalleryImages();\n      const validatedData = Array.isArray(data) ? data : [];\n\n      if (validatedData.length > 0) {\n        setGalleryImages(validatedData);\n      } else {\n        setGalleryImages(fallbackImages);\n      }\n    } catch (err) {\n      console.error(\"Error fetching gallery images:\", err);\n      setGalleryImages(fallbackImages);\n      setError(\n        language === \"en\"\n          ? \"Failed to load some gallery images. Showing available images.\"\n          : \"አንዳንድ የጋለሪ ምስሎችን መጫን አልተቻለም። የሚገኙ ምስሎች ይታያሉ።\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  }, [language, fallbackImages]);\n\n  useEffect(() => {\n    fetchGalleryImages();\n  }, [language]);\n\n  // Use enhanced data refresh hook\n  const { manualRefresh, forceSyncData } = useDataRefresh(\n    fetchGalleryImages,\n    10 * 60 * 1000, // Refresh every 10 minutes\n    [language],\n    \"gallery\",\n  );\n\n  const handleManualRefresh = async () => {\n    console.log(\"Manual refresh triggered for gallery\");\n    await manualRefresh();\n    await forceSyncData();\n  };\n\n  const handleImageClick = (index: number) => {\n    setSelectedImageIndex(index);\n  };\n\n  const handleNext = () => {\n    if (selectedImageIndex === null) return;\n    setSelectedImageIndex((selectedImageIndex + 1) % galleryImages.length);\n  };\n\n  const handlePrevious = () => {\n    if (selectedImageIndex === null) return;\n    setSelectedImageIndex(\n      (selectedImageIndex - 1 + galleryImages.length) % galleryImages.length,\n    );\n  };\n\n  const selectedImage =\n    selectedImageIndex !== null\n      ? {\n          src: galleryImages[selectedImageIndex].image_url,\n          title: galleryImages[selectedImageIndex].title,\n          description: galleryImages[selectedImageIndex].description || \"\",\n          onNext: handleNext,\n          onPrevious: handlePrevious,\n        }\n      : null;\n\n  return (\n    <Layout>\n      <div className=\"py-12 px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <Image className=\"inline-block h-12 w-12 text-church-burgundy mb-3\" />\n            <h1 className=\"text-4xl font-serif text-church-burgundy mb-4\">\n              {t(\"gallery_title\")}\n            </h1>\n            <p className=\"max-w-2xl mx-auto text-lg mb-4\">\n              {t(\"gallery_description\")}\n            </p>\n            <Button\n              onClick={handleManualRefresh}\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={loading}\n              className=\"inline-flex items-center\"\n            >\n              <RefreshCw\n                className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n              />\n              {language === \"en\" ? \"Refresh Gallery\" : \"ጋለሪ አድስ\"}\n            </Button>\n          </div>\n\n          {error && (\n            <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md text-yellow-800 text-sm\">\n              {error}\n            </div>\n          )}\n\n          {loading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <CardContent className=\"p-0\">\n                    <Skeleton className=\"aspect-square w-full\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {galleryImages.map((image, i) => (\n                <Card key={image.id} className=\"overflow-hidden\">\n                  <CardContent className=\"p-0\">\n                    <div className=\"relative\">\n                      <GalleryImage\n                        src={image.image_url}\n                        alt={image.title}\n                        onClick={() => handleImageClick(i)}\n                      />\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-3\">\n                        <h3 className=\"text-white text-sm font-medium truncate\">\n                          {image.title}\n                        </h3>\n                        {image.description && (\n                          <p className=\"text-white/80 text-xs truncate\">\n                            {image.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <ImageModal\n        image={selectedImage}\n        onClose={() => setSelectedImageIndex(null)}\n      />\n    </Layout>\n  );\n};\n\nexport default Gallery;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Home.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/MembershipRegistration.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'language' is assigned a value but never used.","line":51,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'SupabaseUser' is not defined.","line":78,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":78,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'addChild' is assigned a value but never used.","line":148,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'setChildren' is not defined.","line":149,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":149,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'removeChild' is assigned a value but never used.","line":152,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'setChildren' is not defined.","line":153,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":153,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":158,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'supabaseResponse' is not defined.","line":258,"column":42,"nodeType":"Identifier","messageId":"undef","endLine":258,"endColumn":58},{"ruleId":"no-undef","severity":2,"message":"'supabaseResponse' is not defined.","line":262,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":262,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'supabaseResponse' is not defined.","line":266,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":266,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'Users' is not defined.","line":688,"column":18,"nodeType":"JSXIdentifier","messageId":"undef","endLine":688,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'MemberDashboard' is not defined.","line":784,"column":17,"nodeType":"JSXIdentifier","messageId":"undef","endLine":784,"endColumn":32}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { CheckCircle, User, CreditCard, MapPin } from \"lucide-react\";\n\ninterface FormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  dateOfBirth: string;\n  gender: string;\n  streetAddress: string;\n  city: string;\n  stateProvinceRegion: string;\n  postalZipCode: string;\n  country: string;\n  membershipType: string;\n  ministryInterests: string;\n  preferredLanguage: string;\n  emailUpdates: boolean;\n  agreeToTerms: boolean;\n  // Removed unused children field for cleanup\n}\n\nconst MembershipRegistration = () => {\n  const { t, language } = useLanguage();\n\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [error, setError] = useState<string | null>(null);\n\n  const [formData, setFormData] = useState<FormData>({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    dateOfBirth: \"\",\n    gender: \"\",\n    streetAddress: \"\",\n    city: \"\",\n    stateProvinceRegion: \"\",\n    postalZipCode: \"\",\n    country: \"United States\",\n    membershipType: \"regular\",\n    ministryInterests: \"\",\n    preferredLanguage: \"english\",\n    emailUpdates: true,\n    agreeToTerms: false,\n  });\n\n  const [user, setUser] = useState<SupabaseUser | null>(null);\n  // Removed unused children state\n\n  useEffect(() => {\n    supabase.auth.getUser().then(({ data }) => setUser(data?.user || null));\n  }, []);\n\n  const totalSteps = 3;\n  const progressPercentage = (currentStep / totalSteps) * 100;\n\n  // Removed unused ministryOptions and volunteerOptions arrays\n\n  const validateStep = (step: number): boolean => {\n    const errors: Record<string, string> = {};\n\n    switch (step) {\n      case 1:\n        if (!formData.firstName.trim())\n          errors.firstName = \"First name is required\";\n        if (!formData.lastName.trim())\n          errors.lastName = \"Last name is required\";\n        if (!formData.email.trim()) errors.email = \"Email is required\";\n        if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email))\n          errors.email = \"Invalid email format\";\n        if (!formData.phone.trim()) errors.phone = \"Phone number is required\";\n        if (!formData.dateOfBirth)\n          errors.dateOfBirth = \"Date of birth is required\";\n        if (!formData.gender) errors.gender = \"Gender is required\";\n        break;\n      case 2:\n        if (!formData.streetAddress.trim())\n          errors.streetAddress = \"Street address is required\";\n        if (!formData.city.trim()) errors.city = \"City is required\";\n        if (!formData.stateProvinceRegion.trim())\n          errors.stateProvinceRegion = \"State/Province/Region is required\";\n        if (!formData.postalZipCode.trim())\n          errors.postalZipCode = \"Postal/ZIP code is required\";\n        break;\n      case 3:\n        if (!formData.membershipType)\n          errors.membershipType = \"Membership type is required\";\n        if (!formData.agreeToTerms)\n          errors.agreeToTerms = \"You must agree to the terms and conditions\";\n        break;\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep((prev) => Math.min(prev + 1, totalSteps));\n    }\n  };\n\n  const handlePrevious = () => {\n    setCurrentStep((prev) => Math.max(prev - 1, 1));\n  };\n\n  const handleInputChange = (field: keyof FormData, value: unknown) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (formErrors[field]) {\n      setFormErrors((prev) => ({ ...prev, [field]: \"\" }));\n    }\n  };\n\n  // Removed unused handleArrayChange function\n\n  const addChild = () => {\n    setChildren((prev) => [...prev, { name: \"\", age: \"\" }]);\n  };\n\n  const removeChild = (index: number) => {\n    setChildren((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  // Removed useEffect for children state\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!validateStep(currentStep)) return;\n    setIsSubmitting(true);\n    setError(null);\n    try {\n\n      // Determine membership fee based on type\n      const membershipFees = {\n        regular: \"100\",\n        student: \"50\",\n        senior: \"75\",\n        family: \"200\",\n      };\n      const membershipFee =\n        membershipFees[\n          formData.membershipType as keyof typeof membershipFees\n        ] || \"100\";\n\n      // Create Stripe checkout session using the existing edge function\n      const checkoutData = {\n        amount: membershipFee,\n        donationType: \"one_time\",\n        purpose: \"membership_fee\",\n        email: formData.email,\n        name: `${formData.firstName} ${formData.lastName}`,\n        address: `${formData.streetAddress}, ${formData.city}, ${formData.stateProvinceRegion} ${formData.postalZipCode}`,\n        // memberId will be set after member creation\n        membershipType: formData.membershipType,\n      };\n\n      console.log(\"Invoking create-checkout function with data:\", checkoutData);\n      console.log(\n        \"Membership fee for type\",\n        formData.membershipType,\n        \":\",\n        membershipFee,\n      );\n\n      // First create the member record using the membership-management function\n      const memberResponse = await supabase.functions.invoke(\n        \"membership-management\",\n        {\n          body: {\n            action: \"create_member\",\n            member_data: {\n              full_name: `${formData.firstName} ${formData.lastName}`,\n              first_name: formData.firstName,\n              last_name: formData.lastName,\n              email: formData.email,\n              phone: formData.phone,\n              address: `${formData.streetAddress}, ${formData.city}, ${formData.stateProvinceRegion} ${formData.postalZipCode}`,\n              street_address: formData.streetAddress,\n              city: formData.city,\n              state_province_region: formData.stateProvinceRegion,\n              postal_zip_code: formData.postalZipCode,\n              country: formData.country,\n              date_of_birth: formData.dateOfBirth,\n              gender: formData.gender,\n              membership_type: formData.membershipType,\n              preferred_language: formData.preferredLanguage,\n              ministry_interests: formData.ministryInterests,\n              email_updates: formData.emailUpdates,\n              terms_accepted: formData.agreeToTerms,\n              newsletter_consent: formData.emailUpdates,\n            },\n          },\n        },\n      );\n\n      if (memberResponse.error) {\n        console.error(\"Member creation error:\", memberResponse.error);\n        throw new Error(\n          `Member registration failed: ${memberResponse.error.message || \"Unknown error\"}`,\n        );\n      }\n\n      const newMember = memberResponse.data?.member;\n      if (!newMember) {\n        throw new Error(\"Failed to create member record\");\n      }\n\n      // Then create the checkout session\n      const response = await supabase.functions.invoke(\"webhook-handler\", {\n        body: {\n          action: \"create_checkout\",\n          checkout_data: {\n            ...checkoutData,\n            memberId: newMember.id,\n          },\n        },\n      });\n\n      console.log(\"Checkout function response:\", response);\n      console.log(\"Response data:\", response.data);\n      console.log(\"Response error:\", response.error);\n\n      if (response.error) {\n        console.error(\"Function error:\", response.error);\n        throw new Error(\n          `Payment initiation failed: ${(supabaseResponse as any).error.message || \"Unknown error\"}`,\n        );\n      }\n\n      if (!(supabaseResponse as any).data?.url) {\n        throw new Error(\"No checkout URL received\");\n      }\n\n      window.location.href = (supabaseResponse as any).data.url;\n    } catch (error: unknown) {\n      let errorMessage = \"Registration failed. Please try again.\";\n      if (typeof error === \"object\" && error !== null) {\n        if (\"message\" in error && typeof (error as any).message === \"string\") {\n          errorMessage = (error as any).message;\n        } else if (\"error_description\" in error && typeof (error as any).error_description === \"string\") {\n          errorMessage = (error as any).error_description;\n        } else {\n          errorMessage = JSON.stringify(error);\n        }\n      } else if (typeof error === \"string\") {\n        errorMessage = error;\n      }\n      console.error(\"Membership registration error:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Registration Error\",\n        description:\n          \"There was an error processing your membership registration. \" + errorMessage,\n      });\n      setError(errorMessage);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <User className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">Personal Information</h3>\n            </div>\n\n            {/* Name Fields */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) =>\n                    handleInputChange(\"firstName\", e.target.value)\n                  }\n                  className={formErrors.firstName ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.firstName && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.firstName}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) =>\n                    handleInputChange(\"lastName\", e.target.value)\n                  }\n                  className={formErrors.lastName ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.lastName && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.lastName}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                  className={formErrors.email ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.email && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.email}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                  className={formErrors.phone ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.phone && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.phone}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateOfBirth\">Date of Birth *</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) =>\n                    handleInputChange(\"dateOfBirth\", e.target.value)\n                  }\n                  className={formErrors.dateOfBirth ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.dateOfBirth && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.dateOfBirth}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Gender *</Label>\n                <RadioGroup\n                  value={formData.gender}\n                  onValueChange={(value) => handleInputChange(\"gender\", value)}\n                  className=\"flex gap-6\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"male\" id=\"male\" />\n                    <Label htmlFor=\"male\">Male</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"female\" id=\"female\" />\n                    <Label htmlFor=\"female\">Female</Label>\n                  </div>\n                </RadioGroup>\n                {formErrors.gender && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.gender}</p>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <MapPin className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">Address Information</h3>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"streetAddress\">Street Address *</Label>\n              <Input\n                id=\"streetAddress\"\n                value={formData.streetAddress}\n                onChange={(e) =>\n                  handleInputChange(\"streetAddress\", e.target.value)\n                }\n                className={formErrors.streetAddress ? \"border-red-500\" : \"\"}\n              />\n              {formErrors.streetAddress && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.streetAddress}\n                </p>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"city\">City *</Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => handleInputChange(\"city\", e.target.value)}\n                  className={formErrors.city ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.city && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.city}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"stateProvinceRegion\">State/Province *</Label>\n                <Input\n                  id=\"stateProvinceRegion\"\n                  value={formData.stateProvinceRegion}\n                  onChange={(e) =>\n                    handleInputChange(\"stateProvinceRegion\", e.target.value)\n                  }\n                  className={\n                    formErrors.stateProvinceRegion ? \"border-red-500\" : \"\"\n                  }\n                />\n                {formErrors.stateProvinceRegion && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.stateProvinceRegion}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"postalZipCode\">ZIP/Postal Code *</Label>\n                <Input\n                  id=\"postalZipCode\"\n                  value={formData.postalZipCode}\n                  onChange={(e) =>\n                    handleInputChange(\"postalZipCode\", e.target.value)\n                  }\n                  className={formErrors.postalZipCode ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.postalZipCode && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.postalZipCode}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"country\">Country</Label>\n                <Select\n                  value={formData.country}\n                  onValueChange={(value) => handleInputChange(\"country\", value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"United States\">United States</SelectItem>\n                    <SelectItem value=\"Canada\">Canada</SelectItem>\n                    <SelectItem value=\"Ethiopia\">Ethiopia</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <CheckCircle className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">\n                Membership Details & Preferences\n              </h3>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"membershipType\">Membership Type *</Label>\n              <Select\n                value={formData.membershipType}\n                onValueChange={(value) =>\n                  handleInputChange(\"membershipType\", value)\n                }\n              >\n                <SelectTrigger\n                  className={formErrors.membershipType ? \"border-red-500\" : \"\"}\n                >\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"regular\">\n                    Regular Member ($100/year)\n                  </SelectItem>\n                  <SelectItem value=\"student\">\n                    Student Member ($50/year)\n                  </SelectItem>\n                  <SelectItem value=\"senior\">\n                    Senior Member ($75/year)\n                  </SelectItem>\n                  <SelectItem value=\"family\">\n                    Family Member ($200/year)\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n              {formErrors.membershipType && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.membershipType}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"ministryInterests\">Ministry Interests</Label>\n              <Textarea\n                id=\"ministryInterests\"\n                value={formData.ministryInterests}\n                onChange={(e) =>\n                  handleInputChange(\"ministryInterests\", e.target.value)\n                }\n                placeholder=\"Please describe any ministries or volunteer activities you're interested in...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Preferred Language</Label>\n              <RadioGroup\n                value={formData.preferredLanguage}\n                onValueChange={(value) =>\n                  handleInputChange(\"preferredLanguage\", value)\n                }\n                className=\"flex gap-6\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"english\" id=\"english\" />\n                  <Label htmlFor=\"english\">English</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"amharic\" id=\"amharic\" />\n                  <Label htmlFor=\"amharic\">Amharic</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"emailUpdates\"\n                  checked={formData.emailUpdates}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"emailUpdates\", checked)\n                  }\n                />\n                <Label htmlFor=\"emailUpdates\">\n                  I would like to receive email updates about church events and\n                  news\n                </Label>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-2\">\n                <Checkbox\n                  id=\"agreeToTerms\"\n                  checked={formData.agreeToTerms}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"agreeToTerms\", checked)\n                  }\n                  className={formErrors.agreeToTerms ? \"border-red-500\" : \"\"}\n                />\n                <Label\n                  htmlFor=\"agreeToTerms\"\n                  className=\"text-sm leading-relaxed\"\n                >\n                  I agree to the church's terms and conditions, and I understand\n                  that membership requires an annual fee. I commit to\n                  participating in church activities and supporting the church\n                  community. *\n                </Label>\n              </div>\n              {formErrors.agreeToTerms && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.agreeToTerms}\n                </p>\n              )}\n            </div>\n\n            <div className=\"bg-church-cream p-4 rounded-lg\">\n              <h4 className=\"font-semibold text-church-burgundy mb-2\">\n                Membership Fee\n              </h4>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Annual membership fee:{\" \"}\n                <span className=\"font-semibold\">\n                  $\n                  {formData.membershipType === \"regular\"\n                    ? \"100\"\n                    : formData.membershipType === \"student\"\n                      ? \"50\"\n                      : formData.membershipType === \"senior\"\n                        ? \"75\"\n                        : formData.membershipType === \"family\"\n                          ? \"200\"\n                          : \"100\"}\n                </span>\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                After submitting this form, you will be redirected to a secure\n                payment page to complete your membership registration.\n              </p>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const getStepIcon = (step: number) => {\n    if (step < currentStep) {\n      return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n    } else if (step === currentStep) {\n      return (\n        <div className=\"h-5 w-5 rounded-full bg-church-burgundy text-white flex items-center justify-center text-xs font-bold\">\n          {step}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"h-5 w-5 rounded-full bg-gray-300 text-gray-600 flex items-center justify-center text-xs font-bold\">\n          {step}\n        </div>\n      );\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"container mx-auto p-4 max-w-4xl\">\n        <Card className=\"bg-white shadow-lg\">\n          <CardHeader className=\"text-center bg-gradient-to-r from-church-gold/10 to-church-burgundy/10 rounded-t-lg py-8 mb-4\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-church-gold/80 rounded-full mb-4 shadow-lg\">\n                <Users size={36} className=\"text-church-burgundy\" />\n              </div>\n              <CardTitle className=\"text-3xl md:text-4xl font-serif text-church-burgundy mb-2\">\n                {t(\"membership_registration_title\")}\n              </CardTitle>\n              <CardDescription className=\"text-lg text-gray-700 max-w-2xl mx-auto\">\n                {t(\"membership_registration_description\")}\n              </CardDescription>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            {/* Progress Bar */}\n            <div className=\"mb-8\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(1)}\n                  <span className=\"text-sm font-medium\">Personal</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(2)}\n                  <span className=\"text-sm font-medium\">Address</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(3)}\n                  <span className=\"text-sm font-medium\">Membership</span>\n                </div>\n              </div>\n              <Progress value={progressPercentage} className=\"h-2\" />\n              <p className=\"text-sm text-gray-600 mt-2 text-center\">\n                Step {currentStep} of {totalSteps}\n              </p>\n            </div>\n\n            {/* Step Content */}\n            <div className=\"min-h-[400px]\">{renderStepContent()}</div>\n\n            {/* Error Message */}\n            {error && (\n              <div className=\"text-red-600 bg-red-50 border border-red-200 rounded p-2 mb-4\">\n                {error}\n              </div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between mt-8 pt-6 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrevious}\n                disabled={currentStep === 1}\n              >\n                {t(\"previous\")}\n              </Button>\n\n              {currentStep < totalSteps ? (\n                <Button\n                  type=\"button\"\n                  onClick={handleNext}\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  {t(\"next\")}\n                </Button>\n              ) : (\n                <Button\n                  type=\"button\"\n                  onClick={handleSubmit}\n                  disabled={isSubmitting}\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      {t(\"processing\")}\n                    </>\n                  ) : (\n                    <>\n                      <CreditCard className=\"h-4 w-4 mr-2\" />\n                      {t(\"complete_registration\")} $\n                      {formData.membershipType === \"regular\"\n                        ? \"100\"\n                        : formData.membershipType === \"student\"\n                          ? \"50\"\n                          : formData.membershipType === \"senior\"\n                            ? \"75\"\n                            : formData.membershipType === \"family\"\n                              ? \"200\"\n                              : \"100\"}\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      {user && <MemberDashboard />}\n    </Layout>\n  );\n};\n\nexport default MembershipRegistration;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/MembershipSuccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Sermons.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useToast' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSermons'. Either include it or remove the dependency array.","line":141,"column":6,"nodeType":"ArrayExpression","endLine":141,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSermons, language]","fix":{"range":[4085,4095],"text":"[fetchSermons, language]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { Play, Pause, Calendar, Book, User, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { format } from \"date-fns\";\nimport { useDataRefresh } from \"@/hooks/useDataRefresh\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Sermon {\n  id: string;\n  title: string;\n  description: string | null;\n  scripture_reference: string | null;\n  audio_url: string | null;\n  preacher: string | null;\n  sermon_date: string;\n  is_featured: boolean;\n}\n\nconst SermonCard: React.FC<{ sermon: Sermon }> = ({ sermon }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audio, setAudio] = useState<HTMLAudioElement | null>(null);\n  const { language } = useLanguage();\n\n  useEffect(() => {\n    if (sermon.audio_url) {\n      const audioElement = new Audio(sermon.audio_url);\n      setAudio(audioElement);\n\n      audioElement.addEventListener(\"ended\", () => setIsPlaying(false));\n      return () => {\n        audioElement.pause();\n        audioElement.removeEventListener(\"ended\", () => setIsPlaying(false));\n      };\n    }\n  }, [sermon.audio_url]);\n\n  const togglePlay = () => {\n    if (!audio) return;\n\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const formattedDate = sermon.sermon_date\n    ? format(new Date(sermon.sermon_date), \"MMMM d, yyyy\")\n    : \"\";\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-xl font-serif text-church-burgundy mb-2\">\n          {sermon.title}\n        </h3>\n\n        <div className=\"flex items-center text-sm text-gray-600 mb-3 space-x-4\">\n          {sermon.preacher && (\n            <div className=\"flex items-center\">\n              <User size={16} className=\"mr-1\" />\n              <span>{sermon.preacher}</span>\n            </div>\n          )}\n\n          <div className=\"flex items-center\">\n            <Calendar size={16} className=\"mr-1\" />\n            <span>{formattedDate}</span>\n          </div>\n\n          {sermon.scripture_reference && (\n            <div className=\"flex items-center\">\n              <Book size={16} className=\"mr-1\" />\n              <span>{sermon.scripture_reference}</span>\n            </div>\n          )}\n        </div>\n\n        {sermon.description && (\n          <p className=\"text-gray-700 mb-4\">{sermon.description}</p>\n        )}\n\n        {sermon.audio_url && (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center\"\n            onClick={togglePlay}\n          >\n            {isPlaying ? (\n              <>\n                <Pause size={16} className=\"mr-2\" />\n                {language === \"en\" ? \"Pause\" : \"ማቆም\"}\n              </>\n            ) : (\n              <>\n                <Play size={16} className=\"mr-2\" />\n                {language === \"en\" ? \"Listen\" : \"ማዳመጥ\"}\n              </>\n            )}\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Sermons: React.FC = () => {\n  const { language } = useLanguage();\n  const [sermons, setSermons] = useState<Sermon[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchSermons = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await api.sermons.getSermons();\n      const validatedData = Array.isArray(data) ? data : [];\n      setSermons(validatedData);\n    } catch (err) {\n      console.error(\"Error fetching sermons:\", err);\n      setSermons([]);\n      setError(\n        language === \"en\"\n          ? \"Failed to load sermons. Please try again later.\"\n          : \"ስብከቶችን መጫን አልተቻለም። እባክዎ ቆይተው እንደገና ይሞክሩ።\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSermons();\n  }, [language]);\n\n  // Use enhanced data refresh hook\n  const { manualRefresh, forceSyncData } = useDataRefresh(\n    fetchSermons,\n    3 * 60 * 1000, // Refresh every 3 minutes\n    [language],\n    \"sermons\",\n  );\n\n  const handleManualRefresh = async () => {\n    console.log(\"Manual refresh triggered for sermons\");\n    await manualRefresh();\n    await forceSyncData();\n  };\n\n  return (\n    <Layout>\n      <div className=\"py-12 px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-serif text-church-burgundy mb-4\">\n              {language === \"en\" ? \"Sermons\" : \"ስብከቶች\"}\n            </h1>\n            <p className=\"max-w-2xl mx-auto text-lg mb-4\">\n              {language === \"en\"\n                ? \"Listen to recent sermons from our church services\"\n                : \"ከቤተክርስቲያን አገልግሎቶቻችን የቅርብ ጊዜ ስብከቶችን ያዳምጡ\"}\n            </p>\n            <Button\n              onClick={handleManualRefresh}\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={loading}\n              className=\"inline-flex items-center\"\n            >\n              <RefreshCw\n                className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n              />\n              {language === \"en\" ? \"Refresh Sermons\" : \"ስብከቶች አድስ\"}\n            </Button>\n          </div>\n\n          {loading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-church-burgundy border-r-transparent\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12 text-red-600\">{error}</div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {sermons.length > 0 ? (\n                sermons.map((sermon) => (\n                  <SermonCard key={sermon.id} sermon={sermon} />\n                ))\n              ) : (\n                <div className=\"col-span-full text-center py-12 text-gray-500\">\n                  {language === \"en\"\n                    ? \"No sermons available at the moment.\"\n                    : \"በአሁኑ ጊዜ ምንም ስብከቶች አልተገኙም።\"}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Sermons;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Services.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":90,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\n// import React, { useState, useEffect } from \"react\"; // removed duplicate and unused\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { Settings, CalendarCheck } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nconst baseUrl = import.meta.env.BASE_URL;\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\n\n// Religious service images mapping with verified paths\nconst religiousServiceImages = {\n  \"Christian Initiation\": \"/images/religious/palm-sunday.jpg\",\n  \"ክርስትና ማስነሳት\": \"/images/religious/palm-sunday.jpg\",\n  \"Qendil Prayer\": \"/images/gallery/church-service.jpg\",\n  \"ጸሎተ ቀንዲል\": \"/images/gallery/church-service.jpg\",\n  \"Marriage and Communion Education\": \"/images/gallery/ceremony-1.jpg\",\n  \"የጋብቻና የቁርባን ትምህርት\": \"/images/gallery/ceremony-1.jpg\",\n  \"Counseling Services\": \"/images/gallery/church-gathering.jpg\",\n  \"የምክር አገልግሎት\": \"/images/gallery/church-gathering.jpg\",\n  \"Marriage Ceremony\": \"/images/gallery/ceremony-2.jpg\",\n  \"ጋብቻ መፈፀም\": \"/images/gallery/ceremony-2.jpg\",\n  \"Funeral Prayer\": \"/images/religious/crucifixion.jpg\",\n  \"ጸሎተ ፍትሐት\": \"/images/religious/crucifixion.jpg\",\n  \"Holy Water Baptism\": \"/images/gallery/timket.jpg\",\n  \"ጸበል መጠመቅ\": \"/images/gallery/timket.jpg\",\n  \"Entering Lent\": \"/images/religious/procession.jpg\",\n  \"ሱባኤ መግባት\": \"/images/religious/procession.jpg\",\n  \"Qeder Baptism\": \"/images/gallery/timket.jpg\",\n  \"የቄደር ጥምቀት\": \"/images/gallery/timket.jpg\",\n  \"Divine Liturgy (Kidase)\": \"/images/gallery/church-service.jpg\",\n  ቅዳሴ: \"/images/gallery/church-service.jpg\",\n};\n\nconst getServiceImage = (title: string): string => {\n  return (\n    (religiousServiceImages as Record<string, string>)[title] ||\n    baseUrl + \"images/gallery/church-service.jpg\"\n  );\n};\n\nconst Services: React.FC = () => {\n  const { t, language } = useLanguage();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const [showModal, setShowModal] = useState(false);\n\n  const handleAppointmentSubmit = async (\n    e: React.FormEvent<HTMLFormElement>,\n  ) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get(\"name\") as string;\n    const email = formData.get(\"email\") as string;\n    const phone = formData.get(\"phone\") as string;\n    const date = formData.get(\"date\") as string;\n    const time = formData.get(\"time\") as string;\n    const service = formData.get(\"service\") as string || formData.get(\"serviceType\") as string;\n    const notes = formData.get(\"notes\") as string;\n\n    try {\n      // Use the appointment-request edge function for better validation and processing\n      const { data, error } = await supabase.functions.invoke(\n        \"supabase-functions-appointment-request\",\n        {\n          body: {\n            name,\n            email,\n            phone,\n            service_title: service,\n            requested_date: date,\n            requested_time: time,\n            notes,\n          },\n        },\n      );\n\n      if (error) {\n        throw new Error(\n          error.message || \"Failed to submit appointment request\",\n        );\n      }\n\n      toast({\n        title: language === \"en\" ? \"Appointment Request Sent\" : \"የቀጠሮ ጥያቄ ተልኳል\",\n        description:\n          language === \"en\"\n            ? `We've received your appointment request. We'll contact you soon to confirm.`\n            : `የቀጠሮ ጥያቄዎን ተቀብለናል። በቅርቡ ለማረጋገጥ እናገኝዎታለን።`,\n      });\n\n      setIsDialogOpen(false);\n      (e.target as HTMLFormElement).reset();\n    } catch (error: any) {\n      console.error(\"Error submitting appointment:\", error);\n      let errorMsg =\n        (error && (error.message || error.error_description || error.toString())) ||\n        (typeof error === \"object\" ? JSON.stringify(error) : String(error));\n      toast({\n        title: language === \"en\" ? \"Error\" : \"ስህተት\",\n        description:\n          (language === \"en\"\n            ? \"Failed to submit appointment request. \"\n            : \"የቀጠሮ ጥያቄ ማስገባት አልተሳካም። \") + errorMsg,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Service data\n  const regularServices = [\n    {\n      title: language === \"en\" ? \"Holy Water Baptism\" : \"ጸበል መጠመቅ\",\n      description:\n        language === \"en\"\n          ? \"Blessing and immersion in holy water for spiritual cleansing and healing.\"\n          : \"ለመንፈሳዊ ንጽህና እና ፈውስ በቅዱስ ውሃ ውስጥ መባረክ እና መጠመቅ።\",\n      time: language === \"en\" ? \"Sundays after Divine Liturgy\" : \"እሁድ ከቅዳሴ በኋላ\",\n      requiresAppointment: false,\n    },\n    {\n      title: language === \"en\" ? \"Marriage Ceremony\" : \"ጋብቻ መፈፀም\",\n      description:\n        language === \"en\"\n          ? \"Traditional Orthodox Christian church marriage ceremony following church customs and traditions.\"\n          : \"የቤተክርስቲያን ልማዶችን እና ወጎችን የሚከተል ባህላዊ የኦርቶዶክስ ክርስቲያን የጋብቻ ሥርዓት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title: language === \"en\" ? \"Funeral Prayer\" : \"ጸሎተ ፍትሐት\",\n      description:\n        language === \"en\"\n          ? \"Prayer service for the departed, offering comfort to families and commending the soul to God's mercy.\"\n          : \"ለሟቾች የሚደረግ የጸሎት አገልግሎት፣ ለቤተሰቦች መጽናናትን የሚሰጥ እና ነፍስን ለእግዚአብሔር ምሕረት የሚያስረክብ።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title:\n        language === \"en\"\n          ? \"Marriage and Communion Education\"\n          : \"የጋብቻና የቁርባን ትምህርት\",\n      description:\n        language === \"en\"\n          ? \"Educational sessions for couples preparing for marriage and individuals preparing to receive Holy Communion.\"\n          : \"ለጋብቻ ለሚዘጋጁ ጥንዶች እና ቅዱስ ቁርባን ለመቀበል ለሚዘጋጁ ግለሰቦች የሚሰጡ የትምህርት ክፍለ ጊዜያት።\",\n      time:\n        language === \"en\"\n          ? \"Saturdays, 2:00 PM - 4:00 PM\"\n          : \"ቅዳሜ፣ 2:00 ከሰዓት - 4:00 ከሰዓት\",\n      requiresAppointment: false,\n    },\n    {\n      title: language === \"en\" ? \"Counseling Services\" : \"የምክር አገልግሎት\",\n      description:\n        language === \"en\"\n          ? \"Counseling services for health issues, addiction, marriage problems, and other personal challenges.\"\n          : \"በጤና፣ በሱስ፣ በትዳር እና በሌሎች ችግሮች የምክር አገልግሎት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n  ];\n\n  const specialServices = [\n    {\n      title: language === \"en\" ? \"Qendil Prayer\" : \"ጸሎተ ቀንዲል\",\n      description:\n        language === \"en\"\n          ? \"Special prayer service with the blessing of oil for healing and spiritual protection.\"\n          : \"ለፈውስ እና ለመንፈሳዊ ጥበቃ ከዘይት ቡራኬ ጋር የሚደረግ ልዩ የጸሎት አገልግሎት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title: language === \"en\" ? \"Qeder Baptism\" : \"የቄደር ጥምቀት\",\n      description:\n        language === \"en\"\n          ? \"Special baptismal service following traditional Ethiopian Orthodox customs.\"\n          : \"ባህላዊ የኢትዮጵያ ኦርቶዶክስ ወጎችን የሚከተል ልዩ የጥምቀት አገልግሎት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title: language === \"en\" ? \"Christian Initiation\" : \"ክርስትና ማስነሳት\",\n      description:\n        language === \"en\"\n          ? \"The sacrament of Christian initiation, introducing new members to the faith and church community.\"\n          : \"አዲስ አማኞችን ወደ እምነት እና የቤተክርስቲያን ማህበረሰብ የሚያስተዋውቅ የክርስትና ሥርዓት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title: language === \"en\" ? \"Entering Lent\" : \"ሱባኤ መግባት\",\n      description:\n        language === \"en\"\n          ? \"Special service marking the beginning of fasting periods, with prayers for spiritual strength and guidance.\"\n          : \"ለመንፈሳዊ ጥንካሬ እና መመሪያ ከጸሎቶች ጋር የጾም ወቅቶችን መጀመሪያ የሚያመለክት ልዩ አገልግሎት።\",\n      time:\n        language === \"en\"\n          ? \"Beginning of major fasting periods\"\n          : \"የዋና ዋና የጾም ወቅቶች መጀመሪያ\",\n      requiresAppointment: false,\n    },\n    {\n      title: language === \"en\" ? \"Divine Liturgy (Kidase)\" : \"ቅዳሴ\",\n      description:\n        language === \"en\"\n          ? \"The Divine Liturgy is the main worship service, during which Holy Communion is celebrated. It follows the ancient liturgy of St. Basil, St. Gregory, and St. Cyril.\"\n          : \"ቅዳሴ የቤተክርስቲያን ዋና የአምልኮ አገልግሎት ሲሆን በዚህ ጊዜ ቅዱስ ቁርባን ይከናወናል። የቅዱስ ባስልዮስ፣ የቅዱስ ግሪጎሪዮስ እና የቅዱስ ኪሪሎስ ጥንታዊ ሥርዓተ ቅዳሴን ይከተላል።\",\n      time:\n        language === \"en\"\n          ? \"Sundays, 7:00 AM - 12:00 PM\"\n          : \"እሁድ፣ 7:00 ጠዋት - 12:00 ከሰዓት\",\n      requiresAppointment: false,\n    },\n  ];\n\n  // Collect all services that require appointments\n  const appointmentServices = [...regularServices, ...specialServices].filter(\n    (s) => s.requiresAppointment,\n  );\n\n  return (\n    <Layout>\n      <div className=\"py-12 px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <Settings className=\"inline-block h-10 w-10 text-church-burgundy mb-3\" />\n            <h1 className=\"text-4xl font-serif text-church-burgundy mb-4\">\n              {t(\"services_title\") || \"Church Services\"}\n            </h1>\n            <p className=\"max-w-2xl mx-auto text-lg mb-6\">\n              {t(\"services_description\") ||\n                \"Join us for worship and spiritual growth through our regular and special services. Our church follows the ancient traditions of the Ethiopian Orthodox Tewahedo Church.\"}\n            </p>\n\n            {/* Single Request Appointment Button */}\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90 text-white px-8 py-3 text-lg\">\n                  <CalendarCheck className=\"h-5 w-5 mr-2\" />\n                  {language === \"en\" ? \"Request Appointment\" : \"ቀጠሮ ይጠይቁ\"}\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[500px]\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {language === \"en\"\n                      ? \"Request Service Appointment\"\n                      : \"የአገልግሎት ቀጠሮ ይጠይቁ\"}\n                  </DialogTitle>\n                  <DialogDescription>\n                    {language === \"en\"\n                      ? \"Please fill out the form below to request an appointment for any of our services that require scheduling.\"\n                      : \"ቀጠሮ የሚያስፈልጋቸው ማንኛውም አገልግሎቶች ለመጠየቅ ከታች ያለውን ቅጽ ይሙሉ።\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleAppointmentSubmit} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">\n                        {language === \"en\" ? \"Full Name\" : \"ሙሉ ስም\"} *\n                      </Label>\n                      <Input id=\"name\" name=\"name\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">\n                        {language === \"en\" ? \"Email\" : \"ኢሜል\"} *\n                      </Label>\n                      <Input id=\"email\" name=\"email\" type=\"email\" required />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">\n                      {language === \"en\" ? \"Phone Number\" : \"ስልክ ቁጥር\"} *\n                    </Label>\n                    <Input id=\"phone\" name=\"phone\" type=\"tel\" required />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"service\">\n                      {language === \"en\" ? \"Service Requested\" : \"የተጠየቀ አገልግሎት\"}{\" \"}\n                      *\n                    </Label>\n                    <select\n                      id=\"service\"\n                      name=\"service\"\n                      required\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-church-burgundy\"\n                    >\n                      <option value=\"\">\n                        {language === \"en\"\n                          ? \"Select a service...\"\n                          : \"አገልግሎት ይምረጡ...\"}\n                      </option>\n                      <option\n                        value={\n                          language === \"en\" ? \"Marriage Ceremony\" : \"ጋብቻ መፈፀም\"\n                        }\n                      >\n                        {language === \"en\" ? \"Marriage Ceremony\" : \"ጋብቻ መፈፀም\"}\n                      </option>\n                      <option\n                        value={\n                          language === \"en\" ? \"Funeral Prayer\" : \"ጸሎተ ፍትሐት\"\n                        }\n                      >\n                        {language === \"en\" ? \"Funeral Prayer\" : \"ጸሎተ ፍትሐት\"}\n                      </option>\n                      <option\n                        value={\n                          language === \"en\"\n                            ? \"Counseling Services\"\n                            : \"የምክር አገልግሎት\"\n                        }\n                      >\n                        {language === \"en\"\n                          ? \"Counseling Services\"\n                          : \"የምክር አገልግሎት\"}\n                      </option>\n                      <option\n                        value={language === \"en\" ? \"Qendil Prayer\" : \"ጸሎተ ቀንዲል\"}\n                      >\n                        {language === \"en\" ? \"Qendil Prayer\" : \"ጸሎተ ቀንዲል\"}\n                      </option>\n                      <option\n                        value={\n                          language === \"en\" ? \"Qeder Baptism\" : \"የቄደር ጥምቀት\"\n                        }\n                      >\n                        {language === \"en\" ? \"Qeder Baptism\" : \"የቄደር ጥምቀት\"}\n                      </option>\n                      <option\n                        value={\n                          language === \"en\"\n                            ? \"Christian Initiation\"\n                            : \"ክርስትና ማስነሳት\"\n                        }\n                      >\n                        {language === \"en\"\n                          ? \"Christian Initiation\"\n                          : \"ክርስትና ማስነሳት\"}\n                      </option>\n                    </select>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"date\">\n                        {language === \"en\" ? \"Preferred Date\" : \"የተመረጠ ቀን\"} *\n                      </Label>\n                      <Input id=\"date\" name=\"date\" type=\"date\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"time\">\n                        {language === \"en\" ? \"Preferred Time\" : \"የተመረጠ ሰዓት\"} *\n                      </Label>\n                      <Input id=\"time\" name=\"time\" type=\"time\" required />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"notes\">\n                      {language === \"en\" ? \"Additional Notes\" : \"ተጨማሪ ማስታወሻዎች\"}\n                    </Label>\n                    <Textarea\n                      id=\"notes\"\n                      name=\"notes\"\n                      placeholder={\n                        language === \"en\"\n                          ? \"Please provide any additional details or special requests...\"\n                          : \"እባክዎን ማንኛውም ተጨማሪ ዝርዝሮች ወይም ልዩ ጥያቄዎች ያቅርቡ...\"\n                      }\n                      rows={3}\n                    />\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsDialogOpen(false)}\n                    >\n                      {language === \"en\" ? \"Cancel\" : \"ሰርዝ\"}\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                    >\n                      {language === \"en\" ? \"Submit Request\" : \"ጥያቄ አስገባ\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Modal Dialog for Appointment Form */}\n          {showModal && (\n            <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40\">\n              <div className=\"bg-white rounded-lg shadow-lg max-w-lg w-full p-6 relative animate-fade-in\">\n                <button\n                  className=\"absolute top-2 right-2 text-gray-500 hover:text-church-burgundy text-2xl font-bold\"\n                  onClick={() => setShowModal(false)}\n                  aria-label=\"Close\"\n                >\n                  ×\n                </button>\n                <CardTitle className=\"mb-2\">\n                  {language === \"en\" ? \"Request an Appointment\" : \"ቀጠሮ ይጠይቁ\"}\n                </CardTitle>\n                <CardDescription className=\"mb-4\">\n                  {language === \"en\"\n                    ? \"Select a service and fill out the form to request an appointment.\"\n                    : \"አገልግሎት ይምረጡ እና ቅጹን ይሙሉ ለቀጠሮ ለመጠየቅ።\"}\n                </CardDescription>\n                <form onSubmit={handleAppointmentSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"serviceType\">\n                      {language === \"en\" ? \"Service Type\" : \"የአገልግሎት አይነት\"}\n                    </Label>\n                    <select\n                      id=\"serviceType\"\n                      name=\"serviceType\"\n                      className=\"w-full border rounded px-3 py-2 mt-1\"\n                      required\n                    >\n                      {appointmentServices.map((service, idx) => (\n                        <option key={service.title + idx} value={service.title}>\n                          {service.title}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\">\n                        {language === \"en\" ? \"Name\" : \"ስም\"}\n                      </Label>\n                      <Input id=\"name\" name=\"name\" required />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\">\n                        {language === \"en\" ? \"Email\" : \"ኢሜይል\"}\n                      </Label>\n                      <Input id=\"email\" name=\"email\" type=\"email\" required />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">\n                        {language === \"en\" ? \"Phone\" : \"ስልክ\"}\n                      </Label>\n                      <Input id=\"phone\" name=\"phone\" type=\"tel\" required />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"date\">\n                        {language === \"en\" ? \"Date\" : \"ቀን\"}\n                      </Label>\n                      <Input\n                        id=\"date\"\n                        name=\"date\"\n                        type=\"date\"\n                        min={format(new Date(), \"yyyy-MM-dd\")}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"time\">\n                        {language === \"en\" ? \"Time\" : \"ሰዓት\"}\n                      </Label>\n                      <Input id=\"time\" name=\"time\" type=\"time\" required />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"notes\">\n                      {language === \"en\" ? \"Notes\" : \"ማስታወሻዎች\"}\n                    </Label>\n                    <Textarea\n                      id=\"notes\"\n                      name=\"notes\"\n                      placeholder={\n                        language === \"en\"\n                          ? \"Any additional information...\"\n                          : \"ማንኛውም ተጨማሪ መረጃ...\"\n                      }\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                  >\n                    {language === \"en\" ? \"Submit Request\" : \"ጥያቄ አስገባ\"}\n                  </Button>\n                </form>\n              </div>\n            </div>\n          )}\n\n          {/* Service lists (no appointment buttons) */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n            <Card>\n              <CardHeader className=\"bg-church-burgundy text-white\">\n                <CardTitle className=\"text-church-gold\">\n                  {t(\"regular_services\")}\n                </CardTitle>\n                <CardDescription className=\"text-white/80\">\n                  {language === \"en\"\n                    ? \"Our weekly and monthly recurring services\"\n                    : \"የእኛ ሳምንታዊ እና ወርሃዊ ተከታታይ አገልግሎቶች\"}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6\">\n                {regularServices.map((service, index) => (\n                  <div\n                    key={`regular-${index}`}\n                    className=\"border-l-2 border-church-gold pl-4 mb-6\"\n                  >\n                    <div className=\"mb-3 rounded-md overflow-hidden w-32 h-32 float-right ml-4\">\n                      <img\n                        src={getServiceImage(service.title)}\n                        alt={service.title}\n                        className=\"object-cover w-full h-full transition-transform hover:scale-105 duration-300 rounded-md\"\n                      />\n                    </div>\n                    <h3 className=\"text-xl font-serif text-church-burgundy\">\n                      {service.title}\n                    </h3>\n                    <p className=\"text-sm text-gray-500 mb-2\">{service.time}</p>\n                    <p className=\"text-gray-700\">{service.description}</p>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"bg-church-burgundy text-white\">\n                <CardTitle className=\"text-church-gold\">\n                  {t(\"special_services\")}\n                </CardTitle>\n                <CardDescription className=\"text-white/80\">\n                  {language === \"en\"\n                    ? \"Major feasts and celebrations throughout the year\"\n                    : \"ዋና ዋና በዓላት እና በአመቱ ውስጥ የሚከበሩ ክብረ በዓላት\"}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6\">\n                {specialServices.map((service, index) => (\n                  <div\n                    key={`special-${index}`}\n                    className=\"border-l-2 border-church-gold pl-4 mb-6\"\n                  >\n                    <div className=\"mb-3 rounded-md overflow-hidden w-32 h-32 float-right ml-4\">\n                      <img\n                        src={getServiceImage(service.title)}\n                        alt={service.title}\n                        className=\"object-cover w-full h-full transition-transform hover:scale-105 duration-300 rounded-md\"\n                      />\n                    </div>\n                    <h3 className=\"text-xl font-serif text-church-burgundy\">\n                      {service.title}\n                    </h3>\n                    <p className=\"text-sm text-gray-500 mb-2\">{service.time}</p>\n                    <p className=\"text-gray-700\">{service.description}</p>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>{t(\"children_services\")}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Accordion type=\"single\" collapsible>\n                <AccordionItem value=\"sunday-school\">\n                  <AccordionTrigger>\n                    {language === \"en\" ? \"Sunday School\" : \"የሰንበት ትምህርት ቤት\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"Sunday School classes for children ages 5-12 are held every Sunday from 9:00 AM to 12:00 PM. Children learn about the Orthodox faith, Bible stories, church traditions, Ethiopian Orthodox hymns, and Amharic language.\"\n                      : \"ከ5-12 ዓመት ለሆኑ ልጆች የሰንበት ትምህርት ቤት ትምህርቶች በየሰንበት ከ9፡00 ጠዋት እስከ 12፡00 ሰዓት ይካሄዳሉ። ልጆች ስለ ኦርቶዶክስ እምነት፣ የመጽሐፍ ቅዱስ ታሪኮች፣ የቤተክርስቲያን ወግ፣ የኢትዮጵያ ኦርቶዶክስ መዝሙሮች እና አማርኛ ቋንቋ ይማራሉ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n\n                <AccordionItem value=\"youth-program\">\n                  <AccordionTrigger>\n                    {language === \"en\" ? \"Youth Program\" : \"የወጣቶች ፕሮግራም\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"Our youth program for teenagers (13-18) provides spiritual guidance, church service training, community service opportunities, and cultural activities every Saturday from 3:00 PM to 6:00 PM. Youth also participate in choir and traditional Ethiopian Orthodox church music training.\"\n                      : \"ለወጣቶች (13-18) የሚሰጠው የወጣቶች ፕሮግራም መንፈሳዊ መመሪያ፣ የቤተክርስቲያን አገልግሎት ስልጠና፣ የማህበረሰብ አገልግሎት እድሎች እና በየሳምንቱ ቅዳሜ ከ3፡00 ምሽት እስከ 6፡00 ምሽት የባህል ስራዎችን ይሰጣል። ወጣቶች በዘማሪ ቡድን እና በባህላዊ የኢትዮጵያ ኦርቶዶክስ ቤተክርስቲያን ሙዚቃ ስልጠናም ይሳተፋሉ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n\n                <AccordionItem value=\"amharic-classes\">\n                  <AccordionTrigger>\n                    {language === \"en\"\n                      ? \"Amharic Language Classes\"\n                      : \"የአማርኛ ቋንቋ ትምህርት\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"We offer Amharic language classes for children of all ages on Saturdays from 10:00 AM to 12:00 PM. These classes help children connect with their Ethiopian heritage through language learning, including reading and writing in Fidel (Ethiopian script).\"\n                      : \"ለሁሉም ዕድሜ ልጆች በየሳምንቱ ቅዳሜ ከ10፡00 ጠዋት እስከ 12፡00 ሰዓት የአማርኛ ቋንቋ ትምህርት እንሰጣለን። እነዚህ ክፍሎች ልጆች ከኢትዮጵያዊ ሀረጋቸው ጋር በቋንቋ ትምህርት በኩል እንዲገናኙ ይረዳቸዋል፣ በፊደል ንባብና ጽሑፍን ጨምሮ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n\n                <AccordionItem value=\"mezmur-classes\">\n                  <AccordionTrigger>\n                    {language === \"en\"\n                      ? \"Traditional Church Music\"\n                      : \"የቤተክርስቲያን መዝሙር ትምህርት\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"Traditional Ethiopian Orthodox church music (Mezmur) classes are offered for both children and adults on Saturdays from 1:00 PM to 3:00 PM. Learn traditional hymns, chants, and the use of traditional instruments like the Begena, Kebero, and Sistrum.\"\n                      : \"ባህላዊ የኢትዮጵያ ኦርቶዶክስ የቤተክርስቲያን ሙዚቃ (መዝሙር) ትምህርቶች ለልጆችም ሆነ ለአዋቂዎች በየሳምንቱ ቅዳሜ ከ1፡00 ከሰዓት እስከ 3፡00 ከሰዓት ይሰጣሉ። ባህላዊ መዝሙሮችን፣ ዝማሬዎችን እና እንደ በገና፣ ከበሮ እና ሲስትሩም ያሉ ባህላዊ መሣሪያዎችን አጠቃቀም ይማሩ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n\n                <AccordionItem value=\"adult-education\">\n                  <AccordionTrigger>\n                    {language === \"en\"\n                      ? \"Adult Religious Education\"\n                      : \"የአዋቂዎች ሃይማኖታዊ ትምህርት\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"Adult religious education classes are held on Sundays after the Divine Liturgy from 1:00 PM to 2:30 PM. These classes cover Orthodox theology, church history, patristic teachings, and spiritual practices for daily life.\"\n                      : \"የአዋቂዎች ሃይማኖታዊ ትምህርት ክፍሎች በየሰንበቱ ከቅዳሴ በኋላ ከ1፡00 ከሰዓት እስከ 2፡30 ከሰዓት ይካሄዳሉ። እነዚህ ክፍሎች የኦርቶዶክስ ሥነ መለኮት፣ የቤተክርስቲያን ታሪክ፣ የአባቶች ትምህርቶች እና ለዕለት ተዕለት ሕይወት መንፈሳዊ ልምምዶችን ያካትታሉ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Services;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/AdminLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Analytics.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'subDays' is defined but never used.","line":46,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'startOfMonth' is defined but never used.","line":46,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'endOfMonth' is defined but never used.","line":46,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'Member' is defined but never used.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Database' is defined but never used.","line":48,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":163,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'formatPercentage' is assigned a value but never used.","line":171,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":25}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  Area,\n  AreaChart,\n} from \"recharts\";\nimport {\n  TrendingUp,\n  TrendingDown,\n  Users,\n  DollarSign,\n  Calendar,\n  Heart,\n  Download,\n  RefreshCw,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format, subDays, startOfMonth, endOfMonth } from \"date-fns\";\nimport { Member } from \"@/types/member\";\nimport { Database } from \"@/types/supabase\";\n\ninterface AnalyticsData {\n  donations: {\n    total: number;\n    monthly: Array<{ month: string; amount: number; count: number }>;\n    byPurpose: Array<{ purpose: string; amount: number; percentage: number }>;\n    trends: {\n      thisMonth: number;\n      lastMonth: number;\n      growth: number;\n    };\n  };\n  members: {\n    total: number;\n    monthly: Array<{ month: string; count: number }>;\n    byType: Array<{ type: string; count: number; percentage: number }>;\n    trends: {\n      thisMonth: number;\n      lastMonth: number;\n      growth: number;\n    };\n  };\n  events: {\n    total: number;\n    upcoming: number;\n    monthly: Array<{ month: string; count: number }>;\n    attendance: Array<{ event: string; attendance: number }>;\n  };\n  engagement: {\n    prayerRequests: number;\n    testimonials: number;\n    galleryViews: number;\n  };\n}\n\nconst COLORS = [\"#7d2224\", \"#d4af37\", \"#228b22\", \"#4169e1\", \"#ff6347\"];\n\nexport default function Analytics() {\n  const [data, setData] = useState<AnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState(\"6months\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { toast } = useToast();\n\n  const loadAnalyticsData = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Map timeRange to dateRange format expected by the API\n      const dateRangeMap = {\n        \"3months\": \"last90days\",\n        \"6months\": \"last180days\",\n        \"12months\": \"last365days\",\n      };\n\n      const dateRange = dateRangeMap[timeRange] || \"last30days\";\n\n      // Use the new analytics-reports edge function\n      const { data: reportData, error } = await supabase.functions.invoke(\n        \"supabase-functions-analytics-reports\",\n        {\n          body: {\n            reportType: activeTab === \"overview\" ? \"overview\" : activeTab,\n            dateRange,\n            filters: {},\n          },\n        },\n      );\n\n      if (error) throw error;\n\n      if (!reportData || !reportData.data) {\n        throw new Error(\"No data returned from analytics service\");\n      }\n\n      // Set the data based on the report type\n      if (\n        activeTab === \"overview\" ||\n        activeTab === \"donations\" ||\n        activeTab === \"members\" ||\n        activeTab === \"events\"\n      ) {\n        setData(reportData.data);\n      } else {\n        // For other tabs, we need to transform the data to match the expected format\n        const transformedData = {\n          donations: reportData.data.donations || {},\n          members: reportData.data.members || {},\n          events: reportData.data.events || {},\n          engagement: reportData.data.engagement || {},\n        };\n        setData(transformedData);\n      }\n    } catch (error) {\n      console.error(\"Error loading analytics:\", error);\n      toast({\n        title: \"Error\",\n        description:\n          \"Failed to load analytics data: \" +\n          (error instanceof Error ? error.message : String(error)),\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [timeRange, activeTab, toast]);\n\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [loadAnalyticsData]);\n\n  // These data processing functions have been moved to the edge function\n  // We'll keep simplified versions for any client-side processing if needed\n\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number): string => {\n    return `${value}%`;\n  };\n\n  const exportData = async () => {\n    if (!data) return;\n\n    try {\n      setLoading(true);\n\n      // Get full data for export using the edge function\n      const dateRangeMap = {\n        \"3months\": \"last90days\",\n        \"6months\": \"last180days\",\n        \"12months\": \"last365days\",\n      };\n\n      const dateRange = dateRangeMap[timeRange] || \"last30days\";\n\n      // Request full data for export\n      const { data: reportData, error } = await supabase.functions.invoke(\n        \"supabase-functions-analytics-reports\",\n        {\n          body: {\n            reportType: \"overview\",\n            dateRange,\n            filters: {},\n            includeRawData: true,\n          },\n        },\n      );\n\n      if (error) throw error;\n\n      const exportData = {\n        generatedAt: new Date().toISOString(),\n        timeRange,\n        dateRange,\n        summary: {\n          totalDonations: data.donations.total,\n          totalMembers: data.members.total,\n          totalEvents: data.events.total,\n          upcomingEvents: data.events.upcoming,\n        },\n        data: reportData.data,\n      };\n\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `church-analytics-${format(new Date(), \"yyyy-MM-dd\")}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Success\",\n        description: \"Analytics data exported successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error exporting data:\", error);\n      toast({\n        title: \"Error\",\n        description:\n          \"Failed to export analytics data: \" +\n          (error instanceof Error ? error.message : String(error)),\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-500\">No analytics data available</p>\n        <Button onClick={loadAnalyticsData} className=\"mt-4\">\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n            Analytics Dashboard\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Comprehensive insights into church operations\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n          <Select\n            value={timeRange}\n            onValueChange={(value) => {\n              setTimeRange(value);\n              // Reload data when time range changes\n              setTimeout(() => loadAnalyticsData(), 0);\n            }}\n          >\n            <SelectTrigger className=\"w-full sm:w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"3months\">Last 3 Months</SelectItem>\n              <SelectItem value=\"6months\">Last 6 Months</SelectItem>\n              <SelectItem value=\"12months\">Last 12 Months</SelectItem>\n            </SelectContent>\n          </Select>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={exportData}\n              variant=\"outline\"\n              className=\"flex-1 sm:flex-none\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Export Data</span>\n              <span className=\"sm:hidden\">Export</span>\n            </Button>\n            <Button\n              onClick={loadAnalyticsData}\n              variant=\"outline\"\n              className=\"flex-1 sm:flex-none\"\n            >\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Refresh</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Total Donations\"\n          value={`$${data.donations.total.toLocaleString()}`}\n          trend={data.donations.trends.growth}\n          icon={<DollarSign className=\"h-6 w-6\" />}\n          description=\"This month vs last month\"\n        />\n        <MetricCard\n          title=\"Active Members\"\n          value={data.members.total.toString()}\n          trend={data.members.trends.growth}\n          icon={<Users className=\"h-6 w-6\" />}\n          description=\"New registrations\"\n        />\n        <MetricCard\n          title=\"Upcoming Events\"\n          value={data.events.upcoming.toString()}\n          trend={0}\n          icon={<Calendar className=\"h-6 w-6\" />}\n          description=\"Scheduled events\"\n        />\n        <MetricCard\n          title=\"Prayer Requests\"\n          value={data.engagement.prayerRequests.toString()}\n          trend={0}\n          icon={<Heart className=\"h-6 w-6\" />}\n          description=\"Community engagement\"\n        />\n      </div>\n\n      <Tabs\n        value={activeTab}\n        onValueChange={(value) => {\n          setActiveTab(value);\n          // Reload data when tab changes\n          setTimeout(() => loadAnalyticsData(), 0);\n        }}\n      >\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"donations\">Donations</TabsTrigger>\n          <TabsTrigger value=\"members\">Members</TabsTrigger>\n          <TabsTrigger value=\"engagement\">Engagement</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Donations Trend</CardTitle>\n                <CardDescription>Donation amounts over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={data.donations.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip formatter={(value) => [`$${value}`, \"Amount\"]} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"amount\"\n                      stroke=\"#7d2224\"\n                      fill=\"#7d2224\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Member Growth</CardTitle>\n                <CardDescription>New member registrations</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={data.members.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"count\"\n                      stroke=\"#d4af37\"\n                      strokeWidth={3}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"donations\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Donations by Purpose</CardTitle>\n                <CardDescription>How donations are allocated</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={data.donations.byPurpose}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ purpose, percentage }) =>\n                        `${purpose} (${percentage}%)`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"amount\"\n                    >\n                      {data.donations.byPurpose.map((_, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => [`$${value}`, \"Amount\"]} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Donation Trends</CardTitle>\n                <CardDescription>\n                  Amount and frequency over time\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={data.donations.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"amount\" fill=\"#7d2224\" />\n                    <Bar dataKey=\"count\" fill=\"#d4af37\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"members\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Membership Types</CardTitle>\n                <CardDescription>\n                  Distribution of membership categories\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={data.members.byType}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ type, percentage }) =>\n                        `${type} (${percentage}%)`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                    >\n                      {data.members.byType.map((_, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Member Registration Trends</CardTitle>\n                <CardDescription>New members over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={data.members.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"count\"\n                      stroke=\"#228b22\"\n                      fill=\"#228b22\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"engagement\" className=\"space-y-6\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Prayer Requests\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.engagement.prayerRequests}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Total submitted</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Testimonials\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.engagement.testimonials}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Community stories</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Events</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.events.total}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Total organized</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nfunction MetricCard({\n  title,\n  value,\n  trend,\n  icon,\n  description,\n}: {\n  title: string;\n  value: string;\n  trend: number;\n  icon: React.ReactNode;\n  description: string;\n}) {\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">\n          {title}\n        </CardTitle>\n        <div className=\"text-church-burgundy\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-church-burgundy\">{value}</div>\n        <div className=\"flex items-center mt-2\">\n          {trend !== 0 && (\n            <div\n              className={`flex items-center text-xs ${\n                trend > 0 ? \"text-green-600\" : \"text-red-600\"\n              }`}\n            >\n              {trend > 0 ? (\n                <TrendingUp className=\"h-3 w-3 mr-1\" />\n              ) : (\n                <TrendingDown className=\"h-3 w-3 mr-1\" />\n              )}\n              {Math.abs(trend)}%\n            </div>\n          )}\n          <p className=\"text-xs text-gray-500 ml-2\">{description}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Appointments.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/BulkOperations.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":35,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is assigned a value but never used.","line":241,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":241,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Upload,\n  Download,\n  Mail,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/integrations/supabase/api\";\n\ninterface BulkOperation {\n  id: string;\n  type: \"import\" | \"export\" | \"delete\" | \"email\" | \"update\";\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\";\n  progress: number;\n  total: number;\n  message: string;\n  createdAt: Date;\n}\n\nexport default function BulkOperations() {\n  const [operations, setOperations] = useState<BulkOperation[]>([]);\n  const [bulkEmailContent, setBulkEmailContent] = useState({\n    subject: \"\",\n    content: \"\",\n  });\n  const [importData, setImportData] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState(\"members\");\n  const { toast } = useToast();\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const content = e.target?.result as string;\n      if (file.type === \"application/json\") {\n        setImportData(content);\n      } else if (file.type === \"text/csv\") {\n        // Convert CSV to JSON format\n        const lines = content.split(\"\\n\").filter((line) => line.trim());\n        if (lines.length < 2) {\n          throw new Error(\n            \"CSV must have at least a header row and one data row\",\n          );\n        }\n        const headers = lines[0].split(\",\").map((h) => h.trim());\n        const jsonData = lines\n          .slice(1)\n          .map((line) => {\n            const values = line.split(\",\");\n            const obj: any = {};\n            headers.forEach((header, index) => {\n              obj[header] = values[index]?.trim() || \"\";\n            });\n            return obj;\n          })\n          .filter((obj) => Object.values(obj).some((val) => val && val !== \"\"));\n        setImportData(JSON.stringify(jsonData, null, 2));\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const handleBulkImport = async (table: string) => {\n    if (!importData.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide data to import\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const data = JSON.parse(importData);\n      if (!Array.isArray(data)) {\n        throw new Error(\"Data must be an array\");\n      }\n      if (data.length === 0) {\n        throw new Error(\"Data array cannot be empty\");\n      }\n\n      const operation: BulkOperation = {\n        id: Date.now().toString(),\n        type: \"import\",\n        status: \"running\",\n        progress: 0,\n        total: data.length,\n        message: `Importing ${data.length} ${table} records...`,\n        createdAt: new Date(),\n      };\n\n      setOperations((prev) => [...prev, operation]);\n\n      // Process in batches\n      const batchSize = 10;\n      let processed = 0;\n\n      for (let i = 0; i < data.length; i += batchSize) {\n        const batch = data.slice(i, i + batchSize);\n\n        const { error } = await supabase.from(table).insert(batch);\n\n        if (error) {\n          console.error(`Batch ${i / batchSize + 1} failed:`, error);\n        }\n\n        processed += batch.length;\n\n        // Update progress\n        setOperations((prev) =>\n          prev.map((op) =>\n            op.id === operation.id\n              ? {\n                  ...op,\n                  progress: processed,\n                  message: `Imported ${processed}/${data.length} records`,\n                }\n              : op,\n          ),\n        );\n      }\n\n      // Mark as completed\n      setOperations((prev) =>\n        prev.map((op) =>\n          op.id === operation.id\n            ? {\n                ...op,\n                status: \"completed\",\n                message: `Successfully imported ${processed} records`,\n              }\n            : op,\n        ),\n      );\n\n      toast({\n        title: \"Success\",\n        description: `Imported ${processed} ${table} records`,\n      });\n\n      setImportData(\"\");\n    } catch (error) {\n      console.error(\"Import error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to import data. Please check the format.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkExport = async (table: string) => {\n    try {\n      const { data, error } = await supabase.from(table).select(\"*\");\n\n      if (error) throw error;\n\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `${table}-export-${new Date().toISOString().split(\"T\")[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Success\",\n        description: `Exported ${data?.length || 0} ${table} records`,\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to export data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkEmail = async () => {\n    if (!bulkEmailContent.subject || !bulkEmailContent.content) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide both subject and content\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Get all active newsletter subscribers\n      const { data: subscribers } = await supabase\n        .from(\"newsletter_subscribers\")\n        .select(\"*\")\n        .eq(\"subscribed\", true);\n      const activeSubscribers = subscribers || [];\n\n      if (activeSubscribers.length === 0) {\n        toast({\n          title: \"Warning\",\n          description: \"No active subscribers found\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Create email campaign\n      const { data: campaign } = await supabase\n        .from(\"email_campaigns\")\n        .insert({\n          name: `Bulk Email - ${new Date().toLocaleDateString()}`,\n          subject: bulkEmailContent.subject,\n          content: bulkEmailContent.content,\n          status: \"sent\",\n          recipient_count: activeSubscribers.length,\n          sent_count: activeSubscribers.length,\n          sent_at: new Date().toISOString(),\n        })\n        .select()\n        .single();\n\n      toast({\n        title: \"Success\",\n        description: `Email campaign created and sent to ${activeSubscribers.length} subscribers`,\n      });\n\n      setBulkEmailContent({ subject: \"\", content: \"\" });\n    } catch (error) {\n      console.error(\"Bulk email error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send bulk email\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n            Bulk Operations\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Manage data in bulk - import, export, and batch operations\n          </p>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"members\">Members</TabsTrigger>\n          <TabsTrigger value=\"events\">Events</TabsTrigger>\n          <TabsTrigger value=\"email\">Email Campaign</TabsTrigger>\n          <TabsTrigger value=\"operations\">Operations</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"members\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"h-5 w-5 mr-2\" />\n                  Import Members\n                </CardTitle>\n                <CardDescription>\n                  Upload member data from JSON or CSV files\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"member-file\">Upload File</Label>\n                  <Input\n                    id=\"member-file\"\n                    type=\"file\"\n                    accept=\".json,.csv\"\n                    onChange={handleFileUpload}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"member-data\">Or Paste JSON Data</Label>\n                  <Textarea\n                    id=\"member-data\"\n                    placeholder='[{\"full_name\": \"John Doe\", \"email\": \"john@example.com\", \"phone\": \"123-456-7890\"}]'\n                    value={importData}\n                    onChange={(e) => setImportData(e.target.value)}\n                    rows={8}\n                  />\n                </div>\n                <Button\n                  onClick={() => handleBulkImport(\"members\")}\n                  className=\"w-full\"\n                  disabled={!importData.trim()}\n                >\n                  Import Members\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Export Members\n                </CardTitle>\n                <CardDescription>\n                  Download all member data as JSON\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Export all member records including contact information,\n                  membership details, and registration dates.\n                </p>\n                <Button\n                  onClick={() => handleBulkExport(\"members\")}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export All Members\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"events\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"h-5 w-5 mr-2\" />\n                  Import Events\n                </CardTitle>\n                <CardDescription>\n                  Upload event data from JSON or CSV files\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event-file\">Upload File</Label>\n                  <Input\n                    id=\"event-file\"\n                    type=\"file\"\n                    accept=\".json,.csv\"\n                    onChange={handleFileUpload}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event-data\">Or Paste JSON Data</Label>\n                  <Textarea\n                    id=\"event-data\"\n                    placeholder='[{\"title\": \"Sunday Service\", \"event_date\": \"2024-01-01\", \"event_time\": \"10:00\", \"location\": \"Main Hall\"}]'\n                    value={importData}\n                    onChange={(e) => setImportData(e.target.value)}\n                    rows={8}\n                  />\n                </div>\n                <Button\n                  onClick={() => handleBulkImport(\"events\")}\n                  className=\"w-full\"\n                  disabled={!importData.trim()}\n                >\n                  Import Events\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Export Events\n                </CardTitle>\n                <CardDescription>\n                  Download all event data as JSON\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Export all event records including dates, times, locations,\n                  and descriptions.\n                </p>\n                <Button\n                  onClick={() => handleBulkExport(\"events\")}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export All Events\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"email\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"h-5 w-5 mr-2\" />\n                Bulk Email Campaign\n              </CardTitle>\n              <CardDescription>\n                Send emails to all active subscribers\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email-subject\">Subject</Label>\n                <Input\n                  id=\"email-subject\"\n                  placeholder=\"Enter email subject\"\n                  value={bulkEmailContent.subject}\n                  onChange={(e) =>\n                    setBulkEmailContent((prev) => ({\n                      ...prev,\n                      subject: e.target.value,\n                    }))\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email-content\">Content</Label>\n                <Textarea\n                  id=\"email-content\"\n                  placeholder=\"Enter email content...\"\n                  value={bulkEmailContent.content}\n                  onChange={(e) =>\n                    setBulkEmailContent((prev) => ({\n                      ...prev,\n                      content: e.target.value,\n                    }))\n                  }\n                  rows={10}\n                />\n              </div>\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                <div className=\"flex items-center\">\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-600 mr-2\" />\n                  <p className=\"text-sm text-yellow-800\">\n                    This will send the email to all active subscribers. Make\n                    sure to review the content carefully.\n                  </p>\n                </div>\n              </div>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    className=\"w-full\"\n                    disabled={\n                      !bulkEmailContent.subject || !bulkEmailContent.content\n                    }\n                  >\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Send Bulk Email\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Confirm Bulk Email</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to send this email to all active\n                      subscribers? This action cannot be undone.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleBulkEmail}>\n                      Send Email\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"operations\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Operation History</CardTitle>\n              <CardDescription>\n                Track the status of bulk operations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {operations.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">No operations yet</p>\n                  <p className=\"text-sm text-gray-400 mt-1\">\n                    Bulk operations will appear here when you perform them\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {operations.map((operation) => (\n                    <div key={operation.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          {operation.status === \"completed\" ? (\n                            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                          ) : operation.status === \"failed\" ? (\n                            <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                          ) : (\n                            <div className=\"h-5 w-5 border-2 border-church-burgundy border-t-transparent rounded-full animate-spin\" />\n                          )}\n                          <span className=\"font-medium capitalize\">\n                            {operation.type} Operation\n                          </span>\n                        </div>\n                        <span className=\"text-sm text-gray-500\">\n                          {operation.createdAt.toLocaleString()}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {operation.message}\n                      </p>\n                      {operation.total > 0 && (\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-church-burgundy h-2 rounded-full transition-all duration-300\"\n                            style={{\n                              width: `${(operation.progress / operation.total) * 100}%`,\n                            }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/ContentScheduler.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAndPublishContent'. Either include it or remove the dependency array.","line":112,"column":6,"nodeType":"ArrayExpression","endLine":112,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAndPublishContent]","fix":{"range":[2951,2953],"text":"[checkAndPublishContent]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":43,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'setStats' is assigned a value but never used.","line":78,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'eventsRes' is assigned a value but never used.","line":135,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":135,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'membersRes' is assigned a value but never used.","line":136,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'testimonialsRes' is assigned a value but never used.","line":138,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'prayerRequestsRes' is assigned a value but never used.","line":139,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'sermonsRes' is assigned a value but never used.","line":140,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'recentDonationAmount' is assigned a value but never used.","line":174,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'activityData' is not defined.","line":178,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":58},{"ruleId":"no-undef","severity":2,"message":"'activityData' is not defined.","line":178,"column":62,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":74},{"ruleId":"no-unused-vars","severity":2,"message":"'loadRecentActivity' is assigned a value but never used.","line":192,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":192,"endColumn":27}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Calendar,\n  Image,\n  Users,\n  DollarSign,\n  MessageSquare,\n  Heart,\n  TrendingUp,\n  Activity,\n  Shield,\n  Upload,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport AdminSyncStatus from \"@/components/AdminSyncStatus\";\nimport AuditLog from \"@/components/AuditLog\";\nimport ErrorDiagnostics from \"@/components/ErrorDiagnostics\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport {\n  AdminDiagnostics,\n  type DiagnosticResult,\n} from \"@/utils/adminDiagnostics\";\n\ninterface DashboardStats {\n  totalEvents: number;\n  totalMembers: number;\n  totalDonations: number;\n  totalTestimonials: number;\n  totalPrayerRequests: number;\n  totalSermons: number;\n  recentDonationAmount: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  type:\n    | \"event\"\n    | \"member\"\n    | \"donation\"\n    | \"testimonial\"\n    | \"prayer_request\"\n    | \"sermon\";\n  title: string;\n  description: string;\n  created_at: string;\n}\n\nexport default function Dashboard() {\n  const [stats, setStats] = useState<DashboardStats>({\n    totalEvents: 0,\n    totalMembers: 0,\n    totalDonations: 0,\n    totalTestimonials: 0,\n    totalPrayerRequests: 0,\n    totalSermons: 0,\n    recentDonationAmount: 0,\n  });\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogLoading, setDialogLoading] = useState(false);\n  const [openDialog, setOpenDialog] = useState<string | null>(null);\n  const [diagnostics, setDiagnostics] = useState<DiagnosticResult[]>([]);\n  const [runningDiagnostics, setRunningDiagnostics] = useState(false);\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  // Data context for sync operations\n  // const { forceSync } = useDataContext(); // Commented to prevent infinite loops\n\n  // Move useCallback hooks above useEffect to avoid use-before-assign\n  const runDiagnostics = useCallback(async () => {\n    setRunningDiagnostics(true);\n    try {\n      const results = await AdminDiagnostics.runFullDiagnostics();\n      setDiagnostics(results);\n    } catch (error) {\n      console.error(\"Diagnostics failed:\", error);\n    } finally {\n      setRunningDiagnostics(false);\n    }\n  }, []);\n\n  const loadDashboardData = useCallback(async () => {\n    try {\n      setLoading(true);\n      console.log(\"Loading dashboard data...\");\n\n      // Load statistics from all tables with error handling for each\n      const results = await Promise.allSettled([\n        supabase.from(\"events\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"members\").select(\"*\", { count: \"exact\", head: true }),\n        supabase\n          .from(\"donations\")\n          .select(\"amount, created_at\")\n          .order(\"created_at\", { ascending: false }),\n        supabase\n          .from(\"testimonials\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabase\n          .from(\"prayer_requests\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"sermons\").select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n      // Extract results with fallbacks\n      const [\n        eventsRes,\n        membersRes,\n        donationsRes,\n        testimonialsRes,\n        prayerRequestsRes,\n        sermonsRes,\n      ] = results.map((result, index) => {\n        const tableNames = [\n          \"events\",\n          \"members\",\n          \"donations\",\n          \"testimonials\",\n          \"prayer_requests\",\n          \"sermons\",\n        ];\n        if (result.status === \"rejected\") {\n          console.error(\n            `Dashboard data load failed for ${tableNames[index]}:`,\n            result.reason,\n          );\n          toast({\n            title: \"Warning\",\n            description: `Failed to load ${tableNames[index]} data`,\n            variant: \"destructive\",\n          });\n          return { data: null, count: 0, error: result.reason };\n        }\n        return result.value;\n      });\n\n      // Calculate recent donation amount (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const recentDonations =\n        donationsRes?.data?.filter(\n          (d) => d?.created_at && new Date(d.created_at) >= thirtyDaysAgo,\n        ) || [];\n\n      const recentDonationAmount = recentDonations.reduce(\n        (sum, d) => sum + (d?.amount || 0),\n        0,\n      );\n      const safeActivityData = Array.isArray(activityData) ? activityData : [];\n      setRecentActivity(safeActivityData);\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load dashboard data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  const loadRecentActivity = async () => {\n    try {\n      const activities: RecentActivity[] = [];\n\n      // Get recent events with error handling\n      try {\n        const { data: events, error: eventsError } = await supabase\n          .from(\"events\")\n          .select(\"id, title, description, created_at\")\n          .order(\"created_at\", { ascending: false })\n          .limit(3);\n\n        if (eventsError) {\n          console.error(\"Error loading recent events:\", eventsError);\n        } else if (events && Array.isArray(events)) {\n          events.forEach((event) => {\n            if (event?.id && event?.title && event?.created_at) {\n              activities.push({\n                id: event.id,\n                type: \"event\",\n                title: `New Event: ${event.title}`,\n                description: event.description || \"No description\",\n                created_at: event.created_at,\n              });\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to load recent events:\", error);\n      }\n\n      // Get recent members with error handling\n      try {\n        const { data: members, error: membersError } = await supabase\n          .from(\"members\")\n          .select(\"id, full_name, created_at\")\n          .order(\"created_at\", { ascending: false })\n          .limit(3);\n\n        if (membersError) {\n          console.error(\"Error loading recent members:\", membersError);\n        } else if (members && Array.isArray(members)) {\n          members.forEach((member) => {\n            if (member?.id && member?.full_name && member?.created_at) {\n              activities.push({\n                id: member.id,\n                type: \"member\",\n                title: `New Member: ${member.full_name}`,\n                description: \"Joined the church community\",\n                created_at: member.created_at,\n              });\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to load recent members:\", error);\n      }\n\n      // Sort by creation date and take the most recent 6\n      activities.sort(\n        (a, b) =>\n          new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),\n      );\n      setRecentActivity(activities.slice(0, 6));\n    } catch (error) {\n      console.error(\"Error loading recent activity:\", error);\n    }\n  };\n\n  const getActivityIcon = (type: RecentActivity[\"type\"]) => {\n    switch (type) {\n      case \"event\":\n        return <Calendar className=\"h-4 w-4\" />;\n      case \"member\":\n        return <Users className=\"h-4 w-4\" />;\n      case \"donation\":\n        return <DollarSign className=\"h-4 w-4\" />;\n      case \"testimonial\":\n        return <MessageSquare className=\"h-4 w-4\" />;\n      case \"prayer_request\":\n        return <Heart className=\"h-4 w-4\" />;\n      case \"sermon\":\n        return <Activity className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  const handleCreateEvent = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      setDialogLoading(true);\n      const form = e.target as HTMLFormElement;\n      const formData = new FormData(form);\n\n      try {\n        const eventData = {\n          title: formData.get(\"title\") as string,\n          description: formData.get(\"description\") as string,\n          event_date: formData.get(\"event_date\") as string,\n          event_time: (formData.get(\"event_time\") as string) || null,\n          location: (formData.get(\"location\") as string) || null,\n          is_featured: false,\n          image_url: null,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        };\n\n        console.log(\"Creating event with data:\", eventData);\n\n        const { data, error } = await supabase\n          .from(\"events\")\n          .insert([eventData])\n          .select()\n          .single();\n\n        if (error) {\n          console.error(\"Supabase error:\", error);\n          throw error;\n        }\n\n        console.log(\"Event created successfully:\", data);\n\n        toast({\n          title: \"Success\",\n          description: \"Event created successfully\",\n        });\n        setOpenDialog(null);\n        form.reset();\n        loadDashboardData();\n\n        // Notify data sync service\n        dataSyncService.notifyAdminAction(\"create\", \"events\", data);\n      } catch (error) {\n        console.error(\"Error creating event:\", error);\n        const errorMessage =\n          error instanceof Error ? error.message : \"Unknown error\";\n        toast({\n          title: \"Error\",\n          description: `Failed to create event: ${errorMessage}`,\n          variant: \"destructive\",\n        });\n      } finally {\n        setDialogLoading(false);\n      }\n    },\n    [toast, loadDashboardData],\n  );\n\n  const handleCreateMember = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      setDialogLoading(true);\n      const form = e.target as HTMLFormElement;\n      const formData = new FormData(form);\n\n      try {\n        const fullName = formData.get(\"full_name\") as string;\n        const nameParts = fullName.trim().split(\" \");\n        const firstName = nameParts[0] || \"\";\n        const lastName = nameParts.slice(1).join(\" \") || \"\";\n\n        const memberData = {\n          full_name: fullName,\n          email: (formData.get(\"email\") as string) || null,\n          phone: (formData.get(\"phone\") as string) || null,\n          address: (formData.get(\"address\") as string) || null,\n          membership_type:\n            (formData.get(\"membership_type\") as string) || \"regular\",\n          membership_status: \"active\",\n          join_date: new Date().toISOString(),\n          membership_date: new Date().toISOString(),\n          registration_date: new Date().toISOString().split(\"T\")[0],\n          first_name: firstName,\n          last_name: lastName,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        };\n\n        console.log(\"Creating member with data:\", memberData);\n\n        const { data, error } = await supabase\n          .from(\"members\")\n          .insert([memberData])\n          .select()\n          .single();\n\n        if (error) {\n          console.error(\"Supabase error:\", error);\n          throw error;\n        }\n\n        console.log(\"Member created successfully:\", data);\n\n        toast({\n          title: \"Success\",\n          description: \"Member added successfully\",\n        });\n        setOpenDialog(null);\n        form.reset();\n        loadDashboardData();\n\n        // Notify data sync service\n        dataSyncService.notifyAdminAction(\"create\", \"members\", data);\n      } catch (error) {\n        console.error(\"Error creating member:\", error);\n        const errorMessage =\n          error instanceof Error ? error.message : \"Unknown error\";\n        toast({\n          title: \"Error\",\n          description: `Failed to add member: ${errorMessage}`,\n          variant: \"destructive\",\n        });\n      } finally {\n        setDialogLoading(false);\n      }\n    },\n    [toast, loadDashboardData],\n  );\n\n  const handleCreateAdmin = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      setDialogLoading(true);\n      const form = e.target as HTMLFormElement;\n      const formData = new FormData(form);\n\n      try {\n        const email = formData.get(\"email\") as string;\n\n        // Check if admin already exists\n        const { data: existingAdmin } = await supabase\n          .from(\"profiles\")\n          .select(\"id\")\n          .eq(\"email\", email)\n          .single();\n\n        if (existingAdmin) {\n          throw new Error(\"Admin with this email already exists\");\n        }\n\n        const adminData = {\n          id: crypto.randomUUID(),\n          email: email,\n          role: \"admin\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        };\n\n        console.log(\"Creating admin with data:\", adminData);\n\n        const { data, error } = await supabase\n          .from(\"profiles\")\n          .insert([adminData])\n          .select()\n          .single();\n\n        if (error) {\n          console.error(\"Supabase error:\", error);\n          throw error;\n        }\n\n        console.log(\"Admin created successfully:\", data);\n\n        toast({\n          title: \"Success\",\n          description:\n            \"Admin user created successfully. They can now register with this email.\",\n        });\n        setOpenDialog(null);\n        form.reset();\n        loadDashboardData();\n\n        // Notify data sync service\n        dataSyncService.notifyAdminAction(\"create\", \"profiles\", data);\n      } catch (error) {\n        console.error(\"Error creating admin:\", error);\n        const errorMessage =\n          error instanceof Error ? error.message : \"Unknown error\";\n        toast({\n          title: \"Error\",\n          description: `Failed to create admin user: ${errorMessage}`,\n          variant: \"destructive\",\n        });\n      } finally {\n        setDialogLoading(false);\n      }\n    },\n    [toast, loadDashboardData],\n  );\n\n  const handleUploadImage = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      setDialogLoading(true);\n      const form = e.target as HTMLFormElement;\n      const formData = new FormData(form);\n      const file = formData.get(\"file\") as File;\n\n      if (!file) {\n        toast({\n          title: \"Error\",\n          description: \"Please select a file\",\n          variant: \"destructive\",\n        });\n        setDialogLoading(false);\n        return;\n      }\n\n      // Validate file type\n      if (!file.type.startsWith(\"image/\")) {\n        toast({\n          title: \"Error\",\n          description: \"Please select a valid image file\",\n          variant: \"destructive\",\n        });\n        setDialogLoading(false);\n        return;\n      }\n\n      // Validate file size (max 5MB)\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"Error\",\n          description: \"File size must be less than 5MB\",\n          variant: \"destructive\",\n        });\n        setDialogLoading(false);\n        return;\n      }\n\n      try {\n        console.log(\"Starting image upload:\", file.name, file.size, file.type);\n\n        // Upload file to storage bucket\n        const fileExt = file.name.split(\".\").pop();\n        const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;\n        const filePath = `gallery/${fileName}`;\n\n        const { data: uploadData, error: uploadError } = await supabase.storage\n          .from(\"images\")\n          .upload(filePath, file, {\n            cacheControl: \"3600\",\n            upsert: false,\n          });\n\n        if (uploadError) {\n          console.error(\"Upload error:\", uploadError);\n          throw uploadError;\n        }\n\n        console.log(\"File uploaded successfully:\", uploadData);\n\n        // Get the public URL\n        const {\n          data: { publicUrl },\n        } = supabase.storage.from(\"images\").getPublicUrl(filePath);\n\n        console.log(\"Public URL:\", publicUrl);\n\n        // Create database entry\n        const galleryData = {\n          title: formData.get(\"title\") as string,\n          description: (formData.get(\"description\") as string) || null,\n          image_url: publicUrl,\n          created_at: new Date().toISOString(),\n        };\n\n        console.log(\"Creating gallery entry:\", galleryData);\n\n        const { data, error: dbError } = await supabase\n          .from(\"gallery\")\n          .insert([galleryData])\n          .select()\n          .single();\n\n        if (dbError) {\n          console.error(\"Database error:\", dbError);\n          throw dbError;\n        }\n\n        console.log(\"Gallery entry created successfully:\", data);\n\n        toast({\n          title: \"Success\",\n          description: \"Image uploaded successfully\",\n        });\n        setOpenDialog(null);\n        form.reset();\n        loadDashboardData();\n\n        // Notify data sync service\n        dataSyncService.notifyAdminAction(\"create\", \"gallery\", data);\n      } catch (error) {\n        console.error(\"Error uploading image:\", error);\n        const errorMessage =\n          error instanceof Error ? error.message : \"Unknown error\";\n        toast({\n          title: \"Error\",\n          description: `Failed to upload image: ${errorMessage}`,\n          variant: \"destructive\",\n        });\n      } finally {\n        setDialogLoading(false);\n      }\n    },\n    [toast, loadDashboardData],\n  );\n\n  const handleCreateSermon = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      setDialogLoading(true);\n      const form = e.target as HTMLFormElement;\n      const formData = new FormData(form);\n\n      try {\n        const sermonData = {\n          title: formData.get(\"title\") as string,\n          description: (formData.get(\"description\") as string) || null,\n          scripture_reference:\n            (formData.get(\"scripture_reference\") as string) || null,\n          audio_url: (formData.get(\"audio_url\") as string) || null,\n          preacher: (formData.get(\"preacher\") as string) || null,\n          sermon_date: formData.get(\"sermon_date\") as string,\n          is_featured: false,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        };\n\n        console.log(\"Creating sermon with data:\", sermonData);\n\n        const { data, error } = await supabase\n          .from(\"sermons\")\n          .insert([sermonData])\n          .select()\n          .single();\n\n        if (error) {\n          console.error(\"Supabase error:\", error);\n          throw error;\n        }\n\n        console.log(\"Sermon created successfully:\", data);\n\n        toast({\n          title: \"Success\",\n          description: \"Sermon added successfully\",\n        });\n        setOpenDialog(null);\n        form.reset();\n        loadDashboardData();\n\n        // Notify data sync service\n        dataSyncService.notifyAdminAction(\"create\", \"sermons\", data);\n      } catch (error) {\n        console.error(\"Error creating sermon:\", error);\n        const errorMessage =\n          error instanceof Error ? error.message : \"Unknown error\";\n        toast({\n          title: \"Error\",\n          description: `Failed to add sermon: ${errorMessage}`,\n          variant: \"destructive\",\n        });\n      } finally {\n        setDialogLoading(false);\n      }\n    },\n    [toast, loadDashboardData],\n  );\n\n  useEffect(() => {\n    loadDashboardData();\n    runDiagnostics();\n  }, [loadDashboardData, runDiagnostics]);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n          Admin Dashboard\n        </h1>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={loadDashboardData}\n            variant=\"outline\"\n            className=\"w-full sm:w-auto\"\n          >\n            Refresh Data\n          </Button>\n          <Button\n            onClick={runDiagnostics}\n            variant=\"outline\"\n            disabled={runningDiagnostics}\n            className=\"w-full sm:w-auto\"\n          >\n            {runningDiagnostics ? \"Running...\" : \"Run Diagnostics\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <StatsCard\n          title=\"Total Events\"\n          value={stats.totalEvents.toString()}\n          description=\"Scheduled events\"\n          icon={<Calendar className=\"h-6 w-6\" />}\n          trend=\"+2 this month\"\n        />\n        <StatsCard\n          title=\"Church Members\"\n          value={stats.totalMembers.toString()}\n          description=\"Registered members\"\n          icon={<Users className=\"h-6 w-6\" />}\n          trend=\"+5 this month\"\n        />\n        <StatsCard\n          title=\"Recent Donations\"\n          value={`$${stats.recentDonationAmount.toLocaleString()}`}\n          description=\"Last 30 days\"\n          icon={<DollarSign className=\"h-6 w-6\" />}\n          trend=\"+12% from last month\"\n        />\n        <StatsCard\n          title=\"Prayer Requests\"\n          value={stats.totalPrayerRequests.toString()}\n          description=\"Pending requests\"\n          icon={<Heart className=\"h-6 w-6\" />}\n          trend=\"3 new today\"\n        />\n      </div>\n\n      {/* Secondary Stats */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <StatsCard\n          title=\"Sermons\"\n          value={stats.totalSermons.toString()}\n          description=\"Available sermons\"\n          icon={<Activity className=\"h-6 w-6\" />}\n          trend=\"1 new this week\"\n        />\n        <StatsCard\n          title=\"Testimonials\"\n          value={stats.totalTestimonials.toString()}\n          description=\"Approved testimonials\"\n          icon={<MessageSquare className=\"h-6 w-6\" />}\n          trend=\"2 pending approval\"\n        />\n        <StatsCard\n          title=\"Total Donations\"\n          value={stats.totalDonations.toString()}\n          description=\"All time donations\"\n          icon={<TrendingUp className=\"h-6 w-6\" />}\n          trend=\"Growing steadily\"\n        />\n      </div>\n\n      {/* Recent Activity, Quick Actions, and Sync Status */}\n      <div className=\"grid gap-4 lg:grid-cols-3\">\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n            <CardDescription>\n              Latest updates across the platform\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Array.isArray(recentActivity) && recentActivity.length > 0 ? (\n                recentActivity.map((activity) => {\n                  if (!activity || !activity.id) {\n                    console.warn(\"Invalid activity object:\", activity);\n                    return null;\n                  }\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start space-x-3 p-3 rounded-lg border\"\n                    >\n                      <div className=\"flex-shrink-0 mt-1\">\n                        {getActivityIcon(activity.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {activity.title || \"No title\"}\n                        </p>\n                        <p className=\"text-sm text-gray-500 truncate\">\n                          {activity.description || \"No description\"}\n                        </p>\n                        <p className=\"text-xs text-gray-400 mt-1\">\n                          {activity.created_at\n                            ? new Date(activity.created_at).toLocaleDateString()\n                            : \"No date\"}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })\n              ) : (\n                <p className=\"text-gray-500 text-center py-4\">\n                  No recent activity\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>Common administrative tasks</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-3\">\n              {/* Create Event Dialog */}\n              <Dialog\n                open={openDialog === \"event\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"event\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Create New Event\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Event</DialogTitle>\n                    <DialogDescription>\n                      Add a new church event\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateEvent} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"title\">Event Title</Label>\n                      <Input id=\"title\" name=\"title\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea id=\"description\" name=\"description\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"event_date\">Date</Label>\n                      <Input\n                        id=\"event_date\"\n                        name=\"event_date\"\n                        type=\"date\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"event_time\">Time</Label>\n                      <Input id=\"event_time\" name=\"event_time\" type=\"time\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"location\">Location</Label>\n                      <Input id=\"location\" name=\"location\" />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Creating...\" : \"Create Event\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Add Member Dialog */}\n              <Dialog\n                open={openDialog === \"member\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"member\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    Add New Member\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Member</DialogTitle>\n                    <DialogDescription>\n                      Register a new church member\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateMember} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"full_name\">Full Name</Label>\n                      <Input id=\"full_name\" name=\"full_name\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input id=\"email\" name=\"email\" type=\"email\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"phone\">Phone</Label>\n                      <Input id=\"phone\" name=\"phone\" type=\"tel\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"address\">Address</Label>\n                      <Input id=\"address\" name=\"address\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"membership_type\">Membership Type</Label>\n                      <Select name=\"membership_type\" defaultValue=\"regular\">\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select membership type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"regular\">Regular</SelectItem>\n                          <SelectItem value=\"student\">Student</SelectItem>\n                          <SelectItem value=\"senior\">Senior</SelectItem>\n                          <SelectItem value=\"family\">Family</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Adding...\" : \"Add Member\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Add Admin Dialog */}\n              <Dialog\n                open={openDialog === \"admin\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"admin\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Add New Admin\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Admin</DialogTitle>\n                    <DialogDescription>\n                      Create a new admin user\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateAdmin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"admin_email\">Email</Label>\n                      <Input\n                        id=\"admin_email\"\n                        name=\"email\"\n                        type=\"email\"\n                        required\n                      />\n                    </div>\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                      <p className=\"text-sm text-yellow-800\">\n                        <strong>Note:</strong> The admin will need to register\n                        with this email address using the admin registration\n                        process.\n                      </p>\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Creating...\" : \"Create Admin\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Upload Image Dialog */}\n              <Dialog\n                open={openDialog === \"image\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"image\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Image className=\"h-4 w-4 mr-2\" />\n                    Upload Gallery Image\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Upload Gallery Image</DialogTitle>\n                    <DialogDescription>\n                      Add a new image to the gallery\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleUploadImage} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"file\">Image File</Label>\n                      <Input\n                        id=\"file\"\n                        name=\"file\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"image_title\">Title</Label>\n                      <Input id=\"image_title\" name=\"title\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"image_description\">Description</Label>\n                      <Textarea id=\"image_description\" name=\"description\" />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Uploading...\" : \"Upload Image\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Add Sermon Dialog */}\n              <Dialog\n                open={openDialog === \"sermon\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"sermon\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Activity className=\"h-4 w-4 mr-2\" />\n                    Add New Sermon\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Sermon</DialogTitle>\n                    <DialogDescription>\n                      Add a sermon to the collection\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateSermon} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"sermon_title\">Sermon Title</Label>\n                      <Input id=\"sermon_title\" name=\"title\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"sermon_description\">Description</Label>\n                      <Textarea id=\"sermon_description\" name=\"description\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"scripture_reference\">\n                        Scripture Reference\n                      </Label>\n                      <Input\n                        id=\"scripture_reference\"\n                        name=\"scripture_reference\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"preacher\">Preacher</Label>\n                      <Input id=\"preacher\" name=\"preacher\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"sermon_date\">Sermon Date</Label>\n                      <Input\n                        id=\"sermon_date\"\n                        name=\"sermon_date\"\n                        type=\"date\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"audio_url\">Audio URL (optional)</Label>\n                      <Input id=\"audio_url\" name=\"audio_url\" type=\"url\" />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Adding...\" : \"Add Sermon\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Navigation Actions */}\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/analytics\")}\n              >\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\n                View Analytics\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/bulk-operations\")}\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Bulk Operations\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/testimonials\")}\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Review Testimonials\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/prayer-requests\")}\n              >\n                <Heart className=\"h-4 w-4 mr-2\" />\n                View Prayer Requests\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sync Status Panel */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Status</CardTitle>\n              <CardDescription>Real-time sync and git status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <AdminSyncStatus />\n            </CardContent>\n          </Card>\n\n          <ErrorDiagnostics />\n\n          {/* System Diagnostics */}\n          <Card>\n            <CardHeader>\n              <CardTitle>System Diagnostics</CardTitle>\n              <CardDescription>Component health status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {diagnostics.length > 0 ? (\n                  diagnostics.map((result, index) => (\n                    <div\n                      key={index}\n                      className={`flex items-center justify-between p-2 rounded text-sm ${\n                        result.status === \"success\"\n                          ? \"bg-green-50 text-green-800\"\n                          : result.status === \"warning\"\n                            ? \"bg-yellow-50 text-yellow-800\"\n                            : \"bg-red-50 text-red-800\"\n                      }`}\n                    >\n                      <span className=\"font-medium\">{result.component}</span>\n                      <span className=\"text-xs\">{result.message}</span>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-gray-500 text-center py-4\">\n                    {runningDiagnostics\n                      ? \"Running diagnostics...\"\n                      : \"No diagnostics run yet\"}\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Audit Log Section */}\n      <div className=\"mt-8\">\n        <AuditLog />\n      </div>\n    </div>\n  );\n}\n\nconst StatsCard = React.memo(function StatsCard({\n  title,\n  value,\n  description,\n  icon,\n  trend,\n}: {\n  title: string;\n  value: string;\n  description: string;\n  icon: React.ReactNode;\n  trend?: string;\n}) {\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">\n          {title}\n        </CardTitle>\n        <div className=\"text-church-burgundy\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-church-burgundy\">{value}</div>\n        <p className=\"text-xs text-gray-500 mt-1\">{description}</p>\n        {trend && (\n          <p className=\"text-xs text-green-600 mt-2 flex items-center\">\n            <TrendingUp className=\"h-3 w-3 mr-1\" />\n            {trend}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Donations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/EmailMarketing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/EmailTemplates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Events.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_url' is defined but never used.","line":71,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Calendar,\n  MapPin,\n  Clock,\n  Upload,\n  Loader2,\n} from \"lucide-react\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface Event {\n  id: string;\n  title: string;\n  description: string | null;\n  event_date: string;\n  event_time: string | null;\n  location: string | null;\n  image_url: string | null;\n  is_featured: boolean;\n  created_at: string;\n}\n\ninterface FileUploadProps {\n  onFileUpload: (_url: string) => void;\n  defaultImageUrl?: string | null;\n}\n\n// File Upload Component\nconst FileUpload: React.FC<FileUploadProps> = ({\n  onFileUpload,\n  defaultImageUrl,\n}) => {\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(\n    defaultImageUrl || null,\n  );\n  const { toast } = useToast();\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const selectedFile = e.target.files[0];\n      setFile(selectedFile);\n\n      // Create a preview URL\n      const objectUrl = URL.createObjectURL(selectedFile);\n      setPreviewUrl(objectUrl);\n    }\n  };\n\n  const uploadFile = async () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to upload\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    setProgress(0);\n\n    try {\n      // Create a unique file path\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;\n      const filePath = `events/${fileName}`;\n\n      // Upload the file to Supabase Storage - removed onUploadProgress\n      const { error } = await supabase.storage\n        .from(\"images\")\n        .upload(filePath, file, {\n          cacheControl: \"3600\",\n          upsert: false,\n        });\n\n      if (error) throw error;\n\n      // Simulate progress for user feedback\n      setProgress(100);\n\n      // Get the public URL\n      const { data: publicUrlData } = supabase.storage\n        .from(\"images\")\n        .getPublicUrl(filePath);\n\n      // Pass the URL back to the parent component\n      onFileUpload(publicUrlData.publicUrl);\n\n      toast({\n        title: \"Upload successful\",\n        description: \"Image has been uploaded successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      toast({\n        title: \"Upload failed\",\n        description:\n          error instanceof Error\n            ? error.message\n            : \"An error occurred during upload\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-4\">\n        <Input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileChange}\n          disabled={uploading}\n        />\n        <Button\n          type=\"button\"\n          onClick={uploadFile}\n          disabled={!file || uploading}\n          variant=\"secondary\"\n        >\n          {uploading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Uploading...\n            </>\n          ) : (\n            <>\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Upload\n            </>\n          )}\n        </Button>\n      </div>\n\n      {uploading && <Progress value={progress} className=\"h-2\" />}\n\n      {previewUrl && (\n        <div className=\"mt-4\">\n          <p className=\"text-sm font-medium mb-2\">Preview:</p>\n          <div className=\"relative w-full h-40 bg-gray-100 rounded-md overflow-hidden\">\n            <img\n              src={previewUrl}\n              alt=\"Preview\"\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default function AdminEvents() {\n  const [events, setEvents] = useState<Event[]>([]);\n  const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // useCallback for stable function references\n  const loadEvents = useCallback(async () => {\n    try {\n      const data = await api.events.getEvents();\n      setEvents(data || []);\n    } catch (error) {\n      console.error(\"Error loading events:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load events\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  const filterEvents = useCallback(() => {\n    let filtered = events;\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (event) =>\n          event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          event.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          event.location?.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n    setFilteredEvents(filtered);\n  }, [events, searchTerm]);\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    filterEvents();\n  }, [filterEvents]);\n\n  const handleAddEvent = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      const form = e.target as HTMLFormElement;\n      const formData = new FormData(form);\n      try {\n        await api.events.createEvent({\n          title: formData.get(\"title\") as string,\n          description: formData.get(\"description\") as string,\n          event_date: formData.get(\"event_date\") as string,\n          event_time: (formData.get(\"event_time\") as string) || null,\n          location: (formData.get(\"location\") as string) || null,\n          image_url: uploadedImageUrl || null,\n          is_featured: formData.get(\"is_featured\") === \"on\",\n        });\n        toast({\n          title: \"Success\",\n          description: \"Event added successfully\",\n        });\n        loadEvents();\n        setIsAddDialogOpen(false);\n        setUploadedImageUrl(null);\n        form.reset();\n      } catch (error) {\n        console.error(\"Error adding event:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to add event\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    [uploadedImageUrl, toast, loadEvents],\n  );\n\n  const handleUpdateEvent = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!editingEvent) return;\n      const form = e.target as HTMLFormElement;\n      const formData = new FormData(form);\n      try {\n        await api.events.updateEvent(editingEvent.id, {\n          title: formData.get(\"title\") as string,\n          description: formData.get(\"description\") as string,\n          event_date: formData.get(\"event_date\") as string,\n          event_time: (formData.get(\"event_time\") as string) || null,\n          location: (formData.get(\"location\") as string) || null,\n          image_url: uploadedImageUrl || editingEvent.image_url,\n          is_featured: formData.get(\"is_featured\") === \"on\",\n        });\n        toast({\n          title: \"Success\",\n          description: \"Event updated successfully\",\n        });\n        loadEvents();\n        setEditingEvent(null);\n        setUploadedImageUrl(null);\n      } catch (error) {\n        console.error(\"Error updating event:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to update event\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    [editingEvent, uploadedImageUrl, toast, loadEvents],\n  );\n\n  const handleDeleteEvent = useCallback(\n    async (id: string) => {\n      try {\n        await api.events.deleteEvent(id);\n        toast({\n          title: \"Success\",\n          description: \"Event deleted successfully\",\n        });\n        loadEvents();\n      } catch (error) {\n        console.error(\"Error deleting event:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete event\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    [toast, loadEvents],\n  );\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Events Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Manage church events and announcements\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add New Event</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddEvent} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Event Title</Label>\n                  <Input id=\"title\" name=\"title\" required />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea id=\"description\" name=\"description\" rows={3} />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event_date\">Event Date</Label>\n                  <Input\n                    id=\"event_date\"\n                    name=\"event_date\"\n                    type=\"date\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event_time\">Event Time</Label>\n                  <Input id=\"event_time\" name=\"event_time\" type=\"time\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location</Label>\n                <Input id=\"location\" name=\"location\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image_upload\">Event Image</Label>\n                <FileUpload onFileUpload={setUploadedImageUrl} />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch id=\"is_featured\" name=\"is_featured\" />\n                <Label htmlFor=\"is_featured\">Featured Event</Label>\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Add Event\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {events.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Featured Events\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {events.filter((e) => e.is_featured).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Upcoming Events\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {\n                events.filter((e) => new Date(e.event_date) >= new Date())\n                  .length\n              }\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Past Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {events.filter((e) => new Date(e.event_date) < new Date()).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search Events</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by title, description, or location...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Events Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Events ({filteredEvents.length})</CardTitle>\n          <CardDescription>Manage your church events</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Date & Time</TableHead>\n                  <TableHead>Location</TableHead>\n                  <TableHead>Featured</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredEvents.map((event) => (\n                  <TableRow key={event.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{event.title}</div>\n                        {event.description && (\n                          <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                            {event.description}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {format(new Date(event.event_date), \"MMM d, yyyy\")}\n                      </div>\n                      {event.event_time && (\n                        <div className=\"flex items-center text-sm mt-1\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          {event.event_time}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {event.location ? (\n                        <div className=\"flex items-center text-sm\">\n                          <MapPin className=\"w-3 h-3 mr-1\" />\n                          {event.location}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400 text-sm\">\n                          Not specified\n                        </span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {event.is_featured && (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          Featured\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setEditingEvent(event)}\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Event</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{event.title}\n                                \"? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteEvent(event.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredEvents.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No events found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Event Dialog */}\n      <Dialog open={!!editingEvent} onOpenChange={() => setEditingEvent(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Event</DialogTitle>\n          </DialogHeader>\n          {editingEvent && (\n            <form onSubmit={handleUpdateEvent} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_title\">Event Title</Label>\n                  <Input\n                    id=\"edit_title\"\n                    name=\"title\"\n                    defaultValue={editingEvent.title}\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_description\">Description</Label>\n                <Textarea\n                  id=\"edit_description\"\n                  name=\"description\"\n                  defaultValue={editingEvent.description || \"\"}\n                  rows={3}\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_event_date\">Event Date</Label>\n                  <Input\n                    id=\"edit_event_date\"\n                    name=\"event_date\"\n                    type=\"date\"\n                    defaultValue={editingEvent.event_date.split(\"T\")[0]}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_event_time\">Event Time</Label>\n                  <Input\n                    id=\"edit_event_time\"\n                    name=\"event_time\"\n                    type=\"time\"\n                    defaultValue={editingEvent.event_time || \"\"}\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_location\">Location</Label>\n                <Input\n                  id=\"edit_location\"\n                  name=\"location\"\n                  defaultValue={editingEvent.location || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_image_upload\">Event Image</Label>\n                <FileUpload\n                  onFileUpload={setUploadedImageUrl}\n                  defaultImageUrl={editingEvent.image_url}\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"edit_is_featured\"\n                  name=\"is_featured\"\n                  defaultChecked={editingEvent.is_featured}\n                />\n                <Label htmlFor=\"edit_is_featured\">Featured Event</Label>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button type=\"submit\" className=\"flex-1\">\n                  Update Event\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditingEvent(null)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Gallery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/HealthCheck.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Members.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMembers'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadMembers]","fix":{"range":[2337,2339],"text":"[loadMembers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterMembers'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [filterMembers, members, searchTerm, statusFilter, typeFilter]","fix":{"range":[2389,2436],"text":"[filterMembers, members, searchTerm, statusFilter, typeFilter]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":142,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":142,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":190,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":190,"endColumn":45}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { UserPlus, Search, Edit, Trash2, Mail, Phone, Calendar, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { saveAs } from \"file-saver\";\n\ninterface Member {\n  id: string;\n  full_name: string;\n  email: string | null;\n  phone: string | null;\n  address: string | null;\n  membership_type: \"regular\" | \"student\" | \"senior\" | \"family\";\n  membership_status: \"pending\" | \"active\" | \"inactive\";\n  join_date: string;\n  membership_date: string | null;\n  last_renewal_date: string | null;\n  next_renewal_date: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminMembers() {\n  const [members, setMembers] = useState<Member[]>([]);\n  const [filteredMembers, setFilteredMembers] = useState<Member[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingMember, setEditingMember] = useState<Member | null>(null);\n  const { toast } = useToast();\n  const [errorBoundary, setErrorBoundary] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadMembers();\n  }, []);\n\n  useEffect(() => {\n    filterMembers();\n  }, [members, searchTerm, statusFilter, typeFilter]);\n\n  const loadMembers = async () => {\n    setLoading(true);\n    setErrorBoundary(null);\n    const { data, error } = await supabase\n      .from(\"members\")\n      .select(\"*\")\n      .order(\"created_at\", { ascending: false });\n    if (error) {\n      setErrorBoundary(error.message || \"Failed to load members\");\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to load members\",\n        variant: \"destructive\",\n      });\n      setMembers([]);\n    } else {\n// ...existing code...\n      // Ensure data has proper structure with safe array validation\n      const validatedData = Array.isArray(data) ? data : [];\n      const processedData = validatedData.map((member) => ({\n        ...member,\n        membership_type: member?.membership_type || \"regular\",\n        membership_status: member?.membership_status || \"pending\",\n        join_date:\n          member?.join_date || member?.created_at || new Date().toISOString(),\n        updated_at:\n          member?.updated_at || member?.created_at || new Date().toISOString(),\n      }));\n\n      setMembers(processedData);\n// ...existing code...\n      setMembers(data as Member[]);\n    }\n    setLoading(false);\n  };\n\n  const filterMembers = () => {\n    let filtered = members;\n    if (searchTerm) {\n      filtered = filtered.filter((m) =>\n        m.full_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        m.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        m.membership_type?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n    if (statusFilter && statusFilter !== \"all\") {\n      filtered = filtered.filter((m) => m.membership_status === statusFilter);\n    }\n    if (typeFilter && typeFilter !== \"all\") {\n      filtered = filtered.filter((m) => m.membership_type === typeFilter);\n    }\n    setFilteredMembers(filtered);\n  };\n\n  const handleAddMember = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const { error } = await supabase.from(\"members\").insert([\n        {\n          full_name: formData.get(\"full_name\") as string,\n          email: formData.get(\"email\") as string,\n          phone: formData.get(\"phone\") as string,\n          address: formData.get(\"address\") as string,\n          membership_type: formData.get(\"membership_type\") as string,\n          membership_status: \"active\",\n          join_date: new Date().toISOString().split(\"T\")[0],\n          membership_date: new Date().toISOString().split(\"T\")[0],\n          registration_date: new Date().toISOString().split(\"T\")[0],\n          // Support simplified registration form fields\n          first_name: (formData.get(\"full_name\") as string).split(\" \")[0] || \"\",\n          last_name:\n            (formData.get(\"full_name\") as string)\n              .split(\" \")\n              .slice(1)\n              .join(\" \") || \"\",\n          preferred_language: \"english\",\n          email_updates: true,\n        },\n      ]);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member added successfully\",\n      });\n      loadMembers();\n      setIsAddDialogOpen(false);\n      form.reset();\n    } catch (error) {\n      console.error(\"Error adding member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateMember = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingMember) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const { error } = await supabase\n        .from(\"members\")\n        .update({\n          full_name: formData.get(\"full_name\") as string,\n          email: formData.get(\"email\") as string,\n          phone: formData.get(\"phone\") as string,\n          address: formData.get(\"address\") as string,\n          membership_type: formData.get(\"membership_type\") as string,\n          membership_status: formData.get(\"membership_status\") as string,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", editingMember.id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member updated successfully\",\n      });\n      loadMembers();\n      setEditingMember(null);\n    } catch (error) {\n      console.error(\"Error updating member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteMember = async (id: string) => {\n    try {\n      const { error } = await supabase.from(\"members\").delete().eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member deleted successfully\",\n      });\n      loadMembers();\n    } catch (error) {\n      console.error(\"Error deleting member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const exportToCSV = () => {\n    const csvRows = [\n      [\n        \"ID\",\n        \"Full Name\",\n        \"Email\",\n        \"Phone\",\n        \"Type\",\n        \"Status\",\n        \"Join Date\",\n        \"Renewal Due\",\n      ],\n      ...filteredMembers.map((m) => [\n        m.id,\n        m.full_name,\n        m.email || \"\",\n        m.phone || \"\",\n        m.membership_type,\n        m.membership_status,\n        m.join_date,\n        m.next_renewal_date || \"\",\n      ]),\n    ];\n    const csvContent = csvRows.map((r) => r.join(\",\")).join(\"\\n\");\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    saveAs(blob, \"members.csv\");\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Active\n          </Badge>\n        );\n      case \"pending\":\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800\">\n            <Clock className=\"w-3 h-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case \"inactive\":\n        return (\n          <Badge className=\"bg-red-100 text-red-800\">\n            <XCircle className=\"w-3 h-3 mr-1\" />\n            Inactive\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getTypeBadge = (type: string) => {\n    const colors = {\n      regular: \"bg-blue-100 text-blue-800\",\n      student: \"bg-purple-100 text-purple-800\",\n      senior: \"bg-orange-100 text-orange-800\",\n      family: \"bg-green-100 text-green-800\",\n    };\n    return (\n      <Badge\n        className={\n          colors[type as keyof typeof colors] || \"bg-gray-100 text-gray-800\"\n        }\n      >\n        {type}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {errorBoundary && (\n        <div className=\"bg-red-100 text-red-700 p-4 rounded mb-4\">\n          <b>Error:</b> {errorBoundary}\n        </div>\n      )}\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-church-burgundy\">\n              Members Management\n            </h1>\n            <p className=\"text-gray-600\">\n              Manage church members and their information\n            </p>\n          </div>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Add Member\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Add New Member</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleAddMember} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"full_name\">Full Name</Label>\n                  <Input id=\"full_name\" name=\"full_name\" required />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input id=\"email\" name=\"email\" type=\"email\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input id=\"phone\" name=\"phone\" type=\"tel\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Input id=\"address\" name=\"address\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"membership_type\">Membership Type</Label>\n                  <Select name=\"membership_type\" defaultValue=\"regular\">\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"regular\">Regular</SelectItem>\n                      <SelectItem value=\"student\">Student</SelectItem>\n                      <SelectItem value=\"senior\">Senior</SelectItem>\n                      <SelectItem value=\"family\">Family</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Button type=\"submit\" className=\"w-full\">\n                  Add Member\n                </Button>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Members</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-church-burgundy\">\n                {members.length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Active Members\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {members.filter((m) => m.membership_status === \"active\").length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Pending Members\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {members.filter((m) => m.membership_status === \"pending\").length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Family Members\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {members.filter((m) => m.membership_type === \"family\").length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search by name, email, or phone...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full md:w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-full md:w-48\">\n                  <SelectValue placeholder=\"Filter by type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"regular\">Regular</SelectItem>\n                  <SelectItem value=\"student\">Student</SelectItem>\n                  <SelectItem value=\"senior\">Senior</SelectItem>\n                  <SelectItem value=\"family\">Family</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Members Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Members ({filteredMembers.length})</CardTitle>\n            <CardDescription>Manage your church members</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Contact</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Join Date</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredMembers.map((member) => (\n                    <TableRow key={member.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{member.full_name}</div>\n                          {member.address && (\n                            <div className=\"text-sm text-gray-500\">\n                              {member.address}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          {member.email && (\n                            <div className=\"flex items-center text-sm\">\n                              <Mail className=\"w-3 h-3 mr-1\" />\n                              {member.email}\n                            </div>\n                          )}\n                          {member.phone && (\n                            <div className=\"flex items-center text-sm\">\n                              <Phone className=\"w-3 h-3 mr-1\" />\n                              {member.phone}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getTypeBadge(member.membership_type || \"regular\")}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(member.membership_status || \"active\")}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center text-sm\">\n                          <Calendar className=\"w-3 h-3 mr-1\" />\n                          {member.join_date\n                            ? format(new Date(member.join_date), \"MMM d, yyyy\")\n                            : \"N/A\"}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setEditingMember(member)}\n                          >\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button variant=\"destructive\" size=\"sm\">\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Member</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete{\" \"}\n                                  {member.full_name}? This action cannot be\n                                  undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => handleDeleteMember(member.id)}\n                                  className=\"bg-red-600 hover:bg-red-700\"\n                                >\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n            {filteredMembers.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                No members found matching your criteria.\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Member Dialog */}\n        <Dialog\n          open={!!editingMember}\n          onOpenChange={() => setEditingMember(null)}\n        >\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Member</DialogTitle>\n            </DialogHeader>\n            {editingMember && (\n              <form onSubmit={handleUpdateMember} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_full_name\">Full Name</Label>\n                  <Input\n                    id=\"edit_full_name\"\n                    name=\"full_name\"\n                    defaultValue={editingMember.full_name}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_email\">Email</Label>\n                  <Input\n                    id=\"edit_email\"\n                    name=\"email\"\n                    type=\"email\"\n                    defaultValue={editingMember.email || \"\"}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_phone\">Phone</Label>\n                  <Input\n                    id=\"edit_phone\"\n                    name=\"phone\"\n                    type=\"tel\"\n                    defaultValue={editingMember.phone || \"\"}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_address\">Address</Label>\n                  <Input\n                    id=\"edit_address\"\n                    name=\"address\"\n                    defaultValue={editingMember.address || \"\"}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_membership_type\">Membership Type</Label>\n                  <Select\n                    name=\"membership_type\"\n                    defaultValue={editingMember.membership_type || \"regular\"}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"regular\">Regular</SelectItem>\n                      <SelectItem value=\"student\">Student</SelectItem>\n                      <SelectItem value=\"senior\">Senior</SelectItem>\n                      <SelectItem value=\"family\">Family</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_membership_status\">Status</Label>\n                  <Select\n                    name=\"membership_status\"\n                    defaultValue={editingMember.membership_status || \"active\"}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button type=\"submit\" className=\"flex-1\">\n                    Update Member\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setEditingMember(null)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Export and Activity Log */}\n        <div className=\"flex gap-2 mb-4\">\n          <Input\n            placeholder=\"Search by name, email, or type...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n          <Select\n            value={statusFilter}\n            onValueChange={setStatusFilter}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select\n            value={typeFilter}\n            onValueChange={setTypeFilter}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All</SelectItem>\n              <SelectItem value=\"regular\">Regular</SelectItem>\n              <SelectItem value=\"student\">Student</SelectItem>\n              <SelectItem value=\"senior\">Senior</SelectItem>\n              <SelectItem value=\"family\">Family</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={exportToCSV}>Export CSV</Button>\n        </div>\n\n        {/* Activity log stub */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-bold mb-2\">Activity Log</h3>\n          <div className=\"text-sm text-gray-500\">(Activity log will appear here)</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/PrayerRequests.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/PrayerRequestsComplete.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'MessageSquare' is defined but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPrayerRequests'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPrayerRequests]","fix":{"range":[1987,1989],"text":"[loadPrayerRequests]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterRequests'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [filterRequests, prayerRequests, searchTerm, statusFilter]","fix":{"range":[2040,2082],"text":"[filterRequests, prayerRequests, searchTerm, statusFilter]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":184,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":184,"endColumn":44}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Search,\n  Heart,\n  CheckCircle,\n  Clock,\n  Eye,\n  Trash2,\n  Mail,\n  User,\n  Calendar,\n  MessageSquare,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface PrayerRequest {\n  id: string;\n  name: string;\n  email: string | null;\n  request: string;\n  is_public: boolean;\n  is_answered: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminPrayerRequestsComplete() {\n  const [prayerRequests, setPrayerRequests] = useState<PrayerRequest[]>([]);\n  const [filteredRequests, setFilteredRequests] = useState<PrayerRequest[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedRequest, setSelectedRequest] = useState<PrayerRequest | null>(\n    null,\n  );\n  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadPrayerRequests();\n  }, []);\n\n  useEffect(() => {\n    filterRequests();\n  }, [prayerRequests, searchTerm, statusFilter]);\n\n  const loadPrayerRequests = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"prayer_requests\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setPrayerRequests(data || []);\n    } catch (error) {\n      console.error(\"Error loading prayer requests:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load prayer requests\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterRequests = () => {\n    let filtered = prayerRequests;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (request) =>\n          request.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          request.request.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          request.email?.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Status filter\n    if (statusFilter !== \"all\") {\n      const isAnswered = statusFilter === \"answered\";\n      filtered = filtered.filter(\n        (request) => request.is_answered === isAnswered,\n      );\n    }\n\n    setFilteredRequests(filtered);\n  };\n\n  const toggleAnsweredStatus = async (id: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from(\"prayer_requests\")\n        .update({\n          is_answered: !currentStatus,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: `Prayer request marked as ${!currentStatus ? \"answered\" : \"pending\"}`,\n      });\n      loadPrayerRequests();\n    } catch (error) {\n      console.error(\"Error updating prayer request:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update prayer request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deletePrayerRequest = async (id: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"prayer_requests\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Prayer request deleted successfully\",\n      });\n      loadPrayerRequests();\n    } catch (error) {\n      console.error(\"Error deleting prayer request:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete prayer request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const sendEmailResponse = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedRequest || !selectedRequest.email) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n    const subject = formData.get(\"subject\") as string;\n    const message = formData.get(\"message\") as string;\n\n    try {\n      // In a real implementation, you would send an email here\n      // For now, we'll just show a success message\n      console.log(\"Email would be sent to:\", selectedRequest.email);\n      console.log(\"Subject:\", subject);\n      console.log(\"Message:\", message);\n\n      toast({\n        title: \"Email Sent\",\n        description: `Response sent to ${selectedRequest.name}`,\n      });\n      setIsEmailDialogOpen(false);\n      setSelectedRequest(null);\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send email response\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const calculateStats = () => {\n    const totalRequests = prayerRequests.length;\n    const answeredRequests = prayerRequests.filter((r) => r.is_answered).length;\n    const pendingRequests = prayerRequests.filter((r) => !r.is_answered).length;\n    const publicRequests = prayerRequests.filter((r) => r.is_public).length;\n    const thisWeekRequests = prayerRequests.filter((r) => {\n      const requestDate = new Date(r.created_at);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return requestDate >= weekAgo;\n    }).length;\n\n    return {\n      totalRequests,\n      answeredRequests,\n      pendingRequests,\n      publicRequests,\n      thisWeekRequests,\n    };\n  };\n\n  const stats = calculateStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Prayer Requests Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Review and respond to prayer requests from the community\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-5\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Total Requests\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {stats.totalRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Answered\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats.answeredRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.totalRequests > 0\n                ? Math.round(\n                    (stats.answeredRequests / stats.totalRequests) * 100,\n                  )\n                : 0}\n              % of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Pending\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {stats.pendingRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">Awaiting response</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              Public\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {stats.publicRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">Visible to community</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              This Week\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {stats.thisWeekRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">New requests</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search prayer requests...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Status Filter</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={statusFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={statusFilter === \"pending\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"pending\")}\n                >\n                  Pending\n                </Button>\n                <Button\n                  variant={statusFilter === \"answered\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"answered\")}\n                >\n                  Answered\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Prayer Requests Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Prayer Requests ({filteredRequests.length})</CardTitle>\n          <CardDescription>\n            Manage and respond to community prayer requests\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Request</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Visibility</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredRequests.map((request) => (\n                  <TableRow key={request.id}>\n                    <TableCell>\n                      {format(new Date(request.created_at), \"MMM d, yyyy\")}\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{request.name}</div>\n                        {request.email && (\n                          <div className=\"text-sm text-gray-500\">\n                            {request.email}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <p className=\"truncate\">{request.request}</p>\n                        <Button\n                          variant=\"link\"\n                          size=\"sm\"\n                          className=\"p-0 h-auto text-xs\"\n                          onClick={() => setSelectedRequest(request)}\n                        >\n                          Read full request\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {request.is_answered ? (\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Answered\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Pending\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {request.is_public ? (\n                        <Badge className=\"bg-blue-100 text-blue-800\">\n                          <Eye className=\"w-3 h-3 mr-1\" />\n                          Public\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-gray-100 text-gray-800\">\n                          Private\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            toggleAnsweredStatus(\n                              request.id,\n                              request.is_answered,\n                            )\n                          }\n                          className={\n                            request.is_answered\n                              ? \"\"\n                              : \"bg-green-50 hover:bg-green-100\"\n                          }\n                        >\n                          {request.is_answered ? (\n                            <>\n                              <Clock className=\"w-3 h-3 mr-1\" />\n                              Mark Pending\n                            </>\n                          ) : (\n                            <>\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Mark Answered\n                            </>\n                          )}\n                        </Button>\n                        {request.email && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedRequest(request);\n                              setIsEmailDialogOpen(true);\n                            }}\n                          >\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            Email\n                          </Button>\n                        )}\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>\n                                Delete Prayer Request\n                              </AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this prayer\n                                request from {request.name}? This action cannot\n                                be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deletePrayerRequest(request.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredRequests.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No prayer requests found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Prayer Request Detail Dialog */}\n      <Dialog\n        open={!!selectedRequest && !isEmailDialogOpen}\n        onOpenChange={() => setSelectedRequest(null)}\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Prayer Request Details</DialogTitle>\n            <DialogDescription>\n              {selectedRequest &&\n                format(\n                  new Date(selectedRequest.created_at),\n                  \"MMMM d, yyyy 'at' h:mm a\",\n                )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRequest && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">From:</Label>\n                <p className=\"text-sm font-medium\">{selectedRequest.name}</p>\n                {selectedRequest.email && (\n                  <p className=\"text-sm text-gray-500\">\n                    {selectedRequest.email}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Prayer Request:</Label>\n                <div className=\"mt-2 p-4 bg-gray-50 rounded-md border-l-4 border-church-gold\">\n                  <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                    {selectedRequest.request}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between pt-4 border-t\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm\">Status:</Label>\n                    {selectedRequest.is_answered ? (\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Answered\n                      </Badge>\n                    ) : (\n                      <Badge className=\"bg-yellow-100 text-yellow-800\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        Pending\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm\">Visibility:</Label>\n                    {selectedRequest.is_public ? (\n                      <Badge className=\"bg-blue-100 text-blue-800\">\n                        <Eye className=\"w-3 h-3 mr-1\" />\n                        Public\n                      </Badge>\n                    ) : (\n                      <Badge className=\"bg-gray-100 text-gray-800\">\n                        Private\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      toggleAnsweredStatus(\n                        selectedRequest.id,\n                        selectedRequest.is_answered,\n                      );\n                      setSelectedRequest(null);\n                    }}\n                    className={\n                      selectedRequest.is_answered\n                        ? \"\"\n                        : \"bg-green-50 hover:bg-green-100\"\n                    }\n                  >\n                    {selectedRequest.is_answered ? (\n                      <>\n                        <Clock className=\"w-4 h-4 mr-2\" />\n                        Mark Pending\n                      </>\n                    ) : (\n                      <>\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                        Mark Answered\n                      </>\n                    )}\n                  </Button>\n                  {selectedRequest.email && (\n                    <Button\n                      onClick={() => setIsEmailDialogOpen(true)}\n                      className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                    >\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      Send Email Response\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Email Response Dialog */}\n      <Dialog open={isEmailDialogOpen} onOpenChange={setIsEmailDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Send Email Response</DialogTitle>\n            <DialogDescription>\n              Respond to {selectedRequest?.name}'s prayer request\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRequest && (\n            <form onSubmit={sendEmailResponse} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subject\">Subject</Label>\n                <Input\n                  id=\"subject\"\n                  name=\"subject\"\n                  defaultValue={`Re: Your Prayer Request`}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"message\">Message</Label>\n                <Textarea\n                  id=\"message\"\n                  name=\"message\"\n                  rows={6}\n                  placeholder={`Dear ${selectedRequest.name},\\n\\nThank you for sharing your prayer request with us. We want you to know that we are praying for you and your situation.\\n\\n[Your personal message here]\\n\\nBlessings,\\nSt. Gabriel Ethiopian Orthodox Church`}\n                  required\n                />\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1 bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  Send Email\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsEmailDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Settings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSettings'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSettings]","fix":{"range":[1973,1975],"text":"[loadSettings]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkStripeConfiguration'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":63,"suggestions":[{"desc":"Update the dependencies array to be: [checkStripeConfiguration, settings.enable_stripe, settings.stripe_publishable_key]","fix":{"range":[2036,2093],"text":"[checkStripeConfiguration, settings.enable_stripe, settings.stripe_publishable_key]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":195,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":195,"endColumn":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardContent,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { CheckCircle, AlertCircle } from \"lucide-react\";\nimport { toast } from \"react-hot-toast\";\nimport api from \"@/lib/api\";\nimport { supabase } from \"@/lib/supabase\";\n\n// Helper for Stripe key validation (replace with your own logic if needed)\nfunction validateStripeKey(key: string) {\n  return key.startsWith(\"pk_test_\") || key.startsWith(\"pk_live_\");\n}\n\nexport default function Settings() {\n  const [settings, setSettings] = useState({\n    church_name: \"\",\n    church_address: \"\",\n    phone_number: \"\",\n    email: \"\",\n    admin_email: \"\",\n    from_email: \"noreply@example.com\",\n    enable_donations: true,\n    enable_membership: true,\n    enable_email_notifications: true,\n    enable_newsletter: true,\n    enable_stripe: false,\n    stripe_publishable_key: \"\",\n    maintenance_mode: false,\n  });\n  const [stripeSettings, setStripeSettings] = useState({\n    enable_stripe: false,\n    stripe_mode: \"test\",\n    stripe_publishable_key: \"\",\n    stripe_secret_key: \"\",\n    stripe_webhook_secret: \"\",\n    default_currency: \"USD\",\n  });\n  const [emailSettings, setEmailSettings] = useState({\n    enable_newsletters: false,\n    from_email: \"\",\n    from_name: \"\",\n    newsletter_frequency: \"monthly\",\n    auto_welcome_email: false,\n    smtp_host: \"\",\n    smtp_port: 587,\n    smtp_username: \"\",\n    smtp_password: \"\",\n  });\n  const [stripeStatus, setStripeStatus] = useState(\"unconfigured\");\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  useEffect(() => {\n    checkStripeConfiguration();\n  }, [settings.enable_stripe, settings.stripe_publishable_key]);\n\n  const loadSettings = async () => {\n    try {\n      let { data, error } = await supabase\n        .from(\"site_settings\")\n        .select(\"*\")\n        .limit(1)\n        .single();\n\n      if (error && error.code === \"PGRST116\") {\n        const { data: newData, error: insertError } = await supabase\n          .from(\"site_settings\")\n          .insert({\n            id: 1,\n            church_name: \"St. Gabriel Ethiopian Orthodox Church\",\n            church_address: \"\",\n            phone_number: \"\",\n            email: \"\",\n            admin_email: \"\",\n            from_email: \"noreply@example.com\",\n            enable_donations: true,\n            enable_membership: true,\n            enable_email_notifications: true,\n            enable_newsletter: true,\n            enable_stripe: false,\n            stripe_publishable_key: \"\",\n            maintenance_mode: false,\n          })\n          .select()\n          .single();\n        if (insertError) throw insertError;\n        data = newData;\n      }\n      if (data) {\n        setSettings(data);\n      }\n      // Load Stripe settings\n      const stripeData = await api.stripeSettings.getSettings();\n      let mappedStripeSettings;\n      if (stripeData && typeof stripeData === \"object\" && stripeData !== null) {\n        mappedStripeSettings = {\n          enable_stripe: \"enable_stripe\" in stripeData ? (stripeData as any).enable_stripe : false,\n          stripe_mode: \"stripe_mode\" in stripeData ? (stripeData as any).stripe_mode : \"test\",\n          stripe_publishable_key: \"stripe_publishable_key\" in stripeData ? (stripeData as any).stripe_publishable_key : \"\",\n          stripe_secret_key: \"stripe_secret_key\" in stripeData ? (stripeData as any).stripe_secret_key : \"\",\n          stripe_webhook_secret: \"stripe_webhook_secret\" in stripeData ? (stripeData as any).stripe_webhook_secret : \"\",\n          default_currency: \"default_currency\" in stripeData ? (stripeData as any).default_currency : \"USD\",\n        };\n      } else {\n        mappedStripeSettings = {\n          enable_stripe: false,\n          stripe_mode: \"test\",\n          stripe_publishable_key: \"\",\n          stripe_secret_key: \"\",\n          stripe_webhook_secret: \"\",\n          default_currency: \"USD\",\n        };\n      }\n      setStripeSettings(mappedStripeSettings);\n      // Load Email settings\n      const emailData = await api.emailSettings.getSettings();\n      let mappedEmailSettings;\n      if (emailData && typeof emailData === \"object\" && emailData !== null) {\n        mappedEmailSettings = {\n          enable_newsletters: \"enable_newsletters\" in emailData ? (emailData as any).enable_newsletters : false,\n          from_email: \"from_email\" in emailData ? (emailData as any).from_email : \"\",\n          from_name: \"from_name\" in emailData ? (emailData as any).from_name : \"\",\n          newsletter_frequency: \"newsletter_frequency\" in emailData ? (emailData as any).newsletter_frequency : \"monthly\",\n          auto_welcome_email: \"auto_welcome_email\" in emailData ? (emailData as any).auto_welcome_email : false,\n          smtp_host: \"smtp_host\" in emailData ? (emailData as any).smtp_host : \"\",\n          smtp_port: \"smtp_port\" in emailData ? (emailData as any).smtp_port : 587,\n          smtp_username: \"smtp_username\" in emailData ? (emailData as any).smtp_username : \"\",\n          smtp_password: \"smtp_password\" in emailData ? (emailData as any).smtp_password : \"\",\n        };\n      } else {\n        mappedEmailSettings = {\n          enable_newsletters: false,\n          from_email: \"\",\n          from_name: \"\",\n          newsletter_frequency: \"monthly\",\n          auto_welcome_email: false,\n          smtp_host: \"\",\n          smtp_port: 587,\n          smtp_username: \"\",\n          smtp_password: \"\",\n        };\n      }\n      setEmailSettings(mappedEmailSettings);\n      checkStripeConfiguration();\n    } catch (error) {\n      console.error(\"Error loading settings:\", error);\n      toast.error(\"Failed to load settings data\");\n    }\n  };\n\n  const checkStripeConfiguration = () => {\n    if (!settings.enable_stripe) {\n      setStripeStatus(\"unconfigured\");\n      return;\n    }\n    const key = settings.stripe_publishable_key.trim();\n    if (key === \"\") {\n      setStripeStatus(\"unconfigured\");\n    } else if (validateStripeKey(key)) {\n      setStripeStatus(\"configured\");\n    } else {\n      setStripeStatus(\"testing\");\n    }\n  };\n\n  // Add type annotations for handlers\n  const handleChange = (field: string, value: any) => {\n    setSettings((prev) => ({ ...prev, [field]: value }));\n  };\n  const handleStripeChange = (field: string, value: any) => {\n    setStripeSettings((prev) => ({ ...prev, [field]: value }));\n  };\n  const handleEmailChange = (field: string, value: any) => {\n    setEmailSettings((prev) => ({ ...prev, [field]: value }));\n  };\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (\n      settings.enable_stripe &&\n      !validateStripeKey(settings.stripe_publishable_key)\n    ) {\n      toast.error(\"Please enter a valid Stripe publishable key.\");\n      return;\n    }\n    try {\n      await supabase\n        .from(\"site_settings\")\n        .upsert([\n          {\n            id: 1,\n            ...settings,\n          },\n        ])\n        .select();\n      await api.stripeSettings.updateSettings(stripeSettings);\n      await api.emailSettings.updateSettings(emailSettings);\n      toast.success(\"Your settings have been updated successfully\");\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      toast.error(\"Failed to save settings data\");\n    }\n  };\n\n  const getStripeStatusBadge = () => {\n    switch (stripeStatus) {\n      case \"configured\":\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 text-xs font-medium text-green-800 bg-green-100 rounded-full\">\n            Configured\n          </span>\n        );\n      case \"testing\":\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 text-xs font-medium text-yellow-800 bg-yellow-100 rounded-full\">\n            Test Mode\n          </span>\n        );\n      case \"unconfigured\":\n      default:\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 text-xs font-medium text-red-800 bg-red-100 rounded-full\">\n            Unconfigured\n          </span>\n        );\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-10\">\n      <form onSubmit={handleSubmit}>\n        <Tabs defaultValue=\"general\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"general\">General</TabsTrigger>\n            <TabsTrigger value=\"email\">Email Settings</TabsTrigger>\n            <TabsTrigger value=\"payments\">Payment Settings</TabsTrigger>\n            <TabsTrigger value=\"features\">Features</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"general\">\n            <Card>\n              <CardHeader>\n                <CardTitle>General Settings</CardTitle>\n                <CardDescription>\n                  Configure basic church information\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"churchName\">Church Name</Label>\n                  <Input\n                    id=\"churchName\"\n                    value={settings.church_name}\n                    onChange={(e) =>\n                      handleChange(\"church_name\", e.target.value)\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Input\n                    id=\"address\"\n                    value={settings.church_address}\n                    onChange={(e) =>\n                      handleChange(\"church_address\", e.target.value)\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    value={settings.phone_number}\n                    onChange={(e) =>\n                      handleChange(\"phone_number\", e.target.value)\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Public Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={settings.email}\n                    onChange={(e) => handleChange(\"email\", e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"adminEmail\">Admin Email</Label>\n                  <Input\n                    id=\"adminEmail\"\n                    type=\"email\"\n                    value={settings.admin_email}\n                    onChange={(e) =>\n                      handleChange(\"admin_email\", e.target.value)\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fromEmail\">From Email</Label>\n                  <Input\n                    id=\"fromEmail\"\n                    type=\"email\"\n                    value={settings.from_email}\n                    onChange={(e) => handleChange(\"from_email\", e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newsletterFreq\">Newsletter Frequency</Label>\n                  <Select\n                    value={emailSettings.newsletter_frequency}\n                    onValueChange={(value: \"daily\" | \"weekly\" | \"monthly\") =>\n                      handleEmailChange(\"newsletter_frequency\", value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Newsletter System</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow newsletter subscriptions and campaigns\n                    </p>\n                  </div>\n                  <Switch\n                    checked={emailSettings.enable_newsletters}\n                    onCheckedChange={(checked: boolean) =>\n                      handleEmailChange(\"enable_newsletters\", checked)\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Auto Welcome Email</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Send welcome email to new subscribers\n                    </p>\n                  </div>\n                  <Switch\n                    checked={emailSettings.auto_welcome_email}\n                    onCheckedChange={(checked: boolean) =>\n                      handleEmailChange(\"auto_welcome_email\", checked)\n                    }\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"email\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Email Configuration</CardTitle>\n                <CardDescription>\n                  Configure email settings for notifications and newsletters\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"adminEmail\">Admin Email</Label>\n                  <Input\n                    id=\"adminEmail\"\n                    type=\"email\"\n                    value={settings.admin_email}\n                    onChange={(e) =>\n                      handleChange(\"admin_email\", e.target.value)\n                    }\n                    placeholder=\"admin@church.com\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    Email to receive admin notifications\n                  </p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fromEmail\">From Email</Label>\n                    <Input\n                      id=\"fromEmail\"\n                      type=\"email\"\n                      value={emailSettings.from_email}\n                      onChange={(e) =>\n                        handleEmailChange(\"from_email\", e.target.value)\n                      }\n                      placeholder=\"noreply@church.org\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fromName\">From Name</Label>\n                    <Input\n                      id=\"fromName\"\n                      value={emailSettings.from_name}\n                      onChange={(e) =>\n                        handleEmailChange(\"from_name\", e.target.value)\n                      }\n                      placeholder=\"St. Gabriel Church\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newsletterFreq\">Newsletter Frequency</Label>\n                  <Select\n                    value={emailSettings.newsletter_frequency}\n                    onValueChange={(value: \"daily\" | \"weekly\" | \"monthly\") =>\n                      handleEmailChange(\"newsletter_frequency\", value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Auto Welcome Email</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Send welcome email to new subscribers\n                    </p>\n                  </div>\n                  <Switch\n                    checked={emailSettings.auto_welcome_email}\n                    onCheckedChange={(checked: boolean) =>\n                      handleEmailChange(\"auto_welcome_email\", checked)\n                    }\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"payments\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Payment Settings\n                  {getStripeStatusBadge()}\n                </CardTitle>\n                <CardDescription>\n                  Configure Stripe payment integration for donations and\n                  membership\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Stripe Payments</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow online donations and membership payments via Stripe\n                    </p>\n                    <Label>Auto Welcome Email</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Send welcome email to new subscribers\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_stripe}\n                    onCheckedChange={(checked: boolean) =>\n                      handleChange(\"enable_stripe\", checked)\n                    }\n                  />\n                </div>\n\n                {settings.enable_stripe && (\n                  <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"stripeMode\">Stripe Mode</Label>\n                        <Select\n                          value={stripeSettings.stripe_mode}\n                          onValueChange={(value: \"test\" | \"live\") =>\n                            handleStripeChange(\"stripe_mode\", value)\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"test\">Test</SelectItem>\n                            <SelectItem value=\"live\">Live</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"currency\">Default Currency</Label>\n                        <Select\n                          value={stripeSettings.default_currency}\n                          onValueChange={(value) =>\n                            handleStripeChange(\"default_currency\", value)\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"USD\">USD - US Dollar</SelectItem>\n                            <SelectItem value=\"EUR\">EUR - Euro</SelectItem>\n                            <SelectItem value=\"GBP\">\n                              GBP - British Pound\n                            </SelectItem>\n                            <SelectItem value=\"CAD\">\n                              CAD - Canadian Dollar\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"publishableKey\">\n                        Stripe Publishable Key\n                      </Label>\n                      <Input\n                        id=\"publishableKey\"\n                        type=\"password\"\n                        value={stripeSettings.stripe_publishable_key}\n                        onChange={(e) =>\n                          handleStripeChange(\n                            \"stripe_publishable_key\",\n                            e.target.value,\n                          )\n                        }\n                        placeholder=\"pk_test_...\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"secretKey\">Stripe Secret Key</Label>\n                      <Input\n                        id=\"secretKey\"\n                        type=\"password\"\n                        value={stripeSettings.stripe_secret_key}\n                        onChange={(e) =>\n                          handleStripeChange(\n                            \"stripe_secret_key\",\n                            e.target.value,\n                          )\n                        }\n                        placeholder=\"sk_test_...\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"webhookSecret\">\n                        Stripe Webhook Secret\n                      </Label>\n                      <Input\n                        id=\"webhookSecret\"\n                        type=\"password\"\n                        value={stripeSettings.stripe_webhook_secret}\n                        onChange={(e) =>\n                          handleStripeChange(\n                            \"stripe_webhook_secret\",\n                            e.target.value,\n                          )\n                        }\n                        placeholder=\"whsec_...\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Enable Donations</Label>\n                        <p className=\"text-sm text-gray-500\">\n                          Allow visitors to make donations\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.enable_donations}\n                        onCheckedChange={(checked: boolean) =>\n                          handleChange(\"enable_donations\", checked)\n                        }\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Enable Membership</Label>\n                        <p className=\"text-sm text-gray-500\">\n                          Allow visitors to register for membership\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.enable_membership}\n                        onCheckedChange={(checked: boolean) =>\n                          handleChange(\"enable_membership\", checked)\n                        }\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Maintenance Mode</Label>\n                        <p className=\"text-sm text-gray-500\">\n                          Put the website in maintenance mode\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.maintenance_mode}\n                        onCheckedChange={(checked: boolean) =>\n                          handleChange(\"maintenance_mode\", checked)\n                        }\n                      />\n                    </div>\n\n                    <div className=\"bg-blue-50 p-3 rounded border border-blue-200\">\n                      <h4 className=\"font-medium text-blue-900 mb-2\">\n                        Stripe Configuration Status\n                      </h4>\n                      <ul className=\"space-y-1 text-sm text-blue-800\">\n                        <li className=\"flex items-center\">\n                          {settings.enable_stripe ? (\n                            <CheckCircle className=\"w-4 h-4 mr-2 text-green-600\" />\n                          ) : (\n                            <AlertCircle className=\"w-4 h-4 mr-2 text-red-600\" />\n                          )}\n                          Stripe integration{\" \"}\n                          {settings.enable_stripe ? \"enabled\" : \"disabled\"}\n                        </li>\n                        <li className=\"flex items-center\">\n                          {settings.stripe_publishable_key &&\n                          validateStripeKey(settings.stripe_publishable_key) ? (\n                            <CheckCircle className=\"w-4 h-4 mr-2 text-green-600\" />\n                          ) : (\n                            <AlertCircle className=\"w-4 h-4 mr-2 text-red-600\" />\n                          )}\n                          Publishable key{\" \"}\n                          {settings.stripe_publishable_key &&\n                          validateStripeKey(settings.stripe_publishable_key)\n                            ? \"configured\"\n                            : \"missing or invalid\"}\n                        </li>\n                        <li className=\"flex items-center\">\n                          <AlertCircle className=\"w-4 h-4 mr-2 text-orange-600\" />\n                          Secret key must be configured in Supabase Edge\n                          Function secrets\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"features\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Feature Settings</CardTitle>\n                <CardDescription>\n                  Enable or disable website features\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Donations</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow visitors to make donations\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_donations}\n                    onCheckedChange={(checked: boolean) =>\n                      handleChange(\"enable_donations\", checked)\n                    }\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Membership</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow visitors to register for membership\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_membership}\n                    onCheckedChange={(checked: boolean) =>\n                      handleChange(\"enable_membership\", checked)\n                    }\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Email Notifications</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Send email notifications to admin\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_email_notifications}\n                    onCheckedChange={(checked: boolean) =>\n                      handleChange(\"enable_email_notifications\", checked)\n                    }\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Newsletter</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow newsletter subscriptions\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_newsletter}\n                    onCheckedChange={(checked: boolean) =>\n                      handleChange(\"enable_newsletter\", checked)\n                    }\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Maintenance Mode</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Put the website in maintenance mode\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.maintenance_mode}\n                    onCheckedChange={(checked: boolean) =>\n                      handleChange(\"maintenance_mode\", checked)\n                    }\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"mt-6\">\n          <Button type=\"submit\">\n            Save Settings\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/SystemHealth.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'runSystemDiagnostics' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'getPerformanceMetrics' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runHealthChecks'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [runHealthChecks]","fix":{"range":[1858,1860],"text":"[runHealthChecks]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  RefreshCw,\n  Database,\n  Server,\n  HardDrive,\n  Activity,\n  Clock,\n  AlertCircle,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { format } from \"date-fns\";\nimport AdminDiagnostics from \"@/components/AdminDiagnostics\";\nimport {\n  runSystemDiagnostics,\n  getPerformanceMetrics,\n} from \"@/utils/adminDiagnostics\";\n\ninterface HealthCheck {\n  name: string;\n  status: \"healthy\" | \"warning\" | \"error\";\n  message: string;\n  lastChecked: Date;\n  responseTime?: number;\n  details?: Record<string, unknown>;\n}\n\ninterface SystemMetrics {\n  database: {\n    connections: number;\n    queries: number;\n    avgResponseTime: number;\n    storage: {\n      used: number;\n      total: number;\n      percentage: number;\n    };\n  };\n  api: {\n    uptime: number;\n    requests: number;\n    errors: number;\n    avgResponseTime: number;\n  };\n  storage: {\n    images: {\n      count: number;\n      size: number;\n    };\n    documents: {\n      count: number;\n      size: number;\n    };\n  };\n}\n\nexport default function SystemHealth() {\n  const [healthChecks, setHealthChecks] = useState<HealthCheck[]>([]);\n  const [metrics, setMetrics] = useState<SystemMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n\n  useEffect(() => {\n    runHealthChecks();\n    const interval = setInterval(runHealthChecks, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, []);\n\n  const runHealthChecks = async () => {\n    setLoading(true);\n    const checks: HealthCheck[] = [];\n\n    // Database connectivity check\n    try {\n      const start = Date.now();\n      const { error } = await supabase.from(\"profiles\").select(\"id\").limit(1);\n      const responseTime = Date.now() - start;\n\n      checks.push({\n        name: \"Database Connection\",\n        status: error ? \"error\" : \"healthy\",\n        message: error\n          ? `Connection failed: ${error.message}`\n          : \"Connected successfully\",\n        lastChecked: new Date(),\n        responseTime,\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Database Connection\",\n        status: \"error\",\n        message: \"Connection failed\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Storage bucket check\n    try {\n      const start = Date.now();\n      const { error } = await supabase.storage\n        .from(\"images\")\n        .list(\"\", { limit: 1 });\n      const responseTime = Date.now() - start;\n\n      checks.push({\n        name: \"Storage Bucket\",\n        status: error ? \"error\" : \"healthy\",\n        message: error\n          ? `Storage error: ${error.message}`\n          : \"Storage accessible\",\n        lastChecked: new Date(),\n        responseTime,\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Storage Bucket\",\n        status: \"error\",\n        message: \"Storage check failed\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Data integrity checks\n    try {\n      const [eventsRes, membersRes, donationsRes] = await Promise.all([\n        supabase.from(\"events\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"members\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"donations\").select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n      const totalRecords =\n        (eventsRes.count || 0) +\n        (membersRes.count || 0) +\n        (donationsRes.count || 0);\n\n      checks.push({\n        name: \"Data Integrity\",\n        status: \"healthy\",\n        message: `${totalRecords} total records found`,\n        lastChecked: new Date(),\n        details: {\n          events: eventsRes.count || 0,\n          members: membersRes.count || 0,\n          donations: donationsRes.count || 0,\n        },\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Data Integrity\",\n        status: \"warning\",\n        message: \"Could not verify data integrity\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Email system check (mock)\n    checks.push({\n      name: \"Email System\",\n      status: \"healthy\",\n      message: \"Email service operational\",\n      lastChecked: new Date(),\n    });\n\n    // Payment system check (mock)\n    checks.push({\n      name: \"Payment System\",\n      status: \"healthy\",\n      message: \"Stripe integration active\",\n      lastChecked: new Date(),\n    });\n\n    setHealthChecks(checks);\n    setLastUpdate(new Date());\n\n    // Load system metrics\n    await loadSystemMetrics();\n\n    setLoading(false);\n  };\n\n  const loadSystemMetrics = async () => {\n    try {\n      // Get storage info\n      const { data: storageData } = await supabase.storage\n        .from(\"images\")\n        .list();\n\n      // Mock metrics (in a real app, these would come from monitoring services)\n      const mockMetrics: SystemMetrics = {\n        database: {\n          connections: 12,\n          queries: 1547,\n          avgResponseTime: 45,\n          storage: {\n            used: 2.3,\n            total: 10,\n            percentage: 23,\n          },\n        },\n        api: {\n          uptime: 99.8,\n          requests: 8432,\n          errors: 12,\n          avgResponseTime: 120,\n        },\n        storage: {\n          images: {\n            count: storageData?.length || 0,\n            size: 156.7, // MB\n          },\n          documents: {\n            count: 0,\n            size: 0,\n          },\n        },\n      };\n\n      setMetrics(mockMetrics);\n    } catch (error) {\n      console.error(\"Error loading metrics:\", error);\n    }\n  };\n\n  const getStatusIcon = (status: HealthCheck[\"status\"]) => {\n    switch (status) {\n      case \"healthy\":\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />;\n      case \"error\":\n        return <XCircle className=\"h-5 w-5 text-red-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: HealthCheck[\"status\"]) => {\n    const variants = {\n      healthy: \"default\",\n      warning: \"secondary\",\n      error: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status]} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const overallStatus =\n    healthChecks.length > 0\n      ? healthChecks.some((check) => check.status === \"error\")\n        ? \"error\"\n        : healthChecks.some((check) => check.status === \"warning\")\n          ? \"warning\"\n          : \"healthy\"\n      : \"healthy\";\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            System Health\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Monitor system status and performance metrics\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {lastUpdate && (\n            <span className=\"text-sm text-gray-500\">\n              Last updated: {format(lastUpdate, \"HH:mm:ss\")}\n            </span>\n          )}\n          <Button\n            onClick={runHealthChecks}\n            variant=\"outline\"\n            disabled={loading}\n          >\n            <RefreshCw\n              className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n            />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Overall Status */}\n      <AdminDiagnostics />\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            {getStatusIcon(overallStatus)}\n            <span>System Status</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-2xl font-bold text-church-burgundy capitalize\">\n                {overallStatus === \"healthy\"\n                  ? \"All Systems Operational\"\n                  : overallStatus === \"warning\"\n                    ? \"Some Issues Detected\"\n                    : \"Critical Issues Found\"}\n              </p>\n              <p className=\"text-gray-600\">\n                {healthChecks.filter((c) => c.status === \"healthy\").length} of{\" \"}\n                {healthChecks.length} services healthy\n              </p>\n            </div>\n            {getStatusBadge(overallStatus)}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"health\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"health\">Health Checks</TabsTrigger>\n          <TabsTrigger value=\"metrics\">System Metrics</TabsTrigger>\n          <TabsTrigger value=\"logs\">System Logs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"health\" className=\"space-y-4\">\n          {healthChecks.map((check, index) => (\n            <Card key={index}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getStatusIcon(check.status)}\n                    <div>\n                      <h3 className=\"font-medium\">{check.name}</h3>\n                      <p className=\"text-sm text-gray-600\">{check.message}</p>\n                      {check.details && (\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {Object.entries(check.details).map(([key, value]) => (\n                            <span key={key} className=\"mr-3\">\n                              {key}:{\" \"}\n                              {typeof value === \"object\"\n                                ? JSON.stringify(value)\n                                : String(value)}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    {getStatusBadge(check.status)}\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {format(check.lastChecked, \"HH:mm:ss\")}\n                    </p>\n                    {check.responseTime && (\n                      <p className=\"text-xs text-gray-500\">\n                        {check.responseTime}ms\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"metrics\" className=\"space-y-6\">\n          {metrics && (\n            <>\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Database className=\"h-4 w-4 mr-2\" />\n                      Database\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.database.connections}\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Active connections</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>Queries: {metrics.database.queries}</div>\n                      <div>\n                        Avg response: {metrics.database.avgResponseTime}ms\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Server className=\"h-4 w-4 mr-2\" />\n                      API\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.api.uptime}%\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Uptime</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>Requests: {metrics.api.requests}</div>\n                      <div>Errors: {metrics.api.errors}</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <HardDrive className=\"h-4 w-4 mr-2\" />\n                      Storage\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.database.storage.percentage}%\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Used</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>\n                        {metrics.database.storage.used}GB /{\" \"}\n                        {metrics.database.storage.total}GB\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Activity className=\"h-4 w-4 mr-2\" />\n                      Performance\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.api.avgResponseTime}ms\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Avg response time</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Storage Usage</CardTitle>\n                    <CardDescription>File storage breakdown</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Images</span>\n                      <span className=\"text-sm font-medium\">\n                        {metrics.storage.images.count} files (\n                        {metrics.storage.images.size} MB)\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Documents</span>\n                      <span className=\"text-sm font-medium\">\n                        {metrics.storage.documents.count} files (\n                        {metrics.storage.documents.size} MB)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-church-burgundy h-2 rounded-full\"\n                        style={{\n                          width: `${metrics.database.storage.percentage}%`,\n                        }}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Database Performance</CardTitle>\n                    <CardDescription>\n                      Query and connection metrics\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600\">\n                          Active Connections\n                        </p>\n                        <p className=\"text-2xl font-bold text-church-burgundy\">\n                          {metrics.database.connections}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Total Queries</p>\n                        <p className=\"text-2xl font-bold text-church-burgundy\">\n                          {metrics.database.queries}\n                        </p>\n                      </div>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600\">\n                        Average Response Time\n                      </p>\n                      <p className=\"text-lg font-semibold\">\n                        {metrics.database.avgResponseTime}ms\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"logs\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"h-5 w-5 mr-2\" />\n                Recent System Events\n              </CardTitle>\n              <CardDescription>\n                Latest system activities and alerts\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {[\n                  {\n                    time: \"10:30:15\",\n                    level: \"info\",\n                    message: \"Database backup completed successfully\",\n                  },\n                  {\n                    time: \"10:25:42\",\n                    level: \"info\",\n                    message: \"New member registration: John Doe\",\n                  },\n                  {\n                    time: \"10:20:18\",\n                    level: \"warning\",\n                    message: \"High memory usage detected (85%)\",\n                  },\n                  {\n                    time: \"10:15:33\",\n                    level: \"info\",\n                    message: \"Email campaign sent to 150 subscribers\",\n                  },\n                  {\n                    time: \"10:10:07\",\n                    level: \"error\",\n                    message: \"Failed to process payment for donation #1234\",\n                  },\n                  {\n                    time: \"10:05:21\",\n                    level: \"info\",\n                    message: \"System health check completed\",\n                  },\n                ].map((log, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center space-x-3 p-3 rounded-lg bg-gray-50\"\n                  >\n                    <div className=\"flex-shrink-0\">\n                      {log.level === \"error\" ? (\n                        <XCircle className=\"h-4 w-4 text-red-600\" />\n                      ) : log.level === \"warning\" ? (\n                        <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                      ) : (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">{log.message}</p>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">{log.time}</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Testimonials.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTestimonials'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadTestimonials]","fix":{"range":[1825,1827],"text":"[loadTestimonials]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterTestimonials'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [testimonials, searchTerm, approvalFilter, filterTestimonials]","fix":{"range":[1882,1924],"text":"[testimonials, searchTerm, approvalFilter, filterTestimonials]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Search,\n  MessageSquare,\n  CheckCircle,\n  Clock,\n  Eye,\n  EyeOff,\n  Trash2,\n  User,\n  ThumbsUp,\n  ThumbsDown,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Testimonial {\n  id: string;\n  name: string;\n  content: string;\n  is_approved: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminTestimonials() {\n  const [testimonials, setTestimonials] = useState<Testimonial[]>([]);\n  const [filteredTestimonials, setFilteredTestimonials] = useState<\n    Testimonial[]\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTestimonial, setSelectedTestimonial] =\n    useState<Testimonial | null>(null);\n  const [approvalFilter, setApprovalFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadTestimonials();\n  }, []);\n\n  useEffect(() => {\n    filterTestimonials();\n  }, [testimonials, searchTerm, approvalFilter]);\n\n  const loadTestimonials = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"testimonials\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setTestimonials(data || []);\n    } catch (error) {\n      console.error(\"Error loading testimonials:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load testimonials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterTestimonials = () => {\n    let filtered = testimonials;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (testimonial) =>\n          testimonial.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          testimonial.content.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Approval filter\n    if (approvalFilter !== \"all\") {\n      const isApproved = approvalFilter === \"approved\";\n      filtered = filtered.filter(\n        (testimonial) => testimonial.is_approved === isApproved,\n      );\n    }\n\n    setFilteredTestimonials(filtered);\n  };\n\n  const toggleApproval = async (id: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from(\"testimonials\")\n        .update({\n          is_approved: !currentStatus,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: `Testimonial ${!currentStatus ? \"approved\" : \"unapproved\"} successfully`,\n      });\n      loadTestimonials();\n    } catch (error) {\n      console.error(\"Error updating testimonial:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update testimonial\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteTestimonial = async (id: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"testimonials\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Testimonial deleted successfully\",\n      });\n      loadTestimonials();\n    } catch (error) {\n      console.error(\"Error deleting testimonial:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete testimonial\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const calculateStats = () => {\n    const totalTestimonials = testimonials.length;\n    const approvedTestimonials = testimonials.filter(\n      (t) => t.is_approved,\n    ).length;\n    const pendingTestimonials = testimonials.filter(\n      (t) => !t.is_approved,\n    ).length;\n    const thisMonthTestimonials = testimonials.filter(\n      (t) => new Date(t.created_at).getMonth() === new Date().getMonth(),\n    ).length;\n\n    return {\n      totalTestimonials,\n      approvedTestimonials,\n      pendingTestimonials,\n      thisMonthTestimonials,\n    };\n  };\n\n  const stats = calculateStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Testimonials Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Review and manage testimonials from church members\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              Total Testimonials\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {stats.totalTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Approved\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats.approvedTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.totalTestimonials > 0\n                ? Math.round(\n                    (stats.approvedTestimonials / stats.totalTestimonials) *\n                      100,\n                  )\n                : 0}\n              % of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Pending Review\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {stats.pendingTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">Awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <User className=\"w-4 h-4 mr-2\" />\n              This Month\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {stats.thisMonthTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">New testimonials</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search testimonials...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Approval Status</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={approvalFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={\n                    approvalFilter === \"approved\" ? \"default\" : \"outline\"\n                  }\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"approved\")}\n                >\n                  Approved\n                </Button>\n                <Button\n                  variant={approvalFilter === \"pending\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"pending\")}\n                >\n                  Pending\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Testimonials Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Testimonials ({filteredTestimonials.length})</CardTitle>\n          <CardDescription>\n            Review and manage community testimonials\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Testimonial</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTestimonials.map((testimonial) => (\n                  <TableRow key={testimonial.id}>\n                    <TableCell>\n                      {format(new Date(testimonial.created_at), \"MMM d, yyyy\")}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"font-medium\">{testimonial.name}</div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <p className=\"truncate\">{testimonial.content}</p>\n                        <Button\n                          variant=\"link\"\n                          size=\"sm\"\n                          className=\"p-0 h-auto text-xs\"\n                          onClick={() => setSelectedTestimonial(testimonial)}\n                        >\n                          Read full testimonial\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {testimonial.is_approved ? (\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Approved\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Pending\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            toggleApproval(\n                              testimonial.id,\n                              testimonial.is_approved,\n                            )\n                          }\n                          className={\n                            testimonial.is_approved\n                              ? \"\"\n                              : \"bg-green-50 hover:bg-green-100\"\n                          }\n                        >\n                          {testimonial.is_approved ? (\n                            <>\n                              <ThumbsDown className=\"w-3 h-3 mr-1\" />\n                              Unapprove\n                            </>\n                          ) : (\n                            <>\n                              <ThumbsUp className=\"w-3 h-3 mr-1\" />\n                              Approve\n                            </>\n                          )}\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>\n                                Delete Testimonial\n                              </AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this testimonial\n                                from {testimonial.name}? This action cannot be\n                                undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() =>\n                                  deleteTestimonial(testimonial.id)\n                                }\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredTestimonials.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No testimonials found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Testimonial Detail Dialog */}\n      <Dialog\n        open={!!selectedTestimonial}\n        onOpenChange={() => setSelectedTestimonial(null)}\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Testimonial Details</DialogTitle>\n            <DialogDescription>\n              {selectedTestimonial &&\n                format(\n                  new Date(selectedTestimonial.created_at),\n                  \"MMMM d, yyyy 'at' h:mm a\",\n                )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTestimonial && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">From:</Label>\n                <p className=\"text-sm font-medium\">\n                  {selectedTestimonial.name}\n                </p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Testimonial:</Label>\n                <div className=\"mt-2 p-4 bg-gray-50 rounded-md border-l-4 border-church-gold\">\n                  <p className=\"text-sm leading-relaxed whitespace-pre-wrap italic\">\n                    \"{selectedTestimonial.content}\"\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between pt-4 border-t\">\n                <div className=\"flex items-center space-x-2\">\n                  <Label className=\"text-sm\">Status:</Label>\n                  {selectedTestimonial.is_approved ? (\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Approved\n                    </Badge>\n                  ) : (\n                    <Badge className=\"bg-yellow-100 text-yellow-800\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      Pending Review\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      toggleApproval(\n                        selectedTestimonial.id,\n                        selectedTestimonial.is_approved,\n                      );\n                      setSelectedTestimonial(null);\n                    }}\n                    className={\n                      selectedTestimonial.is_approved\n                        ? \"\"\n                        : \"bg-green-50 hover:bg-green-100\"\n                    }\n                  >\n                    {selectedTestimonial.is_approved ? (\n                      <>\n                        <ThumbsDown className=\"w-4 h-4 mr-2\" />\n                        Unapprove\n                      </>\n                    ) : (\n                      <>\n                        <ThumbsUp className=\"w-4 h-4 mr-2\" />\n                        Approve\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Users.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit2' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'ShieldAlert' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'editingUser' is assigned a value but never used.","line":82,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'setEditingUser' is assigned a value but never used.","line":82,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUsers]","fix":{"range":[2014,2016],"text":"[fetchUsers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterUsers'. Either include it or remove the dependency array.","line":90,"column":6,"nodeType":"ArrayExpression","endLine":90,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [users, searchTerm, filterUsers]","fix":{"range":[2064,2083],"text":"[users, searchTerm, filterUsers]"}}]},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":130,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":130,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":138,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'handleRoleChange' is assigned a value but never used.","line":163,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":25}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { api } from \"@/integrations/supabase/api\";\nimport {\n  Loader2,\n  UserPlus,\n  Edit2,\n  Trash2,\n  Mail,\n  ShieldCheck,\n  ShieldAlert,\n  UserX,\n  Search,\n  Crown,\n  Shield,\n  ArrowUp,\n  ArrowDown,\n} from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n  created_at: string;\n}\n\nexport default function Users() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false);\n  const [userToDelete, setUserToDelete] = useState<User | null>(null);\n  const [adminCount, setAdminCount] = useState(0);\n  const [userCount, setUserCount] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    filterUsers();\n  }, [users, searchTerm]);\n\n  const fetchUsers = async () => {\n    try {\n      const { data: profiles, error } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setUsers(profiles);\n\n      // Count admins and regular users\n      const admins = profiles.filter((user) => user.role === \"admin\");\n      setAdminCount(admins.length);\n      setUserCount(profiles.length - admins.length);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch users\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterUsers = () => {\n    if (!searchTerm) {\n      setFilteredUsers(users);\n      return;\n    }\n\n    const filtered = users.filter((user) =>\n      user.email.toLowerCase().includes(searchTerm.toLowerCase()),\n    );\n    setFilteredUsers(filtered);\n  };\n\n  const handleAddUser = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n    const role = formData.get(\"role\") as string;\n\n    try {\n      // Create a new user profile directly\n      const { data, error } = await supabase.from(\"profiles\").insert([\n        {\n          email,\n          role,\n        },\n      ]);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User added successfully\",\n      });\n      setIsAddDialogOpen(false);\n      fetchUsers();\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRoleChange = async (userId: string, newRole: string) => {\n    try {\n      // Check if trying to demote the last admin\n      if (newRole === \"user\" && adminCount <= 1) {\n        const user = users.find((u) => u.id === userId);\n        if (user?.role === \"admin\") {\n          toast({\n            title: \"Cannot Demote\",\n            description: \"Cannot demote the last admin user\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: newRole })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePromoteToAdmin = async (userId: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: \"admin\" })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User promoted to admin successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error promoting user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to promote user to admin\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDemoteFromAdmin = async (userId: string) => {\n    try {\n      // Check if this is the last admin\n      if (adminCount <= 1) {\n        toast({\n          title: \"Cannot Demote\",\n          description: \"Cannot demote the last admin user\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: \"user\" })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Admin demoted to user successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error demoting admin:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to demote admin\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const confirmDeleteUser = (user: User) => {\n    setUserToDelete(user);\n    setIsConfirmDeleteOpen(true);\n  };\n\n  const handleDeleteUser = async () => {\n    if (!userToDelete) return;\n\n    try {\n      // Check if this is the last admin\n      if (userToDelete.role === \"admin\" && adminCount <= 1) {\n        toast({\n          title: \"Cannot Delete\",\n          description: \"Cannot delete the last admin user\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .delete()\n        .eq(\"id\", userToDelete.id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsConfirmDeleteOpen(false);\n      setUserToDelete(null);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            User Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Add, edit, or remove users and manage their roles\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New User</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddUser} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"user@example.com\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"role\">Role</Label>\n                <Select name=\"role\" defaultValue=\"user\">\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"user\">User</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-church-burgundy hover:bg-church-burgundy/90\"\n              >\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add User\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Admin Users</CardTitle>\n            <CardDescription>\n              Users with administrative privileges\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <Crown className=\"h-5 w-5 text-yellow-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {adminCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Regular Users</CardTitle>\n            <CardDescription>Users with standard access</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <Shield className=\"h-5 w-5 text-blue-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {userCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <CardDescription>All registered users</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <ShieldCheck className=\"h-5 w-5 text-green-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-green-600\">\n                {adminCount + userCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search Users</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by email...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"border rounded-lg\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Email</TableHead>\n              <TableHead>Role</TableHead>\n              <TableHead>Admin Actions</TableHead>\n              <TableHead>Created At</TableHead>\n              <TableHead className=\"w-[120px]\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredUsers.map((user) => (\n              <TableRow key={user.id}>\n                <TableCell>{user.email}</TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    {user.role === \"admin\" ? (\n                      <div className=\"flex items-center space-x-1 px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs font-medium\">\n                        <Crown className=\"h-3 w-3\" />\n                        <span>Admin</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium\">\n                        <Shield className=\"h-3 w-3\" />\n                        <span>User</span>\n                      </div>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    {user.role === \"admin\" ? (\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-orange-600 hover:text-orange-700 border-orange-200 hover:border-orange-300\"\n                            disabled={adminCount <= 1}\n                          >\n                            <ArrowDown className=\"h-3 w-3 mr-1\" />\n                            Demote\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Demote Admin</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to demote {user.email} from\n                              admin to regular user?\n                              {adminCount <= 1 && (\n                                <p className=\"text-red-500 mt-2 font-bold\">\n                                  Warning: Cannot demote the last admin user.\n                                </p>\n                              )}\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDemoteFromAdmin(user.id)}\n                              className=\"bg-orange-600 hover:bg-orange-700\"\n                              disabled={adminCount <= 1}\n                            >\n                              <ArrowDown className=\"h-4 w-4 mr-2\" />\n                              Demote to User\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    ) : (\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-green-600 hover:text-green-700 border-green-200 hover:border-green-300\"\n                          >\n                            <ArrowUp className=\"h-3 w-3 mr-1\" />\n                            Promote\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>\n                              Promote to Admin\n                            </AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to promote {user.email} to\n                              admin? This will give them full administrative\n                              privileges.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handlePromoteToAdmin(user.id)}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                            >\n                              <ArrowUp className=\"h-4 w-4 mr-2\" />\n                              Promote to Admin\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  {new Date(user.created_at).toLocaleDateString()}\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex space-x-2\">\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"text-red-500 hover:text-red-700\"\n                          onClick={() => confirmDeleteUser(user)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete User</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete {user.email}? This\n                            action cannot be undone.\n                            {user.role === \"admin\" && adminCount <= 1 && (\n                              <p className=\"text-red-500 mt-2 font-bold\">\n                                Warning: Cannot delete the last admin user.\n                              </p>\n                            )}\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={handleDeleteUser}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                            disabled={user.role === \"admin\" && adminCount <= 1}\n                          >\n                            <UserX className=\"h-4 w-4 mr-2\" />\n                            Delete User\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        {filteredUsers.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500\">\n            No users found matching your criteria.\n          </div>\n        )}\n      </div>\n\n      {/* Delete User Confirmation Dialog */}\n      <AlertDialog\n        open={isConfirmDeleteOpen}\n        onOpenChange={setIsConfirmDeleteOpen}\n      >\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {userToDelete?.email}? This action\n              cannot be undone.\n              {userToDelete?.role === \"admin\" && adminCount <= 1 && (\n                <p className=\"text-red-500 mt-2 font-bold\">\n                  Warning: Cannot delete the last admin user.\n                </p>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteUser}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={userToDelete?.role === \"admin\" && adminCount <= 1}\n            >\n              <UserX className=\"h-4 w-4 mr-2\" />\n              Delete User\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/email-marketing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-admin-v2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-admin-v3.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":23,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":82,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from \"@supabase/supabase-js\";\nimport type { Database } from \"../integrations/supabase/types\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\n// Get Supabase URL and anon key from environment variables or use defaults\nconst supabaseUrl = \"https://nvigfdxosyqhnoljtfld.supabase.co\";\nconst supabaseKey =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52aWdmZHhvc3lxaG5vbGp0ZmxkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNjU0MjMsImV4cCI6MjA2Mjc0MTQyM30.3fkZqIajZVAg__YHUr7rbBMOxXwVSjKBgcoQkKCqAPY\";\n\nasync function createAdminUser() {\n  console.log(\"Initializing Supabase client...\");\n  const supabase = createClient<Database>(supabaseUrl, supabaseKey);\n\n  try {\n    // Step 1: Create the user\n    console.log(\"Creating user account...\");\n    const { data: authData, error: signUpError } = await supabase.auth.signUp({\n      email: \"khaliddawit7546@gmail.com\",\n      password: \"12345678\",\n      options: {\n        emailRedirectTo: `${process.env.VITE_PUBLIC_SITE_URL || \"http://localhost:8080\"}/admin/login`,\n      },\n    });\n\n    if (signUpError) {\n      throw new Error(`Signup Error: ${signUpError.message}`);\n    }\n\n    if (!authData.user) {\n      throw new Error(\"No user data returned from signup\");\n    }\n\n    console.log(\"User created successfully!\");\n    console.log(\"User ID:\", authData.user.id);\n    console.log(\"Email:\", authData.user.email);\n\n    // Step 2: Set admin role in profiles table\n    console.log(\"Setting admin role...\");\n    const { error: insertError } = await supabase.from(\"profiles\").insert({\n      id: authData.user.id,\n      role: \"admin\",\n    });\n\n    if (insertError) {\n      console.error(\"Insert Error:\", insertError);\n      throw new Error(`Profile Creation Error: ${insertError.message}`);\n    }\n\n    // Step 3: Verify the profile was created\n    const { data: profile, error: fetchError } = await supabase\n      .from(\"profiles\")\n      .select(\"*\")\n      .eq(\"id\", authData.user.id)\n      .single();\n\n    if (fetchError) {\n      throw new Error(`Profile Fetch Error: ${fetchError.message}`);\n    }\n\n    if (!profile) {\n      throw new Error(\"Profile creation failed - no profile found\");\n    }\n\n    console.log(\"=================================\");\n    console.log(\"Admin user created successfully!\");\n    console.log(\"=================================\");\n    console.log(\"Email:\", \"khaliddawit7546@gmail.com\");\n    console.log(\"Password:\", \"12345678\");\n    console.log(\"Role:\", profile.role);\n    console.log(\"=================================\");\n    console.log(\"Please check your email to confirm your account\");\n    console.log(\"After confirmation, you can login at /admin/login\");\n  } catch (error) {\n    console.error(\"Error:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", error.message);\n      console.error(\"Stack trace:\", error.stack);\n    }\n  } finally {\n    process.exit(0);\n  }\n}\n\ncreateAdminUser().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-admin-v4.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-test-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/setup-admin.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":5,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":7,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":10}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from \"@supabase/supabase-js\";\nimport type { Database } from \"../integrations/supabase/types\";\n\nconst supabaseUrl =\n  process.env.VITE_SUPABASE_URL || \"https://nvigfdxosyqhnoljtfld.supabase.co\";\nconst supabaseKey =\n  process.env.VITE_SUPABASE_ANON_KEY ||\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52aWdmZHhvc3lxaG5vbGp0ZmxkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNjU0MjMsImV4cCI6MjA2Mjc0MTQyM30.3fkZqIajZVAg__YHUr7rbBMOxXwVSjKBgcoQkKCqAPY\";\n\nconst ADMIN_EMAIL = \"admin@church.test\";\nconst ADMIN_PASSWORD = \"admin1234\";\n\nasync function setupAdmin() {\n  const supabase = createClient<Database>(supabaseUrl, supabaseKey);\n\n  try {\n    // First, sign in with the existing account\n    const { data: signInData, error: signInError } =\n      await supabase.auth.signInWithPassword({\n        email: ADMIN_EMAIL,\n        password: ADMIN_PASSWORD,\n      });\n\n    if (signInError) {\n      // If sign in fails, try to sign up\n      console.log(\"Attempting to create new admin user...\");\n      const { data: signUpData, error: signUpError } =\n        await supabase.auth.signUp({\n          email: ADMIN_EMAIL,\n          password: ADMIN_PASSWORD,\n        });\n\n      if (signUpError) {\n        throw new Error(`Sign up failed: ${signUpError.message}`);\n      }\n\n      if (!signUpData.user) {\n        throw new Error(\"No user data returned from sign up\");\n      }\n\n      console.log(\"User created successfully\");\n      console.log(\"User ID:\", signUpData.user.id);\n\n      // Create admin profile\n      const { error: profileError } = await supabase.from(\"profiles\").upsert({\n        id: signUpData.user.id,\n        role: \"admin\",\n      });\n\n      if (profileError) {\n        console.error(\"Profile Error:\", profileError);\n        throw profileError;\n      }\n\n      console.log(\"=================================\");\n      console.log(\"Admin user created successfully!\");\n      console.log(\"=================================\");\n      console.log(\"Email: khaliddawit7546@gmail.com\");\n      console.log(\"Password: 12345678\");\n      console.log(\"=================================\");\n      console.log(\"Please check your email to confirm your account\");\n      console.log(\"After confirmation, you can login at /admin/login\");\n    } else {\n      // User exists, update their role to admin\n      console.log(\"User already exists, updating role to admin...\");\n\n      const { error: profileError } = await supabase.from(\"profiles\").upsert({\n        id: signInData.user.id,\n        role: \"admin\",\n      });\n\n      if (profileError) {\n        console.error(\"Profile Error:\", profileError);\n        throw profileError;\n      }\n\n      console.log(\"=================================\");\n      console.log(\"User role updated to admin!\");\n      console.log(\"=================================\");\n      console.log(\"Email: khaliddawit7546@gmail.com\");\n      console.log(\"Password: 12345678\");\n      console.log(\"=================================\");\n      console.log(\"You can now login at /admin/login\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error message:\", error.message);\n    }\n  }\n}\n\nsetupAdmin().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"/app/src/services/DataSyncService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/services/GitSyncService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/services/appointments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/Layout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-admin-layout.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-analytics.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":16,"column":44,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// This file must be .tsx to support JSX\n\nimport { describe, it, expect, vi } from 'vitest';\nimport { render } from './test-utils';\n\nvi.mock(\"@/integrations/supabase/client\", () => ({\n  supabase: { from: vi.fn(() => ({ select: vi.fn(() => ({ gte: vi.fn(() => ({ data: [], count: 0 }) ) }) ) })) }\n}));\nvi.mock(\"@/components/ui/use-toast\", () => ({ useToast: () => ({ toast: vi.fn() }) }));\n\nimport Analytics from '../pages/admin/Analytics';\n\ndescribe('AdminAnalytics', () => {\n  it('should render without crashing', () => {\n    // @ts-expect-error: JSX/TSX import workaround\n    const { container } = render(<Analytics />);\n    expect(container).toBeDefined();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-analytics.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-appointments.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-bulk-operations.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-content-scheduler.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-dashboard.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-donations.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-email-marketing.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-email-templates.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-events.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-gallery.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-healthcheck.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-login.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-members.test.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":55,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":68,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":79,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":33}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from \"vitest\";\n\nvi.mock(\"@/integrations/supabase/client\", () => {\n  const mockSelect = vi.fn(() => ({\n    order: vi.fn(() => ({\n      data: [\n        {\n          id: \"1\",\n          full_name: \"Test User\",\n          email: \"test@example.com\",\n          phone: \"123\",\n          address: \"\",\n          membership_type: \"regular\",\n          membership_status: \"active\",\n          join_date: \"2025-07-09\",\n          membership_date: \"2025-07-09\",\n          last_renewal_date: null,\n          next_renewal_date: null,\n          created_at: \"2025-07-09\",\n          updated_at: \"2025-07-09\",\n        },\n      ],\n      error: null,\n    })),\n  }));\n  const mockInsert = vi.fn(() => ({ error: null }));\n  const mockUpdate = vi.fn(() => ({ error: null }));\n  const mockDelete = vi.fn(() => ({ error: null }));\n  const mockFrom = vi.fn(() => ({\n    select: mockSelect,\n    insert: mockInsert,\n    update: mockUpdate,\n    delete: mockDelete,\n    order: vi.fn(() => ({ data: [], error: null })),\n    eq: vi.fn(() => ({ update: mockUpdate, delete: mockDelete })),\n  }));\n  const channel = { on: vi.fn().mockReturnThis(), subscribe: vi.fn() };\n  return {\n    supabase: { from: mockFrom, channel: vi.fn(() => channel) },\n    __mocks: { mockSelect, mockInsert, mockUpdate, mockDelete, mockFrom },\n  };\n});\n\nconst mockToast = vi.fn();\nvi.mock(\"@/components/ui/use-toast\", () => ({\n  useToast: () => ({ toast: mockToast }),\n}));\n\nimport AdminMembers from \"../pages/admin/Members\";\n\ndescribe(\"AdminMembers logic\", () => {\n  it(\"should load members and refresh after add\", async () => {\n    const {\n      supabase: { __mocks },\n    } = require(\"@/integrations/supabase/client\");\n    AdminMembers();\n    // Simulate add\n    await __mocks.mockInsert();\n    // Simulate refresh\n    await __mocks.mockSelect();\n    expect(__mocks.mockInsert).toHaveBeenCalled();\n    expect(__mocks.mockSelect).toHaveBeenCalled();\n  });\n\n  it(\"should update and delete members and refresh\", async () => {\n    const {\n      supabase: { __mocks },\n    } = require(\"@/integrations/supabase/client\");\n    AdminMembers();\n    await __mocks.mockUpdate();\n    await __mocks.mockDelete();\n    await __mocks.mockSelect();\n    expect(__mocks.mockUpdate).toHaveBeenCalled();\n    expect(__mocks.mockDelete).toHaveBeenCalled();\n    expect(__mocks.mockSelect).toHaveBeenCalled();\n  });\n\n  it(\"should handle a mock real-time sync event\", () => {\n    const { supabase } = require(\"@/integrations/supabase/client\");\n    AdminMembers();\n    expect(supabase.channel).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-prayer-requests-complete.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-prayer-requests.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-settings.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-system-health.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-testimonials.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/admin-users.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/appointments.service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/appointments.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/data-sync-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/error-handling.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/error-handling.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/git-sync-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/membership-registration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/router-context.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/test/test-utils.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":16,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":16,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":16,"column":52,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":57},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"This rule can't verify that `export *` only exports components.","line":29,"column":1,"nodeType":"ExportAllDeclaration","messageId":"exportAll","endLine":29,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Custom test utilities for rendering React components with all providers.\n *\n * Usage:\n *   import { render } from './test-utils';\n *   render(<MyComponent />);\n *\n * This wraps components in MemoryRouter and LanguageProvider.\n */\n\nimport { ReactElement } from \"react\";\nimport { render, RenderOptions } from \"@testing-library/react\";\nimport { MemoryRouter } from \"react-router-dom\";\nimport { LanguageProvider } from \"../contexts/LanguageContext\";\n\nconst AllTheProviders = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <MemoryRouter initialEntries={[\"/\"]}>\n      <LanguageProvider>{children}</LanguageProvider>\n    </MemoryRouter>\n  );\n};\n\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, \"wrapper\">,\n) => render(ui, { wrapper: AllTheProviders, ...options });\n\nexport * from \"@testing-library/react\";\nexport { customRender as render };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/types/env.d.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ImportMeta' is defined but never used.","line":18,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_APP_NAME: string;\n  readonly VITE_APP_URL: string;\n  readonly VITE_SUPABASE_URL: string;\n  readonly VITE_SUPABASE_ANON_KEY: string;\n  readonly VITE_STRIPE_PUBLISHABLE_KEY: string;\n  readonly VITE_API_URL: string;\n  readonly VITE_ENABLE_ADMIN_REGISTRATION: string;\n  readonly VITE_ENABLE_MAINTENANCE_MODE: string;\n  readonly VITE_GA_TRACKING_ID: string;\n  readonly VITE_FACEBOOK_URL: string;\n  readonly VITE_TWITTER_URL: string;\n  readonly VITE_YOUTUBE_URL: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/types/globals.d.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ProcessEnv' is defined but never used.","line":3,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'ImportMetaEnv' is defined but never used.","line":8,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'process' is defined but never used.","line":12,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'console' is defined but never used.","line":13,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'Console' is not defined.","line":13,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'Deno' is defined but never used.","line":14,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'require' is defined but never used.","line":15,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'__dirname' is defined but never used.","line":16,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'DataSyncService' is defined but never used.","line":18,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":30}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Global type definitions for NodeJS, ImportMetaEnv, and other missing types\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    [key: string]: string | undefined;\n  }\n}\n\ndeclare interface ImportMetaEnv {\n  [key: string]: string | undefined;\n}\n\ndeclare var process: NodeJS.ProcessEnv;\ndeclare var console: Console;\ndeclare var Deno: any;\ndeclare var require: any;\ndeclare var __dirname: string;\n\ndeclare class DataSyncService {}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/types/member.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/types/supabase.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":694,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":694,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":697,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":697,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":700,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":700,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":703,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":703,"endColumn":9}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[];\n\nexport type Database = {\n  public: {\n    Tables: {\n      appointments: {\n        Row: {\n          admin_notes: string | null;\n          admin_response: string | null;\n          confirmed_date: string | null;\n          confirmed_time: string | null;\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string;\n          notes: string | null;\n          phone: string;\n          requested_date: string;\n          requested_time: string;\n          responded_at: string | null;\n          responded_by: string | null;\n          service_title: string;\n          status: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          admin_notes?: string | null;\n          admin_response?: string | null;\n          confirmed_date?: string | null;\n          confirmed_time?: string | null;\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name: string;\n          notes?: string | null;\n          phone: string;\n          requested_date: string;\n          requested_time: string;\n          responded_at?: string | null;\n          responded_by?: string | null;\n          service_title: string;\n          status?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          admin_notes?: string | null;\n          admin_response?: string | null;\n          confirmed_date?: string | null;\n          confirmed_time?: string | null;\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string;\n          notes?: string | null;\n          phone?: string;\n          requested_date?: string;\n          requested_time?: string;\n          responded_at?: string | null;\n          responded_by?: string | null;\n          service_title?: string;\n          status?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"appointments_responded_by_fkey\";\n            columns: [\"responded_by\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      donations: {\n        Row: {\n          amount: number;\n          created_at: string;\n          donor_email: string | null;\n          donor_name: string | null;\n          id: string;\n          is_anonymous: boolean | null;\n          payment_id: string | null;\n          payment_method: string | null;\n          payment_status: string | null;\n          purpose: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          amount: number;\n          created_at?: string;\n          donor_email?: string | null;\n          donor_name?: string | null;\n          id?: string;\n          is_anonymous?: boolean | null;\n          payment_id?: string | null;\n          payment_method?: string | null;\n          payment_status?: string | null;\n          purpose?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          amount?: number;\n          created_at?: string;\n          donor_email?: string | null;\n          donor_name?: string | null;\n          id?: string;\n          is_anonymous?: boolean | null;\n          payment_id?: string | null;\n          payment_method?: string | null;\n          payment_status?: string | null;\n          purpose?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      email_campaigns: {\n        Row: {\n          content: string;\n          created_at: string | null;\n          created_by: string | null;\n          id: string;\n          name: string;\n          recipient_count: number | null;\n          scheduled_at: string | null;\n          sent_at: string | null;\n          sent_count: number | null;\n          status: string | null;\n          subject: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          content: string;\n          created_at?: string | null;\n          created_by?: string | null;\n          id?: string;\n          name: string;\n          recipient_count?: number | null;\n          scheduled_at?: string | null;\n          sent_at?: string | null;\n          sent_count?: number | null;\n          status?: string | null;\n          subject: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          content?: string;\n          created_at?: string | null;\n          created_by?: string | null;\n          id?: string;\n          name?: string;\n          recipient_count?: number | null;\n          scheduled_at?: string | null;\n          sent_at?: string | null;\n          sent_count?: number | null;\n          status?: string | null;\n          subject?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_settings: {\n        Row: {\n          auto_welcome_email: boolean | null;\n          created_at: string | null;\n          enable_newsletters: boolean | null;\n          from_email: string | null;\n          from_name: string | null;\n          id: number;\n          newsletter_frequency: string | null;\n          smtp_host: string | null;\n          smtp_password: string | null;\n          smtp_port: number | null;\n          smtp_username: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          auto_welcome_email?: boolean | null;\n          created_at?: string | null;\n          enable_newsletters?: boolean | null;\n          from_email?: string | null;\n          from_name?: string | null;\n          id?: number;\n          newsletter_frequency?: string | null;\n          smtp_host?: string | null;\n          smtp_password?: string | null;\n          smtp_port?: number | null;\n          smtp_username?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          auto_welcome_email?: boolean | null;\n          created_at?: string | null;\n          enable_newsletters?: boolean | null;\n          from_email?: string | null;\n          from_name?: string | null;\n          id?: number;\n          newsletter_frequency?: string | null;\n          smtp_host?: string | null;\n          smtp_password?: string | null;\n          smtp_port?: number | null;\n          smtp_username?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_subscribers: {\n        Row: {\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string | null;\n          preferences: Json | null;\n          status: string | null;\n          subscribed_at: string | null;\n          unsubscribed_at: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name?: string | null;\n          preferences?: Json | null;\n          status?: string | null;\n          subscribed_at?: string | null;\n          unsubscribed_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string | null;\n          preferences?: Json | null;\n          status?: string | null;\n          subscribed_at?: string | null;\n          unsubscribed_at?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      email_templates: {\n        Row: {\n          content: string;\n          created_at: string | null;\n          id: string;\n          is_active: boolean | null;\n          name: string;\n          subject: string;\n          template_type: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          content: string;\n          created_at?: string | null;\n          id?: string;\n          is_active?: boolean | null;\n          name: string;\n          subject: string;\n          template_type: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          content?: string;\n          created_at?: string | null;\n          id?: string;\n          is_active?: boolean | null;\n          name?: string;\n          subject?: string;\n          template_type?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      events: {\n        Row: {\n          created_at: string;\n          description: string | null;\n          event_date: string;\n          event_time: string | null;\n          id: string;\n          image_url: string | null;\n          is_featured: boolean | null;\n          location: string | null;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          description?: string | null;\n          event_date: string;\n          event_time?: string | null;\n          id?: string;\n          image_url?: string | null;\n          is_featured?: boolean | null;\n          location?: string | null;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          description?: string | null;\n          event_date?: string;\n          event_time?: string | null;\n          id?: string;\n          image_url?: string | null;\n          is_featured?: boolean | null;\n          location?: string | null;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      gallery: {\n        Row: {\n          category: string | null;\n          created_at: string;\n          description: string | null;\n          id: string;\n          image_url: string;\n          is_featured: boolean | null;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          category?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          image_url: string;\n          is_featured?: boolean | null;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          category?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          image_url?: string;\n          is_featured?: boolean | null;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      members: {\n        Row: {\n          address: string | null;\n          created_at: string;\n          email: string | null;\n          full_name: string;\n          id: string;\n          join_date: string | null;\n          last_renewal_date: string | null;\n          membership_date: string | null;\n          membership_status: string | null;\n          membership_type: string | null;\n          next_renewal_date: string | null;\n          phone: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          address?: string | null;\n          created_at?: string;\n          email?: string | null;\n          full_name: string;\n          id?: string;\n          join_date?: string | null;\n          last_renewal_date?: string | null;\n          membership_date?: string | null;\n          membership_status?: string | null;\n          membership_type?: string | null;\n          next_renewal_date?: string | null;\n          phone?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          address?: string | null;\n          created_at?: string;\n          email?: string | null;\n          full_name?: string;\n          id?: string;\n          join_date?: string | null;\n          last_renewal_date?: string | null;\n          membership_date?: string | null;\n          membership_status?: string | null;\n          membership_type?: string | null;\n          next_renewal_date?: string | null;\n          phone?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      newsletter_subscribers: {\n        Row: {\n          created_at: string | null;\n          email: string;\n          id: string;\n          name: string | null;\n          subscribed: boolean | null;\n          subscription_date: string | null;\n          unsubscribe_token: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          name?: string | null;\n          subscribed?: boolean | null;\n          subscription_date?: string | null;\n          unsubscribe_token?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          name?: string | null;\n          subscribed?: boolean | null;\n          subscription_date?: string | null;\n          unsubscribe_token?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      prayer_requests: {\n        Row: {\n          created_at: string;\n          email: string | null;\n          id: string;\n          is_answered: boolean | null;\n          is_public: boolean | null;\n          name: string;\n          request: string;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          is_answered?: boolean | null;\n          is_public?: boolean | null;\n          name: string;\n          request: string;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          is_answered?: boolean | null;\n          is_public?: boolean | null;\n          name?: string;\n          request?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      profiles: {\n        Row: {\n          created_at: string;\n          email: string | null;\n          id: string;\n          role: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          role?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          created_at?: string;\n          email?: string | null;\n          id?: string;\n          role?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      scheduled_content: {\n        Row: {\n          content: Json;\n          created_at: string | null;\n          created_by: string | null;\n          id: string;\n          published_at: string | null;\n          recurring: Json | null;\n          scheduled_for: string;\n          status: string;\n          title: string;\n          type: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          content: Json;\n          created_at?: string | null;\n          created_by?: string | null;\n          id?: string;\n          published_at?: string | null;\n          recurring?: Json | null;\n          scheduled_for: string;\n          status?: string;\n          title: string;\n          type: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          content?: Json;\n          created_at?: string | null;\n          created_by?: string | null;\n          id?: string;\n          published_at?: string | null;\n          recurring?: Json | null;\n          scheduled_for?: string;\n          status?: string;\n          title?: string;\n          type?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      sermons: {\n        Row: {\n          audio_url: string | null;\n          created_at: string;\n          description: string | null;\n          id: string;\n          is_featured: boolean | null;\n          preacher: string | null;\n          scripture_reference: string | null;\n          sermon_date: string;\n          title: string;\n          updated_at: string;\n        };\n        Insert: {\n          audio_url?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          is_featured?: boolean | null;\n          preacher?: string | null;\n          scripture_reference?: string | null;\n          sermon_date: string;\n          title: string;\n          updated_at?: string;\n        };\n        Update: {\n          audio_url?: string | null;\n          created_at?: string;\n          description?: string | null;\n          id?: string;\n          is_featured?: boolean | null;\n          preacher?: string | null;\n          scripture_reference?: string | null;\n          sermon_date?: string;\n          title?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      site_settings: {\n        Row: {\n          admin_email: string | null;\n          church_address: string | null;\n          church_name: string | null;\n          created_at: string;\n          email: string | null;\n          enable_donations: boolean | null;\n          enable_email_notifications: boolean | null;\n          enable_membership: boolean | null;\n          enable_newsletter: boolean | null;\n          enable_stripe: boolean | null;\n          from_email: string | null;\n          id: number;\n          maintenance_mode: boolean | null;\n          phone_number: string | null;\n          stripe_publishable_key: string | null;\n          updated_at: string;\n        };\n        Insert: {\n          admin_email?: string | null;\n          church_address?: string | null;\n          church_name?: string | null;\n          created_at?: string;\n          email?: string | null;\n          enable_donations?: boolean | null;\n          enable_email_notifications?: boolean | null;\n          enable_membership?: boolean | null;\n          enable_newsletter?: boolean | null;\n          enable_stripe?: boolean | null;\n          from_email?: string | null;\n          id?: number;\n          maintenance_mode?: boolean | null;\n          phone_number?: string | null;\n          stripe_publishable_key?: string | null;\n          updated_at?: string;\n        };\n        Update: {\n          admin_email?: string | null;\n          church_address?: string | null;\n          church_name?: string | null;\n          created_at?: string;\n          email?: string | null;\n          enable_donations?: boolean | null;\n          enable_email_notifications?: boolean | null;\n          enable_membership?: boolean | null;\n          enable_newsletter?: boolean | null;\n          enable_stripe?: boolean | null;\n          from_email?: string | null;\n          id?: number;\n          maintenance_mode?: boolean | null;\n          phone_number?: string | null;\n          stripe_publishable_key?: string | null;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n      stripe_settings: {\n        Row: {\n          created_at: string | null;\n          default_currency: string | null;\n          enable_stripe: boolean | null;\n          id: number;\n          stripe_mode: string | null;\n          stripe_publishable_key: string | null;\n          stripe_secret_key: string | null;\n          stripe_webhook_secret: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          default_currency?: string | null;\n          enable_stripe?: boolean | null;\n          id?: number;\n          stripe_mode?: string | null;\n          stripe_publishable_key?: string | null;\n          stripe_secret_key?: string | null;\n          stripe_webhook_secret?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          default_currency?: string | null;\n          enable_stripe?: boolean | null;\n          id?: number;\n          stripe_mode?: string | null;\n          stripe_publishable_key?: string | null;\n          stripe_secret_key?: string | null;\n          stripe_webhook_secret?: string | null;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      testimonials: {\n        Row: {\n          content: string;\n          created_at: string;\n          id: string;\n          is_approved: boolean | null;\n          name: string;\n          updated_at: string;\n        };\n        Insert: {\n          content: string;\n          created_at?: string;\n          id?: string;\n          is_approved?: boolean | null;\n          name: string;\n          updated_at?: string;\n        };\n        Update: {\n          content?: string;\n          created_at?: string;\n          id?: string;\n          is_approved?: boolean | null;\n          name?: string;\n          updated_at?: string;\n        };\n        Relationships: [];\n      };\n    };\n    Views: {\n      [_ in never]: never;\n    };\n    Functions: {\n      [_ in never]: never;\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n    CompositeTypes: {\n      [_ in never]: never;\n    };\n  };\n};\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">];\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R;\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R;\n      }\n      ? R\n      : never\n    : never;\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I;\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I;\n      }\n      ? I\n      : never\n    : never;\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U;\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U;\n      }\n      ? U\n      : never\n    : never;\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never;\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never;\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/adminDiagnostics.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":16,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":64,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":94,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":256,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\nexport interface DiagnosticResult {\n  component: string;\n  status: \"success\" | \"warning\" | \"error\";\n  message: string;\n  details?: any;\n}\n\nexport class AdminDiagnostics {\n  static async runFullDiagnostics(): Promise<DiagnosticResult[]> {\n    const results: DiagnosticResult[] = [];\n\n    // Test database connectivity\n    try {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n      if (error) throw error;\n      results.push({\n        component: \"Database Connection\",\n        status: \"success\",\n        message: \"Database connection successful\",\n      });\n    } catch (error) {\n      results.push({\n        component: \"Database Connection\",\n        status: \"error\",\n        message: \"Database connection failed\",\n        details: error,\n      });\n    }\n\n    // Test authentication\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (session) {\n        results.push({\n          component: \"Authentication\",\n          status: \"success\",\n          message: \"User authenticated successfully\",\n        });\n      } else {\n        results.push({\n          component: \"Authentication\",\n          status: \"warning\",\n          message: \"No active session found\",\n        });\n      }\n    } catch (error) {\n      results.push({\n        component: \"Authentication\",\n        status: \"error\",\n        message: \"Authentication check failed\",\n        details: error,\n      });\n    }\n\n    // Test storage access\n    try {\n      const { data, error } = await supabase.storage\n        .from(\"images\")\n        .list(\"\", { limit: 1 });\n      if (error) throw error;\n      results.push({\n        component: \"Storage Access\",\n        status: \"success\",\n        message: \"Storage access successful\",\n      });\n    } catch (error) {\n      results.push({\n        component: \"Storage Access\",\n        status: \"error\",\n        message: \"Storage access failed\",\n        details: error,\n      });\n    }\n\n    // Test each table\n    const tables = [\n      \"events\",\n      \"members\",\n      \"gallery\",\n      \"donations\",\n      \"testimonials\",\n      \"prayer_requests\",\n      \"sermons\",\n    ];\n    for (const table of tables) {\n      try {\n        const { data, error } = await supabase.from(table).select(\"*\").limit(1);\n        if (error) throw error;\n        results.push({\n          component: `Table: ${table}`,\n          status: \"success\",\n          message: `Table ${table} accessible`,\n        });\n      } catch (error) {\n        results.push({\n          component: `Table: ${table}`,\n          status: \"error\",\n          message: `Table ${table} access failed`,\n          details: error,\n        });\n      }\n    }\n\n    return results;\n  }\n\n  static async testImagePaths(): Promise<DiagnosticResult[]> {\n    const results: DiagnosticResult[] = [];\n    const imagePaths = [\n      \"/images/gallery/church-service.jpg\",\n      \"/images/religious/palm-sunday.jpg\",\n      \"/images/religious/crucifixion.jpg\",\n      \"/images/religious/procession.jpg\",\n      \"/images/gallery/timket.jpg\",\n      \"/images/gallery/ceremony-1.jpg\",\n      \"/images/gallery/ceremony-2.jpg\",\n      \"/images/gallery/ceremony-3.jpg\",\n    ];\n\n    for (const path of imagePaths) {\n      try {\n        const response = await fetch(path, { method: \"HEAD\" });\n        if (response.ok) {\n          results.push({\n            component: `Image: ${path}`,\n            status: \"success\",\n            message: `Image accessible`,\n          });\n        } else {\n          results.push({\n            component: `Image: ${path}`,\n            status: \"error\",\n            message: `Image not found (${response.status})`,\n          });\n        }\n      } catch (error) {\n        results.push({\n          component: `Image: ${path}`,\n          status: \"error\",\n          message: `Image check failed`,\n          details: error,\n        });\n      }\n    }\n\n    return results;\n  }\n}\n\n/**\n * Run comprehensive system diagnostics\n */\nexport const runSystemDiagnostics = async (): Promise<DiagnosticResult[]> => {\n  const results: DiagnosticResult[] = [];\n\n  try {\n    // Database connectivity check\n    try {\n      const start = Date.now();\n      const { error } = await supabase.from(\"profiles\").select(\"id\").limit(1);\n      const responseTime = Date.now() - start;\n\n      results.push({\n        component: \"Database Connection\",\n        status: error ? \"error\" : \"success\",\n        message: error\n          ? `Connection failed: ${error.message}`\n          : `Connected successfully (${responseTime}ms)`,\n        details: { responseTime },\n      });\n    } catch (error) {\n      results.push({\n        component: \"Database Connection\",\n        status: \"error\",\n        message: `Connection failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        details: error,\n      });\n    }\n\n    // Storage bucket check\n    try {\n      const start = Date.now();\n      const { error } = await supabase.storage\n        .from(\"images\")\n        .list(\"\", { limit: 1 });\n      const responseTime = Date.now() - start;\n\n      results.push({\n        component: \"Storage Bucket\",\n        status: error ? \"error\" : \"success\",\n        message: error\n          ? `Storage error: ${error.message}`\n          : `Storage accessible (${responseTime}ms)`,\n        details: { responseTime },\n      });\n    } catch (error) {\n      results.push({\n        component: \"Storage Bucket\",\n        status: \"error\",\n        message: `Storage check failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        details: error,\n      });\n    }\n\n    // Authentication check\n    try {\n      const { data } = await supabase.auth.getSession();\n      results.push({\n        component: \"Authentication\",\n        status: data.session ? \"success\" : \"warning\",\n        message: data.session ? \"User is authenticated\" : \"No active session\",\n        details: { hasSession: !!data.session },\n      });\n    } catch (error) {\n      results.push({\n        component: \"Authentication\",\n        status: \"error\",\n        message: `Auth check failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        details: error,\n      });\n    }\n\n    // Environment variables check\n    const requiredEnvVars = [\"SUPABASE_URL\", \"SUPABASE_ANON_KEY\"];\n    const missingEnvVars = requiredEnvVars.filter(\n      (varName) =>\n        !import.meta.env[`VITE_${varName}`] && !import.meta.env[varName],\n    );\n\n    results.push({\n      component: \"Environment Variables\",\n      status: missingEnvVars.length > 0 ? \"error\" : \"success\",\n      message:\n        missingEnvVars.length > 0\n          ? `Missing required variables: ${missingEnvVars.join(\", \")}`\n          : \"All required variables are set\",\n      details: { missingEnvVars },\n    });\n\n    // Browser features check\n    const browserFeatures = {\n      localStorage: typeof localStorage !== \"undefined\",\n      sessionStorage: typeof sessionStorage !== \"undefined\",\n      indexedDB: typeof indexedDB !== \"undefined\",\n      serviceWorker: \"serviceWorker\" in navigator,\n    };\n\n    const missingFeatures = Object.entries(browserFeatures)\n      .filter(([_, supported]) => !supported)\n      .map(([name]) => name);\n\n    results.push({\n      component: \"Browser Features\",\n      status: missingFeatures.length > 0 ? \"warning\" : \"success\",\n      message:\n        missingFeatures.length > 0\n          ? `Missing browser features: ${missingFeatures.join(\", \")}`\n          : \"All required browser features are supported\",\n      details: browserFeatures,\n    });\n\n    // Performance check\n    if (typeof performance !== \"undefined\") {\n      const navigationTiming = performance.getEntriesByType(\n        \"navigation\",\n      )[0] as PerformanceNavigationTiming;\n      const loadTime = navigationTiming\n        ? navigationTiming.loadEventEnd - navigationTiming.startTime\n        : null;\n\n      results.push({\n        component: \"Page Performance\",\n        status: loadTime && loadTime > 3000 ? \"warning\" : \"success\",\n        message: loadTime\n          ? `Page load time: ${Math.round(loadTime)}ms`\n          : \"Performance metrics not available\",\n        details: { loadTime },\n      });\n    }\n  } catch (error) {\n    console.error(\"Diagnostics error:\", error);\n    results.push({\n      component: \"Diagnostics Runner\",\n      status: \"error\",\n      message: `Failed to complete diagnostics: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      details: error,\n    });\n  }\n\n  return results;\n};\n\n/**\n * Get system performance metrics\n */\nexport const getPerformanceMetrics = () => {\n  if (typeof performance === \"undefined\") {\n    return null;\n  }\n\n  try {\n    const navigationTiming = performance.getEntriesByType(\n      \"navigation\",\n    )[0] as PerformanceNavigationTiming;\n\n    if (!navigationTiming) {\n      return null;\n    }\n\n    return {\n      loadTime: navigationTiming.loadEventEnd - navigationTiming.startTime,\n      domContentLoaded:\n        navigationTiming.domContentLoadedEventEnd - navigationTiming.startTime,\n      firstPaint: performance\n        .getEntriesByType(\"paint\")\n        .find((entry) => entry.name === \"first-paint\")?.startTime,\n      firstContentfulPaint: performance\n        .getEntriesByType(\"paint\")\n        .find((entry) => entry.name === \"first-contentful-paint\")?.startTime,\n      resourceCount: performance.getEntriesByType(\"resource\").length,\n      resourceSize: performance\n        .getEntriesByType(\"resource\")\n        .reduce(\n          (total, entry) =>\n            total + (entry as PerformanceResourceTiming).encodedBodySize,\n          0,\n        ),\n    };\n  } catch (error) {\n    console.error(\"Error getting performance metrics:\", error);\n    return null;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/adminHelpers.ts","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":100,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":103,"endColumn":18},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":104,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":105,"endColumn":79},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":145,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":148,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":13}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport { api } from \"@/integrations/supabase/api\";\n\n/**\n * Safe data loader with error handling and logging\n */\nexport const safeDataLoader = async <T>(\n  loader: () => Promise<{ data: T; error?: unknown }>,\n  context: string,\n): Promise<{ data: T | null; error: unknown }> => {\n  try {\n    console.log(`Loading data for: ${context}`);\n    const result = await loader();\n\n    if (result.error) {\n      console.error(`Data loading error for ${context}:`, result.error);\n      dataSyncService.logError(\n        `Data loading failed for ${context}`,\n        new Error(result.error.message || \"Unknown error\"),\n        context,\n      );\n      return { data: null, error: result.error };\n    }\n\n    console.log(\n      `Successfully loaded data for: ${context}`,\n      result.data?.length || \"N/A\",\n      \"items\",\n    );\n    return { data: result.data, error: null };\n  } catch (error) {\n    console.error(`Exception in data loader for ${context}:`, error);\n    dataSyncService.logError(\n      `Exception in data loader for ${context}`,\n      error as Error,\n      context,\n    );\n    return { data: null, error };\n  }\n};\n\n/**\n * Log admin actions with context\n */\nexport const logAdminAction = (\n  action: string,\n  table: string,\n  data?: Record<string, unknown>,\n  userId?: string,\n  details?: string,\n): void => {\n  try {\n    dataSyncService.notifyAdminAction(action, table, data, userId, details);\n    console.log(`Admin action logged: ${action} on ${table}`);\n  } catch (error) {\n    console.error(\"Failed to log admin action:\", error);\n  }\n};\n\n/**\n * Format error messages for user display\n */\nexport const formatErrorMessage = (\n  error: unknown,\n  fallback: string,\n): string => {\n  if (!error) return fallback;\n\n  // Handle Supabase errors\n  if (\n    error &&\n    typeof error === \"object\" &&\n    \"message\" in error &&\n    typeof error.message === \"string\"\n  ) {\n    return error.message;\n  }\n\n  // Handle string errors\n  if (typeof error === \"string\") {\n    return error;\n  }\n\n  // Handle PostgreSQL errors\n  if (\n    error &&\n    typeof error === \"object\" &&\n    \"code\" in error &&\n    typeof error.code === \"string\"\n  ) {\n    switch (error.code) {\n      case \"23505\":\n        return \"This record already exists\";\n      case \"23503\":\n        return \"Cannot delete this record because it is referenced by other data\";\n      case \"42P01\":\n        return \"Database table not found\";\n      default:\n        const details =\n          \"details\" in error && typeof error.details === \"string\"\n            ? error.details\n            : \"\";\n        const hint =\n          \"hint\" in error && typeof error.hint === \"string\" ? error.hint : \"\";\n        return details || hint || fallback;\n    }\n  }\n\n  return fallback;\n};\n\n/**\n * Validate email format\n */\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * Validate phone number format\n */\nexport const isValidPhone = (phone: string): boolean => {\n  // Remove unnecessary escapes and allow + at start\n  const phoneRegex = /^\\+?[1-9][\\d]{0,15}$/;\n  return phoneRegex.test(phone.replace(/[\\s\\-()]/g, \"\"));\n};\n\n/**\n * Generate a safe filename for exports\n */\nexport const generateExportFilename = (\n  prefix: string,\n  extension = \"csv\",\n): string => {\n  const timestamp = new Date().toISOString().split(\"T\")[0];\n  const safePrefix = prefix.replace(/[^a-zA-Z0-9]/g, \"_\");\n  return `${safePrefix}_${timestamp}.${extension}`;\n};\n\n/**\n * Debounce function for search inputs\n */\nexport const debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n): ((...args: Parameters<T>) => void) => {\n  let timeout: ReturnType<typeof setTimeout>;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n};\n\n/**\n * Safe JSON parse with fallback\n */\nexport const safeJsonParse = <T>(jsonString: string, fallback: T): T => {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    console.warn(\"Failed to parse JSON:\", error);\n    return fallback;\n  }\n};\n\n/**\n * Format currency for display\n */\nexport const formatCurrency = (amount: number, currency = \"USD\"): string => {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency,\n  }).format(amount);\n};\n\n/**\n * Format date for display\n */\nexport const formatDate = (date: string | Date, format = \"short\"): string => {\n  const dateObj = typeof date === \"string\" ? new Date(date) : date;\n\n  if (format === \"short\") {\n    return dateObj.toLocaleDateString();\n  } else if (format === \"long\") {\n    return dateObj.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  } else if (format === \"datetime\") {\n    return dateObj.toLocaleString();\n  }\n\n  return dateObj.toLocaleDateString();\n};\n\n/**\n * Check if user has admin permissions\n */\nexport const checkAdminPermissions = async (): Promise<boolean> => {\n  try {\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n    if (!session?.user) return false;\n\n    const { data: profile } = await supabase\n      .from(\"profiles\")\n      .select(\"role\")\n      .eq(\"id\", session.user.id)\n      .single();\n\n    return profile?.role === \"admin\";\n  } catch (error) {\n    console.error(\"Error checking admin permissions:\", error);\n    return false;\n  }\n};\n\n/**\n * Get current user profile\n */\nexport const getCurrentUserProfile = async () => {\n  try {\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n    if (!session?.user) return null;\n\n    const { data: profile } = await supabase\n      .from(\"profiles\")\n      .select(\"*\")\n      .eq(\"id\", session.user.id)\n      .single();\n\n    return profile;\n  } catch (error) {\n    console.error(\"Error getting current user profile:\", error);\n    return null;\n  }\n};\n\n/**\n * Bulk operations helper\n */\nexport const performBulkOperation = async (\n  operation: \"delete\" | \"update\" | \"export\",\n  table: string,\n  data: Record<string, unknown>,\n) => {\n  try {\n    const result = await dataSyncService.callAdminFunction(\n      `bulk${operation.charAt(0).toUpperCase() + operation.slice(1)}`,\n      {\n        table,\n        ...data,\n      },\n    );\n\n    logAdminAction(`bulk_${operation}`, table, {\n      count: data.ids?.length || data.updates?.length || 0,\n    });\n    return result;\n  } catch (error) {\n    console.error(`Bulk ${operation} failed:`, error);\n    throw error;\n  }\n};\n\n/**\n * Enhanced dashboard stats loader\n */\nexport const loadDashboardStats = async () => {\n  try {\n    const stats = await api.analytics.getDashboardStats();\n    logAdminAction(\"load\", \"dashboard_stats\", stats);\n    return stats;\n  } catch (error) {\n    console.error(\"Failed to load dashboard stats:\", error);\n    // Fallback to direct API calls\n    return await loadDashboardStatsFallback();\n  }\n};\n\n/**\n * Fallback dashboard stats loader\n */\nconst loadDashboardStatsFallback = async () => {\n  try {\n    const results = await Promise.allSettled([\n      supabase.from(\"events\").select(\"*\", { count: \"exact\", head: true }),\n      supabase.from(\"members\").select(\"*\", { count: \"exact\", head: true }),\n      supabase\n        .from(\"donations\")\n        .select(\"amount, created_at\")\n        .order(\"created_at\", { ascending: false }),\n      supabase.from(\"testimonials\").select(\"*\", { count: \"exact\", head: true }),\n      supabase\n        .from(\"prayer_requests\")\n        .select(\"*\", { count: \"exact\", head: true }),\n      supabase.from(\"sermons\").select(\"*\", { count: \"exact\", head: true }),\n    ]);\n\n    const [\n      eventsRes,\n      membersRes,\n      donationsRes,\n      testimonialsRes,\n      prayerRequestsRes,\n      sermonsRes,\n    ] = results.map((result) => {\n      if (result.status === \"rejected\") {\n        console.error(\"Dashboard data load failed:\", result.reason);\n        return { data: null, count: 0, error: result.reason };\n      }\n      return result.value;\n    });\n\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const validDonationsData = Array.isArray(donationsRes?.data)\n      ? donationsRes.data\n      : [];\n    const recentDonations = validDonationsData.filter(\n      (d: any) => d?.created_at && new Date(d.created_at) >= thirtyDaysAgo,\n    );\n\n    const recentDonationAmount = recentDonations.reduce(\n      (sum: number, d: any) => sum + (Number(d?.amount) || 0),\n      0,\n    );\n\n    return {\n      totalEvents: eventsRes?.count || 0,\n      totalMembers: membersRes?.count || 0,\n      totalDonations: Array.isArray(donationsRes?.data)\n        ? donationsRes.data.length\n        : 0,\n      totalTestimonials: testimonialsRes?.count || 0,\n      totalPrayerRequests: prayerRequestsRes?.count || 0,\n      totalSermons: sermonsRes?.count || 0,\n      recentDonationAmount,\n    };\n  } catch (error) {\n    console.error(\"Fallback dashboard stats failed:\", error);\n    return {\n      totalEvents: 0,\n      totalMembers: 0,\n      totalDonations: 0,\n      totalTestimonials: 0,\n      totalPrayerRequests: 0,\n      totalSermons: 0,\n      recentDonationAmount: 0,\n    };\n  }\n};\n\n/**\n * Enhanced recent activity loader\n */\nexport const loadRecentActivity = async (limit = 6) => {\n  try {\n    const activity = await api.analytics.getRecentActivity(limit);\n    const safeActivity = Array.isArray(activity) ? activity : [];\n    logAdminAction(\"load\", \"recent_activity\", { count: safeActivity.length });\n    return safeActivity;\n  } catch (error) {\n    console.error(\"Failed to load recent activity:\", error);\n    return [];\n  }\n};\n\n/**\n * Email marketing helper functions\n */\nexport const validateEmailTemplate = (template: any): boolean => {\n  if (!template.subject || !template.content) {\n    return false;\n  }\n  if (template.template_type === \"newsletter\" && !template.title) {\n    return false;\n  }\n  return true;\n};\n\nexport const formatEmailCampaignStats = (stats: Record<string, unknown>) => {\n  return {\n    sent: stats.sent || 0,\n    delivered: stats.delivered || 0,\n    opened: stats.opened || 0,\n    clicked: stats.clicked || 0,\n    bounced: stats.bounced || 0,\n    unsubscribed: stats.unsubscribed || 0,\n    deliveryRate:\n      stats.sent > 0 ? ((stats.delivered / stats.sent) * 100).toFixed(2) : \"0\",\n    openRate:\n      stats.delivered > 0\n        ? ((stats.opened / stats.delivered) * 100).toFixed(2)\n        : \"0\",\n    clickRate:\n      stats.opened > 0\n        ? ((stats.clicked / stats.opened) * 100).toFixed(2)\n        : \"0\",\n  };\n};\n\nexport const validateMemberData = (\n  memberData: Record<string, unknown>,\n): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n\n  if (!memberData.full_name || memberData.full_name.trim().length < 2) {\n    errors.push(\"Full name is required and must be at least 2 characters\");\n  }\n\n  if (memberData.email && !isValidEmail(memberData.email)) {\n    errors.push(\"Invalid email format\");\n  }\n\n  if (memberData.phone && !isValidPhone(memberData.phone)) {\n    errors.push(\"Invalid phone number format\");\n  }\n\n  const validMembershipTypes = [\"regular\", \"student\", \"senior\", \"family\"];\n  if (\n    memberData.membership_type &&\n    !validMembershipTypes.includes(memberData.membership_type)\n  ) {\n    errors.push(\"Invalid membership type\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\nexport const validateAppointmentData = (\n  appointmentData: Record<string, unknown>,\n): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n\n  if (!appointmentData.name || appointmentData.name.trim().length < 2) {\n    errors.push(\"Name is required and must be at least 2 characters\");\n  }\n\n  if (!appointmentData.email || !isValidEmail(appointmentData.email)) {\n    errors.push(\"Valid email is required\");\n  }\n\n  if (!appointmentData.phone || !isValidPhone(appointmentData.phone)) {\n    errors.push(\"Valid phone number is required\");\n  }\n\n  if (!appointmentData.service_title) {\n    errors.push(\"Service selection is required\");\n  }\n\n  if (!appointmentData.requested_date) {\n    errors.push(\"Requested date is required\");\n  }\n\n  if (!appointmentData.requested_time) {\n    errors.push(\"Requested time is required\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n/**\n * Admin panel health check\n */\nexport const performHealthCheck = async () => {\n  const results = {\n    database: false,\n    storage: false,\n    api: false,\n    auth: false,\n    sync: false,\n    environment: true,\n  };\n\n  try {\n    // Check environment variables\n    const requiredEnvVars = [\"SUPABASE_URL\", \"SUPABASE_ANON_KEY\"];\n    const missingEnvVars = requiredEnvVars.filter(\n      (varName) =>\n        !import.meta.env[`VITE_${varName}`] && !import.meta.env[varName],\n    );\n    results.environment = missingEnvVars.length === 0;\n\n    // Test database connection\n    const { error: dbError } = await supabase\n      .from(\"profiles\")\n      .select(\"count\", { count: \"exact\", head: true });\n    results.database = !dbError;\n\n    // Test storage\n    const { error: storageError } = await supabase.storage\n      .from(\"images\")\n      .list(\"\", { limit: 1 });\n    results.storage = !storageError;\n\n    // Test API endpoints\n    try {\n      await api.analytics.getDashboardStats();\n      results.api = true;\n    } catch (error) {\n      results.api = false;\n    }\n\n    // Test authentication\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n    results.auth = !!session;\n\n    // Test sync service\n    const syncStatus = dataSyncService.getStatus();\n    results.sync = syncStatus.isActive;\n  } catch (error) {\n    console.error(\"Health check failed:\", error);\n  }\n\n  return results;\n};\n\n/**\n * Export data to CSV format\n */\nexport const exportToCSV = (\n  data: Record<string, unknown>[],\n  filename: string,\n) => {\n  if (!Array.isArray(data) || data.length === 0) {\n    throw new Error(\"No data to export\");\n  }\n\n  const headers = Object.keys(data[0] || {});\n  const csvContent = [\n    headers.join(\",\"),\n    ...data.map((row) =>\n      headers\n        .map((header) => {\n          const value = row[header];\n          // Handle values that might contain commas or quotes\n          if (\n            typeof value === \"string\" &&\n            (value.includes(\",\") || value.includes('\"'))\n          ) {\n            return `\"${value.replace(/\"/g, '\"\"')}\"`;\n          }\n          return value || \"\";\n        })\n        .join(\",\"),\n    ),\n  ].join(\"\\n\");\n\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n  const link = document.createElement(\"a\");\n  const url = URL.createObjectURL(blob);\n  link.setAttribute(\"href\", url);\n  link.setAttribute(\"download\", generateExportFilename(filename));\n  link.style.visibility = \"hidden\";\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n\n  logAdminAction(\"export\", \"csv_export\", {\n    filename,\n    recordCount: data.length,\n  });\n};\n\n/**\n * Retry function with exponential backoff\n */\nexport const retryWithBackoff = async <T>(\n  fn: () => Promise<T>,\n  maxRetries = 3,\n  baseDelay = 1000,\n): Promise<T> => {\n  let lastError: Error;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n\n      if (attempt === maxRetries) {\n        throw lastError;\n      }\n\n      const delay = baseDelay * Math.pow(2, attempt);\n      console.warn(\n        `Attempt ${attempt + 1} failed, retrying in ${delay}ms:`,\n        error,\n      );\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n  }\n\n  throw lastError!;\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/adminTestSuite.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":170,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":170,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\n\ninterface TestResult {\n  name: string;\n  status: \"pass\" | \"fail\" | \"warning\";\n  message: string;\n  error?: any;\n}\n\ninterface TestSummary {\n  total: number;\n  passed: number;\n  failed: number;\n  warnings: number;\n}\n\nclass AdminTestSuite {\n  private results: TestResult[] = [];\n  private summary: TestSummary = {\n    total: 0,\n    passed: 0,\n    failed: 0,\n    warnings: 0,\n  };\n\n  async runTest(\n    name: string,\n    testFn: () => Promise<void>,\n  ): Promise<TestResult> {\n    try {\n      await testFn();\n      this.results.push({\n        name,\n        status: \"pass\",\n        message: \"Test passed successfully\",\n      });\n      this.summary.passed++;\n      return this.results[this.results.length - 1];\n    } catch (error) {\n      const isWarning = error instanceof Warning;\n      const result = {\n        name,\n        status: isWarning ? \"warning\" : \"fail\",\n        message: error instanceof Error ? error.message : String(error),\n        error,\n      };\n      this.results.push(result);\n      isWarning ? this.summary.warnings++ : this.summary.failed++;\n      return result;\n    } finally {\n      this.summary.total++;\n    }\n  }\n\n  getResults(): TestResult[] {\n    return [...this.results];\n  }\n\n  getTestSummary(): TestSummary {\n    return { ...this.summary };\n  }\n\n  clearResults(): void {\n    this.results = [];\n    this.summary = { total: 0, passed: 0, failed: 0, warnings: 0 };\n  }\n}\n\nclass Warning extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"Warning\";\n  }\n}\n\n// Create a singleton instance\nexport const adminTestSuite = new AdminTestSuite();\n\n// Helper function to run all tests\nexport async function runAdminTests(): Promise<TestResult[]> {\n  adminTestSuite.clearResults();\n\n  // Database tests\n  await adminTestSuite.runTest(\"Database Connection\", async () => {\n    const { error } = await supabase.from(\"profiles\").select(\"id\").limit(1);\n    if (error) throw new Error(`Database connection failed: ${error.message}`);\n  });\n\n  await adminTestSuite.runTest(\"Table Access: Members\", async () => {\n    const { error } = await supabase.from(\"members\").select(\"count\").limit(1);\n    if (error) throw new Error(`Members table access failed: ${error.message}`);\n  });\n\n  await adminTestSuite.runTest(\"Table Access: Events\", async () => {\n    const { error } = await supabase.from(\"events\").select(\"count\").limit(1);\n    if (error) throw new Error(`Events table access failed: ${error.message}`);\n  });\n\n  // Storage tests\n  await adminTestSuite.runTest(\"Storage Bucket Access\", async () => {\n    const { error } = await supabase.storage\n      .from(\"images\")\n      .list(\"\", { limit: 1 });\n    if (error)\n      throw new Error(`Storage bucket access failed: ${error.message}`);\n  });\n\n  // Authentication tests\n  await adminTestSuite.runTest(\"Authentication Status\", async () => {\n    const { data } = await supabase.auth.getSession();\n    if (!data.session) throw new Warning(\"No active session found\");\n  });\n\n  // Data sync tests\n  await adminTestSuite.runTest(\"Data Sync Service\", async () => {\n    const status = dataSyncService.getStatus();\n    if (!status.isActive) throw new Warning(\"Data sync service is not active\");\n    if (status.errors > 0)\n      throw new Warning(`Data sync has ${status.errors} errors`);\n  });\n\n  // Edge function tests\n  await adminTestSuite.runTest(\"Edge Function: Admin Dashboard\", async () => {\n    try {\n      await supabase.functions.invoke(\"supabase-functions-admin-dashboard\", {\n        body: { action: \"ping\" },\n      });\n    } catch (error) {\n      throw new Error(\n        `Admin dashboard function failed: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  });\n\n  // Admin helper tests\n  await adminTestSuite.runTest(\"Admin Helper: Dashboard Stats\", async () => {\n    try {\n      await dataSyncService.getDashboardStats();\n    } catch (error) {\n      throw new Warning(\n        `Dashboard stats unavailable: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  });\n\n  // Environment variables test\n  await adminTestSuite.runTest(\"Environment Variables\", async () => {\n    const requiredVars = [\"SUPABASE_URL\", \"SUPABASE_ANON_KEY\"];\n    const missingVars = requiredVars.filter(\n      (varName) =>\n        !import.meta.env[`VITE_${varName}`] && !import.meta.env[varName],\n    );\n    if (missingVars.length > 0) {\n      throw new Error(\n        `Missing required environment variables: ${missingVars.join(\", \")}`,\n      );\n    }\n  });\n\n  // Browser features test\n  await adminTestSuite.runTest(\"Browser Features\", async () => {\n    const requiredFeatures = {\n      localStorage: typeof localStorage !== \"undefined\",\n      sessionStorage: typeof sessionStorage !== \"undefined\",\n      indexedDB: typeof indexedDB !== \"undefined\",\n    };\n\n    const missingFeatures = Object.entries(requiredFeatures)\n      .filter(([_, supported]) => !supported)\n      .map(([name]) => name);\n\n    if (missingFeatures.length > 0) {\n      throw new Warning(\n        `Missing browser features: ${missingFeatures.join(\", \")}`,\n      );\n    }\n  });\n\n  return adminTestSuite.getResults();\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/api.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_settings' is defined but never used.","line":5,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'_settings' is defined but never used.","line":9,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":13,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'_email' is defined but never used.","line":14,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":39}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced stub for API utility. Replace with real implementation as needed.\nexport const api = {\n  stripeSettings: {\n    getSettings: async () => ({}),\n    updateSettings: async (_settings: any) => {},\n  },\n  emailSettings: {\n    getSettings: async () => ({}),\n    updateSettings: async (_settings: any) => {},\n  },\n  emailSubscribers: {\n    getSubscribers: async () => [],\n    deleteSubscriber: async (_id: string) => {},\n    unsubscribe: async (_email: string) => {},\n  },\n  emailTemplates: {\n    getTemplates: async () => [],\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/apiHelpers.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'validateApiData' is defined but never used.","line":6,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":181,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":181,"endColumn":58}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API helper utilities for consistent error handling and data processing\n */\n\nimport { toast } from \"@/components/ui/use-toast\";\nimport { validateArrayData, validateApiData } from \"@/utils/dataValidation\";\n\n/**\n * Wrapper for API calls with consistent error handling\n */\nexport const safeApiCall = async <T>(\n  apiCall: () => Promise<T>,\n  fallback: T,\n  errorMessage?: string,\n): Promise<T> => {\n  try {\n    const result = await apiCall();\n    return result;\n  } catch (error) {\n    console.error(\"API call failed:\", error);\n\n    if (errorMessage) {\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n\n    return fallback;\n  }\n};\n\n/**\n * Wrapper for array API calls with validation\n */\nexport const safeArrayApiCall = async <T>(\n  apiCall: () => Promise<T[]>,\n  fallback: T[] = [],\n  errorMessage?: string,\n): Promise<T[]> => {\n  try {\n    const result = await apiCall();\n    const validation = validateArrayData(result, fallback);\n\n    if (\n      !validation.isValid &&\n      Array.isArray(validation.errors) &&\n      validation.errors.length > 0\n    ) {\n      console.warn(\"Array validation failed:\", validation.errors);\n    }\n\n    return Array.isArray(validation.data) ? validation.data : fallback;\n  } catch (error) {\n    console.error(\"Array API call failed:\", error);\n\n    if (errorMessage) {\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n\n    return fallback;\n  }\n};\n\n/**\n * Retry mechanism for failed API calls\n */\nexport const retryApiCall = async <T>(\n  apiCall: () => Promise<T>,\n  maxRetries: number = 3,\n  delay: number = 1000,\n): Promise<T> => {\n  let lastError: Error;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await apiCall();\n    } catch (error) {\n      lastError = error as Error;\n\n      if (attempt === maxRetries) {\n        throw lastError;\n      }\n\n      console.warn(\n        `API call attempt ${attempt + 1} failed, retrying in ${delay}ms:`,\n        error,\n      );\n      await new Promise((resolve) =>\n        setTimeout(resolve, delay * Math.pow(2, attempt)),\n      );\n    }\n  }\n\n  throw lastError!;\n};\n\n/**\n * Format API errors for user display\n */\nexport const formatApiError = (error: any): string => {\n  if (!error) return \"An unknown error occurred\";\n\n  // Handle Supabase errors\n  if (error.message) {\n    return error.message;\n  }\n\n  // Handle string errors\n  if (typeof error === \"string\") {\n    return error;\n  }\n\n  // Handle PostgreSQL errors\n  if (error.code) {\n    switch (error.code) {\n      case \"23505\":\n        return \"This record already exists\";\n      case \"23503\":\n        return \"Cannot delete this record because it is referenced by other data\";\n      case \"42P01\":\n        return \"Database table not found\";\n      case \"PGRST116\":\n        return \"No data found\";\n      default:\n        return error.details || error.hint || \"Database error occurred\";\n    }\n  }\n\n  return \"An unexpected error occurred\";\n};\n\n/**\n * Check if error is a network/connection error\n */\nexport const isNetworkError = (error: any): boolean => {\n  if (!error) return false;\n\n  const errorMessage = error.message || error.toString();\n  const networkErrorPatterns = [\n    \"network\",\n    \"fetch\",\n    \"connection\",\n    \"timeout\",\n    \"offline\",\n    \"ERR_NETWORK\",\n    \"ERR_INTERNET_DISCONNECTED\",\n  ];\n\n  return networkErrorPatterns.some((pattern) =>\n    errorMessage.toLowerCase().includes(pattern.toLowerCase()),\n  );\n};\n\n/**\n * Batch API calls with error handling\n */\nexport const batchApiCalls = async <T>(\n  apiCalls: Array<() => Promise<T>>,\n  options: {\n    failFast?: boolean;\n    maxConcurrent?: number;\n  } = {},\n): Promise<Array<{ success: boolean; data?: T; error?: Error }>> => {\n  const { failFast = false, maxConcurrent = 5 } = options;\n  const results: Array<{ success: boolean; data?: T; error?: Error }> = [];\n\n  if (!Array.isArray(apiCalls) || apiCalls.length === 0) {\n    return results;\n  }\n\n  // Process in batches to avoid overwhelming the API\n  for (let i = 0; i < apiCalls.length; i += maxConcurrent) {\n    const batch = apiCalls.slice(i, i + maxConcurrent);\n\n    const batchPromises = batch.map(async (apiCall, index) => {\n      try {\n        const data = await apiCall();\n        return { success: true, data };\n      } catch (error) {\n        const result = { success: false, error: error as Error };\n\n        if (failFast) {\n          throw error;\n        }\n\n        return result;\n      }\n    });\n\n    try {\n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n    } catch (error) {\n      if (failFast) {\n        throw error;\n      }\n    }\n  }\n\n  return results;\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/dataValidation.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":17,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Data validation utilities for consistent API response handling\n */\n\nexport interface ValidationResult<T> {\n  isValid: boolean;\n  data: T;\n  errors: string[];\n}\n\n/**\n * Validates and sanitizes API responses\n */\nexport const validateApiData = <T>(\n  data: any,\n  fallback: T,\n  validator?: (data: any) => boolean,\n): ValidationResult<T> => {\n  const errors: string[] = [];\n\n  // Check for null/undefined\n  if (data === null || data === undefined) {\n    errors.push(\"Data is null or undefined\");\n    return { isValid: false, data: fallback, errors };\n  }\n\n  // Run custom validator if provided\n  if (validator && !validator(data)) {\n    errors.push(\"Data failed custom validation\");\n    return { isValid: false, data: fallback, errors };\n  }\n\n  return { isValid: true, data, errors: [] };\n};\n\n/**\n * Validates array responses from API\n */\nexport const validateArrayData = <T>(\n  data: any,\n  fallback: T[] = [],\n): ValidationResult<T[]> => {\n  const errors: string[] = [];\n\n  if (!Array.isArray(data)) {\n    errors.push(`Expected array but got ${typeof data}`);\n    return { isValid: false, data: fallback, errors };\n  }\n\n  return { isValid: true, data, errors: [] };\n};\n\n/**\n * Validates member data structure\n */\nexport const validateMemberData = (member: any): ValidationResult<any> => {\n  const errors: string[] = [];\n\n  if (!member) {\n    errors.push(\"Member data is required\");\n    return { isValid: false, data: null, errors };\n  }\n\n  if (!member.full_name || typeof member.full_name !== \"string\") {\n    errors.push(\"Full name is required and must be a string\");\n  }\n\n  if (member.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(member.email)) {\n    errors.push(\"Invalid email format\");\n  }\n\n  const validMembershipTypes = [\"regular\", \"student\", \"senior\", \"family\"];\n  if (\n    member.membership_type &&\n    !validMembershipTypes.includes(member.membership_type)\n  ) {\n    errors.push(\"Invalid membership type\");\n  }\n\n  const validStatuses = [\"pending\", \"active\", \"inactive\"];\n  if (\n    member.membership_status &&\n    !validStatuses.includes(member.membership_status)\n  ) {\n    errors.push(\"Invalid membership status\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    data: {\n      ...member,\n      membership_type: member.membership_type || \"regular\",\n      membership_status: member.membership_status || \"pending\",\n      join_date:\n        member.join_date || member.created_at || new Date().toISOString(),\n      updated_at:\n        member.updated_at || member.created_at || new Date().toISOString(),\n    },\n    errors,\n  };\n};\n\n/**\n * Validates event data structure\n */\nexport const validateEventData = (event: any): ValidationResult<any> => {\n  const errors: string[] = [];\n\n  if (!event) {\n    errors.push(\"Event data is required\");\n    return { isValid: false, data: null, errors };\n  }\n\n  if (!event.title || typeof event.title !== \"string\") {\n    errors.push(\"Event title is required and must be a string\");\n  }\n\n  if (!event.event_date) {\n    errors.push(\"Event date is required\");\n  } else {\n    const date = new Date(event.event_date);\n    if (isNaN(date.getTime())) {\n      errors.push(\"Invalid event date format\");\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    data: {\n      ...event,\n      is_featured: Boolean(event.is_featured),\n      created_at: event.created_at || new Date().toISOString(),\n    },\n    errors,\n  };\n};\n\n/**\n * Validates appointment data structure\n */\nexport const validateAppointmentData = (\n  appointment: any,\n): ValidationResult<any> => {\n  const errors: string[] = [];\n\n  if (!appointment) {\n    errors.push(\"Appointment data is required\");\n    return { isValid: false, data: null, errors };\n  }\n\n  if (!appointment.name || typeof appointment.name !== \"string\") {\n    errors.push(\"Name is required and must be a string\");\n  }\n\n  if (\n    !appointment.email ||\n    !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(appointment.email)\n  ) {\n    errors.push(\"Valid email is required\");\n  }\n\n  if (!appointment.service_title) {\n    errors.push(\"Service title is required\");\n  }\n\n  const validStatuses = [\"pending\", \"approved\", \"rejected\", \"completed\"];\n  if (appointment.status && !validStatuses.includes(appointment.status)) {\n    errors.push(\"Invalid appointment status\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    data: {\n      ...appointment,\n      status: appointment.status || \"pending\",\n      created_at: appointment.created_at || new Date().toISOString(),\n    },\n    errors,\n  };\n};\n\n/**\n * Safe number parsing with fallback\n */\nexport const safeParseNumber = (value: any, fallback: number = 0): number => {\n  if (typeof value === \"number\" && !isNaN(value)) {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    const parsed = parseFloat(value);\n    if (!isNaN(parsed)) {\n      return parsed;\n    }\n  }\n\n  return fallback;\n};\n\n/**\n * Safe date parsing with fallback\n */\nexport const safeParseDate = (value: any, fallback?: Date): Date => {\n  if (value instanceof Date && !isNaN(value.getTime())) {\n    return value;\n  }\n\n  if (typeof value === \"string\" || typeof value === \"number\") {\n    const parsed = new Date(value);\n    if (!isNaN(parsed.getTime())) {\n      return parsed;\n    }\n  }\n\n  return fallback || new Date();\n};\n\n/**\n * Sanitizes string input\n */\nexport const sanitizeString = (value: any, fallback: string = \"\"): string => {\n  if (typeof value === \"string\") {\n    return value.trim();\n  }\n\n  if (value !== null && value !== undefined) {\n    return String(value).trim();\n  }\n\n  return fallback;\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/debugSync.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'dataSyncService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\n\nexport interface DebugInfo {\n  timestamp: string;\n  component: string;\n  action: string;\n  data?: any;\n  error?: string;\n}\n\nclass DebugSyncClass {\n  private logs: DebugInfo[] = [];\n  private maxLogs = 100;\n\n  log(component: string, action: string, data?: any, error?: string): void {\n    const logEntry: DebugInfo = {\n      timestamp: new Date().toISOString(),\n      component,\n      action,\n      data,\n      error,\n    };\n\n    this.logs.unshift(logEntry);\n\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(0, this.maxLogs);\n    }\n\n    console.log(`[DebugSync] ${component}: ${action}`, data);\n\n    if (error) {\n      console.error(`[DebugSync] ${component} Error:`, error);\n    }\n  }\n\n  getLogs(): DebugInfo[] {\n    return [...this.logs];\n  }\n\n  clearLogs(): void {\n    this.logs = [];\n    console.log(\"[DebugSync] Logs cleared\");\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      this.log(\"DebugSync\", \"Testing database connection\");\n\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\", { count: \"exact\", head: true });\n\n      if (error) {\n        this.log(\"DebugSync\", \"Connection test failed\", null, error.message);\n        return false;\n      }\n\n      this.log(\"DebugSync\", \"Connection test successful\", { count: data });\n      return true;\n    } catch (err) {\n      this.log(\"DebugSync\", \"Connection test error\", null, String(err));\n      return false;\n    }\n  }\n\n  async testTableAccess(): Promise<{ [key: string]: boolean }> {\n    const tables = [\n      \"events\",\n      \"gallery\",\n      \"sermons\",\n      \"testimonials\",\n      \"prayer_requests\",\n      \"donations\",\n      \"members\",\n      \"profiles\",\n    ] as const;\n\n    const results: { [key: string]: boolean } = {};\n\n    for (const table of tables) {\n      try {\n        this.log(\"DebugSync\", `Testing table access: ${table}`);\n\n        const { error } = await supabase\n          .from(table)\n          .select(\"count\", { count: \"exact\", head: true });\n\n        results[table] = !error;\n\n        if (error) {\n          this.log(\n            \"DebugSync\",\n            `Table access failed: ${table}`,\n            null,\n            error.message,\n          );\n        } else {\n          this.log(\"DebugSync\", `Table access successful: ${table}`);\n        }\n      } catch (err) {\n        results[table] = false;\n        this.log(\n          \"DebugSync\",\n          `Table access error: ${table}`,\n          null,\n          String(err),\n        );\n      }\n    }\n\n    return results;\n  }\n\n  triggerForceRefresh(): void {\n    this.log(\"DebugSync\", \"Triggering force refresh\");\n    // Trigger a manual refresh by dispatching a custom event\n    window.dispatchEvent(new CustomEvent(\"forceRefresh\"));\n  }\n\n  getSystemInfo(): any {\n    return {\n      userAgent: navigator.userAgent,\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      environment: import.meta.env.MODE,\n    };\n  }\n}\n\nexport const debugSync = new DebugSyncClass();\n\n// Make it available globally for debugging\nif (typeof window !== \"undefined\") {\n  (window as any).debugSync = debugSync;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/error-handling.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'status' is defined but never used.","line":6,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'code' is defined but never used.","line":7,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":36,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":38,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":13}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from \"@/components/ui/use-toast\";\n\nexport class APIError extends Error {\n  constructor(\n    message: string,\n    public status?: number,\n    public code?: string,\n  ) {\n    super(message);\n    this.name = \"APIError\";\n  }\n}\n\nexport const handleAPIError = (error: unknown): APIError => {\n  if (error instanceof APIError) {\n    return error;\n  }\n\n  const apiError = new APIError(\n    error instanceof Error ? error.message : \"An unexpected error occurred\",\n  );\n\n  // Log error for monitoring\n  console.error(\"API Error:\", error);\n\n  // Show toast notification\n  toast({\n    title: \"Error\",\n    description: apiError.message,\n    variant: \"destructive\",\n  });\n\n  return apiError;\n};\n\nexport const withErrorHandling = <T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n): ((...args: Parameters<T>) => Promise<ReturnType<T>>) => {\n  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      throw handleAPIError(error);\n    }\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/errorHandling.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":161,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":161,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":161,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":161,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":176,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":176,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'acc' is defined but never used.","line":191,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":191,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":191,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":38}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive error handling utilities for the admin panel\n */\n\nexport interface ErrorInfo {\n  message: string;\n  stack?: string;\n  componentStack?: string;\n  timestamp: string;\n  url: string;\n  userAgent: string;\n}\n\n/**\n * Safe data validation utilities\n */\nexport const validateApiResponse = <T>(data: any, fallback: T): T => {\n  if (data === null || data === undefined) {\n    console.warn(\"API response is null or undefined, using fallback\");\n    return fallback;\n  }\n  return data;\n};\n\nexport const validateArrayResponse = <T>(\n  data: any,\n  fallback: T[] = [],\n): T[] => {\n  if (!Array.isArray(data)) {\n    console.warn(\"Expected array response but got:\", typeof data, data);\n    return fallback;\n  }\n  return data;\n};\n\nexport class ErrorHandler {\n  private static instance: ErrorHandler;\n  private errors: ErrorInfo[] = [];\n  private maxErrors = 100;\n\n  static getInstance(): ErrorHandler {\n    if (!ErrorHandler.instance) {\n      ErrorHandler.instance = new ErrorHandler();\n    }\n    return ErrorHandler.instance;\n  }\n\n  logError(error: Error, componentStack?: string): void {\n    const errorInfo: ErrorInfo = {\n      message: error.message,\n      stack: error.stack,\n      componentStack,\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n    };\n\n    this.errors.unshift(errorInfo);\n\n    if (this.errors.length > this.maxErrors) {\n      this.errors = this.errors.slice(0, this.maxErrors);\n    }\n\n    console.error(\"Error logged:\", errorInfo);\n  }\n\n  getRecentErrors(limit = 10): ErrorInfo[] {\n    return this.errors.slice(0, limit);\n  }\n\n  clearErrors(): void {\n    this.errors = [];\n  }\n\n  /**\n   * Safe array access with fallback\n   */\n  static safeArrayAccess<T>(\n    arr: T[] | undefined | null,\n    defaultValue: T[] = [],\n  ): T[] {\n    if (!Array.isArray(arr)) {\n      console.warn(\"safeArrayAccess: Expected array but got:\", typeof arr, arr);\n      return defaultValue;\n    }\n    return arr;\n  }\n\n  /**\n   * Safe object property access\n   */\n  static safePropertyAccess<T>(obj: any, path: string, defaultValue: T): T {\n    try {\n      const keys = path.split(\".\");\n      let current = obj;\n\n      for (const key of keys) {\n        if (current == null || typeof current !== \"object\") {\n          return defaultValue;\n        }\n        current = current[key];\n      }\n\n      return current !== undefined ? current : defaultValue;\n    } catch (error) {\n      console.warn(\"safePropertyAccess error:\", error);\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Safe length check for arrays and strings\n   */\n  static safeLength(item: any): number {\n    if (item == null) {\n      return 0;\n    }\n    if (Array.isArray(item) || typeof item === \"string\") {\n      return item.length;\n    }\n    if (typeof item === \"object\" && \"length\" in item) {\n      return typeof item.length === \"number\" ? item.length : 0;\n    }\n    return 0;\n  }\n\n  /**\n   * Validate and sanitize data before processing\n   */\n  static validateData<T>(\n    data: any,\n    validator: (data: any) => data is T,\n  ): T | null {\n    try {\n      if (validator(data)) {\n        return data;\n      }\n      return null;\n    } catch (error) {\n      console.warn(\"Data validation failed:\", error);\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const errorHandler = ErrorHandler.getInstance();\n\n// Type guards\nexport const isArray = (value: any): value is any[] => Array.isArray(value);\nexport const isObject = (value: any): value is object =>\n  value !== null && typeof value === \"object\" && !Array.isArray(value);\nexport const isString = (value: any): value is string =>\n  typeof value === \"string\";\nexport const isNumber = (value: any): value is number =>\n  typeof value === \"number\" && !isNaN(value);\n\n// Safe operations\nexport const safeMap = <T, U>(\n  arr: T[] | undefined | null,\n  fn: (item: T, index: number) => U,\n): U[] => {\n  if (!Array.isArray(arr)) {\n    return [];\n  }\n  try {\n    return arr.map(fn);\n  } catch (error) {\n    console.error(\"safeMap error:\", error);\n    return [];\n  }\n};\n\nexport const safeFilter = <T>(\n  arr: T[] | undefined | null,\n  fn: (item: T, index: number) => boolean,\n): T[] => {\n  if (!Array.isArray(arr)) {\n    return [];\n  }\n  try {\n    return arr.filter(fn);\n  } catch (error) {\n    console.error(\"safeFilter error:\", error);\n    return [];\n  }\n};\n\nexport const safeReduce = <T, U>(\n  arr: T[] | undefined | null,\n  fn: (acc: U, item: T, index: number) => U,\n  initialValue: U,\n): U => {\n  if (!Array.isArray(arr)) {\n    return initialValue;\n  }\n  try {\n    return arr.reduce(fn, initialValue);\n  } catch (error) {\n    console.error(\"safeReduce error:\", error);\n    return initialValue;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/safeUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/utils/systemTest.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":11,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":125,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// System Test Utilities\n// This file contains utilities to test various system components\n\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { api } from \"@/integrations/supabase/api\";\n\nexport const systemTest = {\n  // Test database connectivity\n  async testDatabaseConnection() {\n    try {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n      if (error) throw error;\n      console.log(\"✅ Database connection successful\");\n      return true;\n    } catch (error) {\n      console.error(\"❌ Database connection failed:\", error);\n      return false;\n    }\n  },\n\n  // Test authentication\n  async testAuthentication() {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      console.log(\"✅ Authentication system working\");\n      return { success: true, hasSession: !!session };\n    } catch (error) {\n      console.error(\"❌ Authentication test failed:\", error);\n      return { success: false, hasSession: false };\n    }\n  },\n\n  // Test API endpoints\n  async testAPIEndpoints() {\n    const results = {\n      events: false,\n      sermons: false,\n      gallery: false,\n      testimonials: false,\n      prayerRequests: false,\n      members: false,\n      donations: false,\n    };\n\n    try {\n      // Test events API\n      await api.events.getEvents();\n      results.events = true;\n      console.log(\"✅ Events API working\");\n    } catch (error) {\n      console.error(\"❌ Events API failed:\", error);\n    }\n\n    try {\n      // Test sermons API\n      await api.sermons.getSermons();\n      results.sermons = true;\n      console.log(\"✅ Sermons API working\");\n    } catch (error) {\n      console.error(\"❌ Sermons API failed:\", error);\n    }\n\n    try {\n      // Test gallery API\n      await api.gallery.getGalleryImages();\n      results.gallery = true;\n      console.log(\"✅ Gallery API working\");\n    } catch (error) {\n      console.error(\"❌ Gallery API failed:\", error);\n    }\n\n    try {\n      // Test testimonials API\n      await api.testimonials.getTestimonials();\n      results.testimonials = true;\n      console.log(\"✅ Testimonials API working\");\n    } catch (error) {\n      console.error(\"❌ Testimonials API failed:\", error);\n    }\n\n    try {\n      // Test prayer requests API\n      await api.prayerRequests.getPrayerRequests();\n      results.prayerRequests = true;\n      console.log(\"✅ Prayer Requests API working\");\n    } catch (error) {\n      console.error(\"❌ Prayer Requests API failed:\", error);\n    }\n\n    try {\n      // Test members API\n      await api.members.getMembers();\n      results.members = true;\n      console.log(\"✅ Members API working\");\n    } catch (error) {\n      console.error(\"❌ Members API failed:\", error);\n    }\n\n    try {\n      // Test donations API\n      await api.donations.getDonations();\n      results.donations = true;\n      console.log(\"✅ Donations API working\");\n    } catch (error) {\n      console.error(\"❌ Donations API failed:\", error);\n    }\n\n    return results;\n  },\n\n  // Test edge functions\n  async testEdgeFunctions() {\n    const results = {\n      createCheckout: false,\n      sendEmail: false,\n    };\n\n    try {\n      // Test create-checkout function (without actually creating a checkout)\n      const { error } = await supabase.functions.invoke(\n        \"supabase-functions-create-checkout\",\n        {\n          body: {\n            amount: \"1\",\n            donationType: \"one_time\",\n            purpose: \"test\",\n            email: \"test@example.com\",\n            name: \"Test User\",\n            address: \"Test Address\",\n            isAnonymous: false,\n            includeBulletin: false,\n            memorial: \"\",\n          },\n        },\n      );\n\n      // If we get a response (even an error), the function is accessible\n      results.createCheckout = true;\n      console.log(\"✅ Create Checkout function accessible\");\n    } catch (error) {\n      console.error(\"❌ Create Checkout function failed:\", error);\n    }\n\n    return results;\n  },\n\n  // Run comprehensive system test\n  async runFullSystemTest() {\n    console.log(\"🔍 Starting comprehensive system test...\");\n\n    const results = {\n      database: false,\n      authentication: { success: false, hasSession: false },\n      api: {},\n      edgeFunctions: {},\n      timestamp: new Date().toISOString(),\n    };\n\n    // Test database\n    results.database = await this.testDatabaseConnection();\n\n    // Test authentication\n    results.authentication = await this.testAuthentication();\n\n    // Test API endpoints\n    results.api = await this.testAPIEndpoints();\n\n    // Test edge functions\n    results.edgeFunctions = await this.testEdgeFunctions();\n\n    // Summary\n    const apiSuccessCount = Object.values(results.api).filter(Boolean).length;\n    const apiTotalCount = Object.keys(results.api).length;\n    const edgeFunctionSuccessCount = Object.values(\n      results.edgeFunctions,\n    ).filter(Boolean).length;\n    const edgeFunctionTotalCount = Object.keys(results.edgeFunctions).length;\n\n    console.log(\"\\n📊 System Test Summary:\");\n    console.log(`Database: ${results.database ? \"✅\" : \"❌\"}`);\n    console.log(\n      `Authentication: ${results.authentication.success ? \"✅\" : \"❌\"}`,\n    );\n    console.log(`API Endpoints: ${apiSuccessCount}/${apiTotalCount} working`);\n    console.log(\n      `Edge Functions: ${edgeFunctionSuccessCount}/${edgeFunctionTotalCount} accessible`,\n    );\n\n    return results;\n  },\n};\n\n// Make it available globally for debugging\nif (typeof window !== \"undefined\") {\n  (window as any).systemTest = systemTest;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/_shared/admin-utils.ts","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":213,"column":20,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":213,"endColumn":34,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[5454,5478],"text":"Object.prototype.hasOwnProperty.call(timeline, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility functions for admin operations\n */\n\n/**\n * Validates admin authentication and authorization\n */\nexport async function validateAdminAccess(\n  supabaseClient: any,\n  authHeader: string | null,\n) {\n  if (!authHeader) {\n    throw new Error(\"Authorization required\");\n  }\n\n  const token = authHeader.replace(\"Bearer \", \"\");\n  const {\n    data: { user },\n    error: authError,\n  } = await supabaseClient.auth.getUser(token);\n\n  if (authError || !user) {\n    throw new Error(\"Unauthorized\");\n  }\n\n  // Verify admin role\n  const { data: profile, error: profileError } = await supabaseClient\n    .from(\"profiles\")\n    .select(\"role\")\n    .eq(\"id\", user.id)\n    .single();\n\n  if (profileError || profile?.role !== \"admin\") {\n    throw new Error(\"Admin access required\");\n  }\n\n  return user;\n}\n\n/**\n * Processes monthly data for analytics\n */\nexport function processMonthlyData(\n  items: any[],\n  dateField: string,\n  valueField?: string,\n) {\n  if (!Array.isArray(items)) {\n    console.warn(\"processMonthlyData: items is not an array\");\n    return [];\n  }\n\n  const monthlyData: Record<string, { count: number; amount: number }> = {};\n\n  items.forEach((item) => {\n    if (!item || !item[dateField]) return;\n\n    try {\n      const date = new Date(item[dateField]);\n      const month = date.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"short\",\n      });\n\n      if (!monthlyData[month]) {\n        monthlyData[month] = { count: 0, amount: 0 };\n      }\n      monthlyData[month].count += 1;\n      if (valueField && item[valueField]) {\n        monthlyData[month].amount += Number(item[valueField]) || 0;\n      }\n    } catch (error) {\n      console.warn(\"Error processing date:\", item[dateField], error);\n    }\n  });\n\n  return Object.entries(monthlyData).map(([month, data]) => ({\n    month,\n    count: data.count,\n    amount: data.amount,\n  }));\n}\n\n/**\n * Processes purpose data for donations\n */\nexport function processPurposeData(donations: any[]) {\n  if (!Array.isArray(donations)) {\n    console.warn(\"processPurposeData: donations is not an array\");\n    return [];\n  }\n\n  const purposeData: Record<string, number> = {};\n  const total = donations.reduce((sum, d) => sum + (Number(d?.amount) || 0), 0);\n\n  donations.forEach((donation) => {\n    if (!donation) return;\n    const purpose = donation.purpose || \"General Fund\";\n    const amount = Number(donation.amount) || 0;\n    purposeData[purpose] = (purposeData[purpose] || 0) + amount;\n  });\n\n  return Object.entries(purposeData).map(([purpose, amount]) => ({\n    purpose,\n    amount,\n    percentage: total > 0 ? Math.round((amount / total) * 100) : 0,\n  }));\n}\n\n/**\n * Processes type data for members\n */\nexport function processTypeData(members: any[], typeField: string) {\n  if (!Array.isArray(members)) {\n    console.warn(\"processTypeData: members is not an array\");\n    return [];\n  }\n\n  const typeData: Record<string, number> = {};\n  const total = members.length;\n\n  members.forEach((member) => {\n    if (!member) return;\n    const type = member[typeField] || \"Regular\";\n    typeData[type] = (typeData[type] || 0) + 1;\n  });\n\n  return Object.entries(typeData).map(([type, count]) => ({\n    type,\n    count,\n    percentage: total > 0 ? Math.round((count / total) * 100) : 0,\n  }));\n}\n\n/**\n * Calculates trends for analytics\n */\nexport function calculateTrends(items: any[], valueField?: string) {\n  if (!Array.isArray(items)) {\n    console.warn(\"calculateTrends: items is not an array\");\n    return { thisMonth: 0, lastMonth: 0, growth: 0 };\n  }\n\n  const now = new Date();\n  const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n  const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n  const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n\n  const thisMonth = items.filter((item) => {\n    if (!item?.created_at) return false;\n    try {\n      return new Date(item.created_at) >= thisMonthStart;\n    } catch {\n      return false;\n    }\n  });\n\n  const lastMonth = items.filter((item) => {\n    if (!item?.created_at) return false;\n    try {\n      const date = new Date(item.created_at);\n      return date >= lastMonthStart && date <= lastMonthEnd;\n    } catch {\n      return false;\n    }\n  });\n\n  const thisMonthValue = valueField\n    ? thisMonth.reduce((sum, item) => sum + (Number(item[valueField]) || 0), 0)\n    : thisMonth.length;\n\n  const lastMonthValue = valueField\n    ? lastMonth.reduce((sum, item) => sum + (Number(item[valueField]) || 0), 0)\n    : lastMonth.length;\n\n  const growth =\n    lastMonthValue > 0\n      ? Math.round(((thisMonthValue - lastMonthValue) / lastMonthValue) * 100)\n      : 0;\n\n  return {\n    thisMonth: thisMonthValue,\n    lastMonth: lastMonthValue,\n    growth,\n  };\n}\n\n/**\n * Creates a timeline for analytics\n */\nexport function createTimeline(data: any[], dateField: string, days: number) {\n  if (!Array.isArray(data)) {\n    console.warn(\"createTimeline: data is not an array\");\n    return [];\n  }\n\n  const timeline: Record<string, number> = {};\n  const now = new Date();\n\n  // Initialize timeline with zeros\n  for (let i = 0; i < days; i++) {\n    const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n    const dateKey = date.toISOString().split(\"T\")[0];\n    timeline[dateKey] = 0;\n  }\n\n  // Count items by date\n  data.forEach((item) => {\n    if (!item || !item[dateField]) return;\n\n    try {\n      const dateKey = new Date(item[dateField]).toISOString().split(\"T\")[0];\n      if (timeline.hasOwnProperty(dateKey)) {\n        timeline[dateKey]++;\n      }\n    } catch (error) {\n      console.warn(\"Error processing date:\", item[dateField], error);\n    }\n  });\n\n  return Object.entries(timeline)\n    .sort(([a], [b]) => a.localeCompare(b))\n    .map(([date, count]) => ({ date, count }));\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/_shared/cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/_shared/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/_shared/payment-utils.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'createClient' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'stripeInstance' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\nimport { Stripe } from \"https://esm.sh/stripe@18.2.1\";\n\n/**\n * Process a completed checkout session\n */\nexport async function processCompletedCheckout(\n  supabaseClient: any,\n  session: any,\n  stripeInstance: any,\n) {\n  try {\n    // Update donation status\n    const { error: updateError } = await supabaseClient\n      .from(\"donations\")\n      .update({\n        payment_status: \"completed\",\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"payment_id\", session.id);\n\n    if (updateError) {\n      console.error(\"Error updating donation:\", updateError);\n      return { success: false, error: updateError };\n    }\n\n    // Get donation details for email\n    const { data: donation, error: donationError } = await supabaseClient\n      .from(\"donations\")\n      .select(\"*\")\n      .eq(\"payment_id\", session.id)\n      .single();\n\n    if (donationError) {\n      console.error(\"Error fetching donation:\", donationError);\n      return { success: false, error: donationError };\n    }\n\n    // Process membership fee if applicable\n    if (\n      donation &&\n      donation.purpose === \"membership_fee\" &&\n      donation.memberId\n    ) {\n      await processMembershipFee(supabaseClient, donation);\n    }\n\n    // Send emails if donation exists\n    if (donation) {\n      await sendDonationEmails(supabaseClient, donation);\n    }\n\n    return { success: true, donation };\n  } catch (error) {\n    console.error(\"Error processing checkout:\", error);\n    return { success: false, error };\n  }\n}\n\n/**\n * Process membership fee payment\n */\nasync function processMembershipFee(supabaseClient: any, donation: any) {\n  try {\n    const { error: memberError } = await supabaseClient\n      .from(\"members\")\n      .update({ membership_fee_paid: true })\n      .eq(\"id\", donation.memberId);\n\n    if (memberError) {\n      console.error(\"Error updating member as paid:\", memberError);\n      return { success: false, error: memberError };\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error processing membership fee:\", error);\n    return { success: false, error };\n  }\n}\n\n/**\n * Send donation confirmation and admin notification emails\n */\nasync function sendDonationEmails(supabaseClient: any, donation: any) {\n  try {\n    // Get site settings\n    const { data: settings, error: settingsError } = await supabaseClient\n      .from(\"site_settings\")\n      .select(\"admin_email, enable_email_notifications\")\n      .single();\n\n    if (settingsError) {\n      console.error(\"Error fetching site settings:\", settingsError);\n      return { success: false, error: settingsError };\n    }\n\n    // Send confirmation email to donor\n    if (donation.donor_email && !donation.is_anonymous) {\n      await supabaseClient.functions.invoke(\"supabase-functions-send-email\", {\n        body: {\n          type: \"donation_confirmation\",\n          data: {\n            donor_name: donation.donor_name,\n            amount: donation.amount,\n            purpose: donation.purpose,\n            date: new Date(donation.created_at).toISOString().split(\"T\")[0],\n          },\n          recipients: [donation.donor_email],\n        },\n      });\n    }\n\n    // Send notification to admin\n    if (settings?.admin_email && settings?.enable_email_notifications) {\n      await supabaseClient.functions.invoke(\"supabase-functions-send-email\", {\n        body: {\n          type: \"admin_notification\",\n          data: {\n            donor_name: donation.donor_name || \"Anonymous\",\n            donor_email: donation.donor_email || \"Not provided\",\n            amount: donation.amount,\n            purpose: donation.purpose,\n            date: new Date(donation.created_at).toISOString().split(\"T\")[0],\n            status: \"completed\",\n          },\n          recipients: [settings.admin_email],\n        },\n      });\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error sending donation emails:\", error);\n    return { success: false, error };\n  }\n}\n\n/**\n * Create a Stripe instance with the provided secret key\n */\nexport function createStripeInstance(secretKey: string) {\n  return new Stripe(secretKey, { apiVersion: \"2023-10-16\" });\n}\n\n/**\n * Verify Stripe webhook signature\n */\nexport function verifyStripeSignature(\n  stripeInstance: any,\n  payload: string,\n  signature: string,\n  webhookSecret: string,\n) {\n  try {\n    return {\n      success: true,\n      event: stripeInstance.webhooks.constructEvent(\n        payload,\n        signature,\n        webhookSecret,\n      ),\n    };\n  } catch (error) {\n    console.error(\"Webhook signature verification failed:\", error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : String(error),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/_shared/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/admin-dashboard-enhanced/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":15,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":52,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":70,"endColumn":12},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":72,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":72,"endColumn":32},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":73,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":75,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":76,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":76,"endColumn":80},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":79,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":79,"endColumn":47},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":80,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":80,"endColumn":51},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":81,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":81,"endColumn":45},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":82,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":82,"endColumn":47},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":83,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":83,"endColumn":61},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":84,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":84,"endColumn":57},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":85,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":85,"endColumn":47},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":86,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":86,"endColumn":55},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":88,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":90,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":91,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":94,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":96,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":98,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":100,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":102,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":104,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":104,"endColumn":80},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":106,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":108,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":110,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":112,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":114,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":154,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":160,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":160,"endColumn":33},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":211,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":219,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":249,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":249,"endColumn":69},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":250,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":250,"endColumn":42},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":251,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":251,"endColumn":80},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":253,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":267,"endColumn":14},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":269,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":315,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":321,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":321,"endColumn":66},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":322,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":325,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'calculateGrowthTrend' is defined but never used.","line":358,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":358,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'groupByField' is defined but never used.","line":384,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":384,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'createTimeline' is defined but never used.","line":393,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":393,"endColumn":26},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":407,"column":20,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":407,"endColumn":34,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[12949,12973],"text":"Object.prototype.hasOwnProperty.call(timeline, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const action = url.searchParams.get(\"action\") || \"dashboard\";\n\n    // Verify admin authentication\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) {\n      throw new Error(\"Authorization required\");\n    }\n\n    const token = authHeader.replace(\"Bearer \", \"\");\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseClient.auth.getUser(token);\n\n    if (authError || !user) {\n      throw new Error(\"Unauthorized\");\n    }\n\n    // Verify admin role\n    const { data: profile, error: profileError } = await supabaseClient\n      .from(\"profiles\")\n      .select(\"role\")\n      .eq(\"id\", user.id)\n      .single();\n\n    if (profileError || profile?.role !== \"admin\") {\n      throw new Error(\"Admin access required\");\n    }\n\n    switch (action) {\n      case \"dashboard\":\n        // Enhanced dashboard with comprehensive statistics\n        const [\n          membersRes,\n          donationsRes,\n          eventsRes,\n          sermonsRes,\n          prayerRequestsRes,\n          testimonialsRes,\n          galleryRes,\n          subscribersRes,\n        ] = await Promise.all([\n          supabaseClient.from(\"members\").select(\"*\"),\n          supabaseClient.from(\"donations\").select(\"*\"),\n          supabaseClient.from(\"events\").select(\"*\"),\n          supabaseClient.from(\"sermons\").select(\"*\"),\n          supabaseClient.from(\"prayer_requests\").select(\"*\"),\n          supabaseClient.from(\"testimonials\").select(\"*\"),\n          supabaseClient.from(\"gallery\").select(\"*\"),\n          supabaseClient.from(\"email_subscribers\").select(\"*\"),\n        ]);\n\n        const now = new Date();\n        const thirtyDaysAgo = new Date(\n          now.getTime() - 30 * 24 * 60 * 60 * 1000,\n        );\n        const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n        // Calculate comprehensive statistics\n        const members = membersRes.data || [];\n        const donations = donationsRes.data || [];\n        const events = eventsRes.data || [];\n        const sermons = sermonsRes.data || [];\n        const prayerRequests = prayerRequestsRes.data || [];\n        const testimonials = testimonialsRes.data || [];\n        const gallery = galleryRes.data || [];\n        const subscribers = subscribersRes.data || [];\n\n        const recentDonations = donations.filter(\n          (d) => new Date(d.created_at) >= thirtyDaysAgo,\n        );\n        const totalDonationAmount = recentDonations.reduce(\n          (sum, d) => sum + (d.amount || 0),\n          0,\n        );\n\n        const upcomingEvents = events.filter(\n          (e) => new Date(e.event_date) > now,\n        );\n\n        const recentMembers = members.filter(\n          (m) => new Date(m.created_at) >= sevenDaysAgo,\n        );\n\n        const pendingTestimonials = testimonials.filter((t) => !t.is_approved);\n\n        const unansweredPrayerRequests = prayerRequests.filter(\n          (p) => !p.is_answered,\n        );\n\n        const activeSubscribers = subscribers.filter(\n          (s) => s.status === \"active\",\n        );\n\n        const dashboardData = {\n          overview: {\n            totalMembers: members.length,\n            newMembersThisWeek: recentMembers.length,\n            totalDonations: totalDonationAmount,\n            donationCount: recentDonations.length,\n            upcomingEvents: upcomingEvents.length,\n            totalEvents: events.length,\n            totalSermons: sermons.length,\n            pendingTestimonials: pendingTestimonials.length,\n            unansweredPrayerRequests: unansweredPrayerRequests.length,\n            galleryImages: gallery.length,\n            activeSubscribers: activeSubscribers.length,\n          },\n          recentActivity: {\n            newMembers: recentMembers.slice(0, 5).map((m) => ({\n              id: m.id,\n              name: m.full_name,\n              date: m.created_at,\n              type: \"member\",\n            })),\n            recentDonations: recentDonations.slice(0, 5).map((d) => ({\n              id: d.id,\n              amount: d.amount,\n              donor: d.donor_name || \"Anonymous\",\n              date: d.created_at,\n              type: \"donation\",\n            })),\n            upcomingEvents: upcomingEvents.slice(0, 5).map((e) => ({\n              id: e.id,\n              title: e.title,\n              date: e.event_date,\n              type: \"event\",\n            })),\n          },\n          trends: {\n            memberGrowth: this.calculateGrowthTrend(members, \"created_at\"),\n            donationTrend: this.calculateGrowthTrend(donations, \"created_at\"),\n            eventActivity: this.calculateGrowthTrend(events, \"created_at\"),\n          },\n        };\n\n        return formatSuccessResponse({ dashboard: dashboardData });\n\n      case \"system_health\":\n        // Enhanced system health check\n        const healthChecks = [];\n\n        // Database health\n        try {\n          const start = Date.now();\n          await supabaseClient\n            .from(\"profiles\")\n            .select(\"count\", { count: \"exact\", head: true });\n          const responseTime = Date.now() - start;\n\n          healthChecks.push({\n            component: \"Database\",\n            status: \"healthy\",\n            message: \"Database connection successful\",\n            responseTime,\n            details: { responseTime: `${responseTime}ms` },\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Database\",\n            status: \"error\",\n            message: \"Database connection failed\",\n            error: error.message,\n          });\n        }\n\n        // Storage health\n        try {\n          const start = Date.now();\n          const { data } = await supabaseClient.storage\n            .from(\"images\")\n            .list(\"\", { limit: 1 });\n          const responseTime = Date.now() - start;\n\n          healthChecks.push({\n            component: \"Storage\",\n            status: \"healthy\",\n            message: \"Storage accessible\",\n            responseTime,\n            details: { files: data?.length || 0 },\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Storage\",\n            status: \"error\",\n            message: \"Storage access failed\",\n            error: error.message,\n          });\n        }\n\n        // Table integrity checks\n        const tables = [\n          \"members\",\n          \"events\",\n          \"donations\",\n          \"sermons\",\n          \"testimonials\",\n          \"prayer_requests\",\n          \"gallery\",\n        ];\n\n        for (const table of tables) {\n          try {\n            const { count, error } = await supabaseClient\n              .from(table)\n              .select(\"*\", { count: \"exact\", head: true });\n\n            if (error) throw error;\n\n            healthChecks.push({\n              component: `Table: ${table}`,\n              status: \"healthy\",\n              message: `${count || 0} records`,\n              details: { recordCount: count || 0 },\n            });\n          } catch (error) {\n            healthChecks.push({\n              component: `Table: ${table}`,\n              status: \"error\",\n              message: \"Table access failed\",\n              error: error.message,\n            });\n          }\n        }\n\n        return formatSuccessResponse({ health: healthChecks });\n\n      case \"analytics\":\n        // Enhanced analytics data\n        const timeRange = url.searchParams.get(\"timeRange\") || \"30\";\n        const days = parseInt(timeRange);\n        const startDate = new Date(now.getTime() - days * 24 * 60 * 60 * 1000);\n\n        const [analyticsMembers, analyticsDonations, analyticsEvents] =\n          await Promise.all([\n            supabaseClient\n              .from(\"members\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"donations\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"events\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n          ]);\n\n        const analyticsData = {\n          timeRange: `${days} days`,\n          members: {\n            total: analyticsMembers.data?.length || 0,\n            byType: this.groupByField(\n              analyticsMembers.data || [],\n              \"membership_type\",\n            ),\n            byStatus: this.groupByField(\n              analyticsMembers.data || [],\n              \"membership_status\",\n            ),\n            timeline: this.createTimeline(\n              analyticsMembers.data || [],\n              \"created_at\",\n              days,\n            ),\n          },\n          donations: {\n            total:\n              analyticsDonations.data?.reduce(\n                (sum, d) => sum + (d.amount || 0),\n                0,\n              ) || 0,\n            count: analyticsDonations.data?.length || 0,\n            byPurpose: this.groupByField(\n              analyticsDonations.data || [],\n              \"purpose\",\n            ),\n            timeline: this.createTimeline(\n              analyticsDonations.data || [],\n              \"created_at\",\n              days,\n            ),\n          },\n          events: {\n            total: analyticsEvents.data?.length || 0,\n            upcoming:\n              analyticsEvents.data?.filter((e) => new Date(e.event_date) > now)\n                .length || 0,\n            timeline: this.createTimeline(\n              analyticsEvents.data || [],\n              \"created_at\",\n              days,\n            ),\n          },\n        };\n\n        return formatSuccessResponse({ analytics: analyticsData });\n\n      case \"export\":\n        // Data export functionality\n        const exportType = url.searchParams.get(\"type\") || \"all\";\n        const exportData: any = {\n          exportedAt: new Date().toISOString(),\n          exportType,\n        };\n\n        if (exportType === \"all\" || exportType === \"members\") {\n          const { data: exportMembers } = await supabaseClient\n            .from(\"members\")\n            .select(\"*\");\n          exportData.members = exportMembers;\n        }\n\n        if (exportType === \"all\" || exportType === \"donations\") {\n          const { data: exportDonations } = await supabaseClient\n            .from(\"donations\")\n            .select(\"*\");\n          exportData.donations = exportDonations;\n        }\n\n        if (exportType === \"all\" || exportType === \"events\") {\n          const { data: exportEvents } = await supabaseClient\n            .from(\"events\")\n            .select(\"*\");\n          exportData.events = exportEvents;\n        }\n\n        return formatSuccessResponse({ export: exportData });\n\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n\n  // Helper methods\n  function calculateGrowthTrend(data: any[], dateField: string) {\n    const now = new Date();\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n    const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n\n    const thisMonthCount = data.filter(\n      (item) => new Date(item[dateField]) >= thisMonth,\n    ).length;\n    const lastMonthCount = data.filter((item) => {\n      const date = new Date(item[dateField]);\n      return date >= lastMonth && date <= lastMonthEnd;\n    }).length;\n\n    const growth =\n      lastMonthCount > 0\n        ? Math.round(((thisMonthCount - lastMonthCount) / lastMonthCount) * 100)\n        : 0;\n\n    return {\n      thisMonth: thisMonthCount,\n      lastMonth: lastMonthCount,\n      growth,\n    };\n  }\n\n  function groupByField(data: any[], field: string) {\n    const groups: Record<string, number> = {};\n    data.forEach((item) => {\n      const value = item[field] || \"Unknown\";\n      groups[value] = (groups[value] || 0) + 1;\n    });\n    return groups;\n  }\n\n  function createTimeline(data: any[], dateField: string, days: number) {\n    const timeline: Record<string, number> = {};\n    const now = new Date();\n\n    // Initialize timeline with zeros\n    for (let i = 0; i < days; i++) {\n      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n      const dateKey = date.toISOString().split(\"T\")[0];\n      timeline[dateKey] = 0;\n    }\n\n    // Count items by date\n    data.forEach((item) => {\n      const dateKey = new Date(item[dateField]).toISOString().split(\"T\")[0];\n      if (timeline.hasOwnProperty(dateKey)) {\n        timeline[dateKey]++;\n      }\n    });\n\n    return Object.entries(timeline)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([date, count]) => ({ date, count }));\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/admin-dashboard/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":15,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":52,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":83,"endColumn":12},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":85,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":86,"endColumn":73},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":87,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":87,"endColumn":62},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":89,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":100,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":106,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":132,"endColumn":12},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":134,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":139,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":145,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":145,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'settings' is assigned a value but never used.","line":165,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":165,"endColumn":33},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":207,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":207,"endColumn":66},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":208,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":208,"endColumn":36},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":248,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":248,"endColumn":58},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":249,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":249,"endColumn":72},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":250,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":252,"endColumn":25},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":254,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":254,"endColumn":37}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const action = url.searchParams.get(\"action\") || \"dashboard\";\n\n    // Verify admin authentication\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) {\n      throw new Error(\"Authorization required\");\n    }\n\n    const token = authHeader.replace(\"Bearer \", \"\");\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseClient.auth.getUser(token);\n\n    if (authError || !user) {\n      throw new Error(\"Unauthorized\");\n    }\n\n    // Verify admin role\n    const { data: profile, error: profileError } = await supabaseClient\n      .from(\"profiles\")\n      .select(\"role\")\n      .eq(\"id\", user.id)\n      .single();\n\n    if (profileError || profile?.role !== \"admin\") {\n      throw new Error(\"Admin access required\");\n    }\n\n    switch (action) {\n      case \"dashboard\":\n        // Get dashboard statistics\n        const [\n          membersRes,\n          donationsRes,\n          eventsRes,\n          sermonsRes,\n          prayerRequestsRes,\n          testimonialsRes,\n        ] = await Promise.all([\n          supabaseClient.from(\"membership_statistics\").select(\"*\").single(),\n          supabaseClient\n            .from(\"donations\")\n            .select(\"amount, created_at\")\n            .gte(\n              \"created_at\",\n              new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n            ),\n          supabaseClient\n            .from(\"events\")\n            .select(\"*\", { count: \"exact\", head: true })\n            .gte(\"event_date\", new Date().toISOString().split(\"T\")[0]),\n          supabaseClient\n            .from(\"sermons\")\n            .select(\"*\", { count: \"exact\", head: true }),\n          supabaseClient\n            .from(\"prayer_requests\")\n            .select(\"*\", { count: \"exact\", head: true })\n            .eq(\"is_answered\", false),\n          supabaseClient\n            .from(\"testimonials\")\n            .select(\"*\", { count: \"exact\", head: true })\n            .eq(\"is_approved\", false),\n        ]);\n\n        const totalDonations =\n          donationsRes.data?.reduce((sum, d) => sum + d.amount, 0) || 0;\n        const donationCount = donationsRes.data?.length || 0;\n\n        const dashboardData = {\n          members: membersRes.data || {},\n          donations: {\n            total: totalDonations,\n            count: donationCount,\n            thisMonth: totalDonations,\n          },\n          upcomingEvents: eventsRes.count || 0,\n          totalSermons: sermonsRes.count || 0,\n          pendingPrayerRequests: prayerRequestsRes.count || 0,\n          pendingTestimonials: testimonialsRes.count || 0,\n        };\n\n        return formatSuccessResponse({ dashboard: dashboardData });\n\n      case \"recent_activity\":\n        // Get recent activity across all tables\n        const [\n          recentMembers,\n          recentDonations,\n          recentEvents,\n          recentPrayerRequests,\n        ] = await Promise.all([\n          supabaseClient\n            .from(\"members\")\n            .select(\"id, full_name, created_at, membership_status\")\n            .order(\"created_at\", { ascending: false })\n            .limit(5),\n          supabaseClient\n            .from(\"donations\")\n            .select(\"id, amount, donor_name, created_at\")\n            .order(\"created_at\", { ascending: false })\n            .limit(5),\n          supabaseClient\n            .from(\"events\")\n            .select(\"id, title, event_date, created_at\")\n            .order(\"created_at\", { ascending: false })\n            .limit(5),\n          supabaseClient\n            .from(\"prayer_requests\")\n            .select(\"id, name, created_at\")\n            .order(\"created_at\", { ascending: false })\n            .limit(5),\n        ]);\n\n        const recentActivity = {\n          members: recentMembers.data || [],\n          donations: recentDonations.data || [],\n          events: recentEvents.data || [],\n          prayerRequests: recentPrayerRequests.data || [],\n        };\n\n        return formatSuccessResponse({ activity: recentActivity });\n\n      case \"system_health\":\n        // Check system health\n        const healthChecks = [];\n\n        try {\n          await supabaseClient\n            .from(\"profiles\")\n            .select(\"count\", { count: \"exact\", head: true });\n          healthChecks.push({\n            component: \"Database\",\n            status: \"healthy\",\n            message: \"Database connection successful\",\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Database\",\n            status: \"error\",\n            message: \"Database connection failed\",\n          });\n        }\n\n        try {\n          const { data: settings } = await supabaseClient\n            .from(\"site_settings\")\n            .select(\"*\")\n            .single();\n          healthChecks.push({\n            component: \"Site Settings\",\n            status: \"healthy\",\n            message: \"Site settings loaded\",\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Site Settings\",\n            status: \"warning\",\n            message: \"Site settings not configured\",\n          });\n        }\n\n        try {\n          const { data: stripeSettings } = await supabaseClient\n            .from(\"stripe_settings\")\n            .select(\"*\")\n            .single();\n          const stripeStatus = stripeSettings?.enable_stripe\n            ? \"configured\"\n            : \"disabled\";\n          healthChecks.push({\n            component: \"Stripe\",\n            status: \"healthy\",\n            message: `Stripe is ${stripeStatus}`,\n          });\n        } catch (error) {\n          healthChecks.push({\n            component: \"Stripe\",\n            status: \"warning\",\n            message: \"Stripe settings not configured\",\n          });\n        }\n\n        return formatSuccessResponse({ health: healthChecks });\n\n      case \"export_data\":\n        // Export data for backup\n        const exportType = url.searchParams.get(\"type\") || \"all\";\n        const exportData: any = {};\n\n        if (exportType === \"all\" || exportType === \"members\") {\n          const { data: members } = await supabaseClient\n            .from(\"members\")\n            .select(\"*\");\n          exportData.members = members;\n        }\n\n        if (exportType === \"all\" || exportType === \"donations\") {\n          const { data: donations } = await supabaseClient\n            .from(\"donations\")\n            .select(\"*\");\n          exportData.donations = donations;\n        }\n\n        if (exportType === \"all\" || exportType === \"events\") {\n          const { data: events } = await supabaseClient\n            .from(\"events\")\n            .select(\"*\");\n          exportData.events = events;\n        }\n\n        if (exportType === \"all\" || exportType === \"sermons\") {\n          const { data: sermons } = await supabaseClient\n            .from(\"sermons\")\n            .select(\"*\");\n          exportData.sermons = sermons;\n        }\n\n        return formatSuccessResponse({\n          export: {\n            type: exportType,\n            timestamp: new Date().toISOString(),\n            data: exportData,\n          },\n        });\n\n      case \"cleanup\":\n        // Cleanup old data\n        const cleanupType = url.searchParams.get(\"type\");\n        const daysOld = parseInt(url.searchParams.get(\"days\") || \"90\");\n        const cutoffDate = new Date(\n          Date.now() - daysOld * 24 * 60 * 60 * 1000,\n        ).toISOString();\n\n        let cleanupResult: any = {};\n\n        if (cleanupType === \"logs\" || cleanupType === \"all\") {\n          // Clean up old audit logs if they exist\n          cleanupResult.logs = \"No audit logs table found\";\n        }\n\n        if (cleanupType === \"inactive_members\" || cleanupType === \"all\") {\n          const { count } = await supabaseClient\n            .from(\"members\")\n            .delete()\n            .eq(\"membership_status\", \"inactive\")\n            .lt(\"created_at\", cutoffDate);\n          cleanupResult.inactive_members = `Cleaned up ${count || 0} inactive members`;\n        }\n\n        return formatSuccessResponse({ cleanup: cleanupResult });\n\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/admin-operations/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":12,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":13,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\nDeno.serve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const { operation, data } = await req.json();\n\n    let result;\n\n    switch (operation) {\n      case \"getDashboardStats\":\n        result = await getDashboardStats(supabaseClient);\n        break;\n      case \"getRecentActivity\":\n        result = await getRecentActivity(supabaseClient, data?.limit || 6);\n        break;\n      case \"bulkDelete\":\n        result = await bulkDelete(supabaseClient, data.table, data.ids);\n        break;\n      case \"bulkUpdate\":\n        result = await bulkUpdate(supabaseClient, data.table, data.updates);\n        break;\n      case \"exportData\":\n        result = await exportData(supabaseClient, data.table, data.filters);\n        break;\n      default:\n        throw new Error(`Unknown operation: ${operation}`);\n    }\n\n    return new Response(JSON.stringify({ success: true, data: result }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"Admin operations error:\", error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error.message || \"Internal server error\",\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 400,\n      },\n    );\n  }\n});\n\nasync function getDashboardStats(supabaseClient: any) {\n  try {\n    const [events, members, donations, testimonials, prayerRequests, sermons] =\n      await Promise.all([\n        supabaseClient\n          .from(\"events\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabaseClient\n          .from(\"members\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabaseClient.from(\"donations\").select(\"amount, created_at\"),\n        supabaseClient\n          .from(\"testimonials\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabaseClient\n          .from(\"prayer_requests\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabaseClient\n          .from(\"sermons\")\n          .select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const recentDonations =\n      donations.data?.filter(\n        (d: any) => d?.created_at && new Date(d.created_at) >= thirtyDaysAgo,\n      ) || [];\n\n    const recentDonationAmount = recentDonations.reduce(\n      (sum: number, d: any) => sum + (d?.amount || 0),\n      0,\n    );\n\n    return {\n      totalEvents: events.count || 0,\n      totalMembers: members.count || 0,\n      totalDonations: donations.data?.length || 0,\n      totalTestimonials: testimonials.count || 0,\n      totalPrayerRequests: prayerRequests.count || 0,\n      totalSermons: sermons.count || 0,\n      recentDonationAmount,\n    };\n  } catch (error) {\n    console.error(\"Error getting dashboard stats:\", error);\n    throw error;\n  }\n}\n\nasync function getRecentActivity(supabaseClient: any, limit = 6) {\n  try {\n    const activities: any[] = [];\n\n    // Get recent events\n    const { data: events } = await supabaseClient\n      .from(\"events\")\n      .select(\"id, title, description, created_at\")\n      .order(\"created_at\", { ascending: false })\n      .limit(3);\n\n    events?.forEach((event: any) => {\n      if (event?.id && event?.title && event?.created_at) {\n        activities.push({\n          id: event.id,\n          type: \"event\",\n          title: `New Event: ${event.title}`,\n          description: event.description || \"No description\",\n          created_at: event.created_at,\n        });\n      }\n    });\n\n    // Get recent members\n    const { data: members } = await supabaseClient\n      .from(\"members\")\n      .select(\"id, full_name, created_at\")\n      .order(\"created_at\", { ascending: false })\n      .limit(3);\n\n    members?.forEach((member: any) => {\n      if (member?.id && member?.full_name && member?.created_at) {\n        activities.push({\n          id: member.id,\n          type: \"member\",\n          title: `New Member: ${member.full_name}`,\n          description: \"Joined the church community\",\n          created_at: member.created_at,\n        });\n      }\n    });\n\n    // Sort by creation date and take the most recent\n    activities.sort(\n      (a, b) =>\n        new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),\n    );\n\n    return activities.slice(0, limit);\n  } catch (error) {\n    console.error(\"Error getting recent activity:\", error);\n    return [];\n  }\n}\n\nasync function bulkDelete(supabaseClient: any, table: string, ids: string[]) {\n  if (!ids || ids.length === 0) {\n    throw new Error(\"No IDs provided for bulk delete\");\n  }\n\n  const { error } = await supabaseClient.from(table).delete().in(\"id\", ids);\n\n  if (error) throw error;\n\n  return { deletedCount: ids.length };\n}\n\nasync function bulkUpdate(supabaseClient: any, table: string, updates: any[]) {\n  if (!updates || updates.length === 0) {\n    throw new Error(\"No updates provided for bulk update\");\n  }\n\n  const results = [];\n  for (const update of updates) {\n    const { id, ...data } = update;\n    const { data: result, error } = await supabaseClient\n      .from(table)\n      .update(data)\n      .eq(\"id\", id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(`Error updating ${table} with id ${id}:`, error);\n      continue;\n    }\n    results.push(result);\n  }\n\n  return { updatedCount: results.length, results };\n}\n\nasync function exportData(supabaseClient: any, table: string, filters?: any) {\n  let query = supabaseClient.from(table).select(\"*\");\n\n  // Apply filters if provided\n  if (filters) {\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== null && value !== undefined && value !== \"\") {\n        query = query.eq(key, value);\n      }\n    });\n  }\n\n  const { data, error } = await query;\n\n  if (error) throw error;\n\n  return {\n    data,\n    exportedAt: new Date().toISOString(),\n    recordCount: data?.length || 0,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/admin-reporting/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":17,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":23,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":24,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":11}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport {\n  validateAdminAccess,\n  processMonthlyData,\n  processPurposeData,\n  processTypeData,\n  calculateTrends,\n  createTimeline,\n} from \"@shared/admin-utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    // Verify admin authentication\n    const user = await validateAdminAccess(\n      supabaseClient,\n      req.headers.get(\"Authorization\"),\n    );\n\n    // Parse request parameters\n    const { reportType, timeRange, filters } = await req.json();\n\n    // Calculate date ranges\n    const now = new Date();\n    let startDate: Date;\n\n    switch (timeRange) {\n      case \"7days\":\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case \"30days\":\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n      case \"90days\":\n        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n        break;\n      case \"6months\":\n        startDate = new Date(now.getTime() - 180 * 24 * 60 * 60 * 1000);\n        break;\n      case \"12months\":\n      default:\n        startDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);\n        break;\n    }\n\n    // Apply filters to query\n    const applyFilters = (query: any, tableFilters: any) => {\n      if (!tableFilters) return query;\n\n      Object.entries(tableFilters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (Array.isArray(value)) {\n            query = query.in(key, value);\n          } else if (typeof value === \"object\") {\n            const { operator, value: filterValue } = value as {\n              operator: string;\n              value: any;\n            };\n            switch (operator) {\n              case \"eq\":\n                query = query.eq(key, filterValue);\n                break;\n              case \"neq\":\n                query = query.neq(key, filterValue);\n                break;\n              case \"gt\":\n                query = query.gt(key, filterValue);\n                break;\n              case \"gte\":\n                query = query.gte(key, filterValue);\n                break;\n              case \"lt\":\n                query = query.lt(key, filterValue);\n                break;\n              case \"lte\":\n                query = query.lte(key, filterValue);\n                break;\n              case \"like\":\n                query = query.like(key, `%${filterValue}%`);\n                break;\n              case \"ilike\":\n                query = query.ilike(key, `%${filterValue}%`);\n                break;\n            }\n          } else {\n            query = query.eq(key, value);\n          }\n        }\n      });\n\n      return query;\n    };\n\n    let reportData: any = {};\n\n    switch (reportType) {\n      case \"donations\": {\n        // Fetch donations data with filters\n        let query = supabaseClient\n          .from(\"donations\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString());\n\n        query = applyFilters(query, filters?.donations);\n        const { data: donations, error } = await query;\n\n        if (error)\n          throw new Error(`Failed to fetch donations: ${error.message}`);\n\n        // Process donations data\n        const totalAmount =\n          donations?.reduce((sum, d) => sum + (Number(d.amount) || 0), 0) || 0;\n        const monthlyData = processMonthlyData(\n          donations || [],\n          \"created_at\",\n          \"amount\",\n        );\n        const purposeData = processPurposeData(donations || []);\n        const trends = calculateTrends(donations || [], \"amount\");\n\n        reportData = {\n          total: totalAmount,\n          count: donations?.length || 0,\n          monthly: monthlyData,\n          byPurpose: purposeData,\n          trends,\n          timeline: createTimeline(\n            donations || [],\n            \"created_at\",\n            timeRange === \"7days\" ? 7 : 30,\n          ),\n        };\n        break;\n      }\n\n      case \"members\": {\n        // Fetch members data with filters\n        let query = supabaseClient\n          .from(\"members\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString());\n\n        query = applyFilters(query, filters?.members);\n        const { data: members, error } = await query;\n\n        if (error) throw new Error(`Failed to fetch members: ${error.message}`);\n\n        // Process members data\n        const membersByMonth = processMonthlyData(members || [], \"created_at\");\n        const membersByType = processTypeData(members || [], \"membership_type\");\n        const membersByStatus = processTypeData(\n          members || [],\n          \"membership_status\",\n        );\n        const trends = calculateTrends(members || []);\n\n        reportData = {\n          total: members?.length || 0,\n          monthly: membersByMonth,\n          byType: membersByType,\n          byStatus: membersByStatus,\n          trends,\n          timeline: createTimeline(\n            members || [],\n            \"created_at\",\n            timeRange === \"7days\" ? 7 : 30,\n          ),\n          demographics: await getMemberDemographics(\n            supabaseClient,\n            members || [],\n          ),\n        };\n        break;\n      }\n\n      case \"events\": {\n        // Fetch events data with filters\n        let query = supabaseClient\n          .from(\"events\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString());\n\n        query = applyFilters(query, filters?.events);\n        const { data: events, error } = await query;\n\n        if (error) throw new Error(`Failed to fetch events: ${error.message}`);\n\n        // Process events data\n        const eventsByMonth = processMonthlyData(events || [], \"created_at\");\n        const upcomingEvents =\n          events?.filter((e) => new Date(e.event_date) > now).length || 0;\n        const pastEvents =\n          events?.filter((e) => new Date(e.event_date) <= now).length || 0;\n\n        reportData = {\n          total: events?.length || 0,\n          upcoming: upcomingEvents,\n          past: pastEvents,\n          monthly: eventsByMonth,\n          timeline: createTimeline(\n            events || [],\n            \"event_date\",\n            timeRange === \"7days\" ? 7 : 30,\n          ),\n        };\n        break;\n      }\n\n      case \"engagement\": {\n        // Fetch engagement data\n        const [prayerRequestsRes, testimonialsRes, galleryViewsRes] =\n          await Promise.all([\n            supabaseClient\n              .from(\"prayer_requests\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"testimonials\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"gallery\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n          ]);\n\n        reportData = {\n          prayerRequests: {\n            total: prayerRequestsRes.data?.length || 0,\n            timeline: createTimeline(\n              prayerRequestsRes.data || [],\n              \"created_at\",\n              timeRange === \"7days\" ? 7 : 30,\n            ),\n          },\n          testimonials: {\n            total: testimonialsRes.data?.length || 0,\n            timeline: createTimeline(\n              testimonialsRes.data || [],\n              \"created_at\",\n              timeRange === \"7days\" ? 7 : 30,\n            ),\n          },\n          gallery: {\n            total: galleryViewsRes.data?.length || 0,\n            timeline: createTimeline(\n              galleryViewsRes.data || [],\n              \"created_at\",\n              timeRange === \"7days\" ? 7 : 30,\n            ),\n          },\n        };\n        break;\n      }\n\n      case \"overview\":\n      default: {\n        // Fetch overview data\n        const [\n          donationsRes,\n          membersRes,\n          eventsRes,\n          prayerRequestsRes,\n          testimonialsRes,\n        ] = await Promise.all([\n          supabaseClient\n            .from(\"donations\")\n            .select(\"*\")\n            .gte(\"created_at\", startDate.toISOString()),\n          supabaseClient\n            .from(\"members\")\n            .select(\"*\")\n            .gte(\"created_at\", startDate.toISOString()),\n          supabaseClient\n            .from(\"events\")\n            .select(\"*\")\n            .gte(\"created_at\", startDate.toISOString()),\n          supabaseClient\n            .from(\"prayer_requests\")\n            .select(\"*\", { count: \"exact\", head: true }),\n          supabaseClient\n            .from(\"testimonials\")\n            .select(\"*\", { count: \"exact\", head: true }),\n        ]);\n\n        const donations = donationsRes.data || [];\n        const members = membersRes.data || [];\n        const events = eventsRes.data || [];\n\n        reportData = {\n          donations: {\n            total: donations.reduce(\n              (sum, d) => sum + (Number(d.amount) || 0),\n              0,\n            ),\n            count: donations.length,\n            trends: calculateTrends(donations, \"amount\"),\n          },\n          members: {\n            total: members.length,\n            trends: calculateTrends(members),\n          },\n          events: {\n            total: events.length,\n            upcoming: events.filter((e) => new Date(e.event_date) > now).length,\n          },\n          engagement: {\n            prayerRequests: prayerRequestsRes.count || 0,\n            testimonials: testimonialsRes.count || 0,\n          },\n        };\n      }\n    }\n\n    // Log report generation\n    await supabaseClient.from(\"admin_audit_log\").insert({\n      action: \"report_generation\",\n      table_name: reportType,\n      user_id: user.id,\n      details: `Generated ${reportType} report for ${timeRange}`,\n    });\n\n    return formatSuccessResponse({\n      reportType,\n      timeRange,\n      generatedAt: new Date().toISOString(),\n      data: reportData,\n    });\n  } catch (error) {\n    console.error(\"Report generation error:\", error);\n    return formatErrorResponse(error as Error);\n  }\n});\n\n/**\n * Get member demographics data\n */\nasync function getMemberDemographics(supabaseClient: any, members: any[]) {\n  if (!Array.isArray(members) || members.length === 0) {\n    return {\n      ageGroups: [],\n      genderDistribution: [],\n      familySize: [],\n    };\n  }\n\n  // Process age groups\n  const ageGroups: Record<string, number> = {\n    \"Under 18\": 0,\n    \"18-24\": 0,\n    \"25-34\": 0,\n    \"35-44\": 0,\n    \"45-54\": 0,\n    \"55-64\": 0,\n    \"65+\": 0,\n  };\n\n  // Process gender distribution\n  const genderDistribution: Record<string, number> = {};\n\n  // Process family size\n  const familySize: Record<string, number> = {\n    Single: 0,\n    Couple: 0,\n    \"Small Family (3-4)\": 0,\n    \"Large Family (5+)\": 0,\n  };\n\n  members.forEach((member) => {\n    // Age groups\n    if (member.age) {\n      const age = Number(member.age);\n      if (age < 18) ageGroups[\"Under 18\"]++;\n      else if (age < 25) ageGroups[\"18-24\"]++;\n      else if (age < 35) ageGroups[\"25-34\"]++;\n      else if (age < 45) ageGroups[\"35-44\"]++;\n      else if (age < 55) ageGroups[\"45-54\"]++;\n      else if (age < 65) ageGroups[\"55-64\"]++;\n      else ageGroups[\"65+\"]++;\n    }\n\n    // Gender distribution\n    if (member.gender) {\n      const gender = member.gender;\n      genderDistribution[gender] = (genderDistribution[gender] || 0) + 1;\n    }\n\n    // Family size\n    const familyMembers = (member.family_members || 0) + 1; // +1 for the member themselves\n    if (familyMembers === 1) familySize[\"Single\"]++;\n    else if (familyMembers === 2) familySize[\"Couple\"]++;\n    else if (familyMembers <= 4) familySize[\"Small Family (3-4)\"]++;\n    else familySize[\"Large Family (5+)\"]++;\n  });\n\n  return {\n    ageGroups: Object.entries(ageGroups).map(([group, count]) => ({\n      group,\n      count,\n    })),\n    genderDistribution: Object.entries(genderDistribution).map(\n      ([gender, count]) => ({ gender, count }),\n    ),\n    familySize: Object.entries(familySize).map(([size, count]) => ({\n      size,\n      count,\n    })),\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/analytics-reports/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":15,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":35,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":38,"endColumn":55},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":40,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":41,"endColumn":65},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":42,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":46,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":47,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":47,"endColumn":65},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":59,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":62,"endColumn":55},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":64,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":64,"endColumn":80},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":65,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":65,"endColumn":81},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":76,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":87,"endColumn":14},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":98,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":112,"endColumn":14}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const reportType = url.searchParams.get(\"type\") || \"overview\";\n    const timeRange = url.searchParams.get(\"timeRange\") || \"6months\";\n\n    // Calculate date ranges\n    const now = new Date();\n    const monthsBack =\n      timeRange === \"3months\" ? 3 : timeRange === \"6months\" ? 6 : 12;\n    const startDate = new Date(\n      now.getTime() - monthsBack * 30 * 24 * 60 * 60 * 1000,\n    );\n\n    let reportData: any = {};\n\n    switch (reportType) {\n      case \"donations\":\n        const { data: donations } = await supabaseClient\n          .from(\"donations\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString());\n\n        const totalAmount =\n          donations?.reduce((sum, d) => sum + d.amount, 0) || 0;\n        const monthlyData = processMonthlyData(\n          donations || [],\n          \"created_at\",\n          \"amount\",\n        );\n        const purposeData = processPurposeData(donations || []);\n\n        reportData = {\n          total: totalAmount,\n          count: donations?.length || 0,\n          monthly: monthlyData,\n          byPurpose: purposeData,\n          trends: calculateTrends(donations || [], \"amount\"),\n        };\n        break;\n\n      case \"members\":\n        const { data: members } = await supabaseClient\n          .from(\"members\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString());\n\n        const membersByMonth = processMonthlyData(members || [], \"created_at\");\n        const membersByType = processTypeData(members || [], \"membership_type\");\n\n        reportData = {\n          total: members?.length || 0,\n          monthly: membersByMonth,\n          byType: membersByType,\n          trends: calculateTrends(members || []),\n        };\n        break;\n\n      case \"engagement\":\n        const [prayerRequestsRes, testimonialsRes, eventsRes] =\n          await Promise.all([\n            supabaseClient\n              .from(\"prayer_requests\")\n              .select(\"*\", { count: \"exact\", head: true }),\n            supabaseClient\n              .from(\"testimonials\")\n              .select(\"*\", { count: \"exact\", head: true }),\n            supabaseClient\n              .from(\"events\")\n              .select(\"*\", { count: \"exact\", head: true }),\n          ]);\n\n        reportData = {\n          prayerRequests: prayerRequestsRes.count || 0,\n          testimonials: testimonialsRes.count || 0,\n          events: eventsRes.count || 0,\n        };\n        break;\n\n      default:\n        // Overview report\n        const [donationsOverview, membersOverview, eventsOverview] =\n          await Promise.all([\n            supabaseClient\n              .from(\"donations\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"members\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n            supabaseClient\n              .from(\"events\")\n              .select(\"*\")\n              .gte(\"created_at\", startDate.toISOString()),\n          ]);\n\n        reportData = {\n          donations: {\n            total:\n              donationsOverview.data?.reduce((sum, d) => sum + d.amount, 0) ||\n              0,\n            count: donationsOverview.data?.length || 0,\n          },\n          members: {\n            total: membersOverview.data?.length || 0,\n          },\n          events: {\n            total: eventsOverview.data?.length || 0,\n            upcoming:\n              eventsOverview.data?.filter((e) => new Date(e.event_date) > now)\n                .length || 0,\n          },\n        };\n    }\n\n    return formatSuccessResponse({\n      reportType,\n      timeRange,\n      generatedAt: new Date().toISOString(),\n      data: reportData,\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n\n// Helper functions\nfunction processMonthlyData(\n  items: any[],\n  dateField: string,\n  valueField?: string,\n) {\n  const monthlyData: Record<string, { count: number; amount: number }> = {};\n\n  items.forEach((item) => {\n    const date = new Date(item[dateField]);\n    const month = date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n    });\n    if (!monthlyData[month]) {\n      monthlyData[month] = { count: 0, amount: 0 };\n    }\n    monthlyData[month].count += 1;\n    if (valueField && item[valueField]) {\n      monthlyData[month].amount += item[valueField];\n    }\n  });\n\n  return Object.entries(monthlyData).map(([month, data]) => ({\n    month,\n    count: data.count,\n    amount: data.amount,\n  }));\n}\n\nfunction processPurposeData(donations: any[]) {\n  const purposeData: Record<string, number> = {};\n  const total = donations.reduce((sum, d) => sum + d.amount, 0);\n\n  donations.forEach((donation) => {\n    const purpose = donation.purpose || \"General Fund\";\n    purposeData[purpose] = (purposeData[purpose] || 0) + donation.amount;\n  });\n\n  return Object.entries(purposeData).map(([purpose, amount]) => ({\n    purpose,\n    amount,\n    percentage: total > 0 ? Math.round((amount / total) * 100) : 0,\n  }));\n}\n\nfunction processTypeData(members: any[], typeField: string) {\n  const typeData: Record<string, number> = {};\n  const total = members.length;\n\n  members.forEach((member) => {\n    const type = member[typeField] || \"Regular\";\n    typeData[type] = (typeData[type] || 0) + 1;\n  });\n\n  return Object.entries(typeData).map(([type, count]) => ({\n    type,\n    count,\n    percentage: total > 0 ? Math.round((count / total) * 100) : 0,\n  }));\n}\n\nfunction calculateTrends(items: any[], valueField?: string) {\n  const now = new Date();\n  const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n  const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n  const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n\n  const thisMonth = items.filter(\n    (item) => new Date(item.created_at) >= thisMonthStart,\n  );\n  const lastMonth = items.filter((item) => {\n    const date = new Date(item.created_at);\n    return date >= lastMonthStart && date <= lastMonthEnd;\n  });\n\n  const thisMonthValue = valueField\n    ? thisMonth.reduce((sum, item) => sum + (item[valueField] || 0), 0)\n    : thisMonth.length;\n  const lastMonthValue = valueField\n    ? lastMonth.reduce((sum, item) => sum + (item[valueField] || 0), 0)\n    : lastMonth.length;\n\n  const growth =\n    lastMonthValue > 0\n      ? Math.round(((thisMonthValue - lastMonthValue) / lastMonthValue) * 100)\n      : 0;\n\n  return {\n    thisMonth: thisMonthValue,\n    lastMonth: lastMonthValue,\n    growth,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/appointment-management/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":33,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":35,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":37,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'notes' is assigned a value but never used.","line":111,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\n// @ts-expect-error Import from Deno standard library is supported in Supabase Edge runtime\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts';\nimport { corsHeaders } from '../_shared/cors.ts';\n\n// --- Helper: Send notification (stub, replace with actual email/SMS integration) ---\nasync function sendNotification(type: string, payload: any) {\n  // TODO: Integrate with email/SMS provider or Supabase function\n  console.log(`[Notification] Type: ${type}`, payload);\n}\n\n// --- Helper: Log audit events ---\nasync function logAudit(action: string, entity: string, entityId: string, userId?: string) {\n  // TODO: Insert into audit_log table or external logging\n  console.log(`[Audit] ${action} on ${entity} (${entityId}) by ${userId ?? 'public'}`);\n}\n\n// --- Helper: Rate limiting (simple in-memory, replace with Redis for prod) ---\nconst rateLimitMap = new Map<string, { count: number; last: number }>();\nfunction isRateLimited(ip: string, limit = 5, windowMs = 60_000): boolean {\n  const now = Date.now();\n  const entry = rateLimitMap.get(ip) || { count: 0, last: now };\n  if (now - entry.last > windowMs) {\n    rateLimitMap.set(ip, { count: 1, last: now });\n    return false;\n  }\n  if (entry.count >= limit) return true;\n  rateLimitMap.set(ip, { count: entry.count + 1, last: entry.last });\n  return false;\n}\n\n// @ts-expect-error Deno global is available in Supabase Edge runtime\nconst supabaseUrl = Deno.env.get('SUPABASE_URL') ?? '';\n// @ts-expect-error Deno global is available in Supabase Edge runtime\nconst supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY') ?? '';\n// @ts-expect-error Deno global is available in Supabase Edge runtime\nconst supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '';\n\nconst supabaseClient = createClient(supabaseUrl, supabaseServiceKey);\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders });\n  }\n\n  try {\n    const ip = req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown';\n    const parsed: any = await req.json();\n    const action: string = parsed.action;\n    const data = parsed.data as Record<string, unknown> | undefined;\n    const filters = parsed.filters as Record<string, unknown> | undefined;\n\n    // Get authorization header from request (optional for create)\n    const authHeader = req.headers.get('Authorization');\n    let user = null;\n    if (authHeader) {\n      // Create client with user's JWT\n      const userClient = createClient(supabaseUrl, supabaseAnonKey, {\n        global: {\n          headers: {\n            Authorization: authHeader,\n          },\n        },\n      });\n      const { data: userData, error: userError } = await userClient.auth.getUser();\n      if (!userError && userData?.user) user = userData.user;\n    }\n\n    let result;\n\n    switch (action) {\n      case 'list': {\n        if (!user) throw new Error('Unauthorized');\n        let query = supabaseClient.from('appointments').select('*');\n        // Apply filters if provided\n        if (filters) {\n          const { status, fromDate, toDate } = filters as any;\n          if (status) {\n            query = query.eq('status', status);\n          }\n          if (fromDate) {\n            query = query.gte('appointment_date', fromDate);\n          }\n          if (toDate) {\n            query = query.lte('appointment_date', toDate);\n          }\n        }\n        // For regular users, only show their own appointments\n        // For admin users, show all appointments\n        const { data: adminData } = await supabaseClient\n          .from('admin_users')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n        if (!adminData) {\n          query = query.eq('user_id', user.id);\n        }\n        const { data: appointments, error: listError } = await query;\n        if (listError) throw listError;\n        result = { appointments };\n        break;\n      }\n      case 'create': {\n        // Rate limit public requests\n        if (!user && isRateLimited(ip)) {\n          throw new Error('Too many requests. Please try again later.');\n        }\n        // Accept public (unauthenticated) requests\n        const appointment_date = data?.appointment_date as string | undefined;\n        const service_type = data?.service_type as string | undefined;\n        const notes = data?.notes as string | undefined;\n        const name = data?.name as string | undefined;\n        const email = data?.email as string | undefined;\n        if (!appointment_date || !service_type) {\n          throw new Error('Missing required fields');\n        }\n        // If not authenticated, require name/email\n        if (!user && (!name || !email)) {\n          throw new Error('Name and email are required for public requests');\n        }\n        // Insert appointment\n        const { data: newAppointment, error: createError } = await supabaseClient\n          .from('appointments')\n          .insert([\n            {\n              ...data,\n              status: 'pending',\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n            },\n          ])\n          .select()\n          .single();\n        if (createError) throw createError;\n        // Audit log\n        await logAudit('create', 'appointment', newAppointment.id, user?.id);\n        // Notify admin\n        await sendNotification('appointment_created', newAppointment);\n        result = { appointment: newAppointment };\n        break;\n      }\n      case 'update': {\n        if (!user) throw new Error('Unauthorized');\n        const { id, ...updates } = data || {};\n        // Allow status workflow: confirmed, completed, cancelled\n        const status = typeof updates.status === 'string' ? updates.status : undefined;\n        if (status && !['pending', 'confirmed', 'completed', 'cancelled'].includes(status)) {\n          throw new Error('Invalid status');\n        }\n        // Allow admin notes\n        const { data: updated, error: updateError } = await supabaseClient\n          .from('appointments')\n          .update({ ...updates, updated_at: new Date().toISOString() })\n          .eq('id', id)\n          .select()\n          .single();\n        if (updateError) throw updateError;\n        await logAudit('update', 'appointment', String(id), user?.id);\n        await sendNotification('appointment_updated', updated);\n        result = { appointment: updated };\n        break;\n      }\n      case 'delete': {\n        if (!user) throw new Error('Unauthorized');\n        const { id } = data || {};\n        const { error: deleteError } = await supabaseClient\n          .from('appointments')\n          .delete()\n          .eq('id', id);\n        if (deleteError) throw deleteError;\n        await logAudit('delete', 'appointment', String(id), user?.id);\n        await sendNotification('appointment_deleted', { id });\n        result = { success: true };\n        break;\n      }\n      case 'export_calendar': {\n        if (!user) throw new Error('Unauthorized');\n        // TODO: Implement calendar export (Google/iCal integration)\n        result = { url: 'https://calendar.example.com/export.ics' };\n        break;\n      }\n      default:\n        throw new Error('Unknown action');\n    }\n\n    // Monitoring/logging stub\n    console.log(`[API] Action: ${action} by ${user?.id ?? 'public'} at ${new Date().toISOString()}`);\n    return new Response(JSON.stringify(result), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  } catch (err) {\n    const errorMsg = err instanceof Error ? err.message : String(err);\n    console.error('[API] Error:', errorMsg);\n    return new Response(JSON.stringify({ error: errorMsg }), {\n      status: 400,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  }\n});\n// API versioning and monitoring can be expanded here\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/appointment-request/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":2,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":25,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":36,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":39}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from 'npm:@supabase/supabase-js@2';\nDeno.serve(async (req)=>{\n  // Ensure only POST requests are accepted\n  if (req.method !== 'POST') {\n    return new Response('Method Not Allowed', {\n      status: 405\n    });\n  }\n  try {\n    // Parse the incoming request body\n    const { client_full_name, client_email, client_phone, appointment_date, appointment_time, service_type, notes } = await req.json();\n    // Validate required fields\n    if (!client_full_name || !client_email || !appointment_date || !appointment_time || !service_type) {\n      return new Response(JSON.stringify({\n        error: 'Missing required fields'\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        status: 400\n      });\n    }\n    // Create Supabase client with anonymous access\n    // Use service role key for backend operations\n    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');\n    if (!supabaseKey) {\n      return new Response(JSON.stringify({\n        error: 'SUPABASE_SERVICE_ROLE_KEY is not set in environment'\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        status: 500\n      });\n    }\n    const supabase = createClient(Deno.env.get('SUPABASE_URL'), supabaseKey);\n    // Insert appointment request\n    const { data, error } = await supabase.from('apointment').insert({\n      client_full_name,\n      client_email,\n      client_phone: client_phone || null,\n      appointment_date,\n      appointment_time,\n      service_type,\n      status: 'pending',\n      notes: notes || null\n    }).select();\n    if (error) throw error;\n    // Return successful response\n    return new Response(JSON.stringify(data[0]), {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      status: 201\n    });\n  } catch (err) {\n    console.error('Appointment request error:', err);\n    return new Response(JSON.stringify({\n      error: 'Failed to create appointment request',\n      details: (err && typeof err === 'object' && 'message' in err) ? (err as any).message : String(err)\n    }), {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      status: 500\n    });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/bulk-operations/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":15,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":30,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":30,"endColumn":31},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":31,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":31,"endColumn":32},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":32,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":32,"endColumn":34},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":64,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":66,"endColumn":24},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":84,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":87,"endColumn":26},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":104,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":104,"endColumn":61},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":111,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":111,"endColumn":59},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":125,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":125,"endColumn":66},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":132,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":132,"endColumn":36},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":152,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":164,"endColumn":21}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const { operation, table, data, ids, filters } = await req.json();\n\n    let result: any = {};\n\n    switch (operation) {\n      case \"bulk_import\":\n        if (!Array.isArray(data)) {\n          throw new Error(\"Data must be an array for bulk import\");\n        }\n\n        // Process in batches to avoid timeout\n        const batchSize = 100;\n        let totalProcessed = 0;\n        const errors: any[] = [];\n\n        for (let i = 0; i < data.length; i += batchSize) {\n          const batch = data.slice(i, i + batchSize);\n\n          try {\n            const { error } = await supabaseClient.from(table).insert(batch);\n\n            if (error) {\n              errors.push({ batch: i / batchSize + 1, error: error.message });\n            } else {\n              totalProcessed += batch.length;\n            }\n          } catch (batchError) {\n            errors.push({\n              batch: i / batchSize + 1,\n              error: String(batchError),\n            });\n          }\n        }\n\n        result = {\n          operation: \"bulk_import\",\n          table,\n          totalRecords: data.length,\n          processed: totalProcessed,\n          errors: errors.length,\n          errorDetails: errors,\n        };\n        break;\n\n      case \"bulk_export\":\n        const { data: exportData, error: exportError } = await supabaseClient\n          .from(table)\n          .select(\"*\");\n\n        if (exportError) throw exportError;\n\n        result = {\n          operation: \"bulk_export\",\n          table,\n          recordCount: exportData?.length || 0,\n          data: exportData,\n          exportedAt: new Date().toISOString(),\n        };\n        break;\n\n      case \"bulk_delete\":\n        if (!Array.isArray(ids) || ids.length === 0) {\n          throw new Error(\"IDs array is required for bulk delete\");\n        }\n\n        const { error: deleteError } = await supabaseClient\n          .from(table)\n          .delete()\n          .in(\"id\", ids);\n\n        if (deleteError) throw deleteError;\n\n        result = {\n          operation: \"bulk_delete\",\n          table,\n          deletedCount: ids.length,\n          deletedIds: ids,\n        };\n        break;\n\n      case \"bulk_update\":\n        if (!data || !filters) {\n          throw new Error(\"Data and filters are required for bulk update\");\n        }\n\n        let query = supabaseClient.from(table).update(data);\n\n        // Apply filters\n        Object.entries(filters).forEach(([key, value]) => {\n          query = query.eq(key, value);\n        });\n\n        const { error: updateError, count } = await query;\n\n        if (updateError) throw updateError;\n\n        result = {\n          operation: \"bulk_update\",\n          table,\n          updatedCount: count || 0,\n          updateData: data,\n          filters,\n        };\n        break;\n\n      case \"bulk_email\":\n        const { subject, content, recipientType = \"all\" } = data;\n\n        if (!subject || !content) {\n          throw new Error(\"Subject and content are required for bulk email\");\n        }\n\n        // Get recipients based on type\n        let recipients: any[] = [];\n\n        if (recipientType === \"subscribers\") {\n          const { data: subscribersData } = await supabaseClient\n            .from(\"email_subscribers\")\n            .select(\"email, name\")\n            .eq(\"status\", \"active\");\n          recipients = subscribersData || [];\n        } else if (recipientType === \"members\") {\n          const { data: membersData } = await supabaseClient\n            .from(\"members\")\n            .select(\"email, full_name\")\n            .not(\"email\", \"is\", null)\n            .eq(\"membership_status\", \"active\");\n          recipients =\n            membersData?.map((m) => ({ email: m.email, name: m.full_name })) ||\n            [];\n        }\n\n        // Create email campaign record\n        const { data: campaign, error: campaignError } = await supabaseClient\n          .from(\"email_campaigns\")\n          .insert({\n            name: `Bulk Email - ${new Date().toLocaleDateString()}`,\n            subject,\n            content,\n            status: \"sent\",\n            recipient_count: recipients.length,\n            sent_count: recipients.length,\n            sent_at: new Date().toISOString(),\n          })\n          .select()\n          .single();\n\n        if (campaignError) throw campaignError;\n\n        result = {\n          operation: \"bulk_email\",\n          campaignId: campaign.id,\n          recipientCount: recipients.length,\n          subject,\n          sentAt: new Date().toISOString(),\n        };\n        break;\n\n      default:\n        throw new Error(`Unknown operation: ${operation}`);\n    }\n\n    return formatSuccessResponse(result);\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/content-scheduler/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'corsHeaders' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":10,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":16,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":17,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":11},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":193,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":197,"endColumn":23},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":204,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":204,"endColumn":39},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":208,"column":15,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":212,"endColumn":27},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":218,"column":15,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":223,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'publishResult' is assigned a value but never used.","line":235,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":235,"endColumn":28},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":248,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":248,"endColumn":54},{"ruleId":"no-undef","severity":2,"message":"'publishResult' is not defined.","line":271,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":271,"endColumn":60}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const contentId = url.searchParams.get(\"id\");\n    const action = url.searchParams.get(\"action\");\n\n    // Verify admin authentication\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) {\n      throw new Error(\"Authorization required\");\n    }\n\n    const token = authHeader.replace(\"Bearer \", \"\");\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseClient.auth.getUser(token);\n\n    if (authError || !user) {\n      throw new Error(\"Unauthorized\");\n    }\n\n    // Verify admin role\n    const { data: profile, error: profileError } = await supabaseClient\n      .from(\"profiles\")\n      .select(\"role\")\n      .eq(\"id\", user.id)\n      .single();\n\n    if (profileError || profile?.role !== \"admin\") {\n      throw new Error(\"Admin access required\");\n    }\n\n    if (req.method === \"GET\") {\n      if (action === \"pending\") {\n        // Get pending scheduled content\n        const { data: pendingContent, error } = await supabaseClient\n          .from(\"scheduled_content\")\n          .select(\"*\")\n          .eq(\"status\", \"scheduled\")\n          .lte(\"scheduled_for\", new Date().toISOString())\n          .order(\"scheduled_for\", { ascending: true });\n\n        if (error) throw error;\n\n        return formatSuccessResponse({ content: pendingContent });\n      } else if (contentId) {\n        // Get specific scheduled content\n        const { data: content, error } = await supabaseClient\n          .from(\"scheduled_content\")\n          .select(\"*\")\n          .eq(\"id\", contentId)\n          .single();\n\n        if (error) throw error;\n\n        return formatSuccessResponse({ content });\n      } else {\n        // Get all scheduled content\n        const status = url.searchParams.get(\"status\");\n        const type = url.searchParams.get(\"type\");\n        const page = parseInt(url.searchParams.get(\"page\") || \"1\");\n        const limit = parseInt(url.searchParams.get(\"limit\") || \"20\");\n        const offset = (page - 1) * limit;\n\n        let query = supabaseClient\n          .from(\"scheduled_content\")\n          .select(\"*\", { count: \"exact\" })\n          .order(\"scheduled_for\", { ascending: false })\n          .range(offset, offset + limit - 1);\n\n        if (status) {\n          query = query.eq(\"status\", status);\n        }\n        if (type) {\n          query = query.eq(\"type\", type);\n        }\n\n        const { data: content, error, count } = await query;\n\n        if (error) throw error;\n\n        return formatSuccessResponse({\n          content,\n          pagination: {\n            page,\n            limit,\n            total: count || 0,\n            totalPages: Math.ceil((count || 0) / limit),\n          },\n        });\n      }\n    } else if (req.method === \"POST\") {\n      // Create scheduled content\n      const contentData = await req.json();\n\n      // Validate required fields\n      if (\n        !contentData.title ||\n        !contentData.content ||\n        !contentData.type ||\n        !contentData.scheduled_for\n      ) {\n        throw new Error(\"Title, content, type, and scheduled_for are required\");\n      }\n\n      // Validate content type\n      const validTypes = [\"event\", \"sermon\", \"announcement\", \"newsletter\"];\n      if (!validTypes.includes(contentData.type)) {\n        throw new Error(\"Invalid content type\");\n      }\n\n      // Sanitize input data\n      const sanitizedData = {\n        title: sanitizeString(contentData.title, 200),\n        content: contentData.content, // JSON content, don't sanitize\n        type: contentData.type,\n        scheduled_for: contentData.scheduled_for,\n        recurring: contentData.recurring || null,\n        status: \"scheduled\",\n        created_by: user.id,\n      };\n\n      const { data: newContent, error } = await supabaseClient\n        .from(\"scheduled_content\")\n        .insert([sanitizedData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ content: newContent }, 201);\n    } else if (req.method === \"PUT\" && contentId) {\n      // Update scheduled content\n      const updates = await req.json();\n\n      // Sanitize updates\n      const sanitizedUpdates = {\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n\n      if (updates.title) {\n        sanitizedUpdates.title = sanitizeString(updates.title, 200);\n      }\n\n      const { data: updatedContent, error } = await supabaseClient\n        .from(\"scheduled_content\")\n        .update(sanitizedUpdates)\n        .eq(\"id\", contentId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ content: updatedContent });\n    } else if (req.method === \"DELETE\" && contentId) {\n      // Delete scheduled content\n      const { error } = await supabaseClient\n        .from(\"scheduled_content\")\n        .delete()\n        .eq(\"id\", contentId);\n\n      if (error) throw error;\n\n      return formatSuccessResponse({\n        message: \"Scheduled content deleted successfully\",\n      });\n    } else if (req.method === \"PATCH\" && contentId && action) {\n      // Special actions on scheduled content\n      let updateData: any = { updated_at: new Date().toISOString() };\n\n      switch (action) {\n        case \"publish\":\n          // Publish the scheduled content immediately\n          const { data: content } = await supabaseClient\n            .from(\"scheduled_content\")\n            .select(\"*\")\n            .eq(\"id\", contentId)\n            .single();\n\n          if (!content) {\n            throw new Error(\"Content not found\");\n          }\n\n          // Create the actual content based on type\n          let publishResult: any = {};\n\n          switch (content.type) {\n            case \"event\":\n              const { data: newEvent, error: eventError } = await supabaseClient\n                .from(\"events\")\n                .insert([content.content])\n                .select()\n                .single();\n              if (eventError) throw eventError;\n              publishResult = { event: newEvent };\n              break;\n\n            case \"sermon\":\n              const { data: newSermon, error: sermonError } =\n                await supabaseClient\n                  .from(\"sermons\")\n                  .insert([content.content])\n                  .select()\n                  .single();\n              if (sermonError) throw sermonError;\n              publishResult = { sermon: newSermon };\n              break;\n\n            case \"announcement\":\n              // For announcements, we might want to send emails or create notifications\n              publishResult = { announcement: \"Published as notification\" };\n              break;\n\n            case \"newsletter\":\n              // For newsletters, trigger email campaign\n              publishResult = { newsletter: \"Email campaign triggered\" };\n              break;\n          }\n\n          updateData.status = \"published\";\n          updateData.published_at = new Date().toISOString();\n          break;\n\n        case \"cancel\":\n          updateData.status = \"cancelled\";\n          break;\n\n        case \"reschedule\":\n          const { scheduled_for } = await req.json();\n          if (!scheduled_for) {\n            throw new Error(\"New scheduled_for date is required\");\n          }\n          updateData.scheduled_for = scheduled_for;\n          updateData.status = \"scheduled\";\n          break;\n\n        default:\n          throw new Error(`Unknown action: ${action}`);\n      }\n\n      const { data: updatedContent, error } = await supabaseClient\n        .from(\"scheduled_content\")\n        .update(updateData)\n        .eq(\"id\", contentId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({\n        content: updatedContent,\n        publishResult: action === \"publish\" ? publishResult : undefined,\n      });\n    }\n\n    return formatErrorResponse(new Error(\"Method not allowed\"), 405);\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/create-checkout/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":71,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":86,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":87,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":87,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":115,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":11}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n  validateEmail,\n  checkRateLimit,\n} from \"@shared/utils.ts\";\nimport Stripe from \"https://esm.sh/stripe@14.21.0\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\ninterface CheckoutRequest {\n  amount: string;\n  donationType: string;\n  purpose: string;\n  email: string;\n  name?: string;\n  address?: string;\n  memberId?: string;\n}\n\n// Input validation helper\nfunction validateInput(data: CheckoutRequest): {\n  isValid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  // Validate amount\n  const amount = parseFloat(data.amount);\n  if (isNaN(amount) || amount < 1 || amount > 10000) {\n    errors.push(\"Amount must be between $1 and $10,000\");\n  }\n\n  // Validate donation type\n  const validDonationTypes = [\"one_time\", \"monthly\", \"quarterly\", \"annually\"];\n  if (!validDonationTypes.includes(data.donationType)) {\n    errors.push(\"Invalid donation type\");\n  }\n\n  // Validate purpose\n  const validPurposes = [\n    \"general_fund\",\n    \"building_fund\",\n    \"youth_programs\",\n    \"charity\",\n    \"membership_fee\",\n  ];\n  if (!validPurposes.includes(data.purpose)) {\n    errors.push(\"Invalid donation purpose\");\n  }\n\n  // Validate email format\n  if (!validateEmail(data.email)) {\n    errors.push(\"Invalid email format\");\n  }\n\n  // Sanitize string inputs\n  if (data.name && sanitizeString(data.name, 100) !== data.name) {\n    errors.push(\"Name contains invalid characters or is too long\");\n  }\n\n  if (data.address && sanitizeString(data.address, 200) !== data.address) {\n    errors.push(\"Address contains invalid characters or is too long\");\n  }\n\n  return { isValid: errors.length === 0, errors };\n}\n\nDeno.serve(async (req: Request) => {\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  // Rate limiting\n  const clientIP =\n    req.headers.get(\"x-forwarded-for\") ||\n    req.headers.get(\"x-real-ip\") ||\n    \"unknown\";\n  if (!checkRateLimit(clientIP, 10, 60000)) {\n    return formatErrorResponse(new Error(\"Rate limit exceeded\"), 429);\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n    );\n\n    const requestData: CheckoutRequest = await req.json();\n\n    // Validate input data\n    const validation = validateInput(requestData);\n    if (!validation.isValid) {\n      return new Response(\n        JSON.stringify({ error: validation.errors.join(\", \") }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 400,\n        },\n      );\n    }\n\n    const { amount, donationType, purpose, email, name, address, memberId } =\n      requestData;\n\n    if (!amount || !donationType || !purpose || !email) {\n      throw new Error(\n        \"Missing required fields: amount, donationType, purpose, email\",\n      );\n    }\n\n    // Use demo key for testing - in production, set STRIPE_SECRET_KEY environment variable\n    const stripeKey =\n      Deno.env.get(\"STRIPE_SECRET_KEY\") || \"sk_test_51234567890abcdef\";\n\n    if (!stripeKey || stripeKey === \"sk_test_51234567890abcdef\") {\n      console.log(\"Using demo Stripe key - this is for testing purposes only\");\n    }\n\n    const stripe = new Stripe(stripeKey, {\n      apiVersion: \"2023-10-16\",\n    });\n\n    const customers = await stripe.customers.list({ email, limit: 1 });\n    let customerId;\n    if (customers.data.length > 0) {\n      customerId = customers.data[0].id;\n\n      if (name || address) {\n        await stripe.customers.update(customerId, {\n          name: name || undefined,\n          address: address\n            ? {\n                line1: address,\n              }\n            : undefined,\n        });\n      }\n    } else {\n      const customer = await stripe.customers.create({\n        email,\n        name: name || undefined,\n        address: address\n          ? {\n              line1: address,\n            }\n          : undefined,\n      });\n      customerId = customer.id;\n    }\n\n    const amountInCents = Math.round(parseFloat(amount) * 100);\n    const productName =\n      purpose === \"general_fund\"\n        ? \"General Fund Donation\"\n        : purpose === \"building_fund\"\n          ? \"Building Fund Donation\"\n          : purpose === \"youth_programs\"\n            ? \"Youth Programs Donation\"\n            : purpose === \"membership_fee\"\n              ? \"Membership Fee\"\n              : \"Charitable Donation\";\n\n    const isRecurring = donationType !== \"one_time\";\n\n    const sessionConfig: Stripe.Checkout.SessionCreateParams = {\n      customer: customerId,\n      payment_method_types: [\"card\"],\n      line_items: [\n        {\n          price_data: {\n            currency: \"usd\",\n            product_data: {\n              name: productName,\n              description: `${purpose.replace(\"_\", \" \")} - ${isRecurring ? \"Recurring\" : \"One-time\"} donation`,\n            },\n            unit_amount: amountInCents,\n            ...(isRecurring && {\n              recurring: {\n                interval:\n                  donationType === \"monthly\"\n                    ? \"month\"\n                    : donationType === \"quarterly\"\n                      ? \"month\"\n                      : \"year\",\n                interval_count: donationType === \"quarterly\" ? 3 : 1,\n              },\n            }),\n          },\n          quantity: 1,\n        },\n      ],\n      mode: isRecurring ? \"subscription\" : \"payment\",\n      success_url: `${req.headers.get(\"origin\")}/donation-success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${req.headers.get(\"origin\")}/donation`,\n      metadata: {\n        purpose,\n        email,\n        donationType,\n        memberId: memberId || \"\",\n        demo_mode: \"true\",\n      },\n    };\n\n    const session = await stripe.checkout.sessions.create(sessionConfig);\n\n    try {\n      console.log(\"Storing donation record in database\");\n      const { data: donationData, error: donationError } = await supabaseClient\n        .from(\"donations\")\n        .insert([\n          {\n            amount: parseFloat(amount),\n            donor_email: email,\n            donor_name: name || null,\n            purpose: purpose,\n            payment_status: \"pending\",\n            payment_id: session.id,\n            payment_method: \"stripe\",\n            is_anonymous: false,\n            created_at: new Date().toISOString(),\n          },\n        ])\n        .select()\n        .single();\n\n      if (donationError) {\n        console.error(\"Error storing donation record:\", donationError);\n      } else {\n        console.log(\"Donation record stored successfully:\", donationData);\n      }\n    } catch (dbError) {\n      console.error(\"Exception storing donation record:\", dbError);\n    }\n\n    return formatSuccessResponse({ url: session.url });\n  } catch (error) {\n    console.error(\"Error in create-checkout function:\", error);\n    const errorMessage =\n      error instanceof Error ? error.message : \"Unknown error\";\n    return formatErrorResponse(new Error(errorMessage), 500);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/email-marketing/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":28,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":28,"column":66,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":70}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nserve(async (req) => {\n  if (req.method !== \"POST\") {\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), {\n      status: 405,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n\n  try {\n    const { subject, content, recipients } = await req.json();\n    if (!subject || !content || !recipients || !Array.isArray(recipients)) {\n      return new Response(JSON.stringify({ error: \"Missing required fields\" }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    }\n\n    // Send emails (replace with your email provider integration)\n    // For demo, just log\n    for (const email of recipients) {\n      console.log(`Would send to: ${email} | Subject: ${subject}`);\n    }\n\n    // Log campaign in DB\n    const supabase = createClient(Deno.env.get(\"SUPABASE_URL\")!, Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")!);\n    await supabase.from(\"email_campaigns\").insert({\n      name: subject,\n      subject,\n      content,\n      status: \"sent\",\n      recipient_count: recipients.length,\n      sent_count: recipients.length,\n      sent_at: new Date().toISOString(),\n    });\n\n    return new Response(JSON.stringify({ success: true }), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/backup/deps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/backup/index.new.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'GenerateCodeResponse' is defined but never used.","line":4,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":21,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":22,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\ninterface GenerateCodeResponse {\n  code: string;\n}\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) {\n      throw new Error(\"No authorization header\");\n    }\n\n    const { data: user, error: authError } = await supabaseClient.auth.getUser(\n      authHeader.replace(\"Bearer \", \"\"),\n    );\n\n    if (authError || !user) {\n      throw new Error(\"Invalid authentication token\");\n    }\n\n    const { data, error } = await supabaseClient.rpc(\n      \"generate_admin_registration_code\",\n    );\n\n    if (error) throw error;\n\n    return new Response(JSON.stringify({ code: data }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error:\n          error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 400,\n      },\n    );\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/backup/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'GenerateCodeResponse' is defined but never used.","line":3,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":20,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":21,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve, createClient } from \"./deps.ts\";\n\ninterface GenerateCodeResponse {\n  code: string;\n}\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) {\n      throw new Error(\"No authorization header\");\n    }\n\n    const { data: user, error: authError } = await supabaseClient.auth.getUser(\n      authHeader.replace(\"Bearer \", \"\"),\n    );\n\n    if (authError || !user) {\n      throw new Error(\"Invalid authentication token\");\n    }\n\n    const { data, error } = await supabaseClient.rpc(\n      \"generate_admin_registration_code\",\n    );\n\n    if (error) throw error;\n\n    return new Response(JSON.stringify({ code: data }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error:\n          error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 400,\n      },\n    );\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/deps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":17,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":18,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":28,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\nserve(async (req: Request) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } },\n    );\n\n    // Generate a random 6-digit code\n    const code = Math.floor(100000 + Math.random() * 900000).toString();\n\n    // Set expiration to 1 hour from now\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000).toISOString();\n\n    const { data, error } = await supabaseClient\n      .from(\"admin_registration_codes\")\n      .insert([\n        {\n          code,\n          expires_at: expiresAt,\n          is_used: false,\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return new Response(JSON.stringify({ code, expires_at: expiresAt }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"Error generating admin code:\", error);\n    const errorMessage =\n      error instanceof Error ? error.message : \"Unknown error\";\n    return new Response(JSON.stringify({ error: errorMessage }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/get-session/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":27,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport Stripe from \"https://esm.sh/stripe@14.21.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface SessionRequest {\n  session_id: string;\n}\n\nserve(async (req: Request) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const requestData: SessionRequest = await req.json();\n    const { session_id } = requestData;\n\n    if (!session_id) {\n      throw new Error(\"Missing session_id parameter\");\n    }\n\n    const stripe = new Stripe(Deno.env.get(\"STRIPE_SECRET_KEY\") || \"\", {\n      apiVersion: \"2023-10-16\",\n    });\n\n    const session = await stripe.checkout.sessions.retrieve(session_id, {\n      expand: [\"payment_intent\", \"subscription\", \"customer\"],\n    });\n\n    return new Response(JSON.stringify({ session }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"Error in get-session function:\", error);\n    const errorMessage =\n      error instanceof Error ? error.message : \"Unknown error\";\n    return new Response(JSON.stringify({ error: errorMessage }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/membership-management/index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'formatErrorResponse' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'formatSuccessResponse' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":60,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":82,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":84,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":84,"endColumn":11}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Use relative imports for shared modules\nimport { corsHeaders } from \"../_shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n  validateEmail,\n} from \"../_shared/utils.ts\";\n// Use the original Supabase client import (update if you have a local Deno-compatible version)\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\n// Define types for member data and updates\ninterface MemberData {\n  full_name: string;\n  first_name?: string;\n  middle_name?: string;\n  last_name?: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  terms_accepted?: boolean;\n  privacy_accepted?: boolean;\n  data_processing_consent?: boolean;\n  newsletter_consent?: boolean;\n  [key: string]: any;\n}\n\ninterface MemberUpdate {\n  full_name?: string;\n  email?: string;\n  [key: string]: any;\n}\n\n// --- Helper: Send notification (stub, replace with actual email/SMS integration) ---\nasync function sendNotification(type: string, payload: any) {\n  // TODO: Integrate with email/SMS provider or Supabase function\n  console.log(`[Notification] Type: ${type}`, payload);\n}\n// --- Helper: Log audit events ---\nasync function logAudit(action: string, entity: string, entityId: string, userId?: string) {\n  // TODO: Insert into audit_log table or external logging\n  console.log(`[Audit] ${action} on ${entity} (${entityId}) by ${userId ?? 'public'}`);\n}\n// --- Helper: Rate limiting (simple in-memory, replace with Redis for prod) ---\nconst rateLimitMap = new Map<string, { count: number; last: number }>();\nfunction isRateLimited(ip: string, limit = 5, windowMs = 60_000): boolean {\n  const now = Date.now();\n  const entry = rateLimitMap.get(ip) || { count: 0, last: now };\n  if (now - entry.last > windowMs) {\n    rateLimitMap.set(ip, { count: 1, last: now });\n    return false;\n  }\n  if (entry.count >= limit) return true;\n  rateLimitMap.set(ip, { count: entry.count + 1, last: entry.last });\n  return false;\n}\n\n// @ts-expect-error Deno global is available in Supabase Edge runtime\nDeno.serve(async (req: Request) => {\n  const url = new URL(req.url);\n  // Robust CORS: handle OPTIONS preflight\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { status: 200, headers: corsHeaders });\n  }\n  if (url.pathname === \"/health\") {\n    // Health check endpoint\n    return new Response(\n      JSON.stringify({ status: \"ok\", time: new Date().toISOString() }),\n      {\n        status: 200,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      },\n    );\n  }\n  const ip = req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown';\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n  try {\n    const supabaseClient = createClient(\n      // @ts-expect-error Deno global is available in Supabase Edge runtime\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      // @ts-expect-error Deno global is available in Supabase Edge runtime\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n    );\n    const memberId = url.searchParams.get(\"id\");\n    const action = url.searchParams.get(\"action\");\n    if (req.method === \"POST\") {\n      // Rate limit public registration\n      if (isRateLimited(ip)) {\n        return new Response(JSON.stringify({ error: 'Too many requests. Please try again later.' }), { status: 429, headers: corsHeaders });\n      }\n      // Create new member registration\n      const memberData = (await req.json()) as MemberData;\n\n      // Validate required fields\n      if (!memberData.full_name || !memberData.email) {\n        return new Response(JSON.stringify({ error: \"Full name and email are required\" }), { status: 400, headers: corsHeaders });\n      }\n\n      // Validate email format\n      if (!validateEmail(memberData.email)) {\n        return new Response(JSON.stringify({ error: \"Invalid email format\" }), { status: 400, headers: corsHeaders });\n      }\n\n      // Sanitize input data\n      const sanitizedData = {\n        ...memberData,\n        full_name: sanitizeString(memberData.full_name, 100),\n        first_name: sanitizeString(memberData.first_name ?? \"\", 50),\n        middle_name: sanitizeString(memberData.middle_name ?? \"\", 50),\n        last_name: sanitizeString(memberData.last_name ?? \"\", 50),\n        email: sanitizeString(memberData.email, 100),\n        phone: sanitizeString(memberData.phone ?? \"\", 20),\n        address: sanitizeString(memberData.address ?? \"\", 200),\n        registration_date: new Date().toISOString().split(\"T\")[0],\n        membership_status: \"pending\",\n        integration_status: \"new\",\n        follow_up_required: true,\n        registration_ip_address:\n          req.headers.get(\"x-forwarded-for\") || req.headers.get(\"x-real-ip\"),\n        registration_user_agent: req.headers.get(\"user-agent\"),\n        terms_accepted_at: memberData.terms_accepted\n          ? new Date().toISOString()\n          : null,\n        privacy_policy_accepted_at: memberData.privacy_accepted\n          ? new Date().toISOString()\n          : null,\n        data_processing_consent: memberData.data_processing_consent || false,\n      };\n\n      // Check for duplicate email\n      const { data: existingMember } = await supabaseClient\n        .from(\"members\")\n        .select(\"id\")\n        .eq(\"email\", sanitizedData.email)\n        .single();\n\n      if (existingMember) {\n        return new Response(JSON.stringify({ error: \"A member with this email already exists\" }), { status: 409, headers: corsHeaders });\n      }\n\n      // Insert new member\n      const { data: newMember, error } = await supabaseClient\n        .from(\"members\")\n        .insert([sanitizedData])\n        .select()\n        .single();\n\n      if (error) {\n        return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });\n      }\n\n      // Audit log\n      await logAudit('create', 'member', newMember.id);\n      // Send welcome email\n      await sendNotification('welcome_email', { email: newMember.email, name: newMember.full_name });\n\n      // Add to newsletter if consented\n      if (memberData.newsletter_consent && memberData.email) {\n        await supabaseClient.from(\"newsletter_subscribers\").insert([\n          {\n            email: memberData.email,\n            name: memberData.full_name,\n            subscribed: true,\n          },\n        ]);\n      }\n\n      return new Response(JSON.stringify({ member: newMember }), { status: 201, headers: corsHeaders });\n    } else if (req.method === \"PUT\" && memberId) {\n      // Update member\n      const updates = (await req.json()) as MemberUpdate;\n\n      // Sanitize update data\n      const sanitizedUpdates = {\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n\n      if (updates.full_name) {\n        sanitizedUpdates.full_name = sanitizeString(updates.full_name, 100);\n      }\n      if (updates.email && !validateEmail(updates.email)) {\n        return new Response(JSON.stringify({ error: \"Invalid email format\" }), { status: 400, headers: corsHeaders });\n      }\n\n      const { data: updatedMember, error } = await supabaseClient\n        .from(\"members\")\n        .update(sanitizedUpdates)\n        .eq(\"id\", memberId)\n        .select()\n        .single();\n\n      if (error) {\n        return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });\n      }\n      await logAudit('update', 'member', memberId);\n      // Send profile update notification\n      await sendNotification('profile_updated', { email: updatedMember.email, name: updatedMember.full_name });\n      return new Response(JSON.stringify({ member: updatedMember }), { status: 200, headers: corsHeaders });\n    } else if (req.method === \"PATCH\" && memberId && action) {\n      // Special actions on members\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        return new Response(JSON.stringify({ error: \"Authorization required\" }), { status: 401, headers: corsHeaders });\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        return new Response(JSON.stringify({ error: \"Unauthorized\" }), { status: 401, headers: corsHeaders });\n      }\n\n      let updateData: any = { updated_at: new Date().toISOString() };\n\n      switch (action) {\n        case \"approve\":\n          updateData.membership_status = \"active\";\n          updateData.membership_date = new Date().toISOString().split(\"T\")[0];\n          // Generate digital membership card\n          updateData.membership_card_issued = true;\n          updateData.membership_card_number = `SGEC-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n          // Send approval and card notification\n          await sendNotification('membership_approved', { memberId, card: updateData.membership_card_number });\n          break;\n        case \"reject\":\n          updateData.membership_status = \"inactive\";\n          await sendNotification('membership_rejected', { memberId });\n          break;\n        case \"mark_paid\": {\n          updateData.membership_fee_paid = true;\n          const body = (await req.json()) as { payment_reference?: string };\n          updateData.payment_reference = body.payment_reference;\n          await sendNotification('membership_fee_paid', { memberId });\n          break;\n        }\n        case \"issue_card\":\n          updateData.membership_card_issued = true;\n          updateData.membership_card_number = `SGEC-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n          await sendNotification('membership_card_issued', { memberId, card: updateData.membership_card_number });\n          break;\n        case \"complete_orientation\":\n          updateData.orientation_completed = true;\n          updateData.orientation_date = new Date().toISOString().split(\"T\")[0];\n          updateData.integration_status = \"in_progress\";\n          await sendNotification('orientation_completed', { memberId });\n          break;\n        case \"mark_integrated\":\n          updateData.integration_status = \"integrated\";\n          updateData.follow_up_required = false;\n          await sendNotification('integration_completed', { memberId });\n          break;\n        default:\n          return new Response(JSON.stringify({ error: `Unknown action: ${action}` }), { status: 400, headers: corsHeaders });\n      }\n      const { data: updatedMember, error } = await supabaseClient\n        .from(\"members\")\n        .update(updateData)\n        .eq(\"id\", memberId)\n        .select()\n        .single();\n\n      if (error) {\n        return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });\n      }\n      await logAudit('patch', 'member', memberId);\n      return new Response(JSON.stringify({ member: updatedMember }), { status: 200, headers: corsHeaders });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), { status: 405, headers: corsHeaders });\n  } catch (error) {\n    return new Response(JSON.stringify({ error: (error as Error).message }), { status: 500, headers: corsHeaders });\n  }\n});\n// API versioning, monitoring, and renewal reminders can be expanded here\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/prayer-requests/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":12,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":19,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":20,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n  validateEmail,\n  checkRateLimit,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nDeno.serve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const requestId = url.searchParams.get(\"id\");\n\n    if (req.method === \"GET\") {\n      // Check if user is admin\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      // Get all prayer requests or a specific one\n      let query = supabaseClient.from(\"prayer_requests\").select(\"*\");\n\n      if (requestId) {\n        query = query.eq(\"id\", requestId).single();\n      } else {\n        // Order by creation date, newest first\n        query = query.order(\"created_at\", { ascending: false });\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_requests: data });\n    } else if (req.method === \"POST\") {\n      // Create a new prayer request\n      const { name, email, request, is_public } = await req.json();\n\n      if (!name || !request) {\n        throw new Error(\"Name and prayer request are required\");\n      }\n\n      // Rate limiting for prayer request submissions\n      const clientIP =\n        req.headers.get(\"x-forwarded-for\") ||\n        req.headers.get(\"x-real-ip\") ||\n        \"unknown\";\n      if (!checkRateLimit(`prayer_${clientIP}`, 5, 300000)) {\n        // 5 requests per 5 minutes\n        throw new Error(\n          \"Too many prayer requests. Please wait before submitting another.\",\n        );\n      }\n\n      // Validate email if provided\n      if (email && !validateEmail(email)) {\n        throw new Error(\"Invalid email format\");\n      }\n\n      const { data, error } = await supabaseClient\n        .from(\"prayer_requests\")\n        .insert({\n          name: sanitizeString(name, 100),\n          email: email ? sanitizeString(email, 100) : null,\n          request: sanitizeString(request, 1000),\n          is_public: is_public || false,\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_request: data }, 201);\n    } else if (req.method === \"PUT\" && requestId) {\n      // Update a prayer request (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { is_answered } = await req.json();\n\n      const { data, error } = await supabaseClient\n        .from(\"prayer_requests\")\n        .update({\n          is_answered,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", requestId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_request: data });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), {\n      status: 405,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/send-email/deno.d.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Deno' is defined but never used.","line":1,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":3,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":11,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'handler' is defined but never used.","line":15,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":64},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":15,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'init' is defined but never used.","line":16,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'apiKey' is defined but never used.","line":22,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":24,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":8}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare namespace Deno {\n  export interface env {\n    get(key: string): string | undefined;\n  }\n}\n\ndeclare module \"std/http/server.ts\" {\n  export interface ServeInit {\n    port?: number;\n    hostname?: string;\n    handler?: (request: Request) => Response | Promise<Response>;\n  }\n\n  export function serve(\n    handler: (request: Request) => Response | Promise<Response>,\n    init?: ServeInit,\n  ): void;\n}\n\ndeclare module \"resend\" {\n  export class Resend {\n    constructor(apiKey: string);\n    emails: {\n      send(options: {\n        from: string;\n        to: string[];\n        subject: string;\n        html: string;\n      }): Promise<any>;\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/send-email/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/stripe-webhook/_shared/cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/stripe-webhook/_shared/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/stripe-webhook/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":14,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":29,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":30,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":31,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":32,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":40}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"../_shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n} from \"../_shared/utils.ts\";\nimport {\n  createStripeInstance,\n  verifyStripeSignature,\n  processCompletedCheckout,\n} from \"../_shared/payment-utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\nDeno.serve(async (req) => {\n  // Handle CORS preflight request\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    // Validate request method\n    if (req.method !== \"POST\") {\n      return new Response(\"Method not allowed\", {\n        status: 405,\n        headers: corsHeaders,\n      });\n    }\n\n    // Get environment variables\n    const stripeSecretKey = Deno.env.get(\"STRIPE_SECRET_KEY\");\n    const stripeWebhookSecret = Deno.env.get(\"STRIPE_WEBHOOK_SECRET\");\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseServiceRoleKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n\n    // Validate required environment variables\n    if (!stripeSecretKey) {\n      throw new Error(\"Missing STRIPE_SECRET_KEY environment variable\");\n    }\n    if (!stripeWebhookSecret) {\n      throw new Error(\"Missing STRIPE_WEBHOOK_SECRET environment variable\");\n    }\n    if (!supabaseUrl) {\n      throw new Error(\"Missing SUPABASE_URL environment variable\");\n    }\n    if (!supabaseServiceRoleKey) {\n      throw new Error(\"Missing SUPABASE_SERVICE_ROLE_KEY environment variable\");\n    }\n\n    // Get Stripe signature from headers\n    const signature = req.headers.get(\"stripe-signature\");\n    if (!signature) {\n      return formatErrorResponse(new Error(\"Missing Stripe signature\"), 400);\n    }\n\n    // Get request body as text for signature verification\n    const payload = await req.text();\n\n    // Create Stripe instance\n    const stripe = createStripeInstance(stripeSecretKey);\n\n    // Verify Stripe signature\n    const { success, event, error } = verifyStripeSignature(\n      stripe,\n      payload,\n      signature,\n      stripeWebhookSecret,\n    );\n\n    if (!success || !event) {\n      return formatErrorResponse(new Error(`Webhook error: ${error}`), 400);\n    }\n\n    // Create Supabase client\n    const supabaseClient = createClient(supabaseUrl, supabaseServiceRoleKey);\n\n    // Process checkout.session.completed event\n    if (event.type === \"checkout.session.completed\") {\n      const session = event.data.object;\n      const result = await processCompletedCheckout(\n        supabaseClient,\n        session,\n        stripe,\n      );\n\n      if (!result.success) {\n        console.error(\"Error processing checkout:\", result.error);\n        // We still return 200 to acknowledge receipt to Stripe\n        return formatSuccessResponse({ received: true, processed: false });\n      }\n\n      return formatSuccessResponse({ received: true, processed: true });\n    } else {\n      // For unsupported event types, just acknowledge receipt\n      return formatSuccessResponse({ received: true, ignored: true });\n    }\n  } catch (error) {\n    console.error(\"Webhook handler error:\", error);\n    return formatErrorResponse(\n      error instanceof Error ? error : new Error(String(error)),\n      500,\n    );\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/supabase-functions-appointment-request/_shared/cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/supabase-functions-appointment-request/_shared/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/supabase-functions-appointment-request/index.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":16,"column":25,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":16,"endColumn":26,"suggestions":[{"messageId":"removeEscape","fix":{"range":[651,652],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[651,651],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":17,"column":64,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":17,"endColumn":65,"suggestions":[{"messageId":"removeEscape","fix":{"range":[737,738],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[737,737],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":17,"column":66,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":17,"endColumn":67,"suggestions":[{"messageId":"removeEscape","fix":{"range":[739,740],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[739,739],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":55,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":64,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":64,"column":77,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":81}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport { handleCorsOptions, formatErrorResponse, formatSuccessResponse, sanitizeString, validateEmail, checkRateLimit } from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n// Input validation helper\nfunction validateAppointmentInput(data) {\n  const errors = [];\n  // Validate name\n  if (!data.name || data.name.trim().length < 2) {\n    errors.push(\"Name must be at least 2 characters long\");\n  }\n  // Validate email format\n  if (!validateEmail(data.email)) {\n    errors.push(\"Invalid email format\");\n  }\n  // Validate phone number\n  const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n  if (!data.phone || !phoneRegex.test(data.phone.replace(/[\\s\\-\\(\\)]/g, \"\"))) {\n    errors.push(\"Invalid phone number format\");\n  }\n  // Validate service title\n  const validServices = [\n    \"Marriage Ceremony\",\n    \"ጋብቻ መፈፀም\",\n    \"Funeral Prayer\",\n    \"ጸሎተ ፍትሐት\",\n    \"Counseling Services\",\n    \"የምክር አገልግሎት\",\n    \"Qendil Prayer\",\n    \"ጸሎተ ቀንዲል\",\n    \"Qeder Baptism\",\n    \"የቄደር ጥምቀት\",\n    \"Christian Initiation\",\n    \"ክርስትና ማስነሳት\"\n  ];\n  if (!data.service_title || !validServices.includes(data.service_title)) {\n    errors.push(\"Invalid service selection\");\n  }\n  // Validate requested date (must be future date)\n  const requestedDate = new Date(data.requested_date);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  if (!data.requested_date || requestedDate < today) {\n    errors.push(\"Requested date must be in the future\");\n  }\n  // Validate requested time\n  const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n  if (!data.requested_time || !timeRegex.test(data.requested_time)) {\n    errors.push(\"Invalid time format (HH:MM required)\");\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\nDeno.serve(async (req)=>{\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n  // Rate limiting\n  const clientIP = req.headers.get(\"x-forwarded-for\") || req.headers.get(\"x-real-ip\") || \"unknown\";\n  if (!checkRateLimit(clientIP, 5, 60000)) {\n    return formatErrorResponse(new Error(\"Rate limit exceeded\"), 429);\n  }\n  try {\n    const supabaseClient = createClient(Deno.env.get(\"SUPABASE_URL\") ?? \"\", Deno.env.get(\"SUPABASE_SERVICE_KEY\") ?? \"\");\n    const url = new URL(req.url);\n    const appointmentId = url.searchParams.get(\"id\");\n    const action = url.searchParams.get(\"action\");\n    if (req.method === \"GET\") {\n      if (appointmentId) {\n        // Get specific appointment\n        const { data: appointment, error } = await supabaseClient.from(\"appointments\").select(`\n            *,\n            responded_by_profile:profiles!appointments_responded_by_fkey(email)\n          `).eq(\"id\", appointmentId).single();\n        if (error) throw error;\n        return formatSuccessResponse({\n          appointment\n        });\n      } else {\n        // Get all appointments with pagination\n        const page = parseInt(url.searchParams.get(\"page\") || \"1\");\n        const limit = parseInt(url.searchParams.get(\"limit\") || \"50\");\n        const offset = (page - 1) * limit;\n        const status = url.searchParams.get(\"status\");\n        let query = supabaseClient.from(\"appointments\").select(`\n            *,\n            responded_by_profile:profiles!appointments_responded_by_fkey(email)\n          `, {\n          count: \"exact\"\n        }).order(\"created_at\", {\n          ascending: false\n        }).range(offset, offset + limit - 1);\n        if (status) {\n          query = query.eq(\"status\", status);\n        }\n        const { data: appointments, error, count } = await query;\n        if (error) throw error;\n        return formatSuccessResponse({\n          appointments,\n          pagination: {\n            page,\n            limit,\n            total: count || 0,\n            totalPages: Math.ceil((count || 0) / limit)\n          }\n        });\n      }\n    } else if (req.method === \"POST\") {\n      // Create new appointment request\n      const appointmentData = await req.json();\n      // Validate input data\n      const validation = validateAppointmentInput(appointmentData);\n      if (!validation.isValid) {\n        return new Response(JSON.stringify({\n          error: validation.errors.join(\", \")\n        }), {\n          headers: {\n            ...corsHeaders,\n            \"Content-Type\": \"application/json\"\n          },\n          status: 400\n        });\n      }\n      // Sanitize input data\n      const sanitizedData = {\n        name: sanitizeString(appointmentData.name, 100),\n        email: sanitizeString(appointmentData.email, 100),\n        phone: sanitizeString(appointmentData.phone, 20),\n        service_title: sanitizeString(appointmentData.service_title, 100),\n        requested_date: appointmentData.requested_date,\n        requested_time: appointmentData.requested_time,\n        notes: appointmentData.notes ? sanitizeString(appointmentData.notes, 500) : null,\n        status: \"pending\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      // Check for duplicate appointment (same person, same service, same date)\n      const { data: existingAppointment } = await supabaseClient.from(\"appointments\").select(\"id\").eq(\"email\", sanitizedData.email).eq(\"service_title\", sanitizedData.service_title).eq(\"requested_date\", sanitizedData.requested_date).eq(\"status\", \"pending\").single();\n      if (existingAppointment) {\n        throw new Error(\"You already have a pending appointment for this service on this date\");\n      }\n      // Insert new appointment\n      const { data: newAppointment, error } = await supabaseClient.from(\"appointments\").insert([\n        sanitizedData\n      ]).select().single();\n      if (error) throw error;\n      return formatSuccessResponse({\n        appointment: newAppointment\n      }, 201);\n    } else if (req.method === \"PUT\" && appointmentId) {\n      // Update appointment (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization required\");\n      }\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const { data: { user }, error: authError } = await supabaseClient.auth.getUser(token);\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient.from(\"profiles\").select(\"role\").eq(\"id\", user.id).single();\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Admin access required\");\n      }\n      const updates = await req.json();\n      const sanitizedUpdates = {\n        ...updates,\n        updated_at: new Date().toISOString()\n      };\n      const { data: updatedAppointment, error } = await supabaseClient.from(\"appointments\").update(sanitizedUpdates).eq(\"id\", appointmentId).select().single();\n      if (error) throw error;\n      return formatSuccessResponse({\n        appointment: updatedAppointment\n      });\n    } else if (req.method === \"PATCH\" && appointmentId && action) {\n      // Special actions on appointments (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization required\");\n      }\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const { data: { user }, error: authError } = await supabaseClient.auth.getUser(token);\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n      const requestBody = await req.json();\n      let updateData = {\n        updated_at: new Date().toISOString(),\n        responded_by: user.id,\n        responded_at: new Date().toISOString()\n      };\n      switch(action){\n        case \"approve\":\n          updateData.status = \"approved\";\n          updateData.admin_response = requestBody.admin_response || \"Your appointment has been approved.\";\n          updateData.confirmed_date = requestBody.confirmed_date || null;\n          updateData.confirmed_time = requestBody.confirmed_time || null;\n          updateData.admin_notes = requestBody.admin_notes || null;\n          break;\n        case \"reject\":\n          updateData.status = \"rejected\";\n          updateData.admin_response = requestBody.admin_response || \"Your appointment request has been declined.\";\n          updateData.admin_notes = requestBody.admin_notes || null;\n          break;\n        case \"complete\":\n          updateData.status = \"completed\";\n          updateData.admin_response = requestBody.admin_response || \"Your appointment has been completed.\";\n          updateData.admin_notes = requestBody.admin_notes || null;\n          break;\n        case \"reschedule\":\n          updateData.status = \"approved\";\n          updateData.confirmed_date = requestBody.confirmed_date;\n          updateData.confirmed_time = requestBody.confirmed_time;\n          updateData.admin_response = requestBody.admin_response || \"Your appointment has been rescheduled.\";\n          updateData.admin_notes = requestBody.admin_notes || null;\n          break;\n        default:\n          throw new Error(`Unknown action: ${action}`);\n      }\n      const { data: updatedAppointment, error } = await supabaseClient.from(\"appointments\").update(updateData).eq(\"id\", appointmentId).select().single();\n      if (error) throw error;\n      return formatSuccessResponse({\n        appointment: updatedAppointment\n      });\n    } else if (req.method === \"DELETE\" && appointmentId) {\n      // Delete appointment (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization required\");\n      }\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const { data: { user }, error: authError } = await supabaseClient.auth.getUser(token);\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient.from(\"profiles\").select(\"role\").eq(\"id\", user.id).single();\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Admin access required\");\n      }\n      const { error } = await supabaseClient.from(\"appointments\").delete().eq(\"id\", appointmentId);\n      if (error) throw error;\n      return formatSuccessResponse({\n        message: \"Appointment deleted successfully\"\n      });\n    }\n    return formatErrorResponse(new Error(\"Method not allowed\"), 405);\n  } catch (error) {\n    console.error(\"Appointment request error:\", error);\n    return formatErrorResponse(error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/testimonials/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":12,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":19,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'Deno' is not defined.","line":20,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"@shared/cors.ts\";\nimport {\n  handleCorsOptions,\n  formatErrorResponse,\n  formatSuccessResponse,\n  sanitizeString,\n  validateEmail,\n  checkRateLimit,\n} from \"@shared/utils.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nDeno.serve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const testimonialId = url.searchParams.get(\"id\");\n\n    if (req.method === \"GET\") {\n      // Get all testimonials or a specific one\n      let query = supabaseClient.from(\"testimonials\").select(\"*\");\n\n      if (testimonialId) {\n        query = query.eq(\"id\", testimonialId).single();\n      } else {\n        // Order by creation date, newest first\n        query = query.order(\"created_at\", { ascending: false });\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonials: data });\n    } else if (req.method === \"POST\") {\n      // Create a new testimonial\n      const { name, email, content } = await req.json();\n\n      if (!name || !content) {\n        throw new Error(\"Name and testimonial content are required\");\n      }\n\n      // Rate limiting for testimonial submissions\n      const clientIP =\n        req.headers.get(\"x-forwarded-for\") ||\n        req.headers.get(\"x-real-ip\") ||\n        \"unknown\";\n      if (!checkRateLimit(`testimonial_${clientIP}`, 3, 300000)) {\n        // 3 requests per 5 minutes\n        throw new Error(\n          \"Too many testimonials. Please wait before submitting another.\",\n        );\n      }\n\n      // Validate email if provided\n      if (email && !validateEmail(email)) {\n        throw new Error(\"Invalid email format\");\n      }\n\n      const { data, error } = await supabaseClient\n        .from(\"testimonials\")\n        .insert({\n          name: sanitizeString(name, 100),\n          content: sanitizeString(content, 1000),\n          is_approved: false, // All testimonials need approval\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonial: data }, 201);\n    } else if (req.method === \"PUT\" && testimonialId) {\n      // Update a testimonial (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { is_approved } = await req.json();\n\n      const { data, error } = await supabaseClient\n        .from(\"testimonials\")\n        .update({\n          is_approved,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", testimonialId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonial: data });\n    } else if (req.method === \"DELETE\" && testimonialId) {\n      // Delete a testimonial (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { error } = await supabaseClient\n        .from(\"testimonials\")\n        .delete()\n        .eq(\"id\", testimonialId);\n\n      if (error) throw error;\n\n      return formatSuccessResponse({\n        message: \"Testimonial deleted successfully\",\n      });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), {\n      status: 405,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/webhook-handler/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":14,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":15,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":16,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":17,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":143,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":143,"endColumn":21}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express, { Request, Response } from \"express\";\nimport Stripe from \"stripe\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst app = express();\napp.use(\n  express.json({\n    verify: (req, res, buf) => {\n      (req as any).rawBody = buf;\n    },\n  }),\n);\n\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY;\nconst stripeWebhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!stripeSecretKey)\n  throw new Error(\"Missing STRIPE_SECRET_KEY environment variable\");\nif (!stripeWebhookSecret)\n  throw new Error(\"Missing STRIPE_WEBHOOK_SECRET environment variable\");\nif (!supabaseUrl) throw new Error(\"Missing SUPABASE_URL environment variable\");\nif (!supabaseServiceRoleKey)\n  throw new Error(\"Missing SUPABASE_SERVICE_ROLE_KEY environment variable\");\n\nconst stripe = new Stripe(stripeSecretKey, { apiVersion: \"2023-10-16\" });\n\napp.post(\"/webhook\", async (req: Request, res: Response) => {\n  const signature = req.headers[\"stripe-signature\"] as string | undefined;\n  if (!signature) {\n    return res.status(400).send(\"Missing Stripe signature\");\n  }\n  let event: Stripe.Event;\n  try {\n    event = stripe.webhooks.constructEvent(\n      (req as any).rawBody,\n      signature,\n      stripeWebhookSecret,\n    );\n  } catch (err) {\n    const message = err instanceof Error ? err.message : String(err);\n    console.error(\"Webhook error:\", message);\n    return res.status(400).send(`Webhook error: ${message}`);\n  }\n\n  const supabaseClient = createClient(supabaseUrl, supabaseServiceRoleKey);\n\n  if (event.type === \"checkout.session.completed\") {\n    const session = event.data.object as Stripe.Checkout.Session;\n    // Update donation status\n    const { error: updateError } = await supabaseClient\n      .from(\"donations\")\n      .update({\n        payment_status: \"completed\",\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"payment_id\", session.id);\n\n    if (updateError) {\n      console.error(\"Error updating donation:\", updateError);\n    }\n\n    // Get donation details for email\n    const { data: donation, error: donationError } = await supabaseClient\n      .from(\"donations\")\n      .select(\"*\")\n      .eq(\"payment_id\", session.id)\n      .single();\n\n    if (donationError) {\n      console.error(\"Error fetching donation:\", donationError);\n    }\n\n    // --- AUTOMATE MEMBERSHIP FEE PAID FLAG ---\n    if (\n      donation &&\n      donation.purpose === \"membership_fee\" &&\n      donation.memberId\n    ) {\n      const { error: memberError } = await supabaseClient\n        .from(\"members\")\n        .update({ membership_fee_paid: true })\n        .eq(\"id\", donation.memberId);\n      if (memberError) {\n        console.error(\"Error updating member as paid:\", memberError);\n      }\n    }\n    // --- END AUTOMATION ---\n\n    if (donation) {\n      // Get site settings\n      const { data: settings, error: settingsError } = await supabaseClient\n        .from(\"site_settings\")\n        .select(\"admin_email, enable_email_notifications\")\n        .single();\n      if (settingsError) {\n        console.error(\"Error fetching site settings:\", settingsError);\n      }\n\n      // Send confirmation email to donor\n      if (donation.donor_email && !donation.is_anonymous) {\n        await supabaseClient.functions.invoke(\"send-email\", {\n          body: {\n            type: \"donation_confirmation\",\n            data: {\n              donor_name: donation.donor_name,\n              amount: donation.amount,\n              purpose: donation.purpose,\n              date: new Date(donation.created_at).toISOString().split(\"T\")[0],\n            },\n            recipients: [donation.donor_email],\n          },\n        });\n      }\n\n      // Send notification to admin\n      if (settings?.admin_email && settings?.enable_email_notifications) {\n        await supabaseClient.functions.invoke(\"send-email\", {\n          body: {\n            type: \"admin_notification\",\n            data: {\n              donor_name: donation.donor_name || \"Anonymous\",\n              donor_email: donation.donor_email || \"Not provided\",\n              amount: donation.amount,\n              purpose: donation.purpose,\n              date: new Date(donation.created_at).toISOString().split(\"T\")[0],\n              status: \"completed\",\n            },\n            recipients: [settings.admin_email],\n          },\n        });\n      }\n    }\n  } else {\n    // For unsupported event types, just acknowledge\n    return res.status(200).json({ received: true, ignored: true });\n  }\n\n  res.status(200).json({ received: true });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Webhook handler listening on port ${PORT}`);\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/tailwind.config.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":109,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":109,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  content: [\"./index.html\", \"./src/**/*.{js,ts,jsx,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        church: {\n          burgundy: \"hsl(var(--church-burgundy) / <alpha-value>)\",\n          gold: \"hsl(var(--church-gold) / <alpha-value>)\",\n          green: \"hsl(var(--church-green) / <alpha-value>)\",\n          cream: \"hsl(var(--church-cream) / <alpha-value>)\",\n          yellow: \"hsl(43 96% 56% / <alpha-value>)\",\n          red: \"hsl(0 84% 60% / <alpha-value>)\",\n          dark: \"hsl(0 0% 15% / <alpha-value>)\",\n          light: \"hsl(0 0% 98% / <alpha-value>)\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      container: {\n        center: true,\n        padding: \"2rem\",\n        screens: {\n          sm: \"640px\",\n          md: \"768px\",\n          lg: \"1024px\",\n          xl: \"1280px\",\n          \"2xl\": \"1400px\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\", transform: \"translateY(10px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"slide-in\": {\n          from: { transform: \"translateX(-100%)\" },\n          to: { transform: \"translateX(0)\" },\n        },\n        \"slide-up\": {\n          from: { opacity: \"0\", transform: \"translateY(30px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": { boxShadow: \"0 0 20px rgba(218, 165, 32, 0.3)\" },\n          \"50%\": { boxShadow: \"0 0 40px rgba(218, 165, 32, 0.6)\" },\n        },\n        \"gradient-shift\": {\n          \"0%, 100%\": { backgroundPosition: \"0% 50%\" },\n          \"50%\": { backgroundPosition: \"100% 50%\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n        \"slide-up\": \"slide-up 0.6s ease-out\",\n        \"pulse-glow\": \"pulse-glow 3s ease-in-out infinite\",\n        \"gradient-shift\": \"gradient-shift 8s ease infinite\",\n      },\n    },\n  },\n  plugins: [require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","usedDeprecatedRules":[]},{"filePath":"/app/vite.config.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":25,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { tempo } from \"tempo-devtools/dist/vite\";\n\n// Polyfill __dirname for ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => ({\n  plugins: [react(), tempo()].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n  // Configure base path for GitHub Pages deployment\n  base: \"/\",\n  server: {\n    host: \"::\",\n    port: 8080,\n    strictPort: true,\n    allowedHosts: process.env.TEMPO === \"true\" ? true : undefined,\n  },\n  build: {\n    outDir: \"dist\",\n    sourcemap: mode === \"development\",\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: [\n            \"react\",\n            \"react-dom\",\n            \"react-router-dom\",\n            \"@supabase/supabase-js\",\n          ],\n          ui: [\n            \"@radix-ui/react-dialog\",\n            \"@radix-ui/react-dropdown-menu\",\n            \"@radix-ui/react-popover\",\n            \"@radix-ui/react-toast\",\n          ],\n        },\n      },\n    },\n    chunkSizeWarningLimit: 500,\n  },\n}));\n","usedDeprecatedRules":[]},{"filePath":"/app/vitest.config.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":19,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vitest\" />\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    globals: true,\n    environment: \"jsdom\",\n    setupFiles: \"./src/test/setup.ts\",\n    coverage: {\n      reporter: [\"text\", \"json\", \"html\"],\n      exclude: [\"node_modules/\", \"src/test/setup.ts\"],\n    },\n  },\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n});\n","usedDeprecatedRules":[]}]