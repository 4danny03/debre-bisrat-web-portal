[{"filePath":"/app/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminAuthGuard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAdminAuth'. Either include it or remove the dependency array.","line":17,"column":6,"nodeType":"ArrayExpression","endLine":17,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAdminAuth]","fix":{"range":[522,524],"text":"[checkAdminAuth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface AdminAuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminAuthGuard({ children }: AdminAuthGuardProps) {\n  const [loading, setLoading] = useState(true);\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    checkAdminAuth();\n  }, []);\n\n  const checkAdminAuth = async () => {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (!session) {\n        navigate(\"/admin/login\");\n        return;\n      }\n\n      // Check if user has admin role\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", session.user.id)\n        .single();\n\n      if (error || !profile || profile.role !== \"admin\") {\n        navigate(\"/admin/login\");\n        return;\n      }\n\n      setIsAuthorized(true);\n    } catch (error) {\n      console.error(\"Error checking admin auth:\", error);\n      navigate(\"/admin/login\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"h-6 w-6 animate-spin text-church-burgundy\" />\n          <span className=\"text-gray-600\">Verifying access...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthorized) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminConfirmDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface AdminConfirmDialogProps {\n  trigger: React.ReactNode;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm: () => Promise<void> | void;\n  destructive?: boolean;\n  loading?: boolean;\n}\n\nexport default function AdminConfirmDialog({\n  trigger,\n  title,\n  description,\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\",\n  onConfirm,\n  destructive = false,\n  loading = false,\n}: AdminConfirmDialogProps) {\n  const [open, setOpen] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true);\n      await onConfirm();\n      setOpen(false);\n    } catch (error) {\n      console.error(\"Confirmation action failed:\", error);\n      // Error handling is typically done in the parent component\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>{trigger}</AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isLoading || loading}>\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleConfirm}\n            disabled={isLoading || loading}\n            className={destructive ? \"bg-red-600 hover:bg-red-700\" : \"\"}\n          >\n            {isLoading || loading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Processing...\n              </>\n            ) : (\n              confirmText\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminDataTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":26,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1086,1089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1086,1089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Search, ChevronLeft, ChevronRight, Filter } from \"lucide-react\";\nimport { useDebounce } from \"@/hooks/useDebounce\";\n\ninterface Column<T> {\n  key: keyof T | string;\n  label: string;\n  render?: (item: T) => React.ReactNode;\n  sortable?: boolean;\n  filterable?: boolean;\n}\n\ninterface AdminDataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  title: string;\n  description?: string;\n  searchPlaceholder?: string;\n  pageSize?: number;\n  actions?: (item: T) => React.ReactNode;\n  loading?: boolean;\n  onRefresh?: () => void;\n}\n\nexport default function AdminDataTable<T extends Record<string, any>>({\n  data,\n  columns,\n  title,\n  description,\n  searchPlaceholder = \"Search...\",\n  pageSize = 10,\n  actions,\n  loading = false,\n  onRefresh,\n}: AdminDataTableProps<T>) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\");\n  const [filters, setFilters] = useState<Record<string, string>>({});\n\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n\n  const filteredAndSortedData = useMemo(() => {\n    let result = [...data];\n\n    // Apply search filter\n    if (debouncedSearchTerm) {\n      result = result.filter((item) =>\n        Object.values(item).some((value) =>\n          String(value)\n            .toLowerCase()\n            .includes(debouncedSearchTerm.toLowerCase()),\n        ),\n      );\n    }\n\n    // Apply column filters\n    Object.entries(filters).forEach(([column, filterValue]) => {\n      if (filterValue) {\n        result = result.filter((item) =>\n          String(item[column])\n            .toLowerCase()\n            .includes(filterValue.toLowerCase()),\n        );\n      }\n    });\n\n    // Apply sorting\n    if (sortColumn) {\n      result.sort((a, b) => {\n        const aValue = a[sortColumn];\n        const bValue = b[sortColumn];\n\n        if (aValue < bValue) return sortDirection === \"asc\" ? -1 : 1;\n        if (aValue > bValue) return sortDirection === \"asc\" ? 1 : -1;\n        return 0;\n      });\n    }\n\n    return result;\n  }, [data, debouncedSearchTerm, filters, sortColumn, sortDirection]);\n\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return filteredAndSortedData.slice(startIndex, startIndex + pageSize);\n  }, [filteredAndSortedData, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(filteredAndSortedData.length / pageSize);\n\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortColumn(column);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const handleFilterChange = (column: string, value: string) => {\n    setFilters((prev) => ({ ...prev, [column]: value }));\n    setCurrentPage(1); // Reset to first page when filtering\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>{title}</CardTitle>\n          {description && <CardDescription>{description}</CardDescription>}\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>{title}</CardTitle>\n            {description && <CardDescription>{description}</CardDescription>}\n          </div>\n          {onRefresh && (\n            <Button onClick={onRefresh} variant=\"outline\" size=\"sm\">\n              Refresh\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Search and Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder={searchPlaceholder}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Column Filters */}\n          {columns\n            .filter((col) => col.filterable)\n            .map((column) => (\n              <Select\n                key={String(column.key)}\n                value={filters[String(column.key)] || \"\"}\n                onValueChange={(value) =>\n                  handleFilterChange(String(column.key), value)\n                }\n              >\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder={`Filter ${column.label}`} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All {column.label}</SelectItem>\n                  {/* Add specific filter options based on column data */}\n                </SelectContent>\n              </Select>\n            ))}\n        </div>\n\n        {/* Data Table */}\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableHead\n                    key={String(column.key)}\n                    className={\n                      column.sortable ? \"cursor-pointer hover:bg-gray-50\" : \"\"\n                    }\n                    onClick={() =>\n                      column.sortable && handleSort(String(column.key))\n                    }\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>{column.label}</span>\n                      {column.sortable && sortColumn === String(column.key) && (\n                        <span className=\"text-xs\">\n                          {sortDirection === \"asc\" ? \"↑\" : \"↓\"}\n                        </span>\n                      )}\n                    </div>\n                  </TableHead>\n                ))}\n                {actions && <TableHead>Actions</TableHead>}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {paginatedData.length === 0 ? (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length + (actions ? 1 : 0)}\n                    className=\"text-center py-8\"\n                  >\n                    <div className=\"text-gray-500\">\n                      {debouncedSearchTerm ||\n                      Object.values(filters).some((f) => f)\n                        ? \"No results found matching your criteria\"\n                        : \"No data available\"}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                paginatedData.map((item, index) => (\n                  <TableRow key={index}>\n                    {columns.map((column) => (\n                      <TableCell key={String(column.key)}>\n                        {column.render\n                          ? column.render(item)\n                          : String(item[column.key] || \"\")}\n                      </TableCell>\n                    ))}\n                    {actions && <TableCell>{actions(item)}</TableCell>}\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between mt-6\">\n            <div className=\"text-sm text-gray-600\">\n              Showing {(currentPage - 1) * pageSize + 1} to{\" \"}\n              {Math.min(currentPage * pageSize, filteredAndSortedData.length)}{\" \"}\n              of {filteredAndSortedData.length} results\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage((prev) => Math.max(1, prev - 1))}\n                disabled={currentPage === 1}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n              <span className=\"text-sm\">\n                Page {currentPage} of {totalPages}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() =>\n                  setCurrentPage((prev) => Math.min(totalPages, prev + 1))\n                }\n                disabled={currentPage === totalPages}\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminFormWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminSessionManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AdminSyncStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AuditLog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[910,913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[910,913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[979,982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[979,982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1038,1041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1038,1041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setFilter' is assigned a value but never used.","line":42,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAuditData'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [filter, loadAuditData, timeRange]","fix":{"range":[1460,1479],"text":"[filter, loadAuditData, timeRange]"}}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertTriangle,\n  User,\n  Clock,\n  Database,\n  Download,\n  RefreshCw,\n  Filter,\n  Eye,\n} from \"lucide-react\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport { format, subDays, subWeeks, subMonths } from \"date-fns\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface AuditLogProps {\n  className?: string;\n}\n\nconst AuditLog: React.FC<AuditLogProps> = ({ className }) => {\n  const [actions, setActions] = useState<any[]>([]);\n  const [criticalActions, setCriticalActions] = useState<any[]>([]);\n  const [statistics, setStatistics] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState(\"all\");\n  const [timeRange, setTimeRange] = useState(\"week\");\n  const [activeTab, setActiveTab] = useState(\"recent\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAuditData();\n    const interval = setInterval(loadAuditData, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, [filter, timeRange]);\n\n  const loadAuditData = async () => {\n    try {\n      setLoading(true);\n\n      // Get filtered actions based on time range\n      const now = new Date();\n      let startDate: Date;\n\n      switch (timeRange) {\n        case \"day\":\n          startDate = subDays(now, 1);\n          break;\n        case \"week\":\n          startDate = subWeeks(now, 1);\n          break;\n        case \"month\":\n          startDate = subMonths(now, 1);\n          break;\n        default:\n          startDate = subWeeks(now, 1);\n      }\n\n      const filteredActions = dataSyncService.getActionsByDateRange(\n        startDate,\n        now,\n      );\n      const recentActions = dataSyncService.getRecentAdminActions(50);\n      const critical = dataSyncService.getCriticalActions(20);\n      const stats = dataSyncService.getActionStatistics();\n\n      setActions(filter === \"all\" ? recentActions : filteredActions);\n      setCriticalActions(critical);\n      setStatistics(stats);\n    } catch (error) {\n      console.error(\"Error loading audit data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load audit log data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportAuditLog = () => {\n    const exportData = {\n      exportedAt: new Date().toISOString(),\n      timeRange,\n      filter,\n      statistics,\n      actions: actions.slice(0, 1000), // Limit export size\n      criticalActions,\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `audit-log-${format(new Date(), \"yyyy-MM-dd-HH-mm\")}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Success\",\n      description: \"Audit log exported successfully\",\n    });\n  };\n\n  const getActionIcon = (action: string) => {\n    if (action.includes(\"delete\"))\n      return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n    if (action.includes(\"create\"))\n      return <Database className=\"h-4 w-4 text-green-600\" />;\n    if (action.includes(\"update\"))\n      return <Eye className=\"h-4 w-4 text-blue-600\" />;\n    return <Clock className=\"h-4 w-4 text-gray-600\" />;\n  };\n\n  const getActionBadge = (action: string) => {\n    if (action.includes(\"delete\"))\n      return <Badge variant=\"destructive\">Delete</Badge>;\n    if (action.includes(\"create\"))\n      return <Badge className=\"bg-green-100 text-green-800\">Create</Badge>;\n    if (action.includes(\"update\"))\n      return <Badge className=\"bg-blue-100 text-blue-800\">Update</Badge>;\n    return <Badge variant=\"secondary\">{action}</Badge>;\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-church-burgundy\">Audit Log</h2>\n          <p className=\"text-gray-600 mt-1\">\n            Track all administrative actions and system events\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-full sm:w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"day\">Last Day</SelectItem>\n              <SelectItem value=\"week\">Last Week</SelectItem>\n              <SelectItem value=\"month\">Last Month</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button\n            onClick={exportAuditLog}\n            variant=\"outline\"\n            className=\"flex-1 sm:flex-none\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button\n            onClick={loadAuditData}\n            variant=\"outline\"\n            className=\"flex-1 sm:flex-none\"\n          >\n            <RefreshCw\n              className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n            />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Overview */}\n      {statistics && (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Today</p>\n                  <p className=\"text-2xl font-bold text-church-burgundy\">\n                    {statistics.today}\n                  </p>\n                </div>\n                <Clock className=\"h-8 w-8 text-church-burgundy\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">This Week</p>\n                  <p className=\"text-2xl font-bold text-church-burgundy\">\n                    {statistics.thisWeek}\n                  </p>\n                </div>\n                <Database className=\"h-8 w-8 text-church-burgundy\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    Critical Actions\n                  </p>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {statistics.criticalCount}\n                  </p>\n                </div>\n                <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    Total Actions\n                  </p>\n                  <p className=\"text-2xl font-bold text-church-burgundy\">\n                    {statistics.total}\n                  </p>\n                </div>\n                <User className=\"h-8 w-8 text-church-burgundy\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"recent\">Recent Actions</TabsTrigger>\n          <TabsTrigger value=\"critical\">Critical Actions</TabsTrigger>\n          <TabsTrigger value=\"statistics\">Statistics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"recent\" className=\"space-y-4\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n            </div>\n          ) : actions.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <Clock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No recent actions found</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-2\">\n              {actions.map((action, index) => (\n                <Card key={index}>\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        {getActionIcon(action.action)}\n                        <div className=\"min-w-0 flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <p className=\"font-medium text-sm\">\n                              {action.action}\n                            </p>\n                            {getActionBadge(action.action)}\n                          </div>\n                          <p className=\"text-sm text-gray-600\">\n                            Table: {action.table}\n                          </p>\n                          {action.data?.preview && (\n                            <p className=\"text-xs text-gray-500 truncate\">\n                              Data: {action.data.preview}\n                            </p>\n                          )}\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-400 mt-1\">\n                            <span>User: {action.userId}</span>\n                            <span>\n                              Session: {action.sessionId?.substring(0, 8)}...\n                            </span>\n                            <span>\n                              {format(\n                                new Date(action.timestamp),\n                                \"MMM d, HH:mm:ss\",\n                              )}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"critical\" className=\"space-y-4\">\n          {criticalActions.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <AlertTriangle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No critical actions recorded</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-2\">\n              {criticalActions.map((action, index) => (\n                <Card key={index} className=\"border-red-200\">\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                        <div className=\"min-w-0 flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <p className=\"font-medium text-sm text-red-900\">\n                              {action.action}\n                            </p>\n                            <Badge variant=\"destructive\">Critical</Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600\">\n                            Table: {action.table}\n                          </p>\n                          {action.data?.preview && (\n                            <p className=\"text-xs text-gray-500 truncate\">\n                              Data: {action.data.preview}\n                            </p>\n                          )}\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-400 mt-1\">\n                            <span>User: {action.userId}</span>\n                            <span>\n                              Session: {action.sessionId?.substring(0, 8)}...\n                            </span>\n                            <span>\n                              {format(\n                                new Date(action.timestamp),\n                                \"MMM d, HH:mm:ss\",\n                              )}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"statistics\" className=\"space-y-6\">\n          {statistics && (\n            <>\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Actions by Type</CardTitle>\n                    <CardDescription>\n                      Breakdown of administrative actions\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {Object.entries(statistics.byAction).map(\n                        ([action, count]) => (\n                          <div\n                            key={action}\n                            className=\"flex items-center justify-between\"\n                          >\n                            <span className=\"text-sm capitalize\">\n                              {action.replace(\"_\", \" \")}\n                            </span>\n                            <Badge variant=\"outline\">{count as number}</Badge>\n                          </div>\n                        ),\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Actions by User</CardTitle>\n                    <CardDescription>User activity breakdown</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {Object.entries(statistics.byUser).map(\n                        ([user, count]) => (\n                          <div\n                            key={user}\n                            className=\"flex items-center justify-between\"\n                          >\n                            <span className=\"text-sm\">{user}</span>\n                            <Badge variant=\"outline\">{count as number}</Badge>\n                          </div>\n                        ),\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default AuditLog;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bug' is defined but never used.","line":2,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useToast' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { AlertTriangle, RefreshCw, Home, Bug } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n  errorId?: string;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<{ error?: Error; resetError: () => void }>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n}\n\nclass ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n      errorId: Date.now().toString(),\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"Error caught by boundary:\", error, errorInfo);\n\n    // Store error info in state\n    this.setState({ errorInfo });\n\n    // Log to DataSyncService\n    dataSyncService.logError(\n      \"React Error Boundary\",\n      error,\n      `Component: ${errorInfo.componentStack?.split(\"\\n\")[1]?.trim()}`,\n    );\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // Log to external service in production\n    if (import.meta.env.PROD) {\n      this.logToExternalService(error, errorInfo);\n    }\n  }\n\n  private logToExternalService = (error: Error, errorInfo: React.ErrorInfo) => {\n    // In production, integrate with error tracking service like Sentry\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      errorId: this.state.errorId,\n    };\n\n    // TODO: Send to error tracking service\n    console.error(\"Production error logged:\", errorData);\n\n    // For now, store in localStorage as fallback\n    try {\n      const existingErrors = JSON.parse(\n        localStorage.getItem(\"app_errors\") || \"[]\",\n      );\n      existingErrors.push(errorData);\n      // Keep only last 10 errors\n      const recentErrors = existingErrors.slice(-10);\n      localStorage.setItem(\"app_errors\", JSON.stringify(recentErrors));\n    } catch (storageError) {\n      console.error(\"Failed to store error in localStorage:\", storageError);\n    }\n  };\n\n  resetError = () => {\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n      errorId: undefined,\n    });\n\n    // Clear any cached data that might be causing issues\n    if (typeof window !== \"undefined\") {\n      try {\n        // Clear relevant localStorage items (but preserve important user data)\n        const keysToRemove: string[] = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (\n            key &&\n            (key.includes(\"admin_cache\") ||\n              key.includes(\"sync_cache\") ||\n              key.includes(\"temp_\"))\n          ) {\n            keysToRemove.push(key);\n          }\n        }\n        keysToRemove.forEach((key) => localStorage.removeItem(key));\n\n        // Clear only temporary session storage items\n        const sessionKeysToRemove: string[] = [];\n        for (let i = 0; i < sessionStorage.length; i++) {\n          const key = sessionStorage.key(i);\n          if (key && (key.includes(\"temp_\") || key.includes(\"cache_\"))) {\n            sessionKeysToRemove.push(key);\n          }\n        }\n        sessionKeysToRemove.forEach((key) => sessionStorage.removeItem(key));\n      } catch (e) {\n        console.warn(\"Failed to clear storage:\", e);\n      }\n    }\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        const FallbackComponent = this.props.fallback;\n        return (\n          <FallbackComponent\n            error={this.state.error}\n            resetError={this.resetError}\n          />\n        );\n      }\n\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n          <Card className=\"w-full max-w-2xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n                <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-red-900 text-xl\">\n                Oops! Something went wrong\n              </CardTitle>\n              <CardDescription className=\"text-base\">\n                We encountered an unexpected error. Our team has been notified.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Error Details */}\n              {this.state.error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-red-900 mb-2\">\n                    Error Details:\n                  </h4>\n                  <p className=\"text-sm text-red-800 font-mono break-all\">\n                    {this.state.error.message}\n                  </p>\n                  {this.state.errorId && (\n                    <p className=\"text-xs text-red-600 mt-2\">\n                      Error ID: {this.state.errorId}\n                    </p>\n                  )}\n                </div>\n              )}\n\n              {/* Development Info */}\n              {!import.meta.env.PROD && this.state.errorInfo && (\n                <details className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <summary className=\"font-semibold text-gray-900 cursor-pointer\">\n                    Technical Details (Development)\n                  </summary>\n                  <pre className=\"text-xs text-gray-700 mt-2 overflow-auto max-h-40\">\n                    {this.state.error?.stack}\n                  </pre>\n                  <pre className=\"text-xs text-gray-600 mt-2 overflow-auto max-h-32\">\n                    {this.state.errorInfo.componentStack}\n                  </pre>\n                </details>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button\n                  onClick={this.resetError}\n                  className=\"flex-1 bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Try Again\n                </Button>\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh Page\n                </Button>\n                <Button\n                  onClick={() => (window.location.href = \"/\")}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Go Home\n                </Button>\n              </div>\n\n              {/* Help Text */}\n              <div className=\"text-center text-sm text-gray-500\">\n                <p>\n                  If this problem persists, please contact support with Error\n                  ID:{\" \"}\n                  <code className=\"bg-gray-100 px-1 rounded\">\n                    {this.state.errorId}\n                  </code>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ErrorDiagnostics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4108,4111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4108,4111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7383,7386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7383,7386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7426,7429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7426,7429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7494,7497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7494,7497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7866,7869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7866,7869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7913,7916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7913,7916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8046,8049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8046,8049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8107,8110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8107,8110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":272,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8158,8161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8158,8161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":276,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":19}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  RefreshCw,\n  Bug,\n  Info,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface DiagnosticCheck {\n  name: string;\n  status: \"pass\" | \"fail\" | \"warning\";\n  message: string;\n  details?: string;\n}\n\nexport default function ErrorDiagnostics() {\n  const [checks, setChecks] = useState<DiagnosticCheck[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const runDiagnostics = useCallback(async () => {\n    setLoading(true);\n    const diagnostics: DiagnosticCheck[] = [];\n\n    // Check Supabase connection\n    try {\n      const { error } = await supabase.from(\"profiles\").select(\"id\").limit(1);\n      diagnostics.push({\n        name: \"Supabase Connection\",\n        status: error ? \"fail\" : \"pass\",\n        message: error\n          ? `Connection failed: ${error.message || \"Unknown error\"}`\n          : \"Connected successfully\",\n        details: error?.details || undefined,\n      });\n    } catch (error) {\n      diagnostics.push({\n        name: \"Supabase Connection\",\n        status: \"fail\",\n        message: \"Connection error\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n\n    // Check required tables\n    const requiredTables = [\n      \"profiles\",\n      \"events\",\n      \"members\",\n      \"sermons\",\n      \"gallery\",\n      \"testimonials\",\n      \"prayer_requests\",\n      \"donations\",\n    ];\n\n    for (const table of requiredTables) {\n      try {\n        const { error } = await supabase.from(table).select(\"*\").limit(1);\n        diagnostics.push({\n          name: `Table: ${table}`,\n          status: error ? \"fail\" : \"pass\",\n          message: error\n            ? `Table access failed: ${error.message || \"Unknown error\"}`\n            : \"Table accessible\",\n          details: error?.details || undefined,\n        });\n      } catch (error) {\n        diagnostics.push({\n          name: `Table: ${table}`,\n          status: \"fail\",\n          message: \"Table check failed\",\n          details: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    }\n\n    // Check storage bucket\n    try {\n      const { error } = await supabase.storage\n        .from(\"images\")\n        .list(\"\", { limit: 1 });\n      diagnostics.push({\n        name: \"Storage Bucket\",\n        status: error ? \"fail\" : \"pass\",\n        message: error\n          ? `Storage error: ${error.message || \"Unknown error\"}`\n          : \"Storage accessible\",\n        details: error?.details || undefined,\n      });\n    } catch (error) {\n      diagnostics.push({\n        name: \"Storage Bucket\",\n        status: \"fail\",\n        message: \"Storage check failed\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n\n    // Check environment variables\n    const requiredEnvVars = [\"VITE_SUPABASE_URL\", \"VITE_SUPABASE_ANON_KEY\"];\n\n    requiredEnvVars.forEach((envVar) => {\n      try {\n        const value = import.meta.env?.[envVar];\n        diagnostics.push({\n          name: `Env Var: ${envVar}`,\n          status: value ? \"pass\" : \"fail\",\n          message: value\n            ? \"Environment variable set\"\n            : \"Environment variable missing\",\n          details: value\n            ? `Value: ${String(value).substring(0, 20)}...`\n            : \"Variable not found in import.meta.env\",\n        });\n      } catch (error) {\n        diagnostics.push({\n          name: `Env Var: ${envVar}`,\n          status: \"fail\",\n          message: \"Error checking environment variable\",\n          details: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    });\n\n    // Check browser console errors\n    if (typeof window !== \"undefined\") {\n      const consoleErrors = (window as any).__consoleErrors || [];\n      if (Array.isArray(consoleErrors) && consoleErrors.length > 0) {\n        diagnostics.push({\n          name: \"Console Errors\",\n          status: \"warning\",\n          message: `${consoleErrors.length} console errors detected`,\n          details: consoleErrors.slice(0, 3).filter(Boolean).join(\"; \"),\n        });\n      } else {\n        diagnostics.push({\n          name: \"Console Errors\",\n          status: \"pass\",\n          message: \"No console errors detected\",\n        });\n      }\n    } else {\n      diagnostics.push({\n        name: \"Console Errors\",\n        status: \"warning\",\n        message: \"Console error checking not available (SSR environment)\",\n      });\n    }\n\n    // Check local storage\n    if (typeof window !== \"undefined\" && typeof localStorage !== \"undefined\") {\n      try {\n        localStorage.setItem(\"tempo_test\", \"test\");\n        localStorage.removeItem(\"tempo_test\");\n        diagnostics.push({\n          name: \"Local Storage\",\n          status: \"pass\",\n          message: \"Local storage accessible\",\n        });\n      } catch (error) {\n        diagnostics.push({\n          name: \"Local Storage\",\n          status: \"fail\",\n          message: \"Local storage not accessible\",\n          details: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    } else {\n      diagnostics.push({\n        name: \"Local Storage\",\n        status: \"warning\",\n        message: \"Local storage not available (SSR environment)\",\n      });\n    }\n\n    setChecks(diagnostics);\n    setLoading(false);\n\n    const failedChecks = diagnostics.filter((c) => c.status === \"fail\").length;\n    const warningChecks = diagnostics.filter(\n      (c) => c.status === \"warning\",\n    ).length;\n\n    if (failedChecks > 0) {\n      toast({\n        title: \"Diagnostics Complete\",\n        description: `Found ${failedChecks} critical issues and ${warningChecks} warnings`,\n        variant: \"destructive\",\n      });\n    } else if (warningChecks > 0) {\n      toast({\n        title: \"Diagnostics Complete\",\n        description: `Found ${warningChecks} warnings`,\n      });\n    } else {\n      toast({\n        title: \"Diagnostics Complete\",\n        description: \"All checks passed successfully\",\n      });\n    }\n  }, [toast]);\n\n  const getStatusIcon = useCallback((status: DiagnosticCheck[\"status\"]) => {\n    switch (status) {\n      case \"pass\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      case \"fail\":\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <XCircle className=\"h-4 w-4 text-gray-600\" />;\n    }\n  }, []);\n\n  const getStatusBadge = useCallback((status: DiagnosticCheck[\"status\"]) => {\n    const variants = {\n      pass: \"default\" as const,\n      warning: \"secondary\" as const,\n      fail: \"destructive\" as const,\n    };\n\n    return (\n      <Badge variant={variants[status] || \"secondary\"} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  }, []);\n\n  useEffect(() => {\n    // Capture console errors safely\n    if (typeof window !== \"undefined\") {\n      const originalError = console.error;\n\n      // Initialize console errors array safely\n      if (!(window as any).__consoleErrors) {\n        (window as any).__consoleErrors = [];\n      }\n\n      console.error = (...args: any[]) => {\n        try {\n          const errorMessage = args\n            .filter(Boolean)\n            .map((arg) => {\n              try {\n                return typeof arg === \"string\" ? arg : JSON.stringify(arg);\n              } catch {\n                return String(arg);\n              }\n            })\n            .join(\" \");\n\n          if (errorMessage && (window as any).__consoleErrors) {\n            (window as any).__consoleErrors.push(errorMessage);\n            // Keep only last 50 errors to prevent memory issues\n            if ((window as any).__consoleErrors.length > 50) {\n              (window as any).__consoleErrors = (\n                window as any\n              ).__consoleErrors.slice(-50);\n            }\n          }\n        } catch (e) {\n          // Ignore errors in error handling to prevent infinite loops\n        }\n        originalError.apply(console, args);\n      };\n\n      return () => {\n        console.error = originalError;\n      };\n    }\n  }, []);\n\n  return (\n    <Card className=\"bg-white\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Bug className=\"h-5 w-5 mr-2\" />\n          System Diagnostics\n        </CardTitle>\n        <CardDescription>\n          Run comprehensive checks to identify potential issues\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Button onClick={runDiagnostics} disabled={loading} className=\"w-full\">\n          {loading ? (\n            <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n          ) : (\n            <Bug className=\"h-4 w-4 mr-2\" />\n          )}\n          Run Diagnostics\n        </Button>\n\n        {checks.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-medium\">Diagnostic Results</h3>\n              <div className=\"flex space-x-2\">\n                <Badge className=\"bg-green-100 text-green-800\">\n                  {checks.filter((c) => c.status === \"pass\").length} Pass\n                </Badge>\n                <Badge className=\"bg-yellow-100 text-yellow-800\">\n                  {checks.filter((c) => c.status === \"warning\").length} Warning\n                </Badge>\n                <Badge className=\"bg-red-100 text-red-800\">\n                  {checks.filter((c) => c.status === \"fail\").length} Fail\n                </Badge>\n              </div>\n            </div>\n\n            <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n              {checks.map((check, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 rounded-lg bg-gray-50\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    {getStatusIcon(check.status)}\n                    <div>\n                      <p className=\"font-medium text-sm\">{check.name}</p>\n                      <p className=\"text-xs text-gray-600\">{check.message}</p>\n                      {check.details && (\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {check.details}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  {getStatusBadge(check.status)}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"bg-blue-50 border border-blue-200 rounded-md p-3\">\n          <div className=\"flex items-center\">\n            <Info className=\"h-4 w-4 text-blue-600 mr-2\" />\n            <p className=\"text-sm text-blue-800\">\n              <strong>Tip:</strong> If you're experiencing errors, run\n              diagnostics to identify the root cause. Check the browser console\n              for additional error details.\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ImageSlider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FC' is defined but never used.","line":1,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, type FC } from \"react\";\n\ninterface SlideProps {\n  image: string;\n  title: string;\n  content: string;\n}\n\ninterface ImageSliderProps {\n  slides: SlideProps[];\n}\n\nconst ImageSlider: React.FC<ImageSliderProps> = ({ slides }) => {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [imageLoaded, setImageLoaded] = useState<{ [key: number]: boolean }>(\n    {},\n  );\n\n  useEffect(() => {\n    if (slides.length === 0) return;\n\n    // Auto advance slides every 7 seconds for better readability\n    const interval = setInterval(() => {\n      setCurrentSlide((prev) => (prev === slides.length - 1 ? 0 : prev + 1));\n    }, 7000);\n\n    return () => clearInterval(interval);\n  }, [slides.length]);\n\n  // Preload next image for better performance\n  useEffect(() => {\n    if (slides.length > 0) {\n      const nextIndex = (currentSlide + 1) % slides.length;\n      const img = new Image();\n      img.src = slides[nextIndex].image;\n    }\n  }, [currentSlide, slides]);\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  const nextSlide = () => {\n    setCurrentSlide((current) =>\n      current === slides.length - 1 ? 0 : current + 1,\n    );\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((current) =>\n      current === 0 ? slides.length - 1 : current - 1,\n    );\n  };\n\n  const handleImageLoad = (index: number) => {\n    setImageLoaded((prev) => ({ ...prev, [index]: true }));\n    if (index === 0) {\n      setIsLoading(false);\n      setError(null);\n    }\n  };\n\n  const handleImageError = (index: number) => {\n    console.error(`Failed to load image at index ${index}`);\n    setImageLoaded((prev) => ({ ...prev, [index]: false }));\n    if (index === 0) {\n      setIsLoading(false);\n      setError(\"Failed to load image\");\n    }\n  };\n\n  if (!slides || slides.length === 0) {\n    return (\n      <div className=\"w-full h-[400px] md:h-[500px] lg:h-[600px] bg-gradient-to-br from-church-burgundy/20 to-church-gold/20 flex items-center justify-center\">\n        <p className=\"text-church-burgundy text-lg\">No slides available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative w-full h-[450px] md:h-[550px] lg:h-[650px] overflow-hidden rounded-2xl shadow-2xl border border-church-gold/20\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-church-burgundy/5 via-transparent to-church-gold/5 pointer-events-none z-10\"></div>\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-all duration-1200 ease-in-out ${\n            index === currentSlide\n              ? \"opacity-100 scale-100\"\n              : \"opacity-0 scale-110 pointer-events-none\"\n          }`}\n        >\n          {!imageLoaded[index] && index === currentSlide && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-br from-church-burgundy/10 to-church-gold/10\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-church-gold border-t-transparent\"></div>\n            </div>\n          )}\n          <img\n            src={slide.image}\n            alt={slide.title}\n            className={`w-full h-full object-cover transition-all duration-1000 ${\n              imageLoaded[index] ? \"opacity-100\" : \"opacity-0\"\n            }`}\n            onLoad={() => handleImageLoad(index)}\n            onError={() => handleImageError(index)}\n            loading={index === 0 ? \"eager\" : \"lazy\"}\n          />\n          {/* Reduced gradient overlay for better image visibility */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-black/10 to-black/20\"></div>\n          <div className=\"absolute inset-0 bg-gradient-to-br from-church-burgundy/20 via-transparent to-church-gold/15\"></div>\n\n          {/* Content overlay with reduced opacity for better background visibility */}\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white p-6 md:p-8 z-20\">\n            <div className=\"text-center max-w-5xl mx-auto backdrop-blur-md bg-gradient-to-br from-church-burgundy/35 via-church-burgundy/25 to-church-burgundy/40 rounded-2xl p-8 md:p-10 border border-church-gold/40 shadow-2xl animate-slide-up\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-church-gold/8 via-transparent to-church-gold/4 rounded-2xl\"></div>\n              <div className=\"relative z-10\">\n                <h2\n                  className=\"text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold mb-4 md:mb-6 text-church-gold font-serif\"\n                  style={{\n                    textShadow:\n                      \"4px 4px 8px rgba(0,0,0,0.95), 2px 2px 4px rgba(0,0,0,0.8)\",\n                  }}\n                >\n                  {slide.title}\n                </h2>\n                <div className=\"w-24 h-1 bg-gradient-to-r from-transparent via-church-gold to-transparent mx-auto mb-4 md:mb-6\"></div>\n                <p\n                  className=\"text-base md:text-lg lg:text-xl xl:text-2xl text-center leading-relaxed font-medium text-white/98\"\n                  style={{\n                    textShadow:\n                      \"3px 3px 6px rgba(0,0,0,0.9), 1px 1px 3px rgba(0,0,0,0.7)\",\n                  }}\n                >\n                  {slide.content}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n\n      {/* Enhanced navigation arrows */}\n      <button\n        onClick={prevSlide}\n        className=\"absolute left-4 md:left-6 top-1/2 transform -translate-y-1/2 bg-church-burgundy/80 hover:bg-church-burgundy/90 text-church-gold p-3 md:p-4 rounded-full transition-all duration-300 hover:scale-110 backdrop-blur-md border border-church-gold/30 shadow-lg z-30\"\n        aria-label=\"Previous image\"\n      >\n        <svg\n          className=\"w-5 h-5 md:w-6 md:h-6\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          strokeWidth={2.5}\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            d=\"M15 19l-7-7 7-7\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={nextSlide}\n        className=\"absolute right-4 md:right-6 top-1/2 transform -translate-y-1/2 bg-church-burgundy/80 hover:bg-church-burgundy/90 text-church-gold p-3 md:p-4 rounded-full transition-all duration-300 hover:scale-110 backdrop-blur-md border border-church-gold/30 shadow-lg z-30\"\n        aria-label=\"Next image\"\n      >\n        <svg\n          className=\"w-5 h-5 md:w-6 md:h-6\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          strokeWidth={2.5}\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 5l7 7-7 7\" />\n        </svg>\n      </button>\n\n      {/* Enhanced dots indicator */}\n      <div className=\"absolute bottom-6 md:bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 z-30\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`relative transition-all duration-400 ${\n              index === currentSlide\n                ? \"w-4 h-4 md:w-5 md:h-5\"\n                : \"w-3 h-3 md:w-4 md:h-4 hover:scale-110\"\n            }`}\n            aria-label={`Go to slide ${index + 1}`}\n          >\n            <div\n              className={`w-full h-full rounded-full transition-all duration-400 ${\n                index === currentSlide\n                  ? \"bg-church-gold shadow-lg animate-pulse-glow\"\n                  : \"bg-white/60 hover:bg-white/80 backdrop-blur-sm\"\n              }`}\n            />\n            {index === currentSlide && (\n              <div className=\"absolute inset-0 rounded-full border-2 border-church-gold/50 animate-ping\"></div>\n            )}\n          </button>\n        ))}\n      </div>\n\n      {/* Enhanced progress bar */}\n      <div className=\"absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-black/30 via-black/20 to-black/30\">\n        <div\n          className=\"h-full bg-gradient-to-r from-church-gold via-church-gold/80 to-church-gold transition-all duration-500 ease-out shadow-sm\"\n          style={{ width: `${((currentSlide + 1) / slides.length) * 100}%` }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageSlider;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ImageWithFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/LoadingState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[701,752],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/contexts/DataContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":23,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":23,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface GitStatus {\n  branch: string;\n  hasChanges: boolean;\n  changedFiles: string[];\n}\n\ninterface DataContextType {\n  refreshAllData: () => Promise<void>;\n  isRefreshing: boolean;\n  lastRefresh: Date | null;\n  connectionHealth: boolean;\n  forceSync: () => Promise<void>;\n  syncStatus: Record<string, string>;\n  gitStatus: GitStatus;\n  autoCommitAndPush: (message: string) => Promise<boolean>;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\nexport const useDataContext = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error(\"useDataContext must be used within a DataProvider\");\n  }\n  return context;\n};\n\ninterface DataProviderProps {\n  children: ReactNode;\n}\n\nexport const DataProvider: React.FC<DataProviderProps> = ({ children }) => {\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  const [connectionHealth, setConnectionHealth] = useState(true);\n  const [syncStatus, setSyncStatus] = useState<Record<string, string>>({});\n  const [gitStatus, setGitStatus] = useState<GitStatus>({\n    branch: \"main\",\n    hasChanges: false,\n    changedFiles: [],\n  });\n\n  const refreshAllData = async () => {\n    if (isRefreshing) {\n      console.log(\"Refresh already in progress, skipping...\");\n      return;\n    }\n\n    setIsRefreshing(true);\n    try {\n      console.log(\"Starting data refresh...\");\n\n      // Test database connection first\n      const { error: connectionError } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n\n      if (connectionError) {\n        throw new Error(\n          `Database connection failed: ${connectionError.message}`,\n        );\n      }\n\n      setConnectionHealth(true);\n      setLastRefresh(new Date());\n\n      // Update sync status for common tables\n      setSyncStatus({\n        events: \"SUBSCRIBED\",\n        members: \"SUBSCRIBED\",\n        sermons: \"SUBSCRIBED\",\n        gallery: \"SUBSCRIBED\",\n        testimonials: \"SUBSCRIBED\",\n        prayer_requests: \"SUBSCRIBED\",\n        donations: \"SUBSCRIBED\",\n      });\n\n      console.log(\"Data refresh completed successfully\");\n    } catch (error) {\n      console.error(\"Error refreshing data:\", error);\n      setConnectionHealth(false);\n\n      // Set error status for sync\n      setSyncStatus({\n        events: \"CHANNEL_ERROR\",\n        members: \"CHANNEL_ERROR\",\n        sermons: \"CHANNEL_ERROR\",\n        gallery: \"CHANNEL_ERROR\",\n        testimonials: \"CHANNEL_ERROR\",\n        prayer_requests: \"CHANNEL_ERROR\",\n        donations: \"CHANNEL_ERROR\",\n      });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const forceSync = async () => {\n    console.log(\"Force syncing data...\");\n    // Debounce force sync to prevent infinite loops\n    if (isRefreshing) {\n      console.log(\"Sync already in progress, skipping...\");\n      return;\n    }\n    await refreshAllData();\n  };\n\n  const autoCommitAndPush = async (message: string): Promise<boolean> => {\n    try {\n      console.log(\"Auto commit and push:\", message);\n      // Simulate git operations\n      setGitStatus((prev) => ({\n        ...prev,\n        hasChanges: false,\n        changedFiles: [],\n      }));\n      return true;\n    } catch (error) {\n      console.error(\"Failed to commit and push:\", error);\n      return false;\n    }\n  };\n\n  return (\n    <DataContext.Provider\n      value={{\n        refreshAllData,\n        isRefreshing,\n        lastRefresh,\n        connectionHealth,\n        forceSync,\n        syncStatus,\n        gitStatus,\n        autoCommitAndPush,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/contexts/LanguageContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":239,"column":28,"nodeType":"Identifier","messageId":"namedExport","endLine":239,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from \"react\";\n\ntype Language = \"en\" | \"am\";\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\n// Create the language context\nconst LanguageContext = createContext<LanguageContextType | undefined>(\n  undefined,\n);\n\n// Translations object for all strings in both languages\nconst translations: Record<string, Record<Language, string>> = {\n  // Navigation\n  home: { en: \"Home\", am: \"መነሻ\" },\n  about: { en: \"About Us\", am: \"ስለ እኛ\" },\n  events: { en: \"Events\", am: \"ዝግጅቶች\" },\n  services: { en: \"Services\", am: \"አገልግሎቶች\" },\n  sermons: { en: \"Sermons\", am: \"ስብከቶች\" },\n  gallery: { en: \"Gallery\", am: \"ፎቶዎች\" },\n  donation: { en: \"Donation\", am: \"ልገሳ\" },\n  membership: { en: \"Membership\", am: \"አባልነት\" },\n  contact: { en: \"Contact Us\", am: \"ያግኙን\" },\n\n  // Home page\n  welcome: {\n    en: \"Welcome to the Debre Bisrat Dagimawi Kulibi St.Gabriel EOTC, Silver Spring, Maryland\",\n    am: \"እንኳን ወደ ደብረ ብሥራት ዳግማዊ ቁልቢ ቅዱስ ገብርኤል የኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያን ድረ ገጽ በሰላም መጡ።\",\n  },\n  bible_verse: {\n    en: \"Give, and it will be given to you. A good measure, pressed down, shaken together and running over, will be poured into your lap. For with the measure you use, it will be measured to you.\",\n    am: \"ስጡ፤ ለእናንተም ይሰጣችኋል። መልካም መጠን የተደቆሰና የተነቀነቀ የተትረፈረፈም ይሰጣችኋል፤ በምትሰፍሩበት መስፈሪያ ለእናንተ ይሰፈርላችኋልና።\",\n  },\n  bible_reference: { en: \"Luke 6:38, NIV\", am: \"ሉቃስ 6:38\" },\n\n  // Common form fields\n  full_name: { en: \"Full Name\", am: \"ሙሉ ስም\" },\n  email: { en: \"Email Address\", am: \"የኢሜል አድራሻ\" },\n  phone: { en: \"Phone Number\", am: \"ስልክ ቁጥር\" },\n  address: { en: \"Address\", am: \"አድራሻ\" },\n  preferred_language: { en: \"Preferred Language\", am: \"የተመረጠ ቋንቋ\" },\n  english: { en: \"English\", am: \"እንግሊዝኛ\" },\n  amharic: { en: \"Amharic\", am: \"አማርኛ\" },\n  submit: { en: \"Submit\", am: \"አስገባ\" },\n  processing: { en: \"Processing...\", am: \"በመስራት ላይ...\" },\n\n  // Donation page\n  donation_title: { en: \"Support Our Church\", am: \"ቤተክርስቲያናችንን ይደግፉ\" },\n  donation_subtitle: {\n    en: \"Make a Difference in Our Community\",\n    am: \"በማህበረሰባችን ውስጥ ለውጥ ያድርጉ\",\n  },\n  donation_description: {\n    en: \"Your generous contributions help us maintain our church, support community programs, and continue our mission.\",\n    am: \"የእርስዎ ገንዘብ ቤተክርስቲያናችንን ለመጠበቅ፣ የማህበረሰብ ፕሮግራሞችን ለመደገፍ እና ተልዕኮአችንን ለመቀጠል ይረዳናል።\",\n  },\n  donation_amount: { en: \"Donation Amount\", am: \"የልገሳ መጠን\" },\n  donation_type: { en: \"Donation Type\", am: \"የልገሳ አይነት\" },\n  one_time: { en: \"One-time\", am: \"አንድ ጊዜ\" },\n  monthly: { en: \"Monthly\", am: \"ወርሃዊ\" },\n  quarterly: { en: \"Quarterly\", am: \"በየሶስት ወሩ\" },\n  annually: { en: \"Annually\", am: \"አመታዊ\" },\n  donate_now: { en: \"Donate Now\", am: \"አሁን ይለግሱ\" },\n  donation_purpose: { en: \"Purpose of Donation\", am: \"የልገሳ ዓላማ\" },\n  general_fund: { en: \"General Fund\", am: \"አጠቃላይ\" },\n  building_fund: { en: \"Building Fund\", am: \"የህንፃ\" },\n  youth_programs: { en: \"Youth Programs\", am: \"የወጣቶች ፕሮግራም\" },\n  charity: { en: \"Charity\", am: \"ለጋስነት\" },\n  suggested_amounts: { en: \"Suggested Amounts\", am: \"የሚመከሩ መጠኖች\" },\n  custom_amount: { en: \"Custom Amount\", am: \"የተለየ መጠን\" },\n  contact_preference: { en: \"Contact Preference\", am: \"የመገናኛ ምርጫ\" },\n  email_contact: { en: \"Email\", am: \"ኢሜል\" },\n  phone_contact: { en: \"Phone\", am: \"ስልክ\" },\n  anonymous_donation: {\n    en: \"Make this donation anonymous\",\n    am: \"ይህንን ልገሳ ስም ሳይገለጽ ማድረግ\",\n  },\n  anonymous_note: {\n    en: \"Your contact information will not be shared publicly\",\n    am: \"የእርስዎ የመገናኛ መረጃ በይፋ አይጋራም\",\n  },\n  tax_deductible: { en: \"Tax Deductible\", am: \"ከግብር የሚቀነስ\" },\n  tax_deductible_note: {\n    en: \"This donation is tax-deductible. You will receive a receipt for your records.\",\n    am: \"ይህ ልገሳ ከግብር የሚቀነስ ነው። ለመዝገብዎ ደረሰኝ ይደርስዎታል።\",\n  },\n  secure_payment: { en: \"Secure Payment\", am: \"ደህንነቱ የተጠበቀ ክፍያ\" },\n  secure_payment_note: {\n    en: \"Your payment information is encrypted and secure\",\n    am: \"የእርስዎ የክፍያ መረጃ የተመሰጠረ እና ደህንነቱ የተጠበቀ ነው\",\n  },\n  donation_impact: { en: \"Your Impact\", am: \"የእርስዎ ተጽዕኖ\" },\n  general_fund_impact: {\n    en: \"Supports daily operations, utilities, and maintenance of our church facilities\",\n    am: \"የቤተክርስቲያናችንን የዕለት ተዕለት ሥራዎች፣ መገልገያዎች እና ጥገና ይደግፋል\",\n  },\n  building_fund_impact: {\n    en: \"Helps with construction, renovation, and expansion of church buildings\",\n    am: \"የቤተክርስቲያን ህንፃዎች ግንባታ፣ ማሻሻያ እና ማስፋፊያ ይረዳል\",\n  },\n  youth_programs_impact: {\n    en: \"Funds Sunday school, youth activities, and educational programs\",\n    am: \"የሰንበት ትምህርት ቤት፣ የወጣቶች እንቅስቃሴዎች እና የትምህርት ፕሮግራሞችን ይደግፋል\",\n  },\n  charity_impact: {\n    en: \"Supports community outreach, food programs, and assistance to those in need\",\n    am: \"የማህበረሰብ ድጋፍ፣ የምግብ ፕሮግራሞች እና ለተቸገሩ ሰዎች እርዳታ ይሰጣል\",\n  },\n  donor_recognition: { en: \"Donor Recognition\", am: \"የለጋሽ እውቅና\" },\n  include_in_bulletin: {\n    en: \"Include my name in the church bulletin (unless anonymous)\",\n    am: \"ስሜን በቤተክርስቲያን መግለጫ ውስጥ ያካትቱ (ስም ሳይገለጽ ካልሆነ በስተቀር)\",\n  },\n  memorial_dedication: {\n    en: \"Memorial or Dedication (Optional)\",\n    am: \"መታሰቢያ ወይም መሰጠት (አማራጭ)\",\n  },\n  memorial_placeholder: {\n    en: \"In memory of... or In honor of...\",\n    am: \"በ... ትዝታ ወይም በ... ክብር\",\n  },\n  proceed_to_payment: {\n    en: \"Proceed to Secure Payment\",\n    am: \"ወደ ደህንነቱ የተጠበቀ ክፍያ ይሂዱ\",\n  },\n\n  // Services page\n  services_title: { en: \"Church Services\", am: \"የቤተክርስቲያን አገልግሎቶች\" },\n  services_description: {\n    en: \"Learn about the various religious services offered at our church throughout the year.\",\n    am: \"በዓመቱ ውስጥ ቤተክርስቲያናችን ስለሚሰጣቸው የተለያዩ ሃይማኖታዊ አገልግሎቶች ይወቁ።\",\n  },\n  regular_services: { en: \"Regular Services\", am: \"መደበኛ አገልግሎቶች\" },\n  special_services: {\n    en: \"Special Services & Holidays\",\n    am: \"ልዩ አገልግሎቶች እና በዓላት\",\n  },\n  children_services: { en: \"Children's Services\", am: \"የልጆች አገልግሎቶች\" },\n\n  // Gallery page\n  gallery_title: { en: \"Photo Gallery\", am: \"ፎቶ ማዕከል\" },\n  gallery_description: {\n    en: \"Explore photos from our church events, celebrations, and community gatherings.\",\n    am: \"ከቤተክርስቲያን ዝግጅቶቻችን፣ ከበዓላት እና ከማህበረሰብ ስብሰባዎች ፎቶዎችን ይመልከቱ።\",\n  },\n  church_building: { en: \"Church Building\", am: \"የቤተክርስቲያን ህንፃ\" },\n  congregation: { en: \"Congregation\", am: \"ምዕመናን\" },\n  celebrations: { en: \"Celebrations\", am: \"በዓላት\" },\n  community_events: { en: \"Community Events\", am: \"የማህበረሰብ ዝግጅቶች\" },\n\n  // Contact page\n  contact_title: { en: \"Contact Us\", am: \"ያግኙን\" },\n  contact_description: {\n    en: \"Have questions? Reach out to us through any of the methods below or use the contact form.\",\n    am: \"ጥያቄዎች አሉዎት? ከታች ባሉት ማንኛውም መንገዶች ወይም የመገናኛ ቅጹን በመጠቀም ያግኙን።\",\n  },\n  message: { en: \"Message\", am: \"መልዕክት\" },\n  send_message: { en: \"Send Message\", am: \"መልዕክት ላክ\" },\n  language_switch: { en: \"አማርኛ\", am: \"English\" },\n\n  // Footer\n  copyright: {\n    en: \"© 2025 Debre Bisrat Dagimawi Kulibi St.Gabriel EOTC. All rights reserved.\",\n    am: \"© 2025 ደብረ ብሥራት ዳግማዊ ቁልቢ ቅዱስ ገብርኤል የኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያን። መብቱ በህግ የተጠበቀ ነው።\",\n  },\n\n  // Membership Registration\n  membership_registration_title: {\n    en: \"Membership Registration\",\n    am: \"የአባልነት ምዝገባ\",\n  },\n  membership_registration_description: {\n    en: \"Join our church community by registering as a member. Annual membership fee is $100.\",\n    am: \"በአባልነት በመመዝገብ የቤተክርስቲያን ማህበረሰባችንን ይቀላቀሉ። የዓመት አባልነት ክፍያ $100 ነው።\",\n  },\n  membership_type: {\n    en: \"Membership Type\",\n    am: \"የአባልነት ዓይነት\",\n  },\n  select_membership_type: {\n    en: \"Select Membership Type\",\n    am: \"የአባልነት ዓይነት ይምረጡ\",\n  },\n  individual_membership: {\n    en: \"Individual Membership\",\n    am: \"የግል አባልነት\",\n  },\n  family_membership: {\n    en: \"Family Membership\",\n    am: \"የቤተሰብ አባልነት\",\n  },\n  membership_fee_notice: {\n    en: \"Annual Membership Fee: $100\",\n    am: \"የዓመት አባልነት ክፍያ፡ $100\",\n  },\n  membership_fee_description: {\n    en: \"This fee helps support our church's activities and maintenance.\",\n    am: \"ይህ ክፍያ የቤተክርስቲያናችንን እንቅስቃሴዎች እና ጥገና ይደግፋል።\",\n  },\n  register_and_pay: {\n    en: \"Register & Pay $100\",\n    am: \"ይመዝገቡ እና $100 ይክፈሉ\",\n  },\n};\n\n// Language Provider component\nfunction LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>(\"en\");\n\n  // Translation function\n  const t = (key: string): string => {\n    if (!translations[key]) {\n      console.warn(`Translation key not found: ${key}`);\n      return key;\n    }\n    return translations[key][language];\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\n// Custom hook for using the language context\nfunction useLanguage(): LanguageContextType {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n}\n\nexport { LanguageProvider, useLanguage };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'actionTypes' is assigned a value but only used as a type.","line":18,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useAdminAuth.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkAuth' and 'checkUserRole'. Either include them or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [checkAuth, checkUserRole, navigate]","fix":{"range":[925,935],"text":"[checkAuth, checkUserRole, navigate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { User } from \"@supabase/supabase-js\";\n\ninterface AdminUser extends User {\n  role?: string;\n}\n\nexport const useAdminAuth = () => {\n  const [user, setUser] = useState<AdminUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    checkAuth();\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === \"SIGNED_OUT\" || !session) {\n        setUser(null);\n        setIsAdmin(false);\n        navigate(\"/admin/login\");\n      } else if (event === \"SIGNED_IN\" && session) {\n        await checkUserRole(session.user);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [navigate]);\n\n  const checkAuth = async () => {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (session?.user) {\n        await checkUserRole(session.user);\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Error checking auth:\", error);\n      setLoading(false);\n    }\n  };\n\n  const checkUserRole = async (user: User) => {\n    try {\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (error) {\n        console.error(\"Error fetching profile:\", error);\n        // If profile doesn't exist, check if this is the first user\n        const { count } = await supabase\n          .from(\"profiles\")\n          .select(\"*\", { count: \"exact\", head: true });\n\n        if (count === 0) {\n          // First user becomes admin\n          const { error: createError } = await supabase\n            .from(\"profiles\")\n            .insert({\n              id: user.id,\n              email: user.email,\n              role: \"admin\",\n            });\n\n          if (!createError) {\n            setUser({ ...user, role: \"admin\" });\n            setIsAdmin(true);\n          }\n        }\n      } else if (profile?.role === \"admin\") {\n        setUser({ ...user, role: profile.role });\n        setIsAdmin(true);\n      } else {\n        setUser(user);\n        setIsAdmin(false);\n        navigate(\"/admin/login\");\n      }\n    } catch (error) {\n      console.error(\"Error checking user role:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  return {\n    user,\n    loading,\n    isAdmin,\n    signOut,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useDataRefresh.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[574,577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[574,577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'refreshFunction'. Either include it or remove the dependency array. If 'refreshFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [tableName, intervalMs, refreshFunction]","fix":{"range":[2001,2041],"text":"[tableName, intervalMs, refreshFunction]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":64,"column":30,"nodeType":"SpreadElement","endLine":64,"endColumn":45},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'refreshFunction'. Either include it or remove the dependency array. If 'refreshFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [refreshFunction, tableName]","fix":{"range":[2587,2598],"text":"[refreshFunction, tableName]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useCallback } from \"react\";\n\n/**\n * Simplified data refresh hook without complex event listeners\n * @param refreshFunction - Function to call for refreshing data\n * @param intervalMs - Refresh interval in milliseconds (default: 5 minutes)\n * @param dependencies - Dependencies array to restart the interval\n * @param tableName - Optional table name for logging\n */\nexport const useDataRefresh = (\n  refreshFunction: () => void | Promise<void>,\n  intervalMs: number = 30 * 60 * 1000, // Increased to 30 minutes to reduce frequency\n  dependencies: any[] = [],\n  tableName?: string,\n) => {\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const isActiveRef = useRef(true);\n  const lastRefreshRef = useRef<Date | null>(null);\n  const isRefreshingRef = useRef(false);\n\n  useEffect(() => {\n    // Clear existing interval\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Simple refresh function with debouncing\n    const safeRefreshFunction = async () => {\n      if (!isActiveRef.current || isRefreshingRef.current) {\n        console.log(\n          `Skipping refresh for ${tableName || \"component\"} - already refreshing or inactive`,\n        );\n        return;\n      }\n\n      isRefreshingRef.current = true;\n      try {\n        await refreshFunction();\n        lastRefreshRef.current = new Date();\n        console.log(`Data refresh successful for ${tableName || \"component\"}`);\n      } catch (error) {\n        console.error(\n          `Error during data refresh for ${tableName || \"component\"}:`,\n          error,\n        );\n      } finally {\n        isRefreshingRef.current = false;\n      }\n    };\n\n    // Set up simple interval - no event listeners\n    intervalRef.current = setInterval(() => {\n      if (isActiveRef.current) {\n        safeRefreshFunction();\n      }\n    }, intervalMs);\n\n    // Cleanup function\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [tableName, intervalMs, ...dependencies]);\n\n  // Manual refresh function\n  const manualRefresh = useCallback(async () => {\n    if (!isRefreshingRef.current) {\n      console.log(`Manual refresh triggered for ${tableName || \"component\"}`);\n      isRefreshingRef.current = true;\n      try {\n        await refreshFunction();\n        lastRefreshRef.current = new Date();\n      } catch (error) {\n        console.error(\n          `Manual refresh error for ${tableName || \"component\"}:`,\n          error,\n        );\n      } finally {\n        isRefreshingRef.current = false;\n      }\n    }\n  }, [tableName]);\n\n  const forceSyncData = useCallback(async () => {\n    console.log(`Force sync triggered for ${tableName || \"component\"}`);\n    await manualRefresh();\n  }, [manualRefresh, tableName]);\n\n  return {\n    manualRefresh,\n    forceSyncData,\n    lastRefresh: lastRefreshRef.current,\n    isActive: isActiveRef.current,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/integrations/supabase/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[933,936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[933,936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1283,1286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1283,1286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2756,2759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2756,2759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3102,3105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3102,3105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4218,4221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4218,4221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4464,4467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4464,4467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5375,5378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5375,5378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5723,5726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5723,5726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":277,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6886,6889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6886,6889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7147,7150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7147,7150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":333,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8251,8254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8251,8254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":343,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8513,8516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8513,8516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9499,9502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9499,9502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":416,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10242,10245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10242,10245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":533,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":533,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":583,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":583,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14735,14738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14735,14738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":607,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":607,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15333,15336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15333,15336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":630,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":630,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15929,15932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15929,15932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":640,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16193,16196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16193,16196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":698,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":698,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17667,17670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17667,17670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":708,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":708,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17925,17928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17925,17928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":751,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":751,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18983,18986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18983,18986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":761,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":761,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19241,19244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19241,19244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":813,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":813,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20518,20521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20518,20521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":823,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":823,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20779,20782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20779,20782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"./client\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\n\nexport const api = {\n  sermons: {\n    getSermons: async () => {\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .select(\"*\")\n        .order(\"sermon_date\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getFeaturedSermons: async (limit = 3) => {\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .select(\"*\")\n        .eq(\"is_featured\", true)\n        .order(\"sermon_date\", { ascending: false })\n        .limit(limit);\n\n      if (error) throw error;\n      return data;\n    },\n    getSermonById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    createSermon: async (sermon: any) => {\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .insert([sermon])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"create\", \"sermons\", data);\n\n      return data;\n    },\n    updateSermon: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"update\", \"sermons\", data);\n\n      return data;\n    },\n    deleteSermon: async (id: string) => {\n      const { error } = await supabase.from(\"sermons\").delete().eq(\"id\", id);\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"delete\", \"sermons\", { id });\n\n      return true;\n    },\n  },\n  events: {\n    getEvents: async () => {\n      const { data, error } = await supabase\n        .from(\"events\")\n        .select(\"*\")\n        .order(\"event_date\", { ascending: true });\n\n      if (error) throw error;\n      return data;\n    },\n    getUpcomingEvents: async (limit = 3) => {\n      const today = new Date().toISOString().split(\"T\")[0];\n      const { data, error } = await supabase\n        .from(\"events\")\n        .select(\"*\")\n        .gte(\"event_date\", today)\n        .order(\"event_date\", { ascending: true })\n        .limit(limit);\n\n      if (error) throw error;\n      return data;\n    },\n    getEventById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"events\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    createEvent: async (event: any) => {\n      const { data, error } = await supabase\n        .from(\"events\")\n        .insert([event])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"create\", \"events\", data);\n\n      return data;\n    },\n    updateEvent: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"events\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"update\", \"events\", data);\n\n      return data;\n    },\n    deleteEvent: async (id: string) => {\n      const { error } = await supabase.from(\"events\").delete().eq(\"id\", id);\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"delete\", \"events\", { id });\n\n      return true;\n    },\n  },\n  members: {\n    getMembers: async () => {\n      const { data, error } = await supabase\n        .from(\"members\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getMemberById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"members\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    createMember: async (member: any) => {\n      const { data, error } = await supabase\n        .from(\"members\")\n        .insert([member])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updateMember: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"members\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    deleteMember: async (id: string) => {\n      const { error } = await supabase.from(\"members\").delete().eq(\"id\", id);\n\n      if (error) throw error;\n      return true;\n    },\n  },\n  gallery: {\n    getGalleryImages: async () => {\n      const { data, error } = await supabase\n        .from(\"gallery\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getImageById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"gallery\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    addImage: async (image: any) => {\n      const { data, error } = await supabase\n        .from(\"gallery\")\n        .insert([image])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"create\", \"gallery\", data);\n\n      return data;\n    },\n    updateImage: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"gallery\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    deleteImage: async (id: string) => {\n      const { error } = await supabase.from(\"gallery\").delete().eq(\"id\", id);\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"delete\", \"gallery\", { id });\n\n      return true;\n    },\n  },\n  testimonials: {\n    getTestimonials: async (approvedOnly = true) => {\n      let query = supabase.from(\"testimonials\").select(\"*\");\n\n      if (approvedOnly) {\n        query = query.eq(\"is_approved\", true);\n      }\n\n      const { data, error } = await query.order(\"created_at\", {\n        ascending: false,\n      });\n\n      if (error) throw error;\n      return data;\n    },\n    getTestimonialById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"testimonials\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    addTestimonial: async (testimonial: any) => {\n      const { data, error } = await supabase\n        .from(\"testimonials\")\n        .insert([testimonial])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updateTestimonial: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"testimonials\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    deleteTestimonial: async (id: string) => {\n      const { error } = await supabase\n        .from(\"testimonials\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      return true;\n    },\n  },\n  prayerRequests: {\n    getPrayerRequests: async (publicOnly = true) => {\n      let query = supabase.from(\"prayer_requests\").select(\"*\");\n\n      if (publicOnly) {\n        query = query.eq(\"is_public\", true);\n      }\n\n      const { data, error } = await query.order(\"created_at\", {\n        ascending: false,\n      });\n\n      if (error) throw error;\n      return data;\n    },\n    getPrayerRequestById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"prayer_requests\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    addPrayerRequest: async (request: any) => {\n      const { data, error } = await supabase\n        .from(\"prayer_requests\")\n        .insert([request])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updatePrayerRequest: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"prayer_requests\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    deletePrayerRequest: async (id: string) => {\n      const { error } = await supabase\n        .from(\"prayer_requests\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      return true;\n    },\n  },\n  donations: {\n    getDonations: async () => {\n      const { data, error } = await supabase\n        .from(\"donations\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getDonationById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"donations\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updateDonation: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"donations\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n  },\n  users: {\n    getUsers: async () => {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getUserById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updateUser: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    deleteUser: async (id: string) => {\n      const { error } = await supabase.from(\"profiles\").delete().eq(\"id\", id);\n\n      if (error) throw error;\n      return true;\n    },\n    inviteAdmin: async (email: string, role: string = \"admin\") => {\n      try {\n        // Create a new user profile directly\n        const { data, error } = await supabase.from(\"profiles\").insert([\n          {\n            email,\n            role,\n          },\n        ]);\n\n        if (error) throw error;\n\n        return { success: true, message: \"User added successfully\", data };\n      } catch (error) {\n        console.error(\"Error inviting admin:\", error);\n        throw error;\n      }\n    },\n    getAdminCount: async () => {\n      try {\n        const { count, error } = await supabase\n          .from(\"profiles\")\n          .select(\"*\", { count: \"exact\", head: true })\n          .eq(\"role\", \"admin\");\n\n        if (error) throw error;\n        return count || 0;\n      } catch (error) {\n        console.error(\"Error getting admin count:\", error);\n        return 0;\n      }\n    },\n\n    // Direct user management without registration codes\n    addUser: async (email: string, role: string) => {\n      const { data, error } = await supabase.from(\"profiles\").insert([\n        {\n          email,\n          role,\n        },\n      ]);\n\n      if (error) throw error;\n      return data;\n    },\n\n    updateUserRole: async (id: string, role: string) => {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .update({ role })\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n\n    promoteToAdmin: async (userId: string) => {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .update({ role: \"admin\" })\n        .eq(\"id\", userId)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n\n    demoteFromAdmin: async (userId: string) => {\n      // Check if this is the last admin\n      const { count: adminCount } = await supabase\n        .from(\"profiles\")\n        .select(\"*\", { count: \"exact\", head: true })\n        .eq(\"role\", \"admin\");\n\n      if (adminCount && adminCount <= 1) {\n        throw new Error(\"Cannot demote the last admin user\");\n      }\n\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .update({ role: \"user\" })\n        .eq(\"id\", userId)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n  },\n  storage: {\n    uploadImage: async (file: File, folder: string = \"general\") => {\n      // Create a unique file path\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;\n      const filePath = `${folder}/${fileName}`;\n\n      // Upload the file to Supabase Storage\n      const { data, error } = await supabase.storage\n        .from(\"images\")\n        .upload(filePath, file, {\n          cacheControl: \"3600\",\n          upsert: false,\n        });\n\n      if (error) throw error;\n\n      // Get the public URL\n      const { data: publicUrlData } = supabase.storage\n        .from(\"images\")\n        .getPublicUrl(filePath);\n\n      return publicUrlData.publicUrl;\n    },\n    deleteImage: async (url: string) => {\n      // Extract the path from the URL\n      const urlObj = new URL(url);\n      const pathParts = urlObj.pathname.split(\"/\");\n      const bucketIndex = pathParts.findIndex((part) => part === \"images\");\n      if (bucketIndex === -1) throw new Error(\"Invalid image URL\");\n\n      const filePath = pathParts.slice(bucketIndex + 1).join(\"/\");\n\n      // Delete the file from Supabase Storage\n      const { error } = await supabase.storage\n        .from(\"images\")\n        .remove([filePath]);\n\n      if (error) throw error;\n      return true;\n    },\n  },\n  admin: {\n    // Simplified admin management - no registration codes needed\n  },\n\n  // Stripe Settings API\n  stripeSettings: {\n    getSettings: async () => {\n      const { data, error } = await supabase\n        .from(\"stripe_settings\")\n        .select(\"*\")\n        .limit(1)\n        .single();\n\n      if (error && error.code !== \"PGRST116\") throw error;\n      return data;\n    },\n    updateSettings: async (settings: any) => {\n      const { data, error } = await supabase\n        .from(\"stripe_settings\")\n        .upsert({ id: 1, ...settings, updated_at: new Date().toISOString() })\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n  },\n\n  // Email Settings API\n  emailSettings: {\n    getSettings: async () => {\n      const { data, error } = await supabase\n        .from(\"email_settings\")\n        .select(\"*\")\n        .limit(1)\n        .single();\n\n      if (error && error.code !== \"PGRST116\") throw error;\n      return data;\n    },\n    updateSettings: async (settings: any) => {\n      const { data, error } = await supabase\n        .from(\"email_settings\")\n        .upsert({ id: 1, ...settings, updated_at: new Date().toISOString() })\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n  },\n\n  // Email Subscribers API\n  emailSubscribers: {\n    getSubscribers: async () => {\n      const { data, error } = await supabase\n        .from(\"email_subscribers\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    addSubscriber: async (subscriber: any) => {\n      const { data, error } = await supabase\n        .from(\"email_subscribers\")\n        .insert([subscriber])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updateSubscriber: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"email_subscribers\")\n        .update({ ...updates, updated_at: new Date().toISOString() })\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    deleteSubscriber: async (id: string) => {\n      const { error } = await supabase\n        .from(\"email_subscribers\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      return true;\n    },\n    unsubscribe: async (email: string) => {\n      const { data, error } = await supabase\n        .from(\"email_subscribers\")\n        .update({\n          status: \"unsubscribed\",\n          unsubscribed_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"email\", email)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n  },\n\n  // Email Templates API\n  emailTemplates: {\n    getTemplates: async () => {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getTemplateById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    createTemplate: async (template: any) => {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .insert([template])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updateTemplate: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"email_templates\")\n        .update({ ...updates, updated_at: new Date().toISOString() })\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    deleteTemplate: async (id: string) => {\n      const { error } = await supabase\n        .from(\"email_templates\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      return true;\n    },\n  },\n\n  // Email Campaigns API\n  emailCampaigns: {\n    getCampaigns: async () => {\n      const { data, error } = await supabase\n        .from(\"email_campaigns\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getCampaignById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"email_campaigns\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    createCampaign: async (campaign: any) => {\n      const { data, error } = await supabase\n        .from(\"email_campaigns\")\n        .insert([campaign])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updateCampaign: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"email_campaigns\")\n        .update({ ...updates, updated_at: new Date().toISOString() })\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    deleteCampaign: async (id: string) => {\n      const { error } = await supabase\n        .from(\"email_campaigns\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n      return true;\n    },\n  },\n\n  appointments: {\n    getAppointments: async () => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .select(\n          `\n          *,\n          responded_by_profile:profiles!appointments_responded_by_fkey(email)\n        `,\n        )\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n    getAppointmentById: async (id: string) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .select(\n          `\n          *,\n          responded_by_profile:profiles!appointments_responded_by_fkey(email)\n        `,\n        )\n        .eq(\"id\", id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    createAppointment: async (appointment: any) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .insert([appointment])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    updateAppointment: async (id: string, updates: any) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .update(updates)\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"update\", \"appointments\", data);\n\n      return data;\n    },\n    respondToAppointment: async (\n      id: string,\n      response: {\n        status: string;\n        admin_response: string;\n        admin_notes?: string;\n        confirmed_date?: string;\n        confirmed_time?: string;\n        responded_by: string;\n      },\n    ) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .update({\n          ...response,\n          responded_at: new Date().toISOString(),\n        })\n        .eq(\"id\", id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\n        \"respond_appointment\",\n        \"appointments\",\n        data,\n      );\n\n      return data;\n    },\n    deleteAppointment: async (id: string) => {\n      const { error } = await supabase\n        .from(\"appointments\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"delete\", \"appointments\", { id });\n\n      return true;\n    },\n    getAppointmentsByStatus: async (status: string) => {\n      const { data, error } = await supabase\n        .from(\"appointments\")\n        .select(\n          `\n          *,\n          responded_by_profile:profiles!appointments_responded_by_fkey(email)\n        `,\n        )\n        .eq(\"status\", status)\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      return data;\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/env.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","line":14,"column":7,"nodeType":"Line","messageId":"tsDirectiveCommentRequiresDescription","endLine":14,"endColumn":26},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","line":73,"column":9,"nodeType":"Line","messageId":"tsDirectiveCommentRequiresDescription","endLine":73,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Environment variable defaults for development\nconst ENV_DEFAULTS = {\n  VITE_APP_NAME: \"St. Gabriel Ethiopian Orthodox Church\",\n  VITE_SUPABASE_URL: \"https://nvigfdxosyqhnoljtfld.supabase.co\",\n  VITE_SUPABASE_ANON_KEY:\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52aWdmZHhvc3lxaG5vbGp0ZmxkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNjU0MjMsImV4cCI6MjA2Mjc0MTQyM30.3fkZqIajZVAg__YHUr7rbBMOxXwVSjKBgcoQkKCqAPY\",\n  VITE_API_URL: \"https://nvigfdxosyqhnoljtfld.supabase.co\",\n} as const;\n\n// Set defaults immediately to prevent runtime errors\nif (typeof window !== \"undefined\") {\n  Object.entries(ENV_DEFAULTS).forEach(([key, value]) => {\n    if (!import.meta.env[key]) {\n      // @ts-expect-error\n      import.meta.env[key] = value;\n    }\n  });\n}\n\n// Critical environment variables that must be set in production\nconst CRITICAL_ENV_VARS = [\n  \"VITE_SUPABASE_URL\",\n  \"VITE_SUPABASE_ANON_KEY\",\n] as const;\n\n/**\n * Get an environment variable with fallback to defaults\n * @param key - The key of the environment variable\n * @param defaultValue - The default value if the environment variable is not set\n * @returns The value of the environment variable\n */\nexport const getEnvVar = (\n  key: keyof ImportMetaEnv,\n  defaultValue: string = \"\",\n): string => {\n  const value = import.meta.env[key];\n  if (value) return value;\n\n  // Check if we have a default for this key\n  if (key in ENV_DEFAULTS) {\n    return ENV_DEFAULTS[key as keyof typeof ENV_DEFAULTS];\n  }\n\n  return defaultValue;\n};\n\n/**\n * Check if a feature flag is enabled\n * @param flag - The name of the feature flag\n * @returns boolean indicating if the feature is enabled\n */\nexport const isFeatureEnabled = (flag: string): boolean => {\n  const value = getEnvVar(\n    `VITE_ENABLE_${flag.toUpperCase()}` as keyof ImportMetaEnv,\n    \"false\",\n  );\n  return value.toLowerCase() === \"true\";\n};\n\n/**\n * Validate environment variables with development-friendly approach\n * @throws Error only if critical variables are missing in production\n */\nexport const validateEnv = (): void => {\n  const isDevelopment =\n    import.meta.env.DEV || import.meta.env.VITE_TEMPO === \"true\";\n\n  // In development, we're more lenient and provide defaults\n  if (isDevelopment) {\n    // Ensure defaults are set\n    Object.entries(ENV_DEFAULTS).forEach(([key, value]) => {\n      if (!import.meta.env[key]) {\n        // @ts-expect-error\n        import.meta.env[key] = value;\n      }\n    });\n\n    console.info(`ℹ️  Development mode: Using default environment variables`);\n    return; // Don't throw in development\n  }\n\n  // In production, be strict about critical variables\n  const missingCritical = CRITICAL_ENV_VARS.filter(\n    (key) => !import.meta.env[key],\n  );\n\n  if (missingCritical.length > 0) {\n    throw new Error(\n      `Missing critical environment variables: ${missingCritical.join(\", \")}\\n` +\n        \"Please set these variables in your project settings before deploying to production.\",\n    );\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Contact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Donation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Smartphone' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'language' is assigned a value but never used.","line":43,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Heart,\n  Shield,\n  CreditCard,\n  Phone,\n  Mail,\n  Users,\n  Building,\n  GraduationCap,\n  HandHeart,\n  CheckCircle,\n  Lock,\n  Smartphone,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\nexport default function Donation() {\n  const { t, language } = useLanguage();\n  const { toast } = useToast();\n  const [donationType, setDonationType] = useState(\"one_time\");\n  const [purpose, setPurpose] = useState(\"general_fund\");\n  const [amount, setAmount] = useState(\"\");\n  const [contactMethod, setContactMethod] = useState(\"email\");\n  const [isAnonymous, setIsAnonymous] = useState(false);\n  const [includeBulletin, setIncludeBulletin] = useState(false);\n  const [memorial, setMemorial] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Suggested donation amounts\n  const suggestedAmounts = [25, 50, 100, 250, 500, 1000];\n\n  // Purpose descriptions for impact section\n  const purposeImpacts = {\n    general_fund:\n      t(\"general_fund_impact\") ||\n      \"Supports the church's daily operations and ministries.\",\n    building_fund:\n      t(\"building_fund_impact\") ||\n      \"Helps maintain and improve our church facilities.\",\n    youth_programs:\n      t(\"youth_programs_impact\") ||\n      \"Supports youth activities and education programs.\",\n    charity:\n      t(\"charity_impact\") ||\n      \"Aids community outreach and charitable initiatives.\",\n  };\n\n  // Purpose icons\n  const purposeIcons = {\n    general_fund: Users,\n    building_fund: Building,\n    youth_programs: GraduationCap,\n    charity: HandHeart,\n  };\n\n  const handleAmountSelect = (selectedAmount: number) => {\n    setAmount(selectedAmount.toString());\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) < 1) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid donation amount of at least $1.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const contactInfo = isAnonymous\n        ? \"\"\n        : contactMethod === \"email\"\n          ? (formData.get(\"email\") as string)\n          : (formData.get(\"phone\") as string);\n\n      const checkoutData = {\n        amount,\n        donationType,\n        purpose,\n        email: contactMethod === \"email\" ? contactInfo : \"\",\n        name: (formData.get(\"name\") as string) || \"\",\n        address: (formData.get(\"address\") as string) || \"\",\n        isAnonymous,\n        includeBulletin,\n        memorial: memorial.trim(),\n      };\n\n      console.log(\"Invoking create-checkout function with data:\", checkoutData);\n\n      const { data, error } = await supabase.functions.invoke(\n        \"create-checkout\",\n        {\n          body: checkoutData,\n        },\n      );\n\n      console.log(\"Function response:\", { data, error });\n\n      if (error) {\n        console.error(\"Function error:\", error);\n        throw new Error(error.message || \"Payment initiation failed\");\n      }\n\n      if (data?.url) {\n        console.log(\"Redirecting to checkout URL:\", data.url);\n        window.location.href = data.url;\n      } else {\n        console.error(\"No checkout URL in response:\", data);\n        throw new Error(\"No checkout URL received\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Payment Error\",\n        description:\n          \"There was an issue processing your donation. Please try again.\",\n        variant: \"destructive\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const PurposeIcon = purposeIcons[purpose as keyof typeof purposeIcons];\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-gradient-to-br from-church-cream to-white py-12\">\n        <div className=\"container mx-auto px-4\">\n          {/* Header Section */}\n          <div className=\"text-center mb-12\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-church-burgundy rounded-full mb-4\">\n              <Heart className=\"w-8 h-8 text-church-gold\" />\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-serif text-church-burgundy mb-4\">\n              {t(\"donation_title\") || \"Make a Donation\"}\n            </h1>\n            <p className=\"text-xl text-church-burgundy/80 mb-2\">\n              {t(\"donation_subtitle\") || \"Support Our Ministry\"}\n            </p>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              {t(\"donation_description\") ||\n                \"Your generous donation helps us continue our mission and serve the community.\"}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n            {/* Main Donation Form */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"shadow-lg border-church-gold/20\">\n                <CardHeader className=\"bg-gradient-to-r from-church-burgundy to-church-burgundy/90 text-white\">\n                  <CardTitle className=\"text-church-gold flex items-center\">\n                    <CreditCard className=\"w-5 h-5 mr-2\" />\n                    {t(\"donation_title\") || \"Make a Donation\"}\n                  </CardTitle>\n                  <CardDescription className=\"text-white/90\">\n                    {t(\"donation_description\") ||\n                      \"Support our ministry with your generous contribution\"}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    {/* Suggested Amounts */}\n                    <div className=\"space-y-3\">\n                      <Label className=\"text-lg font-semibold\">\n                        {t(\"suggested_amounts\") || \"Suggested Amounts\"}\n                      </Label>\n                      <div className=\"grid grid-cols-3 md:grid-cols-6 gap-3\">\n                        {suggestedAmounts.map((suggestedAmount) => (\n                          <Button\n                            key={suggestedAmount}\n                            type=\"button\"\n                            variant={\n                              amount === suggestedAmount.toString()\n                                ? \"default\"\n                                : \"outline\"\n                            }\n                            className={`h-12 ${\n                              amount === suggestedAmount.toString()\n                                ? \"bg-church-burgundy hover:bg-church-burgundy/90 text-white\"\n                                : \"border-church-burgundy/30 hover:border-church-burgundy hover:bg-church-burgundy/5\"\n                            }`}\n                            onClick={() => handleAmountSelect(suggestedAmount)}\n                          >\n                            ${suggestedAmount}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Custom Amount */}\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"amount\" className=\"text-lg font-semibold\">\n                        {t(\"custom_amount\") || \"Custom Amount\"}\n                      </Label>\n                      <div className=\"relative\">\n                        <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-lg font-semibold\">\n                          $\n                        </span>\n                        <Input\n                          id=\"amount\"\n                          type=\"number\"\n                          min=\"1\"\n                          step=\"1\"\n                          className=\"pl-8 h-12 text-lg border-church-burgundy/30 focus:border-church-burgundy\"\n                          value={amount}\n                          onChange={(e) => setAmount(e.target.value)}\n                          placeholder=\"Enter amount\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    {/* Donation Type */}\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-lg font-semibold\">\n                        {t(\"donation_type\")}\n                      </Label>\n                      <Select\n                        value={donationType}\n                        onValueChange={setDonationType}\n                      >\n                        <SelectTrigger className=\"h-12 border-church-burgundy/30 focus:border-church-burgundy\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"one_time\">\n                            {t(\"one_time\")}\n                          </SelectItem>\n                          <SelectItem value=\"monthly\">\n                            {t(\"monthly\")}\n                          </SelectItem>\n                          <SelectItem value=\"quarterly\">\n                            {t(\"quarterly\")}\n                          </SelectItem>\n                          <SelectItem value=\"annually\">\n                            {t(\"annually\")}\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Purpose */}\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-lg font-semibold\">\n                        {t(\"donation_purpose\")}\n                      </Label>\n                      <Select value={purpose} onValueChange={setPurpose}>\n                        <SelectTrigger className=\"h-12 border-church-burgundy/30 focus:border-church-burgundy\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"general_fund\">\n                            {t(\"general_fund\")}\n                          </SelectItem>\n                          <SelectItem value=\"building_fund\">\n                            {t(\"building_fund\")}\n                          </SelectItem>\n                          <SelectItem value=\"youth_programs\">\n                            {t(\"youth_programs\")}\n                          </SelectItem>\n                          <SelectItem value=\"charity\">\n                            {t(\"charity\")}\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <Separator className=\"my-6\" />\n\n                    {/* Anonymous Donation */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"anonymous\"\n                          checked={isAnonymous}\n                          onCheckedChange={(checked) =>\n                            setIsAnonymous(checked as boolean)\n                          }\n                        />\n                        <Label\n                          htmlFor=\"anonymous\"\n                          className=\"text-base font-medium\"\n                        >\n                          {t(\"anonymous_donation\")}\n                        </Label>\n                      </div>\n                      <p className=\"text-sm text-gray-600 ml-6\">\n                        {t(\"anonymous_note\")}\n                      </p>\n                    </div>\n\n                    {/* Contact Information */}\n                    {!isAnonymous && (\n                      <div className=\"space-y-4\">\n                        <Label className=\"text-lg font-semibold\">\n                          {t(\"contact_preference\")}\n                        </Label>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <Button\n                            type=\"button\"\n                            variant={\n                              contactMethod === \"email\" ? \"default\" : \"outline\"\n                            }\n                            className={`h-12 ${\n                              contactMethod === \"email\"\n                                ? \"bg-church-burgundy hover:bg-church-burgundy/90\"\n                                : \"border-church-burgundy/30 hover:border-church-burgundy\"\n                            }`}\n                            onClick={() => setContactMethod(\"email\")}\n                          >\n                            <Mail className=\"w-4 h-4 mr-2\" />\n                            {t(\"email_contact\")}\n                          </Button>\n                          <Button\n                            type=\"button\"\n                            variant={\n                              contactMethod === \"phone\" ? \"default\" : \"outline\"\n                            }\n                            className={`h-12 ${\n                              contactMethod === \"phone\"\n                                ? \"bg-church-burgundy hover:bg-church-burgundy/90\"\n                                : \"border-church-burgundy/30 hover:border-church-burgundy\"\n                            }`}\n                            onClick={() => setContactMethod(\"phone\")}\n                          >\n                            <Phone className=\"w-4 h-4 mr-2\" />\n                            {t(\"phone_contact\")}\n                          </Button>\n                        </div>\n\n                        {contactMethod === \"email\" ? (\n                          <Input\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder=\"your.email@example.com\"\n                            className=\"h-12 border-church-burgundy/30 focus:border-church-burgundy\"\n                            required\n                          />\n                        ) : (\n                          <Input\n                            name=\"phone\"\n                            type=\"tel\"\n                            placeholder=\"(555) 123-4567\"\n                            className=\"h-12 border-church-burgundy/30 focus:border-church-burgundy\"\n                            required\n                          />\n                        )}\n                      </div>\n                    )}\n\n                    {/* Donor Recognition */}\n                    {!isAnonymous && (\n                      <div className=\"space-y-4\">\n                        <Label className=\"text-lg font-semibold\">\n                          {t(\"donor_recognition\")}\n                        </Label>\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id=\"bulletin\"\n                            checked={includeBulletin}\n                            onCheckedChange={(checked) =>\n                              setIncludeBulletin(checked as boolean)\n                            }\n                          />\n                          <Label htmlFor=\"bulletin\" className=\"text-base\">\n                            {t(\"include_in_bulletin\")}\n                          </Label>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Memorial/Dedication */}\n                    <div className=\"space-y-2\">\n                      <Label\n                        htmlFor=\"memorial\"\n                        className=\"text-lg font-semibold\"\n                      >\n                        {t(\"memorial_dedication\")}\n                      </Label>\n                      <Textarea\n                        id=\"memorial\"\n                        value={memorial}\n                        onChange={(e) => setMemorial(e.target.value)}\n                        placeholder={t(\"memorial_placeholder\")}\n                        className=\"border-church-burgundy/30 focus:border-church-burgundy\"\n                        rows={3}\n                      />\n                    </div>\n\n                    {/* Submit Button */}\n                    <Button\n                      type=\"submit\"\n                      disabled={loading || !amount}\n                      className=\"w-full h-14 text-lg bg-church-burgundy hover:bg-church-burgundy/90 text-white font-semibold\"\n                    >\n                      {loading ? (\n                        <div className=\"flex items-center\">\n                          <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                          {t(\"processing\") || \"Processing...\"}\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center\">\n                          <Lock className=\"w-5 h-5 mr-2\" />\n                          {t(\"proceed_to_payment\") || \"Proceed to Payment\"}\n                        </div>\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Impact Card */}\n              <Card className=\"shadow-lg border-church-gold/20\">\n                <CardHeader className=\"bg-church-gold text-church-burgundy\">\n                  <CardTitle className=\"flex items-center\">\n                    <PurposeIcon className=\"w-5 h-5 mr-2\" />\n                    {t(\"donation_impact\") || \"Your Impact\"}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm text-gray-700\">\n                    {purposeImpacts[purpose as keyof typeof purposeImpacts]}\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Security & Trust */}\n              <Card className=\"shadow-lg border-church-gold/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-church-burgundy\">\n                    <Shield className=\"w-5 h-5 mr-2\" />\n                    {t(\"secure_payment\") || \"Secure Payment\"}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-4 space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">\n                        {t(\"secure_payment\") || \"Secure Payment\"}\n                      </p>\n                      <p className=\"text-xs text-gray-600\">\n                        {t(\"secure_payment_note\") ||\n                          \"Your payment is processed securely through Stripe\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">\n                        {t(\"tax_deductible\") || \"Tax Deductible\"}\n                      </p>\n                      <p className=\"text-xs text-gray-600\">\n                        {t(\"tax_deductible_note\") ||\n                          \"Your donation may be tax deductible\"}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Payment Methods */}\n              <Card className=\"shadow-lg border-church-gold/20\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm font-medium text-center mb-4\">\n                    Accepted Payment Methods\n                  </p>\n\n                  {/* Credit Card Logos */}\n                  <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                    <div className=\"flex items-center justify-center p-2 border rounded-lg bg-white\">\n                      <svg className=\"h-6 w-10\" viewBox=\"0 0 40 24\" fill=\"none\">\n                        <rect width=\"40\" height=\"24\" rx=\"4\" fill=\"#1A1F71\" />\n                        <path d=\"M16.5 8.5h7v7h-7z\" fill=\"#FF5F00\" />\n                        <circle cx=\"13\" cy=\"12\" r=\"5.5\" fill=\"#EB001B\" />\n                        <circle cx=\"27\" cy=\"12\" r=\"5.5\" fill=\"#F79E1B\" />\n                      </svg>\n                      <span className=\"ml-2 text-xs font-medium\">\n                        Mastercard\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-center p-2 border rounded-lg bg-white\">\n                      <svg className=\"h-6 w-10\" viewBox=\"0 0 40 24\" fill=\"none\">\n                        <rect width=\"40\" height=\"24\" rx=\"4\" fill=\"#1A1F71\" />\n                        <path\n                          d=\"M15 8l-3 8h2l3-8h-2zm8 0l-2 8h2l2-8h-2z\"\n                          fill=\"white\"\n                        />\n                      </svg>\n                      <span className=\"ml-2 text-xs font-medium\">Visa</span>\n                    </div>\n                    <div className=\"flex items-center justify-center p-2 border rounded-lg bg-white\">\n                      <svg className=\"h-6 w-10\" viewBox=\"0 0 40 24\" fill=\"none\">\n                        <rect width=\"40\" height=\"24\" rx=\"4\" fill=\"#006FCF\" />\n                        <path\n                          d=\"M20 8c-2.2 0-4 1.8-4 4s1.8 4 4 4 4-1.8 4-4-1.8-4-4-4z\"\n                          fill=\"white\"\n                        />\n                      </svg>\n                      <span className=\"ml-2 text-xs font-medium\">Amex</span>\n                    </div>\n                    <div className=\"flex items-center justify-center p-2 border rounded-lg bg-white\">\n                      <svg className=\"h-6 w-10\" viewBox=\"0 0 40 24\" fill=\"none\">\n                        <rect width=\"40\" height=\"24\" rx=\"4\" fill=\"#FF6000\" />\n                        <circle cx=\"20\" cy=\"12\" r=\"6\" fill=\"white\" />\n                        <circle cx=\"20\" cy=\"12\" r=\"4\" fill=\"#FF6000\" />\n                      </svg>\n                      <span className=\"ml-2 text-xs font-medium\">Discover</span>\n                    </div>\n                  </div>\n\n                  {/* Digital Wallets */}\n                  <div className=\"border-t pt-3\">\n                    <div className=\"flex justify-center space-x-6\">\n                      <div className=\"flex items-center space-x-2 p-2 border rounded-lg bg-black text-white\">\n                        <svg\n                          className=\"w-4 h-4\"\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\" />\n                        </svg>\n                        <span className=\"text-xs font-medium\">Apple Pay</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2 p-2 border rounded-lg\">\n                        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\">\n                          <path\n                            fill=\"#4285F4\"\n                            d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                          />\n                          <path\n                            fill=\"#34A853\"\n                            d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                          />\n                          <path\n                            fill=\"#FBBC05\"\n                            d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                          />\n                          <path\n                            fill=\"#EA4335\"\n                            d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                          />\n                        </svg>\n                        <span className=\"text-xs font-medium\">Google Pay</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-center mt-3\">\n                    <p className=\"text-xs text-gray-500\">\n                      Powered by{\" \"}\n                      <span className=\"font-semibold text-[#635BFF]\">\n                        Stripe\n                      </span>\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/DonationDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/DonationSuccess.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useSearchParams, Link } from \"react-router-dom\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { CheckCircle, Loader2, ExternalLink } from \"lucide-react\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ntype SessionData = {\n  amount: string;\n  formattedAmount: string;\n  email: string;\n  purpose: string;\n  donationType: string;\n  date: string;\n};\n\nconst DonationSuccess: React.FC = () => {\n  const { t } = useLanguage();\n  const [searchParams] = useSearchParams();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(true);\n  const [sessionData, setSessionData] = useState<SessionData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchSessionData = async () => {\n      try {\n        const sessionId = searchParams.get(\"session_id\");\n\n        if (!sessionId) {\n          setError(\n            \"Session ID not found. Unable to retrieve donation details.\",\n          );\n          setIsLoading(false);\n          return;\n        }\n\n        // Call the get-session function to get session details\n        // Using params in the URL path instead of query option\n        const { data, error: sessionError } = await supabase.functions.invoke(\n          \"get-session\",\n          {\n            body: { session_id: sessionId },\n          },\n        );\n\n        if (sessionError) {\n          throw new Error(\n            sessionError.message || \"Failed to retrieve session data\",\n          );\n        }\n\n        if (!data || !data.session) {\n          throw new Error(\"Failed to retrieve session data\");\n        }\n\n        const session = data.session;\n\n        // Extract the payment amount\n        let amountInCents = 0;\n        let email = \"\";\n        let purpose = \"\";\n        let donationType = \"one_time\";\n\n        if (session.mode === \"payment\" && session.payment_intent) {\n          amountInCents = session.amount_total;\n        } else if (session.mode === \"subscription\" && session.subscription) {\n          amountInCents = session.amount_total;\n          donationType = session.metadata?.donationType || \"monthly\";\n        }\n\n        // Get customer email and metadata\n        email =\n          session.customer_details?.email || session.metadata?.email || \"\";\n        purpose = session.metadata?.purpose || \"general_fund\";\n\n        // Calculate the amount in dollars\n        const amount = (amountInCents / 100).toString();\n\n        // Format the amount with currency\n        const formattedAmount = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(amountInCents / 100);\n\n        // Set the session data\n        const sessionDetails: SessionData = {\n          amount,\n          formattedAmount,\n          email,\n          purpose,\n          donationType,\n          date: new Date().toLocaleDateString(),\n        };\n\n        setSessionData(sessionDetails);\n\n        // Send email notifications\n        await supabase.functions.invoke(\"send-email\", {\n          body: {\n            donorEmail: email,\n            amount: amount,\n            purpose: purpose,\n            donationType: donationType,\n          },\n        });\n\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching session data:\", error);\n        setError(\n          \"Failed to process your donation information. Please contact support.\",\n        );\n        setIsLoading(false);\n\n        toast({\n          title: \"Error\",\n          description:\n            \"There was an issue retrieving your donation information.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    fetchSessionData();\n  }, [searchParams, toast]);\n\n  if (isLoading) {\n    return (\n      <Layout>\n        <div className=\"py-16 px-6\">\n          <div className=\"container mx-auto max-w-2xl text-center\">\n            <Loader2 className=\"h-12 w-12 animate-spin mx-auto text-church-burgundy\" />\n            <p className=\"mt-4 text-lg\">Processing your donation...</p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (error) {\n    return (\n      <Layout>\n        <div className=\"py-16 px-6\">\n          <div className=\"container mx-auto max-w-2xl\">\n            <Card className=\"border-red-300\">\n              <CardHeader className=\"bg-red-50\">\n                <CardTitle className=\"text-red-700\">\n                  An Error Occurred\n                </CardTitle>\n                <CardDescription className=\"text-red-600\">\n                  {error}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6\">\n                <p className=\"mb-4\">\n                  If you believe your donation was processed, please contact us\n                  for verification.\n                </p>\n                <Button\n                  asChild\n                  className=\"bg-church-gold hover:bg-church-gold/90 text-church-burgundy font-bold\"\n                >\n                  <Link to=\"/\">Return to Home</Link>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-gradient-to-br from-church-cream to-white py-12\">\n        <div className=\"container mx-auto max-w-2xl px-4\">\n          <Card className=\"shadow-xl border-0 overflow-hidden\">\n            {/* Header with Ethiopian Orthodox Icon */}\n            <div className=\"bg-white text-center py-8\">\n              <div className=\"w-32 h-32 mx-auto mb-6 rounded-full overflow-hidden border-4 border-church-gold shadow-lg\">\n                <img\n                  src=\"/images/religious/crucifixion.jpg\"\n                  alt=\"Ethiopian Orthodox Icon\"\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    e.currentTarget.src =\n                      \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&q=80\";\n                  }}\n                />\n              </div>\n              <h1 className=\"text-3xl font-bold text-church-burgundy mb-2\">\n                Donation Processing Receipt\n              </h1>\n            </div>\n\n            <CardContent className=\"p-8 bg-white\">\n              <div className=\"space-y-6\">\n                {/* Personalized Greeting */}\n                <div className=\"text-left\">\n                  <p className=\"text-lg font-medium text-gray-800 mb-4\">\n                    Dear{\" \"}\n                    {sessionData?.email\n                      ? sessionData.email.split(\"@\")[0]\n                      : \"Friend\"}\n                    !\n                  </p>\n                  <p className=\"text-gray-700 leading-relaxed mb-4\">\n                    Thank you for your donation.{\" \"}\n                    <span className=\"text-church-burgundy font-medium\">\n                      እግዚአብሔር ይባርክዎት!\n                    </span>{\" \"}\n                    Your payment is currently being processed and you will\n                    receive a final email receipt once it has completed. Your\n                    generosity is appreciated!\n                  </p>\n                </div>\n\n                {/* Donation Details */}\n                {sessionData && (\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-semibold text-gray-800 mb-3\">\n                      Here are the details of your donation:\n                    </h3>\n\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Donor:\n                        </span>\n                        <span className=\"text-gray-600\">\n                          {sessionData.email || \"Anonymous\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Donation:\n                        </span>\n                        <span className=\"text-gray-600\">\n                          {sessionData.purpose\n                            .split(\"_\")\n                            .map(\n                              (word) =>\n                                word.charAt(0).toUpperCase() + word.slice(1),\n                            )\n                            .join(\" \")}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Donation Date:\n                        </span>\n                        <span className=\"text-gray-600\">\n                          {sessionData.date}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Amount:\n                        </span>\n                        <span className=\"text-gray-600 font-semibold\">\n                          {sessionData.formattedAmount}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Payment Method:\n                        </span>\n                        <span className=\"text-gray-600\">\n                          Stripe Payment Element\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Payment ID:\n                        </span>\n                        <span className=\"text-gray-600 text-xs\">\n                          {Math.floor(Math.random() * 1000)}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4 pt-4 border-t\">\n                      <Button\n                        variant=\"link\"\n                        className=\"text-blue-600 hover:text-blue-800 p-0 h-auto font-normal\"\n                        onClick={() => window.print()}\n                      >\n                        <ExternalLink className=\"w-4 h-4 mr-1\" />\n                        View the receipt in your browser »\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {/* Closing */}\n                <div className=\"space-y-4 pt-6\">\n                  <p className=\"text-gray-700\">Sincerely,</p>\n                  <p className=\"text-church-burgundy font-medium\">\n                    ደብረ ብስራት ዳግማዊ ኩሊቢ ቅዱስ ገብርኤል በኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያን\n                  </p>\n                  <p className=\"text-gray-700 font-medium\">\n                    Debre Bisrat Dagimawi Kulibi St.Gabriel Ethiopian Orthodox\n                    Tewahedo Church\n                  </p>\n\n                  <div className=\"text-sm text-gray-600 space-y-1\">\n                    <p className=\"text-blue-600\">6020 Batson Rd</p>\n                    <p className=\"text-blue-600\">Burtonsville, MD 20866</p>\n                  </div>\n                </div>\n\n                {/* Church Logo/Image */}\n                <div className=\"flex justify-center pt-6\">\n                  <div className=\"w-48 h-32 bg-church-burgundy rounded-lg overflow-hidden shadow-md\">\n                    <img\n                      src=\"/images/church-front.jpg\"\n                      alt=\"Church Building\"\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        e.currentTarget.src =\n                          \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&q=80\";\n                      }}\n                    />\n                  </div>\n                </div>\n\n                {/* Action Button */}\n                <div className=\"flex justify-center pt-6\">\n                  <Button\n                    asChild\n                    className=\"bg-church-burgundy hover:bg-church-burgundy/90 text-white px-8 py-3 rounded-lg font-semibold\"\n                  >\n                    <Link to=\"/\">Return to Home</Link>\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default DonationSuccess;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Events.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useDataRefresh' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEvents'. Either include it or remove the dependency array.","line":253,"column":6,"nodeType":"ArrayExpression","endLine":253,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadEvents]","fix":{"range":[9441,9443],"text":"[loadEvents]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { format } from \"date-fns\";\nimport {\n  Calendar,\n  MapPin,\n  Clock,\n  RefreshCw,\n  Church,\n  Users,\n  BookOpen,\n} from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useDataRefresh } from \"@/hooks/useDataRefresh\";\n\n// Placeholder Events Component\nconst PlaceholderEvents = () => {\n  const { language } = useLanguage();\n\n  const placeholderEvents = [\n    {\n      id: \"placeholder-1\",\n      title: language === \"en\" ? \"Sunday Divine Liturgy\" : \"የእሁድ ቅዳሴ\",\n      description:\n        language === \"en\"\n          ? \"Join us every Sunday for our traditional Divine Liturgy service. Experience the ancient traditions of the Ethiopian Orthodox Tewahedo Church.\"\n          : \"በየእሁድ ለባህላዊ የቅዳሴ አገልግሎታችን ይቀላቀሉን። የኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያንን ጥንታዊ ወጎች ይለማመዱ።\",\n      date: \"Every Sunday\",\n      time: \"7:00 AM - 12:00 PM\",\n      location: \"Main Sanctuary\",\n      image: \"/images/gallery/church-service.jpg\",\n      icon: Church,\n    },\n    {\n      id: \"placeholder-2\",\n      title:\n        language === \"en\"\n          ? \"St. Gabriel Monthly Commemoration\"\n          : \"የቅዱስ ገብርኤል ወርሃዊ ተዝካር\",\n      description:\n        language === \"en\"\n          ? \"Monthly celebration honoring St. Gabriel the Archangel, our church's patron saint. Special prayers and blessings.\"\n          : \"የቤተክርስቲያናችንን ጠባቂ ቅዱስ ገብርኤል መልአከ አምላክን የሚያከብር ወርሃዊ በዓል። ልዩ ጸሎቶች እና በረከቶች።\",\n      date: \"19th of Every Month\",\n      time: \"10:00 AM - 2:00 PM\",\n      location: \"Church Grounds\",\n      image: \"/images/religious/palm-sunday.jpg\",\n      icon: Church,\n    },\n    {\n      id: \"placeholder-3\",\n      title:\n        language === \"en\"\n          ? \"Sunday School for Children\"\n          : \"የሰንበት ትምህርት ቤት ለልጆች\",\n      description:\n        language === \"en\"\n          ? \"Educational program for children ages 5-12. Learn about Orthodox faith, Bible stories, and Ethiopian traditions.\"\n          : \"ከ5-12 ዓመት ለሆኑ ልጆች የትምህርት ፕሮግራም። ስለ ኦርቶዶክስ እምነት፣ የመጽሐፍ ቅዱስ ታሪኮች እና የኢትዮጵያ ወጎች ይማሩ።\",\n      date: \"Every Sunday\",\n      time: \"9:00 AM - 12:00 PM\",\n      location: \"Education Hall\",\n      image: \"/images/gallery/ceremony-1.jpg\",\n      icon: BookOpen,\n    },\n    {\n      id: \"placeholder-4\",\n      title: language === \"en\" ? \"Community Fellowship\" : \"የማህበረሰብ ህብረት\",\n      description:\n        language === \"en\"\n          ? \"Monthly community gathering for fellowship, sharing meals, and strengthening bonds within our church family.\"\n          : \"ለህብረት፣ ምግብ ለመካፈል እና በቤተክርስቲያን ቤተሰባችን ውስጥ ትስስርን ለማጠናከር ወርሃዊ የማህበረሰብ ስብሰባ።\",\n      date: \"First Saturday of Every Month\",\n      time: \"2:00 PM - 6:00 PM\",\n      location: \"Community Hall\",\n      image: \"/images/gallery/ceremony-2.jpg\",\n      icon: Users,\n    },\n    {\n      id: \"placeholder-5\",\n      title: language === \"en\" ? \"Youth Program\" : \"የወጣቶች ፕሮግራም\",\n      description:\n        language === \"en\"\n          ? \"Weekly program for teenagers focusing on spiritual growth, community service, and cultural activities.\"\n          : \"በመንፈሳዊ ዕድገት፣ የማህበረሰብ አገልግሎት እና የባህል ስራዎች ላይ የሚያተኩር ለወጣቶች ሳምንታዊ ፕሮግራም።\",\n      date: \"Every Saturday\",\n      time: \"3:00 PM - 6:00 PM\",\n      location: \"Youth Center\",\n      image: \"/images/gallery/ceremony-3.jpg\",\n      icon: Users,\n    },\n    {\n      id: \"placeholder-6\",\n      title: language === \"en\" ? \"Amharic Language Classes\" : \"የአማርኛ ቋንቋ ትምህርት\",\n      description:\n        language === \"en\"\n          ? \"Learn to read and write in Amharic. Classes for all ages to connect with Ethiopian heritage and culture.\"\n          : \"አማርኛ ማንበብና መጻፍ ይማሩ። ከኢትዮጵያዊ ሀረግ እና ባህል ጋር ለመገናኘት ለሁሉም ዕድሜ ክፍሎች።\",\n      date: \"Every Saturday\",\n      time: \"10:00 AM - 12:00 PM\",\n      location: \"Language Center\",\n      image: \"/images/gallery/timket.jpg\",\n      icon: BookOpen,\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"text-center py-8 mb-8 bg-church-cream/30 rounded-lg\">\n        <h3 className=\"text-2xl font-bold text-church-burgundy mb-2\">\n          {language === \"en\"\n            ? \"Regular Church Activities\"\n            : \"መደበኛ የቤተክርስቲያን ስራዎች\"}\n        </h3>\n        <p className=\"text-gray-600 max-w-2xl mx-auto\">\n          {language === \"en\"\n            ? \"While we don't have specific upcoming events scheduled, here are our regular activities and services that happen throughout the year.\"\n            : \"ልዩ የወደፊት ዝግጅቶች ባይኖሩንም፣ በዓመቱ ውስጥ የሚካሄዱ መደበኛ ስራዎቻችን እና አገልግሎቶቻችን እነኚሁ ናቸው።\"}\n        </p>\n      </div>\n\n      <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n        {placeholderEvents.map((event) => {\n          const IconComponent = event.icon;\n          return (\n            <Card\n              key={event.id}\n              className=\"overflow-hidden hover:shadow-lg transition-shadow\"\n            >\n              <div className=\"h-56 bg-cover bg-center relative overflow-hidden\">\n                <img\n                  src={event.image}\n                  alt={event.title}\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    const target = e.target as HTMLImageElement;\n                    // Enhanced fallback system for placeholder events\n                    if (target.src.includes(\"church-service.jpg\")) {\n                      target.src = \"/images/gallery/church-gathering.jpg\";\n                    } else if (target.src.includes(\"church-gathering.jpg\")) {\n                      target.src = \"/images/gallery/ceremony-1.jpg\";\n                    } else if (target.src.includes(\"ceremony-1.jpg\")) {\n                      target.src = \"/images/gallery/timket.jpg\";\n                    } else {\n                      target.src = \"/images/gallery/church-service.jpg\";\n                    }\n                  }}\n                />\n                <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center\">\n                  <IconComponent className=\"h-12 w-12 text-white\" />\n                </div>\n              </div>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold text-church-burgundy mb-2\">\n                  {event.title}\n                </h3>\n                <div className=\"flex items-center text-gray-600 mb-2\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm font-medium\">{event.date}</span>\n                </div>\n                <div className=\"flex items-center text-gray-600 mb-2\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">{event.time}</span>\n                </div>\n                <div className=\"flex items-center text-gray-600 mb-4\">\n                  <MapPin className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">{event.location}</span>\n                </div>\n                <p className=\"text-gray-600 mb-6 text-sm leading-relaxed\">\n                  {event.description}\n                </p>\n                <div className=\"flex justify-between\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"text-church-burgundy border-church-burgundy hover:bg-church-burgundy hover:text-white\"\n                  >\n                    {language === \"en\" ? \"Learn More\" : \"ተጨማሪ መረጃ\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\ninterface Event {\n  id: string;\n  title: string;\n  description: string | null;\n  event_date: string;\n  event_time: string | null;\n  location: string | null;\n  image_url: string | null;\n  is_featured: boolean;\n  created_at: string;\n}\n\n// Religious event images mapping with verified paths\nconst religiousEventImages = [\n  \"/images/religious/palm-sunday.jpg\",\n  \"/images/religious/crucifixion.jpg\",\n  \"/images/religious/procession.jpg\",\n  \"/images/gallery/timket.jpg\",\n  \"/images/gallery/church-service.jpg\",\n  \"/images/gallery/church-gathering.jpg\",\n  \"/images/gallery/ceremony-1.jpg\",\n  \"/images/gallery/ceremony-2.jpg\",\n  \"/images/gallery/ceremony-3.jpg\",\n];\n\n// Function to get a religious image based on event data\nconst getReligiousImage = (event: Event): string => {\n  // If the event already has an image, use it\n  if (event.image_url) return event.image_url;\n\n  // Otherwise, assign a religious image based on the event id (for consistency)\n  const imageIndex =\n    parseInt(event.id.charAt(0), 16) % religiousEventImages.length;\n  return religiousEventImages[imageIndex];\n};\n\nexport default function Events() {\n  const { t } = useLanguage();\n  const [events, setEvents] = useState<Event[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const loadEvents = async () => {\n    try {\n      setLoading(true);\n      const data = await api.events.getEvents();\n      setEvents(data || []);\n    } catch (error) {\n      console.error(\"Error loading events:\", error);\n      // Don't show error to user for background refreshes\n      if (events.length === 0) {\n        // Only show error if we have no events to display\n        console.error(\"Failed to load events on initial load\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadEvents();\n  }, []);\n\n  // Removed data refresh hook to prevent circular dependencies\n\n  const handleManualRefresh = async () => {\n    console.log(\"Manual refresh triggered for events\");\n    await loadEvents();\n  };\n\n  return (\n    <Layout>\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-church-burgundy mb-4\">\n            {t(\"events\") || \"Church Events\"}\n          </h1>\n          <p className=\"text-gray-600 max-w-2xl mx-auto mb-4\">\n            Join us for our upcoming events and celebrations. Our church hosts\n            various activities throughout the year for all members of our\n            community.\n          </p>\n          <Button\n            onClick={handleManualRefresh}\n            variant=\"outline\"\n            size=\"sm\"\n            disabled={loading}\n            className=\"inline-flex items-center\"\n          >\n            <RefreshCw\n              className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n            />\n            Refresh Events\n          </Button>\n        </div>\n\n        {loading ? (\n          <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"overflow-hidden\">\n                <Skeleton className=\"h-48 w-full\" />\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-4 w-1/2 mb-4\" />\n                  <Skeleton className=\"h-20 w-full mb-4\" />\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-10 w-24\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : events.length > 0 ? (\n          <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n            {events.map((event) => (\n              <Card key={event.id} className=\"overflow-hidden\">\n                <div className=\"h-56 bg-cover bg-center relative overflow-hidden\">\n                  <img\n                    src={getReligiousImage(event)}\n                    alt={event.title}\n                    className=\"w-full h-full object-cover\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      // Enhanced fallback system for placeholder events\n                      if (target.src.includes(\"church-service.jpg\")) {\n                        target.src = \"/images/gallery/church-gathering.jpg\";\n                      } else if (target.src.includes(\"church-gathering.jpg\")) {\n                        target.src = \"/images/gallery/ceremony-1.jpg\";\n                      } else if (target.src.includes(\"ceremony-1.jpg\")) {\n                        target.src = \"/images/gallery/timket.jpg\";\n                      } else {\n                        target.src = \"/images/gallery/church-service.jpg\";\n                      }\n                    }}\n                  />\n                </div>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-bold text-church-burgundy mb-2\">\n                    {event.title}\n                  </h3>\n                  <div className=\"flex items-center text-gray-600 mb-4\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    <span>\n                      {format(new Date(event.event_date), \"MMMM d, yyyy\")}\n                    </span>\n                    {event.event_time && (\n                      <>\n                        <Clock className=\"h-4 w-4 ml-4 mr-2\" />\n                        <span>{event.event_time}</span>\n                      </>\n                    )}\n                  </div>\n                  {event.location && (\n                    <div className=\"flex items-center text-gray-600 mb-4\">\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      <span>{event.location}</span>\n                    </div>\n                  )}\n                  <p className=\"text-gray-600 mb-6 line-clamp-3\">\n                    {event.description}\n                  </p>\n                  <div className=\"flex justify-between\">\n                    <Button variant=\"outline\" className=\"text-church-burgundy\">\n                      Learn More\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <PlaceholderEvents />\n        )}\n      </div>\n    </Layout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Gallery.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useDataRefresh' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchGalleryImages'. Either include it or remove the dependency array.","line":245,"column":6,"nodeType":"ArrayExpression","endLine":245,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchGalleryImages, language]","fix":{"range":[7939,7949],"text":"[fetchGalleryImages, language]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { Image, X, ChevronLeft, ChevronRight, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useDataRefresh } from \"@/hooks/useDataRefresh\";\n\ninterface GalleryImageProps {\n  src: string;\n  alt: string;\n  onClick?: () => void;\n}\n\nconst GalleryImage: React.FC<GalleryImageProps> = ({ src, alt, onClick }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <div\n      className=\"relative aspect-square overflow-hidden rounded-md bg-muted cursor-pointer\"\n      onClick={onClick}\n    >\n      <img\n        src={src}\n        alt={alt}\n        className={`h-full w-full object-cover transition-opacity duration-500 ${loaded ? \"opacity-100\" : \"opacity-0\"}`}\n        onLoad={() => setLoaded(true)}\n      />\n      {!loaded && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-muted\">\n          <Image className=\"h-10 w-10 text-muted-foreground/30\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface ImageModalProps {\n  image: {\n    src: string;\n    title: string;\n    description: string;\n    onNext: () => void;\n    onPrevious: () => void;\n  } | null;\n  onClose: () => void;\n}\n\nconst ImageModal: React.FC<ImageModalProps> = ({ image, onClose }) => {\n  if (!image) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 p-4\">\n      <div className=\"relative max-w-6xl w-full h-full flex items-center justify-center\">\n        <button\n          onClick={onClose}\n          className=\"absolute top-4 right-4 text-white hover:text-church-gold transition-colors z-10\"\n          aria-label=\"Close modal\"\n        >\n          <X size={24} />\n        </button>\n        <button\n          onClick={image.onPrevious}\n          className=\"absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-church-gold transition-colors p-2\"\n          aria-label=\"Previous image\"\n        >\n          <ChevronLeft size={40} />\n        </button>\n        <button\n          onClick={image.onNext}\n          className=\"absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-church-gold transition-colors p-2\"\n          aria-label=\"Next image\"\n        >\n          <ChevronRight size={40} />\n        </button>\n        <img\n          src={image.src}\n          alt={image.title}\n          className=\"max-h-[90vh] w-auto max-w-full object-contain\"\n        />\n      </div>\n    </div>\n  );\n};\n\ninterface GalleryImageData {\n  id: string;\n  title: string;\n  description: string | null;\n  image_url: string;\n  created_at: string;\n}\n\nconst Gallery: React.FC = () => {\n  const { t, language } = useLanguage();\n  const [selectedImageIndex, setSelectedImageIndex] = useState<number | null>(\n    null,\n  );\n  const [galleryImages, setGalleryImages] = useState<GalleryImageData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Use actual images from public/images folder\n  const fallbackImages = [\n    {\n      id: \"gallery-1\",\n      title: language === \"en\" ? \"Church Aerial View\" : \"የቤተክርስቲያን አየር ላይ እይታ\",\n      description:\n        language === \"en\"\n          ? \"Beautiful aerial view of our church grounds\"\n          : \"የቤተክርስቲያናችን ግቢ ውብ የአየር ላይ እይታ\",\n      image_url: \"/images/gallery/church-aerial.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-2\",\n      title: language === \"en\" ? \"Divine Liturgy Service\" : \"የቅዳሴ አገልግሎት\",\n      description:\n        language === \"en\"\n          ? \"Sunday Divine Liturgy in progress\"\n          : \"የእሁድ ቅዳሴ በሂደት ላይ\",\n      image_url: \"/images/gallery/church-service.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-3\",\n      title: language === \"en\" ? \"Timket Celebration\" : \"የጥምቀት በዓል\",\n      description:\n        language === \"en\" ? \"Annual Timket celebration\" : \"ዓመታዊ የጥምቀት በዓል\",\n      image_url: \"/images/gallery/timket.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-4\",\n      title: language === \"en\" ? \"Church Ceremony\" : \"የቤተክርስቲያን ሥርዓት\",\n      description:\n        language === \"en\" ? \"Special church ceremony\" : \"ልዩ የቤተክርስቲያን ሥርዓት\",\n      image_url: \"/images/gallery/ceremony-1.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-5\",\n      title: language === \"en\" ? \"Community Gathering\" : \"የማህበረሰብ ስብሰባ\",\n      description:\n        language === \"en\"\n          ? \"Church community gathering\"\n          : \"የቤተክርስቲያን ማህበረሰብ ስብሰባ\",\n      image_url: \"/images/gallery/ceremony-2.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-6\",\n      title: language === \"en\" ? \"Religious Ceremony\" : \"ሃይማኖታዊ ሥርዓት\",\n      description:\n        language === \"en\"\n          ? \"Traditional religious ceremony\"\n          : \"ባህላዊ ሃይማኖታዊ ሥርዓት\",\n      image_url: \"/images/gallery/ceremony-3.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-7\",\n      title: language === \"en\" ? \"Church Winter View\" : \"የቤተክርስቲያን የክረምት እይታ\",\n      description:\n        language === \"en\"\n          ? \"Church building in winter\"\n          : \"በክረምት ወቅት የቤተክርስቲያን ህንጻ\",\n      image_url: \"/images/gallery/church-winter.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-8\",\n      title: language === \"en\" ? \"Church Sanctuary\" : \"የቤተክርስቲያን መቅደስ\",\n      description:\n        language === \"en\" ? \"Interior view of the sanctuary\" : \"የመቅደሱ ውስጣዊ እይታ\",\n      image_url: \"/images/gallery/church/sanctuary.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-9\",\n      title: language === \"en\" ? \"Church Altar\" : \"የቤተክርስቲያን መሠዊያ\",\n      description: language === \"en\" ? \"Sacred altar area\" : \"ቅዱስ መሠዊያ አካባቢ\",\n      image_url: \"/images/gallery/church/altar.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-10\",\n      title: language === \"en\" ? \"Timket Procession\" : \"የጥምቀት ሰልፍ\",\n      description:\n        language === \"en\" ? \"Traditional Timket procession\" : \"ባህላዊ የጥምቀት ሰልፍ\",\n      image_url: \"/images/gallery/nd14_timket_09-3x1500-1.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-11\",\n      title: language === \"en\" ? \"Church Community\" : \"የቤተክርስቲያን ማህበረሰብ\",\n      description:\n        language === \"en\"\n          ? \"Church community members\"\n          : \"የቤተክርስቲያን ማህበረሰብ አባላት\",\n      image_url: \"/images/gallery/photo_2023-09-22_18-56-49.jpg\",\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"gallery-12\",\n      title: language === \"en\" ? \"Church Activities\" : \"የቤተክርስቲያን ስራዎች\",\n      description:\n        language === \"en\"\n          ? \"Various church activities\"\n          : \"የተለያዩ የቤተክርስቲያን ስራዎች\",\n      image_url: \"/images/gallery/photo_2023-09-22_18-56-51.jpg\",\n      created_at: new Date().toISOString(),\n    },\n  ];\n\n  const fetchGalleryImages = async () => {\n    try {\n      setLoading(true);\n      const data = await api.gallery.getGalleryImages();\n\n      if (data && data.length > 0) {\n        setGalleryImages(data);\n      } else {\n        // Use fallback images if no database images\n        setGalleryImages(fallbackImages);\n      }\n    } catch (err) {\n      console.error(\"Error fetching gallery images:\", err);\n      // Use fallback images on error\n      setGalleryImages(fallbackImages);\n      setError(\n        language === \"en\"\n          ? \"Failed to load some gallery images. Showing available images.\"\n          : \"አንዳንድ የጋለሪ ምስሎችን መጫን አልተቻለም። የሚገኙ ምስሎች ይታያሉ።\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchGalleryImages();\n  }, [language]);\n\n  // Removed data refresh hook to prevent circular dependencies\n\n  const handleManualRefresh = async () => {\n    console.log(\"Manual refresh triggered for gallery\");\n    await fetchGalleryImages();\n  };\n\n  const handleImageClick = (index: number) => {\n    setSelectedImageIndex(index);\n  };\n\n  const handleNext = () => {\n    if (selectedImageIndex === null) return;\n    setSelectedImageIndex((selectedImageIndex + 1) % galleryImages.length);\n  };\n\n  const handlePrevious = () => {\n    if (selectedImageIndex === null) return;\n    setSelectedImageIndex(\n      (selectedImageIndex - 1 + galleryImages.length) % galleryImages.length,\n    );\n  };\n\n  const selectedImage =\n    selectedImageIndex !== null\n      ? {\n          src: galleryImages[selectedImageIndex].image_url,\n          title: galleryImages[selectedImageIndex].title,\n          description: galleryImages[selectedImageIndex].description || \"\",\n          onNext: handleNext,\n          onPrevious: handlePrevious,\n        }\n      : null;\n\n  return (\n    <Layout>\n      <div className=\"py-12 px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <Image className=\"inline-block h-12 w-12 text-church-burgundy mb-3\" />\n            <h1 className=\"text-4xl font-serif text-church-burgundy mb-4\">\n              {t(\"gallery_title\")}\n            </h1>\n            <p className=\"max-w-2xl mx-auto text-lg mb-4\">\n              {t(\"gallery_description\")}\n            </p>\n            <Button\n              onClick={handleManualRefresh}\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={loading}\n              className=\"inline-flex items-center\"\n            >\n              <RefreshCw\n                className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n              />\n              {language === \"en\" ? \"Refresh Gallery\" : \"ጋለሪ አድስ\"}\n            </Button>\n          </div>\n\n          {error && (\n            <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md text-yellow-800 text-sm\">\n              {error}\n            </div>\n          )}\n\n          {loading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <CardContent className=\"p-0\">\n                    <Skeleton className=\"aspect-square w-full\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {galleryImages.map((image, i) => (\n                <Card key={image.id} className=\"overflow-hidden\">\n                  <CardContent className=\"p-0\">\n                    <div className=\"relative\">\n                      <GalleryImage\n                        src={image.image_url}\n                        alt={image.title}\n                        onClick={() => handleImageClick(i)}\n                      />\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-3\">\n                        <h3 className=\"text-white text-sm font-medium truncate\">\n                          {image.title}\n                        </h3>\n                        {image.description && (\n                          <p className=\"text-white/80 text-xs truncate\">\n                            {image.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <ImageModal\n        image={selectedImage}\n        onClose={() => setSelectedImageIndex(null)}\n      />\n    </Layout>\n  );\n};\n\nexport default Gallery;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Home.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useDataRefresh' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fallbackEvents'. Either include it or remove the dependency array.","line":245,"column":6,"nodeType":"ArrayExpression","endLine":245,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fallbackEvents]","fix":{"range":[8648,8658],"text":"[fallbackEvents]"}}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant truthiness on the left-hand side of a `&&` expression.","line":376,"column":29,"nodeType":"LogicalExpression","messageId":"constantShortCircuit","endLine":377,"endColumn":65}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Calendar,\n  DollarSign,\n  Church,\n  ChevronLeft,\n  ChevronRight,\n} from \"lucide-react\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { Button } from \"@/components/ui/button\";\nimport ImageSlider from \"../components/ImageSlider\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { format } from \"date-fns\";\nimport { useDataRefresh } from \"@/hooks/useDataRefresh\";\n\n// Wisdom Slider Component\ninterface WisdomSliderProps {\n  language: string;\n}\n\nconst WisdomSlider: React.FC<WisdomSliderProps> = ({ language }) => {\n  const [currentWisdom, setCurrentWisdom] = useState(0);\n\n  const wisdoms = [\n    {\n      english:\n        \"Give, and it will be given to you. A good measure, pressed down, shaken together and running over, will be poured into your lap. For with the measure you use, it will be measured to you.\",\n      amharic:\n        \"ስጡ፥ ይሰጣችሁማል፤ መልካም መስፈሪያ የተደቆሰ የተነቀነቀ የተትረፈረፈ በኩራባችሁ ይሰጣችሁማል፤ በምትሰፍሩበት መስፈሪያ ይሰፈርላችሁማልና።\",\n      reference: \"Luke 6:38\",\n      amharicRef: \"ሉቃስ 6:38\",\n    },\n    {\n      english:\n        \"Trust in the Lord with all your heart and lean not on your own understanding; in all your ways submit to him, and he will make your paths straight.\",\n      amharic:\n        \"በሙሉ ልብህ እግዚአብሔርን አምን፥ በራስህም ማስተዋል አትታመን፤ በሁሉም መንገዶችህ አስብበት፥ እርሱም መንገዶችህን ያቀናል።\",\n      reference: \"Proverbs 3:5-6\",\n      amharicRef: \"ምሳሌ 3:5-6\",\n    },\n    {\n      english:\n        \"For I know the plans I have for you, declares the Lord, plans to prosper you and not to harm you, to give you hope and a future.\",\n      amharic:\n        \"እኔ ስለ እናንተ የማስበውን አሳብ አውቃለሁ፥ ይላል እግዚአብሔር፤ የክፋት አሳብ ሳይሆን የሰላም አሳብ ነው፥ የተስፋና የመጨረሻ ዕድል ልሰጣችሁ።\",\n      reference: \"Jeremiah 29:11\",\n      amharicRef: \"ኤርምያስ 29:11\",\n    },\n    {\n      english:\n        \"Be strong and courageous. Do not be afraid; do not be discouraged, for the Lord your God will be with you wherever you go.\",\n      amharic:\n        \"ጠንካራና ደፋር ሁን፤ አትፍራ፥ አትደንግጥ፤ እግዚአብሔር አምላክህ የምትሄድበት ሁሉ ከአንተ ጋር ነውና።\",\n      reference: \"Joshua 1:9\",\n      amharicRef: \"ኢያሱ 1:9\",\n    },\n    {\n      english:\n        \"And we know that in all things God works for the good of those who love him, who have been called according to his purpose.\",\n      amharic: \"እግዚአብሔርን ለሚወዱት፥ በአሳቡም ለተጠሩት ሁሉ ነገር በጎ እንደሚሆን እናውቃለን።\",\n      reference: \"Romans 8:28\",\n      amharicRef: \"ሮሜ 8:28\",\n    },\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentWisdom((prev) => (prev + 1) % wisdoms.length);\n    }, 8000); // Change every 8 seconds\n\n    return () => clearInterval(interval);\n  }, [wisdoms.length]);\n\n  const nextWisdom = () => {\n    setCurrentWisdom((prev) => (prev + 1) % wisdoms.length);\n  };\n\n  const prevWisdom = () => {\n    setCurrentWisdom((prev) => (prev - 1 + wisdoms.length) % wisdoms.length);\n  };\n\n  const currentQuote = wisdoms[currentWisdom];\n\n  return (\n    <section className=\"py-20 lg:py-24 bg-gradient-to-br from-church-cream/30 via-white to-church-cream/20 relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-church-burgundy/5 via-transparent to-church-gold/5\"></div>\n      <div className=\"container mx-auto max-w-6xl px-4 relative z-10\">\n        <div className=\"text-center mb-16 animate-slide-up\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-church-burgundy rounded-full mb-6\">\n            <Church size={32} className=\"text-church-gold\" />\n          </div>\n          <h2 className=\"text-3xl lg:text-4xl xl:text-5xl font-serif text-church-burgundy mb-4\">\n            {language === \"en\" ? \"Words of Wisdom\" : \"የጥበብ ቃላት\"}\n          </h2>\n          <div className=\"w-24 h-1 bg-gradient-to-r from-transparent via-church-gold to-transparent mx-auto\"></div>\n        </div>\n\n        <div\n          className=\"relative bg-gradient-to-br from-white via-white to-church-cream/50 rounded-2xl shadow-2xl border border-church-gold/20 max-w-5xl mx-auto animate-slide-up\"\n          style={{ animationDelay: \"0.3s\" }}\n        >\n          <div className=\"p-8 lg:p-12\">\n            <div className=\"min-h-[200px] flex flex-col justify-center\">\n              <p className=\"text-xl mb-6 italic text-gray-800 leading-relaxed\">\n                {language === \"en\"\n                  ? currentQuote.english\n                  : currentQuote.amharic}\n              </p>\n              <p className=\"text-right text-church-burgundy font-semibold text-lg\">\n                {language === \"en\"\n                  ? currentQuote.reference\n                  : currentQuote.amharicRef}\n              </p>\n            </div>\n\n            <div className=\"flex justify-center my-6\">\n              <div className=\"h-px w-8 bg-green-600\"></div>\n              <div className=\"h-px w-8 bg-yellow-400\"></div>\n              <div className=\"h-px w-8 bg-red-600\"></div>\n            </div>\n\n            {/* Navigation */}\n            <div className=\"flex justify-between items-center mt-8\">\n              <button\n                onClick={prevWisdom}\n                className=\"p-2 rounded-full bg-church-burgundy/10 hover:bg-church-burgundy/20 text-church-burgundy transition-colors\"\n                aria-label=\"Previous wisdom\"\n              >\n                <ChevronLeft size={24} />\n              </button>\n\n              <div className=\"flex space-x-2\">\n                {wisdoms.map((_, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setCurrentWisdom(index)}\n                    className={`w-3 h-3 rounded-full transition-all ${\n                      index === currentWisdom\n                        ? \"bg-church-burgundy scale-125\"\n                        : \"bg-gray-300 hover:bg-gray-400\"\n                    }`}\n                    aria-label={`Go to wisdom ${index + 1}`}\n                  />\n                ))}\n              </div>\n\n              <button\n                onClick={nextWisdom}\n                className=\"p-2 rounded-full bg-church-burgundy/10 hover:bg-church-burgundy/20 text-church-burgundy transition-colors\"\n                aria-label=\"Next wisdom\"\n              >\n                <ChevronRight size={24} />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\ninterface Event {\n  id: string;\n  title: string;\n  description: string | null;\n  event_date: string;\n  event_time: string | null;\n  location: string | null;\n  image_url: string | null;\n  is_featured: boolean;\n  created_at: string;\n}\n\nconst Home: React.FC = () => {\n  const { t, language } = useLanguage();\n  const [upcomingEvents, setUpcomingEvents] = useState<Event[]>([]);\n  const [loadingEvents, setLoadingEvents] = useState(true);\n\n  // Fallback events if no database events are available\n  const fallbackEvents = [\n    {\n      id: \"fallback-1\",\n      title:\n        language === \"en\"\n          ? \"St. Gabriel Monthly Commemoration\"\n          : \"የቅዱስ ገብርኤል ወርሃዊ ተዝካር\",\n      description: null,\n      event_date: \"2025-05-19\",\n      event_time: \"10:00\",\n      location: null,\n      image_url: \"/images/religious/church-service.jpg\",\n      is_featured: false,\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"fallback-2\",\n      title:\n        language === \"en\"\n          ? \"Sunday School for Children\"\n          : \"የሰንበት ትምህርት ቤት ለልጆች\",\n      description: null,\n      event_date: \"2025-05-25\",\n      event_time: \"09:00\",\n      location: null,\n      image_url: \"/images/gallery/church-service.jpg\",\n      is_featured: false,\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: \"fallback-3\",\n      title:\n        language === \"en\"\n          ? \"Church Foundation Anniversary\"\n          : \"የቤተክርስቲያን መሰረት የተጣለበት ቀን\",\n      description: null,\n      event_date: \"2025-06-19\",\n      event_time: \"11:00\",\n      location: null,\n      image_url: \"/images/gallery/church-service.jpg\",\n      is_featured: false,\n      created_at: new Date().toISOString(),\n    },\n  ];\n\n  const fetchUpcomingEvents = useCallback(async () => {\n    try {\n      setLoadingEvents(true);\n      const data = await api.events.getUpcomingEvents(3);\n\n      if (data && data.length > 0) {\n        setUpcomingEvents(data);\n      } else {\n        // Use fallback events if no database events\n        setUpcomingEvents(fallbackEvents);\n      }\n    } catch (error) {\n      console.error(\"Error fetching upcoming events:\", error);\n      // Use fallback events on error\n      setUpcomingEvents(fallbackEvents);\n    } finally {\n      setLoadingEvents(false);\n    }\n  }, [language]);\n\n  useEffect(() => {\n    fetchUpcomingEvents();\n  }, [fetchUpcomingEvents]);\n\n  // Slides for the image slider with new church images\n  const sliderContent = [\n    {\n      image: \"/images/gallery/church-procession-1.jpg\",\n      title:\n        language === \"en\"\n          ? \"Welcome to Our Church\"\n          : \"ወደ ቤተክርስቲያናችን እንኳን ደህና መጡ\",\n      content:\n        language === \"en\"\n          ? \"Debre Bisrat Dagimawi Kulibi St.Gabriel Ethiopian Orthodox Tewahedo Church\"\n          : \"ደብረ ብሥራት ዳግማዊ ቁልቢ ቅዱስ ገብርኤል ቤተክርስቲያን\",\n    },\n    {\n      image: \"/images/gallery/church-ceremony-new.jpg\",\n      title: language === \"en\" ? \"Sacred Ceremony\" : \"ቅዱስ ሥርዓት\",\n      content:\n        language === \"en\"\n          ? \"Celebrating our faith through traditional Orthodox ceremonies\"\n          : \"በባህላዊ ኦርቶዶክስ ሥርዓቶች እምነታችንን እናከብራለን\",\n    },\n    {\n      image: \"/images/gallery/church-celebration.jpg\",\n      title: language === \"en\" ? \"Community Celebration\" : \"የማህበረሰብ በዓል\",\n      content:\n        language === \"en\"\n          ? \"United in faith, celebrating God's blessings together\"\n          : \"በእምነት አንድ ሆነን የእግዚአብሔርን በረከት በአንድነት እናከብራለን\",\n    },\n    {\n      image: \"/images/gallery/church-gathering.jpg\",\n      title: language === \"en\" ? \"Faithful Gathering\" : \"የምእመናን ስብሰባ\",\n      content:\n        language === \"en\"\n          ? \"Our community comes together in worship and fellowship\"\n          : \"ማህበረሰባችን በአምልኮ እና በህብረት ይሰበሰባል\",\n    },\n    {\n      image: \"/images/gallery/timket.jpg\",\n      title: language === \"en\" ? \"Timket Celebration\" : \"የጥምቀት በዓል\",\n      content:\n        language === \"en\"\n          ? \"Celebrating the baptism of Jesus Christ in the Jordan River\"\n          : \"የኢየሱስ ክርስቶስ በዮርዳኖስ ወንዝ ጥምቀትን የምናከብርበት\",\n    },\n  ];\n\n  return (\n    <Layout>\n      <div className=\"container mx-auto px-4 py-6 md:py-8\">\n        {/* Enhanced Image Slider Section */}\n        <section className=\"mb-16 lg:mb-20\">\n          <div className=\"animate-slide-up\">\n            <ImageSlider slides={sliderContent} />\n          </div>\n        </section>\n\n        {/* Enhanced Two Column Section for Events and Donation */}\n        <section className=\"py-20 lg:py-24\">\n          <div className=\"container mx-auto max-w-7xl\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-serif text-church-burgundy mb-4 animate-slide-up\">\n                {language === \"en\" ? \"Stay Connected\" : \"ተገናኙ\"}\n              </h2>\n              <div className=\"w-24 h-1 bg-gradient-to-r from-transparent via-church-gold to-transparent mx-auto mb-6\"></div>\n              <p className=\"text-lg text-gray-600 max-w-2xl mx-auto animate-slide-up\">\n                {language === \"en\"\n                  ? \"Discover upcoming events and support our mission through your generous contributions.\"\n                  : \"የሚመጡ ዝግጅቶችን ያግኙ እና በልግስ አስተዋፅዖዎ ተልዕኮአችንን ይደግፉ።\"}\n              </p>\n            </div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-10 lg:gap-16\">\n              {/* Enhanced Upcoming Events Column */}\n              <div\n                className=\"eth-card animate-slide-up\"\n                style={{ animationDelay: \"0.2s\" }}\n              >\n                <div className=\"bg-gradient-to-r from-church-burgundy to-church-burgundy/90 text-white p-6 flex items-center\">\n                  <Calendar size={28} className=\"text-church-gold mr-3\" />\n                  <h2 className=\"text-2xl lg:text-3xl font-serif font-bold\">\n                    {t(\"upcoming_events\")}\n                  </h2>\n                </div>\n                <div className=\"p-6 lg:p-8\">\n                  {loadingEvents ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, index) => (\n                        <div\n                          key={index}\n                          className=\"border-b border-church-gold/30 pb-3 last:border-0 flex items-start animate-pulse\"\n                        >\n                          <div className=\"flex-1\">\n                            <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                            <div className=\"h-5 bg-gray-200 rounded w-48\"></div>\n                          </div>\n                          <div className=\"w-20 h-20 bg-gray-200 rounded-md ml-3 flex-shrink-0\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <ul className=\"space-y-4\">\n                      {upcomingEvents.map((event) => (\n                        <li\n                          key={event.id}\n                          className=\"border-b border-church-gold/30 pb-3 last:border-0 flex items-start\"\n                        >\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-church-burgundy font-semibold\">\n                              {format(\n                                new Date(event.event_date),\n                                \"MMMM d, yyyy\",\n                              )}\n                              {event.event_time && (\n                                <span className=\"ml-2 text-xs\">\n                                  at {event.event_time}\n                                </span>\n                              )}\n                            </p>\n                            <p className=\"text-lg\">{event.title}</p>\n                            {event.location && (\n                              <p className=\"text-sm text-gray-600 mt-1\">\n                                {event.location}\n                              </p>\n                            )}\n                          </div>\n                          {(event.image_url ||\n                            \"/images/gallery/church-service.jpg\") && (\n                            <div className=\"w-20 h-20 rounded-md overflow-hidden ml-3 flex-shrink-0\">\n                              <img\n                                src={\n                                  event.image_url ||\n                                  \"/images/gallery/church-service.jpg\"\n                                }\n                                alt={event.title}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n                  <div className=\"mt-6\">\n                    <Link to=\"/events\">\n                      <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90 text-white font-semibold\">\n                        {t(\"view all\")} →\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n\n              {/* Enhanced Donation Column */}\n              <div\n                className=\"eth-card animate-slide-up\"\n                style={{ animationDelay: \"0.4s\" }}\n              >\n                <div className=\"bg-gradient-to-r from-church-burgundy to-church-burgundy/90 text-white p-6 flex items-center\">\n                  <DollarSign size={28} className=\"text-church-gold mr-3\" />\n                  <h2 className=\"text-2xl lg:text-3xl font-serif font-bold\">\n                    {t(\"support_our_church\")}\n                  </h2>\n                </div>\n                <div className=\"p-6 lg:p-8\">\n                  <p className=\"mb-6\">\n                    {language === \"en\"\n                      ? \"Your generous support helps us maintain our church and community programs. Consider making a donation today.\"\n                      : \"የእርስዎ ገንዘባዊ ድጋፍ ቤተ ክርስቲያናችንንና የማህበረሰብ ፕሮግራሞቻችንን እንድንጠብቅ ይረዳናል። ዛሬ ለመለገስ ይፈልጋሉ?\"}\n                  </p>\n\n                  <div className=\"flex flex-col space-y-4\">\n                    <Link to=\"/donation\">\n                      <Button className=\"w-full bg-church-gold hover:bg-church-gold/90 text-church-burgundy font-semibold\">\n                        {t(\"donate_now\")}\n                      </Button>\n                    </Link>\n\n                    <Link\n                      to=\"/donation\"\n                      className=\"text-church-burgundy hover:text-church-gold transition-colors text-center\"\n                    ></Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Enhanced Wisdom Section with Sliding Wisdoms */}\n        <WisdomSlider language={language} />\n      </div>\n    </Layout>\n  );\n};\n\nexport default Home;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/MembershipRegistration.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7440,7443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7440,7443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addChild' is assigned a value but never used.","line":281,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":281,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'removeChild' is assigned a value but never used.","line":285,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":285,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updateChild' is assigned a value but never used.","line":289,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":289,"endColumn":20}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type FC, useState, useEffect } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport {\n  CheckCircle,\n  User,\n  CreditCard,\n  FileText,\n  AlertCircle,\n  Phone,\n  Mail,\n  MapPin,\n  Calendar,\n  Users,\n  Heart,\n} from \"lucide-react\";\n\ninterface FormData {\n  // Registration Date\n  registrationDate: string;\n\n  // Personal Information\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  baptismalName: string;\n  email: string;\n  phone: string;\n  dateOfBirth: string;\n  gender: string;\n\n  // Address Information\n  streetAddress: string;\n  aptSuiteBldg: string;\n  city: string;\n  stateProvinceRegion: string;\n  postalZipCode: string;\n  country: string;\n\n  // Spouse Information\n  spouse: string;\n  spouseBaptismalName: string;\n  spousePhone: string;\n  spouseEmail: string;\n\n  // Children Information\n  child1FirstName: string;\n  child1MiddleName: string;\n  child1LastName: string;\n  child1DateOfBirth: string;\n  child2FirstName: string;\n  child2MiddleName: string;\n  child2LastName: string;\n  child2DateOfBirth: string;\n\n  // Membership Information\n  membershipType: string;\n  previousMember: boolean;\n  previousChurch: string;\n  baptized: boolean;\n  baptismDate: string;\n\n  // Family Information\n  maritalStatus: string;\n  children: Array<{ name: string; age: string }>;\n\n  // Contact Preferences\n  preferredLanguage: string;\n  contactMethod: string;\n  emailUpdates: boolean;\n  smsUpdates: boolean;\n\n  // Ministry Interests\n  ministryInterests: string[];\n  volunteerInterests: string[];\n  skills: string;\n\n  // Emergency Contact\n  emergencyName: string;\n  emergencyPhone: string;\n  emergencyRelation: string;\n\n  // Additional Information\n  howDidYouHear: string;\n  additionalNotes: string;\n  agreeToTerms: boolean;\n  agreeToPhotos: boolean;\n}\n\nconst MembershipRegistration: FC = () => {\n  const { t, language } = useLanguage();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [children, setChildren] = useState<\n    Array<{ name: string; age: string }>\n  >([{ name: \"\", age: \"\" }]);\n\n  const [formData, setFormData] = useState<FormData>({\n    registrationDate: new Date().toISOString().split(\"T\")[0],\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    baptismalName: \"\",\n    email: \"\",\n    phone: \"\",\n    dateOfBirth: \"\",\n    gender: \"\",\n    streetAddress: \"\",\n    aptSuiteBldg: \"\",\n    city: \"\",\n    stateProvinceRegion: \"\",\n    postalZipCode: \"\",\n    country: \"United States\",\n    spouse: \"\",\n    spouseBaptismalName: \"\",\n    spousePhone: \"\",\n    spouseEmail: \"\",\n    child1FirstName: \"\",\n    child1MiddleName: \"\",\n    child1LastName: \"\",\n    child1DateOfBirth: \"\",\n    child2FirstName: \"\",\n    child2MiddleName: \"\",\n    child2LastName: \"\",\n    child2DateOfBirth: \"\",\n    membershipType: \"regular\",\n    previousMember: false,\n    previousChurch: \"\",\n    baptized: false,\n    baptismDate: \"\",\n    maritalStatus: \"single\",\n    children: [],\n    preferredLanguage: \"english\",\n    contactMethod: \"email\",\n    emailUpdates: true,\n    smsUpdates: false,\n    ministryInterests: [],\n    volunteerInterests: [],\n    skills: \"\",\n    emergencyName: \"\",\n    emergencyPhone: \"\",\n    emergencyRelation: \"\",\n    howDidYouHear: \"\",\n    additionalNotes: \"\",\n    agreeToTerms: false,\n    agreeToPhotos: false,\n  });\n\n  const totalSteps = 5;\n  const progressPercentage = (currentStep / totalSteps) * 100;\n\n  const ministryOptions = [\n    \"Sunday School\",\n    \"Youth Ministry\",\n    \"Music Ministry\",\n    \"Prayer Ministry\",\n    \"Outreach Ministry\",\n    \"Women's Ministry\",\n    \"Men's Ministry\",\n    \"Children's Ministry\",\n    \"Hospitality Ministry\",\n    \"Media Ministry\",\n  ];\n\n  const volunteerOptions = [\n    \"Event Planning\",\n    \"Cleaning & Maintenance\",\n    \"Food Service\",\n    \"Transportation\",\n    \"Translation Services\",\n    \"Technical Support\",\n    \"Administrative Support\",\n    \"Fundraising\",\n    \"Community Outreach\",\n    \"Teaching\",\n  ];\n\n  const validateStep = (step: number): boolean => {\n    const errors: Record<string, string> = {};\n\n    switch (step) {\n      case 1:\n        if (!formData.firstName.trim())\n          errors.firstName = \"First name is required\";\n        if (!formData.lastName.trim())\n          errors.lastName = \"Last name is required\";\n        if (!formData.email.trim()) errors.email = \"Email is required\";\n        if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email))\n          errors.email = \"Invalid email format\";\n        if (!formData.phone.trim()) errors.phone = \"Phone number is required\";\n        if (!formData.dateOfBirth)\n          errors.dateOfBirth = \"Date of birth is required\";\n        if (!formData.gender) errors.gender = \"Gender is required\";\n        break;\n      case 2:\n        if (!formData.streetAddress.trim())\n          errors.streetAddress = \"Street address is required\";\n        if (!formData.city.trim()) errors.city = \"City is required\";\n        if (!formData.stateProvinceRegion.trim())\n          errors.stateProvinceRegion = \"State/Province/Region is required\";\n        if (!formData.postalZipCode.trim())\n          errors.postalZipCode = \"Postal/ZIP code is required\";\n        break;\n      case 3:\n        if (!formData.membershipType)\n          errors.membershipType = \"Membership type is required\";\n        if (formData.previousMember && !formData.previousChurch.trim()) {\n          errors.previousChurch = \"Previous church name is required\";\n        }\n        if (formData.baptized && !formData.baptismDate) {\n          errors.baptismDate = \"Baptism date is required\";\n        }\n        break;\n      case 4:\n        if (!formData.emergencyName.trim())\n          errors.emergencyName = \"Emergency contact name is required\";\n        if (!formData.emergencyPhone.trim())\n          errors.emergencyPhone = \"Emergency contact phone is required\";\n        if (!formData.emergencyRelation.trim())\n          errors.emergencyRelation = \"Emergency contact relation is required\";\n        break;\n      case 5:\n        if (!formData.agreeToTerms)\n          errors.agreeToTerms = \"You must agree to the terms and conditions\";\n        break;\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep((prev) => Math.min(prev + 1, totalSteps));\n    }\n  };\n\n  const handlePrevious = () => {\n    setCurrentStep((prev) => Math.max(prev - 1, 1));\n  };\n\n  const handleInputChange = (field: keyof FormData, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (formErrors[field]) {\n      setFormErrors((prev) => ({ ...prev, [field]: \"\" }));\n    }\n  };\n\n  const handleArrayChange = (field: keyof FormData, values: string[]) => {\n    setFormData((prev) => ({ ...prev, [field]: values }));\n  };\n\n  const addChild = () => {\n    setChildren((prev) => [...prev, { name: \"\", age: \"\" }]);\n  };\n\n  const removeChild = (index: number) => {\n    setChildren((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  const updateChild = (index: number, field: \"name\" | \"age\", value: string) => {\n    setChildren((prev) =>\n      prev.map((child, i) =>\n        i === index ? { ...child, [field]: value } : child,\n      ),\n    );\n  };\n\n  useEffect(() => {\n    setFormData((prev) => ({ ...prev, children }));\n  }, [children]);\n\n  const handleSubmit = async () => {\n    if (!validateStep(currentStep)) return;\n\n    setIsSubmitting(true);\n\n    try {\n      // Create member record\n      const { data: memberData, error: memberError } = await supabase\n        .from(\"members\")\n        .insert([\n          {\n            full_name: `${formData.firstName} ${formData.middleName ? formData.middleName + \" \" : \"\"}${formData.lastName}`,\n            email: formData.email,\n            phone: formData.phone,\n            address: `${formData.streetAddress}${formData.aptSuiteBldg ? \", \" + formData.aptSuiteBldg : \"\"}, ${formData.city}, ${formData.stateProvinceRegion} ${formData.postalZipCode}`,\n            membership_type: formData.membershipType,\n            membership_status: \"pending\",\n            join_date: new Date().toISOString(),\n            registration_date: formData.registrationDate,\n            first_name: formData.firstName,\n            middle_name: formData.middleName || null,\n            last_name: formData.lastName,\n            baptismal_name: formData.baptismalName || null,\n            street_address: formData.streetAddress,\n            apt_suite_bldg: formData.aptSuiteBldg || null,\n            city: formData.city,\n            state_province_region: formData.stateProvinceRegion,\n            postal_zip_code: formData.postalZipCode,\n            country: formData.country,\n            date_of_birth: formData.dateOfBirth,\n            gender: formData.gender,\n            marital_status: formData.maritalStatus,\n            spouse_name: formData.spouse || null,\n            spouse_baptismal_name: formData.spouseBaptismalName || null,\n            spouse_phone: formData.spousePhone || null,\n            spouse_email: formData.spouseEmail || null,\n            child1_first_name: formData.child1FirstName || null,\n            child1_middle_name: formData.child1MiddleName || null,\n            child1_last_name: formData.child1LastName || null,\n            child1_date_of_birth: formData.child1DateOfBirth || null,\n            child2_first_name: formData.child2FirstName || null,\n            child2_middle_name: formData.child2MiddleName || null,\n            child2_last_name: formData.child2LastName || null,\n            child2_date_of_birth: formData.child2DateOfBirth || null,\n            emergency_contact_name: formData.emergencyName,\n            emergency_contact_phone: formData.emergencyPhone,\n            emergency_contact_relation: formData.emergencyRelation,\n            preferred_language: formData.preferredLanguage,\n            ministry_interests: formData.ministryInterests,\n            volunteer_interests: formData.volunteerInterests,\n            skills: formData.skills || null,\n            how_did_you_hear: formData.howDidYouHear || null,\n            additional_notes: formData.additionalNotes || null,\n            baptized: formData.baptized,\n            baptism_date: formData.baptismDate || null,\n            previous_member: formData.previousMember,\n            previous_church: formData.previousChurch || null,\n            children: formData.children.filter((child) => child.name.trim()),\n            email_updates: formData.emailUpdates,\n            sms_updates: formData.smsUpdates,\n            photo_consent: formData.agreeToPhotos,\n          },\n        ])\n        .select()\n        .single();\n\n      if (memberError) {\n        throw memberError;\n      }\n\n      // Determine membership fee based on type\n      const membershipFees = {\n        regular: \"100\",\n        student: \"50\",\n        senior: \"75\",\n        family: \"200\",\n      };\n      const membershipFee =\n        membershipFees[\n          formData.membershipType as keyof typeof membershipFees\n        ] || \"100\";\n\n      // Create Stripe checkout session using the existing edge function\n      const checkoutData = {\n        amount: membershipFee,\n        donationType: \"one_time\",\n        purpose: \"membership_fee\",\n        email: formData.email,\n        name: `${formData.firstName} ${formData.middleName ? formData.middleName + \" \" : \"\"}${formData.lastName}`,\n        address: `${formData.streetAddress}${formData.aptSuiteBldg ? \", \" + formData.aptSuiteBldg : \"\"}, ${formData.city}, ${formData.stateProvinceRegion} ${formData.postalZipCode}`,\n        memberId: memberData.id,\n        membershipType: formData.membershipType,\n      };\n\n      console.log(\"Invoking create-checkout function with data:\", checkoutData);\n\n      const response = await supabase.functions.invoke(\"create-checkout\", {\n        body: checkoutData,\n      });\n\n      console.log(\"Function response:\", response);\n\n      if (response.error) {\n        console.error(\"Function error:\", response.error);\n        throw new Error(\n          `Payment initiation failed: ${response.error.message || \"Unknown error\"}`,\n        );\n      }\n\n      if (!response.data?.url) {\n        console.error(\"No checkout URL in response:\", response.data);\n        throw new Error(\"No checkout URL received\");\n      }\n\n      // Redirect to Stripe checkout\n      console.log(\"Redirecting to checkout URL:\", response.data.url);\n      window.location.href = response.data.url;\n    } catch (error) {\n      console.error(\"Membership registration error:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Registration Error\",\n        description:\n          \"There was an error processing your membership registration. Please try again.\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Calendar className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">Personal Information</h3>\n            </div>\n\n            {/* Registration Date */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"registrationDate\">Date *</Label>\n              <Input\n                id=\"registrationDate\"\n                type=\"date\"\n                value={formData.registrationDate}\n                onChange={(e) =>\n                  handleInputChange(\"registrationDate\", e.target.value)\n                }\n                className=\"bg-gray-50\"\n                readOnly\n              />\n            </div>\n\n            {/* Name Fields */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) =>\n                    handleInputChange(\"firstName\", e.target.value)\n                  }\n                  className={formErrors.firstName ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.firstName && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.firstName}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"middleName\">Middle Name</Label>\n                <Input\n                  id=\"middleName\"\n                  value={formData.middleName}\n                  onChange={(e) =>\n                    handleInputChange(\"middleName\", e.target.value)\n                  }\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) =>\n                    handleInputChange(\"lastName\", e.target.value)\n                  }\n                  className={formErrors.lastName ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.lastName && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.lastName}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Baptismal Name */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"baptismalName\">Baptismal Name</Label>\n              <Input\n                id=\"baptismalName\"\n                value={formData.baptismalName}\n                onChange={(e) =>\n                  handleInputChange(\"baptismalName\", e.target.value)\n                }\n              />\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone *</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                  className={formErrors.phone ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.phone && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.phone}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                  className={formErrors.email ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.email && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.email}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateOfBirth\">Date of Birth *</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) =>\n                    handleInputChange(\"dateOfBirth\", e.target.value)\n                  }\n                  className={formErrors.dateOfBirth ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.dateOfBirth && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.dateOfBirth}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Gender *</Label>\n                <RadioGroup\n                  value={formData.gender}\n                  onValueChange={(value) => handleInputChange(\"gender\", value)}\n                  className=\"flex gap-6\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"male\" id=\"male\" />\n                    <Label htmlFor=\"male\">Male</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"female\" id=\"female\" />\n                    <Label htmlFor=\"female\">Female</Label>\n                  </div>\n                </RadioGroup>\n                {formErrors.gender && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.gender}</p>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <MapPin className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">Address Information</h3>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"streetAddress\">Street Address *</Label>\n              <Input\n                id=\"streetAddress\"\n                value={formData.streetAddress}\n                onChange={(e) =>\n                  handleInputChange(\"streetAddress\", e.target.value)\n                }\n                className={formErrors.streetAddress ? \"border-red-500\" : \"\"}\n              />\n              {formErrors.streetAddress && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.streetAddress}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"aptSuiteBldg\">Apt, Suite, Bldg. (optional)</Label>\n              <Input\n                id=\"aptSuiteBldg\"\n                value={formData.aptSuiteBldg}\n                onChange={(e) =>\n                  handleInputChange(\"aptSuiteBldg\", e.target.value)\n                }\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"city\">City *</Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => handleInputChange(\"city\", e.target.value)}\n                  className={formErrors.city ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.city && (\n                  <p className=\"text-red-500 text-sm\">{formErrors.city}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"stateProvinceRegion\">\n                  State/Province/Region *\n                </Label>\n                <Input\n                  id=\"stateProvinceRegion\"\n                  value={formData.stateProvinceRegion}\n                  onChange={(e) =>\n                    handleInputChange(\"stateProvinceRegion\", e.target.value)\n                  }\n                  className={\n                    formErrors.stateProvinceRegion ? \"border-red-500\" : \"\"\n                  }\n                />\n                {formErrors.stateProvinceRegion && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.stateProvinceRegion}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"postalZipCode\">Postal/Zip Code *</Label>\n                <Input\n                  id=\"postalZipCode\"\n                  value={formData.postalZipCode}\n                  onChange={(e) =>\n                    handleInputChange(\"postalZipCode\", e.target.value)\n                  }\n                  className={formErrors.postalZipCode ? \"border-red-500\" : \"\"}\n                />\n                {formErrors.postalZipCode && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.postalZipCode}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"country\">Country</Label>\n                <Select\n                  value={formData.country}\n                  onValueChange={(value) => handleInputChange(\"country\", value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"United States\">United States</SelectItem>\n                    <SelectItem value=\"Canada\">Canada</SelectItem>\n                    <SelectItem value=\"Ethiopia\">Ethiopia</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <FileText className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">\n                Membership & Family Information\n              </h3>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"membershipType\">Membership Type *</Label>\n              <Select\n                value={formData.membershipType}\n                onValueChange={(value) =>\n                  handleInputChange(\"membershipType\", value)\n                }\n              >\n                <SelectTrigger\n                  className={formErrors.membershipType ? \"border-red-500\" : \"\"}\n                >\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"regular\">\n                    Regular Member ($100/year)\n                  </SelectItem>\n                  <SelectItem value=\"student\">\n                    Student Member ($50/year)\n                  </SelectItem>\n                  <SelectItem value=\"senior\">\n                    Senior Member ($75/year)\n                  </SelectItem>\n                  <SelectItem value=\"family\">\n                    Family Member ($200/year)\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n              {formErrors.membershipType && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.membershipType}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"previousMember\"\n                  checked={formData.previousMember}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"previousMember\", checked)\n                  }\n                />\n                <Label htmlFor=\"previousMember\">\n                  I was previously a member of another Orthodox church\n                </Label>\n              </div>\n\n              {formData.previousMember && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"previousChurch\">Previous Church Name *</Label>\n                  <Input\n                    id=\"previousChurch\"\n                    value={formData.previousChurch}\n                    onChange={(e) =>\n                      handleInputChange(\"previousChurch\", e.target.value)\n                    }\n                    className={\n                      formErrors.previousChurch ? \"border-red-500\" : \"\"\n                    }\n                  />\n                  {formErrors.previousChurch && (\n                    <p className=\"text-red-500 text-sm\">\n                      {formErrors.previousChurch}\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"baptized\"\n                  checked={formData.baptized}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"baptized\", checked)\n                  }\n                />\n                <Label htmlFor=\"baptized\">I have been baptized</Label>\n              </div>\n\n              {formData.baptized && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"baptismDate\">Baptism Date *</Label>\n                  <Input\n                    id=\"baptismDate\"\n                    type=\"date\"\n                    value={formData.baptismDate}\n                    onChange={(e) =>\n                      handleInputChange(\"baptismDate\", e.target.value)\n                    }\n                    className={formErrors.baptismDate ? \"border-red-500\" : \"\"}\n                  />\n                  {formErrors.baptismDate && (\n                    <p className=\"text-red-500 text-sm\">\n                      {formErrors.baptismDate}\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              <Label>Marital Status</Label>\n              <RadioGroup\n                value={formData.maritalStatus}\n                onValueChange={(value) =>\n                  handleInputChange(\"maritalStatus\", value)\n                }\n                className=\"grid grid-cols-2 gap-4\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"single\" id=\"single\" />\n                  <Label htmlFor=\"single\">Single</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"married\" id=\"married\" />\n                  <Label htmlFor=\"married\">Married</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"divorced\" id=\"divorced\" />\n                  <Label htmlFor=\"divorced\">Divorced</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"widowed\" id=\"widowed\" />\n                  <Label htmlFor=\"widowed\">Widowed</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {formData.maritalStatus === \"married\" && (\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold text-church-burgundy\">\n                  Spouse Information\n                </h4>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"spouse\">Spouse</Label>\n                    <Input\n                      id=\"spouse\"\n                      value={formData.spouse}\n                      onChange={(e) =>\n                        handleInputChange(\"spouse\", e.target.value)\n                      }\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"spouseBaptismalName\">\n                      Spouse Baptismal Name\n                    </Label>\n                    <Input\n                      id=\"spouseBaptismalName\"\n                      value={formData.spouseBaptismalName}\n                      onChange={(e) =>\n                        handleInputChange(\"spouseBaptismalName\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"spousePhone\">Spouse Phone</Label>\n                    <Input\n                      id=\"spousePhone\"\n                      type=\"tel\"\n                      value={formData.spousePhone}\n                      onChange={(e) =>\n                        handleInputChange(\"spousePhone\", e.target.value)\n                      }\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"spouseEmail\">Spouse Email</Label>\n                    <Input\n                      id=\"spouseEmail\"\n                      type=\"email\"\n                      value={formData.spouseEmail}\n                      onChange={(e) =>\n                        handleInputChange(\"spouseEmail\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-church-burgundy\">\n                Children Information\n              </h4>\n\n              {/* Child 1 */}\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <h5 className=\"font-medium text-gray-700\">Child 1</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child1FirstName\">First Name</Label>\n                    <Input\n                      id=\"child1FirstName\"\n                      value={formData.child1FirstName}\n                      onChange={(e) =>\n                        handleInputChange(\"child1FirstName\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child1MiddleName\">Middle Name</Label>\n                    <Input\n                      id=\"child1MiddleName\"\n                      value={formData.child1MiddleName}\n                      onChange={(e) =>\n                        handleInputChange(\"child1MiddleName\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child1LastName\">Last Name</Label>\n                    <Input\n                      id=\"child1LastName\"\n                      value={formData.child1LastName}\n                      onChange={(e) =>\n                        handleInputChange(\"child1LastName\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"child1DateOfBirth\">Date of Birth</Label>\n                  <Input\n                    id=\"child1DateOfBirth\"\n                    type=\"date\"\n                    value={formData.child1DateOfBirth}\n                    onChange={(e) =>\n                      handleInputChange(\"child1DateOfBirth\", e.target.value)\n                    }\n                  />\n                </div>\n              </div>\n\n              {/* Child 2 */}\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <h5 className=\"font-medium text-gray-700\">Child 2</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child2FirstName\">First Name</Label>\n                    <Input\n                      id=\"child2FirstName\"\n                      value={formData.child2FirstName}\n                      onChange={(e) =>\n                        handleInputChange(\"child2FirstName\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child2MiddleName\">Middle Name</Label>\n                    <Input\n                      id=\"child2MiddleName\"\n                      value={formData.child2MiddleName}\n                      onChange={(e) =>\n                        handleInputChange(\"child2MiddleName\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"child2LastName\">Last Name</Label>\n                    <Input\n                      id=\"child2LastName\"\n                      value={formData.child2LastName}\n                      onChange={(e) =>\n                        handleInputChange(\"child2LastName\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"child2DateOfBirth\">Date of Birth</Label>\n                  <Input\n                    id=\"child2DateOfBirth\"\n                    type=\"date\"\n                    value={formData.child2DateOfBirth}\n                    onChange={(e) =>\n                      handleInputChange(\"child2DateOfBirth\", e.target.value)\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Heart className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">\n                Ministry Interests & Emergency Contact\n              </h3>\n            </div>\n\n            <div className=\"space-y-4\">\n              <Label>Ministry Interests (Select all that apply)</Label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {ministryOptions.map((ministry) => (\n                  <div key={ministry} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={ministry}\n                      checked={formData.ministryInterests.includes(ministry)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          handleArrayChange(\"ministryInterests\", [\n                            ...formData.ministryInterests,\n                            ministry,\n                          ]);\n                        } else {\n                          handleArrayChange(\n                            \"ministryInterests\",\n                            formData.ministryInterests.filter(\n                              (m) => m !== ministry,\n                            ),\n                          );\n                        }\n                      }}\n                    />\n                    <Label htmlFor={ministry} className=\"text-sm\">\n                      {ministry}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <Label>Volunteer Interests (Select all that apply)</Label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {volunteerOptions.map((volunteer) => (\n                  <div key={volunteer} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={volunteer}\n                      checked={formData.volunteerInterests.includes(volunteer)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          handleArrayChange(\"volunteerInterests\", [\n                            ...formData.volunteerInterests,\n                            volunteer,\n                          ]);\n                        } else {\n                          handleArrayChange(\n                            \"volunteerInterests\",\n                            formData.volunteerInterests.filter(\n                              (v) => v !== volunteer,\n                            ),\n                          );\n                        }\n                      }}\n                    />\n                    <Label htmlFor={volunteer} className=\"text-sm\">\n                      {volunteer}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"skills\">Special Skills or Talents</Label>\n              <Textarea\n                id=\"skills\"\n                value={formData.skills}\n                onChange={(e) => handleInputChange(\"skills\", e.target.value)}\n                placeholder=\"Please describe any special skills, talents, or professional expertise you'd like to share...\"\n              />\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-church-burgundy\">\n                Emergency Contact Information\n              </h4>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"emergencyName\">\n                    Emergency Contact Name *\n                  </Label>\n                  <Input\n                    id=\"emergencyName\"\n                    value={formData.emergencyName}\n                    onChange={(e) =>\n                      handleInputChange(\"emergencyName\", e.target.value)\n                    }\n                    className={formErrors.emergencyName ? \"border-red-500\" : \"\"}\n                  />\n                  {formErrors.emergencyName && (\n                    <p className=\"text-red-500 text-sm\">\n                      {formErrors.emergencyName}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"emergencyPhone\">\n                    Emergency Contact Phone *\n                  </Label>\n                  <Input\n                    id=\"emergencyPhone\"\n                    type=\"tel\"\n                    value={formData.emergencyPhone}\n                    onChange={(e) =>\n                      handleInputChange(\"emergencyPhone\", e.target.value)\n                    }\n                    className={\n                      formErrors.emergencyPhone ? \"border-red-500\" : \"\"\n                    }\n                  />\n                  {formErrors.emergencyPhone && (\n                    <p className=\"text-red-500 text-sm\">\n                      {formErrors.emergencyPhone}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"emergencyRelation\">\n                  Relationship to Emergency Contact *\n                </Label>\n                <Input\n                  id=\"emergencyRelation\"\n                  value={formData.emergencyRelation}\n                  onChange={(e) =>\n                    handleInputChange(\"emergencyRelation\", e.target.value)\n                  }\n                  className={\n                    formErrors.emergencyRelation ? \"border-red-500\" : \"\"\n                  }\n                  placeholder=\"e.g., Spouse, Parent, Sibling, Friend\"\n                />\n                {formErrors.emergencyRelation && (\n                  <p className=\"text-red-500 text-sm\">\n                    {formErrors.emergencyRelation}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 5:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <CheckCircle className=\"h-5 w-5 text-church-burgundy\" />\n              <h3 className=\"text-lg font-semibold\">Final Details & Review</h3>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Preferred Language</Label>\n                <RadioGroup\n                  value={formData.preferredLanguage}\n                  onValueChange={(value) =>\n                    handleInputChange(\"preferredLanguage\", value)\n                  }\n                  className=\"flex gap-6\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"english\" id=\"english\" />\n                    <Label htmlFor=\"english\">English</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"amharic\" id=\"amharic\" />\n                    <Label htmlFor=\"amharic\">Amharic</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Preferred Contact Method</Label>\n                <RadioGroup\n                  value={formData.contactMethod}\n                  onValueChange={(value) =>\n                    handleInputChange(\"contactMethod\", value)\n                  }\n                  className=\"flex gap-6\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"email\" id=\"contact-email\" />\n                    <Label htmlFor=\"contact-email\">Email</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"phone\" id=\"contact-phone\" />\n                    <Label htmlFor=\"contact-phone\">Phone</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"emailUpdates\"\n                    checked={formData.emailUpdates}\n                    onCheckedChange={(checked) =>\n                      handleInputChange(\"emailUpdates\", checked)\n                    }\n                  />\n                  <Label htmlFor=\"emailUpdates\">\n                    I would like to receive email updates about church events\n                    and news\n                  </Label>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"smsUpdates\"\n                    checked={formData.smsUpdates}\n                    onCheckedChange={(checked) =>\n                      handleInputChange(\"smsUpdates\", checked)\n                    }\n                  />\n                  <Label htmlFor=\"smsUpdates\">\n                    I would like to receive SMS updates for urgent announcements\n                  </Label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"howDidYouHear\">\n                How did you hear about our church?\n              </Label>\n              <Select\n                value={formData.howDidYouHear}\n                onValueChange={(value) =>\n                  handleInputChange(\"howDidYouHear\", value)\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Please select...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"friend\">\n                    Friend or Family Member\n                  </SelectItem>\n                  <SelectItem value=\"website\">Church Website</SelectItem>\n                  <SelectItem value=\"social-media\">Social Media</SelectItem>\n                  <SelectItem value=\"community-event\">\n                    Community Event\n                  </SelectItem>\n                  <SelectItem value=\"drove-by\">Drove by the Church</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"additionalNotes\">\n                Additional Notes or Comments\n              </Label>\n              <Textarea\n                id=\"additionalNotes\"\n                value={formData.additionalNotes}\n                onChange={(e) =>\n                  handleInputChange(\"additionalNotes\", e.target.value)\n                }\n                placeholder=\"Please share anything else you'd like us to know...\"\n              />\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-2\">\n                <Checkbox\n                  id=\"agreeToTerms\"\n                  checked={formData.agreeToTerms}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"agreeToTerms\", checked)\n                  }\n                  className={formErrors.agreeToTerms ? \"border-red-500\" : \"\"}\n                />\n                <Label\n                  htmlFor=\"agreeToTerms\"\n                  className=\"text-sm leading-relaxed\"\n                >\n                  I agree to the church's terms and conditions, and I understand\n                  that membership requires an annual fee. I commit to\n                  participating in church activities and supporting the church\n                  community. *\n                </Label>\n              </div>\n              {formErrors.agreeToTerms && (\n                <p className=\"text-red-500 text-sm\">\n                  {formErrors.agreeToTerms}\n                </p>\n              )}\n\n              <div className=\"flex items-start space-x-2\">\n                <Checkbox\n                  id=\"agreeToPhotos\"\n                  checked={formData.agreeToPhotos}\n                  onCheckedChange={(checked) =>\n                    handleInputChange(\"agreeToPhotos\", checked)\n                  }\n                />\n                <Label\n                  htmlFor=\"agreeToPhotos\"\n                  className=\"text-sm leading-relaxed\"\n                >\n                  I consent to having my photo taken during church events and\n                  activities for use in church publications, website, and social\n                  media.\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"bg-church-cream p-4 rounded-lg\">\n              <h4 className=\"font-semibold text-church-burgundy mb-2\">\n                Membership Fee\n              </h4>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Annual membership fee:{\" \"}\n                <span className=\"font-semibold\">\n                  $\n                  {formData.membershipType === \"regular\"\n                    ? \"100\"\n                    : formData.membershipType === \"student\"\n                      ? \"50\"\n                      : formData.membershipType === \"senior\"\n                        ? \"75\"\n                        : formData.membershipType === \"family\"\n                          ? \"200\"\n                          : \"100\"}\n                </span>\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                After submitting this form, you will be redirected to a secure\n                payment page to complete your membership registration.\n              </p>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const getStepIcon = (step: number) => {\n    if (step < currentStep) {\n      return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n    } else if (step === currentStep) {\n      return (\n        <div className=\"h-5 w-5 rounded-full bg-church-burgundy text-white flex items-center justify-center text-xs font-bold\">\n          {step}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"h-5 w-5 rounded-full bg-gray-300 text-gray-600 flex items-center justify-center text-xs font-bold\">\n          {step}\n        </div>\n      );\n    }\n  };\n\n  // Amharic translations for membership registration\n  const translations = {\n    en: {\n      title: \"Membership Registration\",\n      description: \"Join our church community by registering as a member\",\n      personal: \"Personal Information\",\n      firstName: \"First Name\",\n      lastName: \"Last Name\",\n      email: \"Email Address\",\n      phone: \"Phone Number\",\n      dateOfBirth: \"Date of Birth\",\n      gender: \"Gender\",\n      male: \"Male\",\n      female: \"Female\",\n      address: \"Address Information\",\n      streetAddress: \"Street Address\",\n      city: \"City\",\n      state: \"State\",\n      zipCode: \"ZIP Code\",\n      country: \"Country\",\n      membershipInfo: \"Membership & Family Information\",\n      membershipType: \"Membership Type\",\n      regularMember: \"Regular Member ($100/year)\",\n      studentMember: \"Student Member ($50/year)\",\n      seniorMember: \"Senior Member ($75/year)\",\n      familyMember: \"Family Member ($200/year)\",\n      previousMember: \"I was previously a member of another Orthodox church\",\n      previousChurch: \"Previous Church Name\",\n      baptized: \"I have been baptized\",\n      baptismDate: \"Baptism Date\",\n      maritalStatus: \"Marital Status\",\n      single: \"Single\",\n      married: \"Married\",\n      divorced: \"Divorced\",\n      widowed: \"Widowed\",\n      spouseName: \"Spouse's Name\",\n      children: \"Children\",\n      addChild: \"Add Child\",\n      childName: \"Child's name\",\n      age: \"Age\",\n      remove: \"Remove\",\n      ministryInterests: \"Ministry Interests & Emergency Contact\",\n      selectMinistries: \"Ministry Interests (Select all that apply)\",\n      volunteerInterests: \"Volunteer Interests (Select all that apply)\",\n      skills: \"Special Skills or Talents\",\n      skillsPlaceholder:\n        \"Please describe any special skills, talents, or professional expertise you'd like to share...\",\n      emergencyContact: \"Emergency Contact Information\",\n      emergencyName: \"Emergency Contact Name\",\n      emergencyPhone: \"Emergency Contact Phone\",\n      emergencyRelation: \"Relationship to Emergency Contact\",\n      emergencyRelationPlaceholder: \"e.g., Spouse, Parent, Sibling, Friend\",\n      finalDetails: \"Final Details & Review\",\n      preferredLanguage: \"Preferred Language\",\n      english: \"English\",\n      amharic: \"Amharic\",\n      contactMethod: \"Preferred Contact Method\",\n      emailUpdates:\n        \"I would like to receive email updates about church events and news\",\n      smsUpdates:\n        \"I would like to receive SMS updates for urgent announcements\",\n      howDidYouHear: \"How did you hear about our church?\",\n      additionalNotes: \"Additional Notes or Comments\",\n      notesPlaceholder: \"Please share anything else you'd like us to know...\",\n      agreeToTerms:\n        \"I agree to the church's terms and conditions, and I understand that membership requires an annual fee. I commit to participating in church activities and supporting the church community.\",\n      agreeToPhotos:\n        \"I consent to having my photo taken during church events and activities for use in church publications, website, and social media.\",\n      membershipFee: \"Membership Fee\",\n      annualFee: \"Annual membership fee: \",\n      paymentRedirect:\n        \"After submitting this form, you will be redirected to a secure payment page to complete your membership registration.\",\n      previous: \"Previous\",\n      next: \"Next\",\n      processing: \"Processing...\",\n      completeRegistration: \"Complete Registration & Pay $100\",\n      personal_step: \"Personal\",\n      address_step: \"Address\",\n      membership_step: \"Membership\",\n      ministry_step: \"Ministry\",\n      review_step: \"Review\",\n    },\n    am: {\n      title: \"የአባልነት ምዝገባ\",\n      description: \"እንደ አባል በመመዝገብ የቤተክርስቲያን ማህበረሰባችንን ይቀላቀሉ\",\n      personal: \"የግል መረጃ\",\n      firstName: \"መጠሪያ ስም\",\n      lastName: \"የአባት ስም\",\n      email: \"የኢሜይል አድራሻ\",\n      phone: \"ስልክ ቁጥር\",\n      dateOfBirth: \"የትውልድ ቀን\",\n      gender: \"ፆታ\",\n      male: \"ወንድ\",\n      female: \"ሴት\",\n      address: \"የአድራሻ መረጃ\",\n      streetAddress: \"የመንገድ አድራሻ\",\n      city: \"ከተማ\",\n      state: \"ግዛት\",\n      zipCode: \"ዚፕ ኮድ\",\n      country: \"ሀገር\",\n      membershipInfo: \"የአባልነት እና የቤተሰብ መረጃ\",\n      membershipType: \"የአባልነት አይነት\",\n      regularMember: \"መደበኛ አባል ($100/አመት)\",\n      studentMember: \"የተማሪ አባል ($50/አመት)\",\n      seniorMember: \"የአዛውንት አባል ($75/አመት)\",\n      familyMember: \"የቤተሰብ አባል ($200/አመት)\",\n      previousMember: \"ከዚህ በፊት የሌላ ኦርቶዶክስ ቤተክርስቲያን አባል ነበርኩ\",\n      previousChurch: \"የቀድሞ ቤተክርስቲያን ስም\",\n      baptized: \"ተጠምቄአለሁ\",\n      baptismDate: \"የጥምቀት ቀን\",\n      maritalStatus: \"የጋብቻ ሁኔታ\",\n      single: \"ያላገባ\",\n      married: \"ያገባ\",\n      divorced: \"የተፋታ\",\n      widowed: \"የትዳር አጋሩ የሞተበት\",\n      spouseName: \"የትዳር አጋር ስም\",\n      children: \"ልጆች\",\n      addChild: \"ልጅ ጨምር\",\n      childName: \"የልጅ ስም\",\n      age: \"እድሜ\",\n      remove: \"አስወግድ\",\n      ministryInterests: \"የአገልግሎት ፍላጎቶች እና የአደጋ ጊዜ ተጠሪ\",\n      selectMinistries: \"የአገልግሎት ፍላጎቶች (የሚመለከትዎትን ሁሉ ይምረጡ)\",\n      volunteerInterests: \"የበጎ ፈቃድ ፍላጎቶች (የሚመለከትዎትን ሁሉ ይምረጡ)\",\n      skills: \"ልዩ ችሎታዎች ወይም ተሰጥኦዎች\",\n      skillsPlaceholder:\n        \"እባክዎን ማካፈል የሚፈልጓቸውን ልዩ ችሎታዎች፣ ተሰጥኦዎች ወይም ሙያዊ ብቃቶች ይግለጹ...\",\n      emergencyContact: \"የአደጋ ጊዜ ተጠሪ መረጃ\",\n      emergencyName: \"የአደጋ ጊዜ ተጠሪ ስም\",\n      emergencyPhone: \"የአደጋ ጊዜ ተጠሪ ስልክ\",\n      emergencyRelation: \"ከአደጋ ጊዜ ተጠሪ ጋር ያለዎት ግንኙነት\",\n      emergencyRelationPlaceholder: \"ለምሳሌ፣ ባል/ሚስት፣ ወላጅ፣ ወንድም/እህት፣ ጓደኛ\",\n      finalDetails: \"የመጨረሻ ዝርዝሮች እና ግምገማ\",\n      preferredLanguage: \"የመረጡት ቋንቋ\",\n      english: \"እንግሊዝኛ\",\n      amharic: \"አማርኛ\",\n      contactMethod: \"የመረጡት የመገናኛ ዘዴ\",\n      emailUpdates: \"ስለ ቤተክርስቲያን ዝግጅቶች እና ዜናዎች በኢሜይል መረጃዎችን መቀበል እፈልጋለሁ\",\n      smsUpdates: \"ለአስቸኳይ ማስታወቂያዎች በኤስኤምኤስ መረጃዎችን መቀበል እፈልጋለሁ\",\n      howDidYouHear: \"ስለ ቤተክርስቲያናችን እንዴት ሰሙ?\",\n      additionalNotes: \"ተጨማሪ ማስታወሻዎች ወይም አስተያየቶች\",\n      notesPlaceholder: \"እባክዎን እኛ እንድናውቅ የሚፈልጉትን ማንኛውንም ነገር ያካፍሉ...\",\n      agreeToTerms:\n        \"የቤተክርስቲያኑን ውሎች እና ሁኔታዎች እስማማለሁ፣ እና አባልነት አመታዊ ክፍያ እንደሚጠይቅ ተረድቻለሁ። በቤተክርስቲያን እንቅስቃሴዎች ለመሳተፍ እና የቤተክርስቲያን ማህበረሰብን ለመደገፍ እቃጠራለሁ።\",\n      agreeToPhotos:\n        \"በቤተክርስቲያን ዝግጅቶች እና እንቅስቃሴዎች ወቅት ፎቶዬ እንዲነሳ እና በቤተክርስቲያን ህትመቶች፣ ድህረ ገጽ እና ማህበራዊ ሚዲያ ላይ እንዲውል ፈቃዴን እሰጣለሁ።\",\n      membershipFee: \"የአባልነት ክፍያ\",\n      annualFee: \"አመታዊ የአባልነት ክፍያ: \",\n      paymentRedirect:\n        \"ይህንን ቅጽ ካስገቡ በኋላ፣ የአባልነት ምዝገባዎን ለማጠናቀቅ ወደ ደህንነቱ የተጠበቀ የክፍያ ገጽ ይዞረዛሉ።\",\n      previous: \"ቀዳሚ\",\n      next: \"ቀጣይ\",\n      processing: \"በሂደት ላይ...\",\n      completeRegistration: \"ምዝገባን አጠናቅቅ እና $100 ክፈል\",\n      personal_step: \"የግል\",\n      address_step: \"አድራሻ\",\n      membership_step: \"አባልነት\",\n      ministry_step: \"አገልግሎት\",\n      review_step: \"ግምገማ\",\n    },\n  };\n\n  // Get translations based on current language\n  const getTranslation = (key: string): string => {\n    if (\n      language === \"am\" &&\n      translations.am[key as keyof typeof translations.am]\n    ) {\n      return translations.am[key as keyof typeof translations.am];\n    }\n    return translations.en[key as keyof typeof translations.en];\n  };\n\n  return (\n    <Layout>\n      <div className=\"container mx-auto p-4 max-w-4xl\">\n        <Card className=\"bg-white shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl text-church-burgundy\">\n              {t(\"membership.title\") || getTranslation(\"title\")}\n            </CardTitle>\n            <CardDescription className=\"text-lg\">\n              {t(\"membership.description\") || getTranslation(\"description\")}\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            {/* Progress Bar */}\n            <div className=\"mb-8\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(1)}\n                  <span className=\"text-sm font-medium\">\n                    {getTranslation(\"personal_step\")}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(2)}\n                  <span className=\"text-sm font-medium\">\n                    {getTranslation(\"address_step\")}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(3)}\n                  <span className=\"text-sm font-medium\">\n                    {getTranslation(\"membership_step\")}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(4)}\n                  <span className=\"text-sm font-medium\">\n                    {getTranslation(\"ministry_step\")}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getStepIcon(5)}\n                  <span className=\"text-sm font-medium\">\n                    {getTranslation(\"review_step\")}\n                  </span>\n                </div>\n              </div>\n              <Progress value={progressPercentage} className=\"h-2\" />\n              <p className=\"text-sm text-gray-600 mt-2 text-center\">\n                Step {currentStep} of {totalSteps}\n              </p>\n            </div>\n\n            {/* Step Content */}\n            <div className=\"min-h-[400px]\">{renderStepContent()}</div>\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between mt-8 pt-6 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrevious}\n                disabled={currentStep === 1}\n              >\n                {getTranslation(\"previous\")}\n              </Button>\n\n              {currentStep < totalSteps ? (\n                <Button\n                  type=\"button\"\n                  onClick={handleNext}\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  {getTranslation(\"next\")}\n                </Button>\n              ) : (\n                <Button\n                  type=\"button\"\n                  onClick={handleSubmit}\n                  disabled={isSubmitting}\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      {getTranslation(\"processing\")}\n                    </>\n                  ) : (\n                    <>\n                      <CreditCard className=\"h-4 w-4 mr-2\" />\n                      Complete Registration & Pay $\n                      {formData.membershipType === \"regular\"\n                        ? \"100\"\n                        : formData.membershipType === \"student\"\n                          ? \"50\"\n                          : formData.membershipType === \"senior\"\n                            ? \"75\"\n                            : formData.membershipType === \"family\"\n                              ? \"200\"\n                              : \"100\"}\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n};\n\nexport default MembershipRegistration;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/MembershipSuccess.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is assigned a value but never used.","line":21,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useSearchParams, Link } from \"react-router-dom\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { CheckCircle, Loader2, ExternalLink } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ntype SessionData = {\n  amount: string;\n  formattedAmount: string;\n  email: string;\n  name: string;\n  membershipType: string;\n  date: string;\n};\n\nconst MembershipSuccess: React.FC = () => {\n  const { t } = useLanguage();\n  const [searchParams] = useSearchParams();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(true);\n  const [sessionData, setSessionData] = useState<SessionData | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchSessionData = async () => {\n      try {\n        const sessionId = searchParams.get(\"session_id\");\n\n        if (!sessionId) {\n          setError(\n            \"Session ID not found. Unable to retrieve membership details.\",\n          );\n          setIsLoading(false);\n          return;\n        }\n\n        // Call the get-session function to get session details\n        const { data, error: sessionError } = await supabase.functions.invoke(\n          \"get-session\",\n          {\n            body: { session_id: sessionId },\n          },\n        );\n\n        if (sessionError) {\n          throw new Error(\n            sessionError.message || \"Failed to retrieve session data\",\n          );\n        }\n\n        if (!data || !data.session) {\n          throw new Error(\"Failed to retrieve session data\");\n        }\n\n        const session = data.session;\n\n        // Extract the payment amount and details\n        let amountInCents = 0;\n        let email = \"\";\n        let name = \"\";\n        let membershipType = \"regular\";\n\n        if (session.mode === \"payment\" && session.payment_intent) {\n          amountInCents = session.amount_total;\n        }\n\n        // Get customer details and metadata\n        email =\n          session.customer_details?.email || session.metadata?.email || \"\";\n        name = session.metadata?.name || session.customer_details?.name || \"\";\n        membershipType = session.metadata?.membershipType || \"regular\";\n\n        // Calculate the amount in dollars\n        const amount = (amountInCents / 100).toString();\n\n        // Format the amount with currency\n        const formattedAmount = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(amountInCents / 100);\n\n        // Set the session data\n        const sessionDetails: SessionData = {\n          amount,\n          formattedAmount,\n          email,\n          name,\n          membershipType,\n          date: new Date().toLocaleDateString(),\n        };\n\n        setSessionData(sessionDetails);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching session data:\", error);\n        setError(\n          \"Failed to process your membership information. Please contact support.\",\n        );\n        setIsLoading(false);\n\n        toast({\n          title: \"Error\",\n          description:\n            \"There was an issue retrieving your membership information.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    fetchSessionData();\n  }, [searchParams, toast]);\n\n  if (isLoading) {\n    return (\n      <Layout>\n        <div className=\"py-16 px-6\">\n          <div className=\"container mx-auto max-w-2xl text-center\">\n            <Loader2 className=\"h-12 w-12 animate-spin mx-auto text-church-burgundy\" />\n            <p className=\"mt-4 text-lg\">\n              Processing your membership registration...\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (error) {\n    return (\n      <Layout>\n        <div className=\"py-16 px-6\">\n          <div className=\"container mx-auto max-w-2xl\">\n            <Card className=\"border-red-300\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <h2 className=\"text-red-700 text-xl font-semibold mb-2\">\n                    An Error Occurred\n                  </h2>\n                  <p className=\"text-red-600 mb-4\">{error}</p>\n                  <p className=\"mb-4\">\n                    If you believe your membership was processed, please contact\n                    us for verification.\n                  </p>\n                  <Button\n                    asChild\n                    className=\"bg-church-burgundy hover:bg-church-burgundy/90 text-white\"\n                  >\n                    <Link to=\"/\">Return to Home</Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-gradient-to-br from-church-cream to-white py-12\">\n        <div className=\"container mx-auto max-w-2xl px-4\">\n          <Card className=\"shadow-xl border-0 overflow-hidden\">\n            {/* Header with Ethiopian Orthodox Icon */}\n            <div className=\"bg-white text-center py-8\">\n              <div className=\"w-32 h-32 mx-auto mb-6 rounded-full overflow-hidden border-4 border-church-gold shadow-lg\">\n                <img\n                  src=\"/images/religious/crucifixion.jpg\"\n                  alt=\"Ethiopian Orthodox Icon\"\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    e.currentTarget.src =\n                      \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&q=80\";\n                  }}\n                />\n              </div>\n              <h1 className=\"text-3xl font-bold text-church-burgundy mb-2\">\n                Membership Registration Receipt\n              </h1>\n            </div>\n\n            <CardContent className=\"p-8 bg-white\">\n              <div className=\"space-y-6\">\n                {/* Personalized Greeting */}\n                <div className=\"text-left\">\n                  <p className=\"text-lg font-medium text-gray-800 mb-4\">\n                    Dear{\" \"}\n                    {sessionData?.name ||\n                      (sessionData?.email\n                        ? sessionData.email.split(\"@\")[0]\n                        : \"New Member\")}\n                    !\n                  </p>\n                  <p className=\"text-gray-700 leading-relaxed mb-4\">\n                    Thank you for your membership registration.{\" \"}\n                    <span className=\"text-church-burgundy font-medium\">\n                      እግዚአብሔር ይባርክዎት!\n                    </span>{\" \"}\n                    Your payment has been processed successfully and you are now\n                    officially a member of our church community. Welcome to our\n                    family!\n                  </p>\n                </div>\n\n                {/* Membership Details */}\n                {sessionData && (\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-semibold text-gray-800 mb-3\">\n                      Here are the details of your membership:\n                    </h3>\n\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Member:\n                        </span>\n                        <span className=\"text-gray-600\">\n                          {sessionData.name || sessionData.email}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Membership Type:\n                        </span>\n                        <span className=\"text-gray-600\">\n                          {sessionData.membershipType === \"regular\"\n                            ? \"Regular Member\"\n                            : sessionData.membershipType === \"student\"\n                              ? \"Student Member\"\n                              : sessionData.membershipType === \"senior\"\n                                ? \"Senior Member\"\n                                : sessionData.membershipType === \"family\"\n                                  ? \"Family Member\"\n                                  : \"Regular Member\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Registration Date:\n                        </span>\n                        <span className=\"text-gray-600\">\n                          {sessionData.date}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Annual Fee:\n                        </span>\n                        <span className=\"text-gray-600 font-semibold\">\n                          {sessionData.formattedAmount}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Payment Method:\n                        </span>\n                        <span className=\"text-gray-600\">\n                          Stripe Payment Element\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-700\">\n                          Payment ID:\n                        </span>\n                        <span className=\"text-gray-600 text-xs\">\n                          {Math.floor(Math.random() * 1000)}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4 pt-4 border-t\">\n                      <Button\n                        variant=\"link\"\n                        className=\"text-blue-600 hover:text-blue-800 p-0 h-auto font-normal\"\n                        onClick={() => window.print()}\n                      >\n                        <ExternalLink className=\"w-4 h-4 mr-1\" />\n                        View the receipt in your browser »\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {/* Welcome Message */}\n                <div className=\"bg-church-cream p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-church-burgundy mb-2\">\n                    Welcome to Our Church Family!\n                  </h4>\n                  <p className=\"text-sm text-gray-700\">\n                    As a new member, you'll receive information about upcoming\n                    events, services, and opportunities to get involved in our\n                    community. We look forward to seeing you at our services!\n                  </p>\n                </div>\n\n                {/* Closing */}\n                <div className=\"space-y-4 pt-6\">\n                  <p className=\"text-gray-700\">Sincerely,</p>\n                  <p className=\"text-church-burgundy font-medium\">\n                    ደብረ ብስራት ዳግማዊ ኩሊቢ ቅዱስ ገብርኤል በኢትዮጵያ ኦርቶዶክስ ተዋሕዶ ቤተክርስቲያን\n                  </p>\n                  <p className=\"text-gray-700 font-medium\">\n                    Debre Bisrat Dagimawi Kulibi St.Gabriel Ethiopian Orthodox\n                    Tewahedo Church\n                  </p>\n\n                  <div className=\"text-sm text-gray-600 space-y-1\">\n                    <p className=\"text-blue-600\">6020 Batson Rd</p>\n                    <p className=\"text-blue-600\">Burtonsville, MD 20866</p>\n                  </div>\n                </div>\n\n                {/* Church Logo/Image */}\n                <div className=\"flex justify-center pt-6\">\n                  <div className=\"w-48 h-32 bg-church-burgundy rounded-lg overflow-hidden shadow-md\">\n                    <img\n                      src=\"/images/church-front.jpg\"\n                      alt=\"Church Building\"\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        e.currentTarget.src =\n                          \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&q=80\";\n                      }}\n                    />\n                  </div>\n                </div>\n\n                {/* Action Button */}\n                <div className=\"flex justify-center pt-6\">\n                  <Button\n                    asChild\n                    className=\"bg-church-burgundy hover:bg-church-burgundy/90 text-white px-8 py-3 rounded-lg font-semibold\"\n                  >\n                    <Link to=\"/\">Return to Home</Link>\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default MembershipSuccess;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Sermons.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSermons'. Either include it or remove the dependency array.","line":138,"column":6,"nodeType":"ArrayExpression","endLine":138,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSermons, language]","fix":{"range":[3953,3963],"text":"[fetchSermons, language]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { Play, Pause, Calendar, Book, User, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { format } from \"date-fns\";\nimport { useDataRefresh } from \"@/hooks/useDataRefresh\";\n\ninterface Sermon {\n  id: string;\n  title: string;\n  description: string | null;\n  scripture_reference: string | null;\n  audio_url: string | null;\n  preacher: string | null;\n  sermon_date: string;\n  is_featured: boolean;\n}\n\nconst SermonCard: React.FC<{ sermon: Sermon }> = ({ sermon }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audio, setAudio] = useState<HTMLAudioElement | null>(null);\n  const { language } = useLanguage();\n\n  useEffect(() => {\n    if (sermon.audio_url) {\n      const audioElement = new Audio(sermon.audio_url);\n      setAudio(audioElement);\n\n      audioElement.addEventListener(\"ended\", () => setIsPlaying(false));\n      return () => {\n        audioElement.pause();\n        audioElement.removeEventListener(\"ended\", () => setIsPlaying(false));\n      };\n    }\n  }, [sermon.audio_url]);\n\n  const togglePlay = () => {\n    if (!audio) return;\n\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const formattedDate = sermon.sermon_date\n    ? format(new Date(sermon.sermon_date), \"MMMM d, yyyy\")\n    : \"\";\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-xl font-serif text-church-burgundy mb-2\">\n          {sermon.title}\n        </h3>\n\n        <div className=\"flex items-center text-sm text-gray-600 mb-3 space-x-4\">\n          {sermon.preacher && (\n            <div className=\"flex items-center\">\n              <User size={16} className=\"mr-1\" />\n              <span>{sermon.preacher}</span>\n            </div>\n          )}\n\n          <div className=\"flex items-center\">\n            <Calendar size={16} className=\"mr-1\" />\n            <span>{formattedDate}</span>\n          </div>\n\n          {sermon.scripture_reference && (\n            <div className=\"flex items-center\">\n              <Book size={16} className=\"mr-1\" />\n              <span>{sermon.scripture_reference}</span>\n            </div>\n          )}\n        </div>\n\n        {sermon.description && (\n          <p className=\"text-gray-700 mb-4\">{sermon.description}</p>\n        )}\n\n        {sermon.audio_url && (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center\"\n            onClick={togglePlay}\n          >\n            {isPlaying ? (\n              <>\n                <Pause size={16} className=\"mr-2\" />\n                {language === \"en\" ? \"Pause\" : \"ማቆም\"}\n              </>\n            ) : (\n              <>\n                <Play size={16} className=\"mr-2\" />\n                {language === \"en\" ? \"Listen\" : \"ማዳመጥ\"}\n              </>\n            )}\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Sermons: React.FC = () => {\n  const { language } = useLanguage();\n  const [sermons, setSermons] = useState<Sermon[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchSermons = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await api.sermons.getSermons();\n      setSermons(data || []);\n    } catch (err) {\n      console.error(\"Error fetching sermons:\", err);\n      setError(\n        language === \"en\"\n          ? \"Failed to load sermons. Please try again later.\"\n          : \"ስብከቶችን መጫን አልተቻለም። እባክዎ ቆይተው እንደገና ይሞክሩ።\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSermons();\n  }, [language]);\n\n  // Use enhanced data refresh hook\n  const { manualRefresh, forceSyncData } = useDataRefresh(\n    fetchSermons,\n    3 * 60 * 1000, // Refresh every 3 minutes\n    [language],\n    \"sermons\",\n  );\n\n  const handleManualRefresh = async () => {\n    console.log(\"Manual refresh triggered for sermons\");\n    await manualRefresh();\n    await forceSyncData();\n  };\n\n  return (\n    <Layout>\n      <div className=\"py-12 px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-serif text-church-burgundy mb-4\">\n              {language === \"en\" ? \"Sermons\" : \"ስብከቶች\"}\n            </h1>\n            <p className=\"max-w-2xl mx-auto text-lg mb-4\">\n              {language === \"en\"\n                ? \"Listen to recent sermons from our church services\"\n                : \"ከቤተክርስቲያን አገልግሎቶቻችን የቅርብ ጊዜ ስብከቶችን ያዳምጡ\"}\n            </p>\n            <Button\n              onClick={handleManualRefresh}\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={loading}\n              className=\"inline-flex items-center\"\n            >\n              <RefreshCw\n                className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n              />\n              {language === \"en\" ? \"Refresh Sermons\" : \"ስብከቶች አድስ\"}\n            </Button>\n          </div>\n\n          {loading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-church-burgundy border-r-transparent\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12 text-red-600\">{error}</div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {sermons.length > 0 ? (\n                sermons.map((sermon) => (\n                  <SermonCard key={sermon.id} sermon={sermon} />\n                ))\n              ) : (\n                <div className=\"col-span-full text-center py-12 text-gray-500\">\n                  {language === \"en\"\n                    ? \"No sermons available at the moment.\"\n                    : \"በአሁኑ ጊዜ ምንም ስብከቶች አልተገኙም።\"}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Sermons;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Services.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardFooter' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AspectRatio' is defined but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport {\n  Settings,\n  Calendar,\n  Clock,\n  User,\n  Mail,\n  Phone,\n  CalendarCheck,\n} from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { api } from \"@/integrations/supabase/api\";\n\ninterface ServiceItemProps {\n  title: string;\n  description: string;\n  time: string;\n  imageUrl?: string;\n  requiresAppointment?: boolean;\n}\n\nconst ServiceItem: React.FC<ServiceItemProps> = ({\n  title,\n  description,\n  time,\n  imageUrl,\n  requiresAppointment = false,\n}) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const handleAppointmentSubmit = async (\n    e: React.FormEvent<HTMLFormElement>,\n  ) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get(\"name\") as string;\n    const email = formData.get(\"email\") as string;\n    const phone = formData.get(\"phone\") as string;\n    const date = formData.get(\"date\") as string;\n    const time = formData.get(\"time\") as string;\n    const notes = formData.get(\"notes\") as string;\n\n    try {\n      // Save appointment to database\n      await api.appointments.createAppointment({\n        name,\n        email,\n        phone,\n        service_title: title,\n        requested_date: date,\n        requested_time: time,\n        notes,\n        status: \"pending\",\n      });\n\n      // Show success message\n      toast({\n        title: language === \"en\" ? \"Appointment Request Sent\" : \"የቀጠሮ ጥያቄ ተልኳል\",\n        description:\n          language === \"en\"\n            ? `We've received your request for ${title}. We'll contact you soon to confirm.`\n            : `ለ${title} የቀጠሮ ጥያቄዎን ተቀብለናል። በቅርቡ ለማረጋገጥ እናገኝዎታለን።`,\n      });\n\n      setIsDialogOpen(false);\n      (e.target as HTMLFormElement).reset();\n    } catch (error) {\n      console.error(\"Error submitting appointment:\", error);\n      toast({\n        title: language === \"en\" ? \"Error\" : \"ስህተት\",\n        description:\n          language === \"en\"\n            ? \"Failed to submit appointment request. Please try again.\"\n            : \"የቀጠሮ ጥያቄ ማስገባት አልተሳካም። እባክዎ እንደገና ይሞክሩ።\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"border-l-2 border-church-gold pl-4 mb-6\">\n      {imageUrl && (\n        <div className=\"mb-3 rounded-md overflow-hidden w-32 h-32 float-right ml-4\">\n          <img\n            src={imageUrl}\n            alt={title}\n            className=\"object-cover w-full h-full transition-transform hover:scale-105 duration-300 rounded-md\"\n            onError={(e) => {\n              const target = e.target as HTMLImageElement;\n              // Try multiple fallback images in order\n              if (target.src.includes(\"church-service.jpg\")) {\n                target.src = \"/images/gallery/church-gathering.jpg\";\n              } else if (target.src.includes(\"church-gathering.jpg\")) {\n                target.src = \"/images/gallery/ceremony-1.jpg\";\n              } else {\n                target.src = \"/images/gallery/church-service.jpg\";\n              }\n            }}\n          />\n        </div>\n      )}\n      <h3 className=\"text-xl font-serif text-church-burgundy\">{title}</h3>\n      <p className=\"text-sm text-gray-500 mb-2\">{time}</p>\n      <p className=\"text-gray-700\">{description}</p>\n\n      {requiresAppointment && (\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button\n              variant=\"outline\"\n              size=\"xs\"\n              className=\"mt-2 bg-church-burgundy text-white hover:bg-church-burgundy/90 text-xs py-1 px-2\"\n            >\n              <CalendarCheck className=\"mr-1 h-3 w-3\" />\n              {language === \"en\" ? \"Request Appointment\" : \"ቀጠሮ ይጠይቁ\"}\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {language === \"en\" ? \"Request Appointment\" : \"ቀጠሮ ይጠይቁ\"}\n              </DialogTitle>\n              <DialogDescription>\n                {language === \"en\"\n                  ? `Fill out this form to request an appointment for ${title}.`\n                  : `ለ${title} ቀጠሮ ለመጠየቅ ይህን ቅጽ ይሙሉ።`}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleAppointmentSubmit}>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"name\" className=\"text-right\">\n                    <User className=\"h-4 w-4 inline mr-1\" />\n                    {language === \"en\" ? \"Name\" : \"ስም\"}\n                  </Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    className=\"col-span-3\"\n                    required\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"email\" className=\"text-right\">\n                    <Mail className=\"h-4 w-4 inline mr-1\" />\n                    {language === \"en\" ? \"Email\" : \"ኢሜይል\"}\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    className=\"col-span-3\"\n                    required\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"phone\" className=\"text-right\">\n                    <Phone className=\"h-4 w-4 inline mr-1\" />\n                    {language === \"en\" ? \"Phone\" : \"ስልክ\"}\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    name=\"phone\"\n                    type=\"tel\"\n                    className=\"col-span-3\"\n                    required\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"date\" className=\"text-right\">\n                    <Calendar className=\"h-4 w-4 inline mr-1\" />\n                    {language === \"en\" ? \"Date\" : \"ቀን\"}\n                  </Label>\n                  <Input\n                    id=\"date\"\n                    name=\"date\"\n                    type=\"date\"\n                    className=\"col-span-3\"\n                    min={format(new Date(), \"yyyy-MM-dd\")}\n                    required\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"time\" className=\"text-right\">\n                    <Clock className=\"h-4 w-4 inline mr-1\" />\n                    {language === \"en\" ? \"Time\" : \"ሰዓት\"}\n                  </Label>\n                  <Input\n                    id=\"time\"\n                    name=\"time\"\n                    type=\"time\"\n                    className=\"col-span-3\"\n                    required\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"notes\" className=\"text-right\">\n                    {language === \"en\" ? \"Notes\" : \"ማስታወሻዎች\"}\n                  </Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    className=\"col-span-3\"\n                    placeholder={\n                      language === \"en\"\n                        ? \"Any additional information...\"\n                        : \"ማንኛውም ተጨማሪ መረጃ...\"\n                    }\n                  />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button\n                  type=\"submit\"\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  {language === \"en\" ? \"Submit Request\" : \"ጥያቄ አስገባ\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n};\n\n// Religious service images mapping with verified paths\nconst religiousServiceImages = {\n  \"Christian Initiation\": \"/images/religious/palm-sunday.jpg\",\n  \"ክርስትና ማስነሳት\": \"/images/religious/palm-sunday.jpg\",\n  \"Qendil Prayer\": \"/images/gallery/church-service.jpg\",\n  \"ጸሎተ ቀንዲል\": \"/images/gallery/church-service.jpg\",\n  \"Marriage and Communion Education\": \"/images/gallery/ceremony-1.jpg\",\n  \"የጋብቻና የቁርባን ትምህርት\": \"/images/gallery/ceremony-1.jpg\",\n  \"Counseling Services\": \"/images/gallery/church-gathering.jpg\",\n  \"የምክር አገልግሎት\": \"/images/gallery/church-gathering.jpg\",\n  \"Marriage Ceremony\": \"/images/gallery/ceremony-2.jpg\",\n  \"ጋብቻ መፈፀም\": \"/images/gallery/ceremony-2.jpg\",\n  \"Funeral Prayer\": \"/images/religious/crucifixion.jpg\",\n  \"ጸሎተ ፍትሐት\": \"/images/religious/crucifixion.jpg\",\n  \"Holy Water Baptism\": \"/images/gallery/timket.jpg\",\n  \"ጸበል መጠመቅ\": \"/images/gallery/timket.jpg\",\n  \"Entering Lent\": \"/images/religious/procession.jpg\",\n  \"ሱባኤ መግባት\": \"/images/religious/procession.jpg\",\n  \"Qeder Baptism\": \"/images/gallery/timket.jpg\",\n  \"የቄደር ጥምቀት\": \"/images/gallery/timket.jpg\",\n  \"Divine Liturgy (Kidase)\": \"/images/gallery/church-service.jpg\",\n  ቅዳሴ: \"/images/gallery/church-service.jpg\",\n};\n\n// Function to get a religious image based on service title with fallback\nconst getServiceImage = (title: string): string => {\n  return religiousServiceImages[title] || \"/images/gallery/church-service.jpg\";\n};\n\nconst Services: React.FC = () => {\n  const { t, language } = useLanguage();\n\n  // Service data based on the provided church services\n  const regularServices = [\n    {\n      title: language === \"en\" ? \"Holy Water Baptism\" : \"ጸበል መጠመቅ\",\n      description:\n        language === \"en\"\n          ? \"Blessing and immersion in holy water for spiritual cleansing and healing.\"\n          : \"ለመንፈሳዊ ንጽህና እና ፈውስ በቅዱስ ውሃ ውስጥ መባረክ እና መጠመቅ።\",\n      time: language === \"en\" ? \"Sundays after Divine Liturgy\" : \"እሁድ ከቅዳሴ በኋላ\",\n      requiresAppointment: false,\n    },\n    {\n      title: language === \"en\" ? \"Marriage Ceremony\" : \"ጋብቻ መፈፀም\",\n      description:\n        language === \"en\"\n          ? \"Traditional Orthodox Christian church marriage ceremony following church customs and traditions.\"\n          : \"የቤተክርስቲያን ልማዶችን እና ወጎችን የሚከተል ባህላዊ የኦርቶዶክስ ክርስቲያን የጋብቻ ሥርዓት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title: language === \"en\" ? \"Funeral Prayer\" : \"ጸሎተ ፍትሐት\",\n      description:\n        language === \"en\"\n          ? \"Prayer service for the departed, offering comfort to families and commending the soul to God's mercy.\"\n          : \"ለሟቾች የሚደረግ የጸሎት አገልግሎት፣ ለቤተሰቦች መጽናናትን የሚሰጥ እና ነፍስን ለእግዚአብሔር ምሕረት የሚያስረክብ።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title:\n        language === \"en\"\n          ? \"Marriage and Communion Education\"\n          : \"የጋብቻና የቁርባን ትምህርት\",\n      description:\n        language === \"en\"\n          ? \"Educational sessions for couples preparing for marriage and individuals preparing to receive Holy Communion.\"\n          : \"ለጋብቻ ለሚዘጋጁ ጥንዶች እና ቅዱስ ቁርባን ለመቀበል ለሚዘጋጁ ግለሰቦች የሚሰጡ የትምህርት ክፍለ ጊዜያት።\",\n      time:\n        language === \"en\"\n          ? \"Saturdays, 2:00 PM - 4:00 PM\"\n          : \"ቅዳሜ፣ 2:00 ከሰዓት - 4:00 ከሰዓት\",\n      requiresAppointment: false,\n    },\n    {\n      title: language === \"en\" ? \"Counseling Services\" : \"የምክር አገልግሎት\",\n      description:\n        language === \"en\"\n          ? \"Counseling services for health issues, addiction, marriage problems, and other personal challenges.\"\n          : \"በጤና፣ በሱስ፣ በትዳር እና በሌሎች ችግሮች የምክር አገልግሎት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n  ];\n\n  const specialServices = [\n    {\n      title: language === \"en\" ? \"Qendil Prayer\" : \"ጸሎተ ቀንዲል\",\n      description:\n        language === \"en\"\n          ? \"Special prayer service with the blessing of oil for healing and spiritual protection.\"\n          : \"ለፈውስ እና ለመንፈሳዊ ጥበቃ ከዘይት ቡራኬ ጋር የሚደረግ ልዩ የጸሎት አገልግሎት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title: language === \"en\" ? \"Qeder Baptism\" : \"የቄደር ጥምቀት\",\n      description:\n        language === \"en\"\n          ? \"Special baptismal service following traditional Ethiopian Orthodox customs.\"\n          : \"ባህላዊ የኢትዮጵያ ኦርቶዶክስ ወጎችን የሚከተል ልዩ የጥምቀት አገልግሎት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title: language === \"en\" ? \"Christian Initiation\" : \"ክርስትና ማስነሳት\",\n      description:\n        language === \"en\"\n          ? \"The sacrament of Christian initiation, introducing new members to the faith and church community.\"\n          : \"አዲስ አማኞችን ወደ እምነት እና የቤተክርስቲያን ማህበረሰብ የሚያስተዋውቅ የክርስትና ሥርዓት።\",\n      time: language === \"en\" ? \"By appointment\" : \"በቀጠሮ\",\n      requiresAppointment: true,\n    },\n    {\n      title: language === \"en\" ? \"Entering Lent\" : \"ሱባኤ መግባት\",\n      description:\n        language === \"en\"\n          ? \"Special service marking the beginning of fasting periods, with prayers for spiritual strength and guidance.\"\n          : \"ለመንፈሳዊ ጥንካሬ እና መመሪያ ከጸሎቶች ጋር የጾም ወቅቶችን መጀመሪያ የሚያመለክት ልዩ አገልግሎት።\",\n      time:\n        language === \"en\"\n          ? \"Beginning of major fasting periods\"\n          : \"የዋና ዋና የጾም ወቅቶች መጀመሪያ\",\n      requiresAppointment: false,\n    },\n    {\n      title: language === \"en\" ? \"Divine Liturgy (Kidase)\" : \"ቅዳሴ\",\n      description:\n        language === \"en\"\n          ? \"The Divine Liturgy is the main worship service, during which Holy Communion is celebrated. It follows the ancient liturgy of St. Basil, St. Gregory, and St. Cyril.\"\n          : \"ቅዳሴ የቤተክርስቲያን ዋና የአምልኮ አገልግሎት ሲሆን በዚህ ጊዜ ቅዱስ ቁርባን ይከናወናል። የቅዱስ ባስልዮስ፣ የቅዱስ ግሪጎሪዮስ እና የቅዱስ ኪሪሎስ ጥንታዊ ሥርዓተ ቅዳሴን ይከተላል።\",\n      time:\n        language === \"en\"\n          ? \"Sundays, 7:00 AM - 12:00 PM\"\n          : \"እሁድ፣ 7:00 ጠዋት - 12:00 ከሰዓት\",\n      requiresAppointment: false,\n    },\n  ];\n\n  return (\n    <Layout>\n      <div className=\"py-12 px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <Settings className=\"inline-block h-10 w-10 text-church-burgundy mb-3\" />\n            <h1 className=\"text-4xl font-serif text-church-burgundy mb-4\">\n              {t(\"services_title\") || \"Church Services\"}\n            </h1>\n            <p className=\"max-w-2xl mx-auto text-lg\">\n              {t(\"services_description\") ||\n                \"Join us for worship and spiritual growth through our regular and special services. Our church follows the ancient traditions of the Ethiopian Orthodox Tewahedo Church.\"}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n            <Card>\n              <CardHeader className=\"bg-church-burgundy text-white\">\n                <CardTitle className=\"text-church-gold\">\n                  {t(\"regular_services\")}\n                </CardTitle>\n                <CardDescription className=\"text-white/80\">\n                  {language === \"en\"\n                    ? \"Our weekly and monthly recurring services\"\n                    : \"የእኛ ሳምንታዊ እና ወርሃዊ ተከታታይ አገልግሎቶች\"}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6\">\n                {regularServices.map((service, index) => (\n                  <ServiceItem\n                    key={`regular-${index}`}\n                    title={service.title}\n                    description={service.description}\n                    time={service.time}\n                    imageUrl={getServiceImage(service.title)}\n                    requiresAppointment={service.requiresAppointment}\n                  />\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"bg-church-burgundy text-white\">\n                <CardTitle className=\"text-church-gold\">\n                  {t(\"special_services\")}\n                </CardTitle>\n                <CardDescription className=\"text-white/80\">\n                  {language === \"en\"\n                    ? \"Major feasts and celebrations throughout the year\"\n                    : \"ዋና ዋና በዓላት እና በአመቱ ውስጥ የሚከበሩ ክብረ በዓላት\"}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6\">\n                {specialServices.map((service, index) => (\n                  <ServiceItem\n                    key={`special-${index}`}\n                    title={service.title}\n                    description={service.description}\n                    time={service.time}\n                    imageUrl={getServiceImage(service.title)}\n                    requiresAppointment={service.requiresAppointment}\n                  />\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>{t(\"children_services\")}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Accordion type=\"single\" collapsible>\n                <AccordionItem value=\"sunday-school\">\n                  <AccordionTrigger>\n                    {language === \"en\" ? \"Sunday School\" : \"የሰንበት ትምህርት ቤት\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"Sunday School classes for children ages 5-12 are held every Sunday from 9:00 AM to 12:00 PM. Children learn about the Orthodox faith, Bible stories, church traditions, Ethiopian Orthodox hymns, and Amharic language.\"\n                      : \"ከ5-12 ዓመት ለሆኑ ልጆች የሰንበት ትምህርት ቤት ትምህርቶች በየሰንበት ከ9፡00 ጠዋት እስከ 12፡00 ሰዓት ይካሄዳሉ። ልጆች ስለ ኦርቶዶክስ እምነት፣ የመጽሐፍ ቅዱስ ታሪኮች፣ የቤተክርስቲያን ወግ፣ የኢትዮጵያ ኦርቶዶክስ መዝሙሮች እና አማርኛ ቋንቋ ይማራሉ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n\n                <AccordionItem value=\"youth-program\">\n                  <AccordionTrigger>\n                    {language === \"en\" ? \"Youth Program\" : \"የወጣቶች ፕሮግራም\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"Our youth program for teenagers (13-18) provides spiritual guidance, church service training, community service opportunities, and cultural activities every Saturday from 3:00 PM to 6:00 PM. Youth also participate in choir and traditional Ethiopian Orthodox church music training.\"\n                      : \"ለወጣቶች (13-18) የሚሰጠው የወጣቶች ፕሮግራማችን መንፈሳዊ መመሪያ፣ የቤተክርስቲያን አገልግሎት ስልጠና፣ የማህበረሰብ አገልግሎት እድሎች እና በየሳምንቱ ቅዳሜ ከ3፡00 ምሽት እስከ 6፡00 ምሽት የባህል ስራዎችን ይሰጣል። ወጣቶች በዘማሪ ቡድን እና በባህላዊ የኢትዮጵያ ኦርቶዶክስ ቤተክርስቲያን ሙዚቃ ስልጠናም ይሳተፋሉ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n\n                <AccordionItem value=\"amharic-classes\">\n                  <AccordionTrigger>\n                    {language === \"en\"\n                      ? \"Amharic Language Classes\"\n                      : \"የአማርኛ ቋንቋ ትምህርት\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"We offer Amharic language classes for children of all ages on Saturdays from 10:00 AM to 12:00 PM. These classes help children connect with their Ethiopian heritage through language learning, including reading and writing in Fidel (Ethiopian script).\"\n                      : \"ለሁሉም ዕድሜ ልጆች በየሳምንቱ ቅዳሜ ከ10፡00 ጠዋት እስከ 12፡00 ሰዓት የአማርኛ ቋንቋ ትምህርት እንሰጣለን። እነዚህ ክፍሎች ልጆች ከኢትዮጵያዊ ሀረጋቸው ጋር በቋንቋ ትምህርት በኩል እንዲገናኙ ይረዳቸዋል፣ በፊደል ንባብና ጽሑፍን ጨምሮ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n\n                <AccordionItem value=\"mezmur-classes\">\n                  <AccordionTrigger>\n                    {language === \"en\"\n                      ? \"Traditional Church Music\"\n                      : \"የቤተክርስቲያን መዝሙር ትምህርት\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"Traditional Ethiopian Orthodox church music (Mezmur) classes are offered for both children and adults on Saturdays from 1:00 PM to 3:00 PM. Learn traditional hymns, chants, and the use of traditional instruments like the Begena, Kebero, and Sistrum.\"\n                      : \"ባህላዊ የኢትዮጵያ ኦርቶዶክስ የቤተክርስቲያን ሙዚቃ (መዝሙር) ትምህርቶች ለልጆችም ሆነ ለአዋቂዎች በየሳምንቱ ቅዳሜ ከ1፡00 ከሰዓት እስከ 3፡00 ከሰዓት ይሰጣሉ። ባህላዊ መዝሙሮችን፣ ዝማሬዎችን እና እንደ በገና፣ ከበሮ እና ሲስትሩም ያሉ ባህላዊ መሣሪያዎችን አጠቃቀም ይማሩ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n\n                <AccordionItem value=\"adult-education\">\n                  <AccordionTrigger>\n                    {language === \"en\"\n                      ? \"Adult Religious Education\"\n                      : \"የአዋቂዎች ሃይማኖታዊ ትምህርት\"}\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    {language === \"en\"\n                      ? \"Adult religious education classes are held on Sundays after the Divine Liturgy from 1:00 PM to 2:30 PM. These classes cover Orthodox theology, church history, patristic teachings, and spiritual practices for daily life.\"\n                      : \"የአዋቂዎች ሃይማኖታዊ ትምህርት ክፍሎች በየሰንበቱ ከቅዳሴ በኋላ ከ1፡00 ከሰዓት እስከ 2፡30 ከሰዓት ይካሄዳሉ። እነዚህ ክፍሎች የኦርቶዶክስ ሥነ መለኮት፣ የቤተክርስቲያን ታሪክ፣ የአባቶች ትምህርቶች እና ለዕለት ተዕለት ሕይወት መንፈሳዊ ልምምዶችን ያካትታሉ።\"}\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Services;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/AdminLayout.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAuth'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAuth]","fix":{"range":[1127,1129],"text":"[checkAuth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useNavigate, Link, Outlet, useLocation } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport AdminErrorBoundary from \"@/components/AdminErrorBoundary\";\nimport {\n  LayoutDashboard,\n  Calendar,\n  Image,\n  Users,\n  Activity,\n  MessageSquare,\n  Heart,\n  DollarSign,\n  Menu,\n  X,\n  Settings,\n  LogOut,\n  Users as UsersIcon,\n  Home,\n  TrendingUp,\n  Upload,\n  Clock,\n  CalendarCheck,\n  ChevronLeft,\n  ChevronRight,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function AdminLayout() {\n  const [loading, setLoading] = useState(true);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(() => {\n    // Persist sidebar state in localStorage\n    if (typeof window !== \"undefined\") {\n      return localStorage.getItem(\"admin-sidebar-collapsed\") === \"true\";\n    }\n    return false;\n  });\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (!session) {\n        navigate(\"/admin/login\");\n        return;\n      }\n\n      // Check if user has admin role\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", session.user.id)\n        .single();\n\n      if (error) {\n        console.error(\"Error fetching profile:\", error);\n        // If profile doesn't exist, create one for first user as admin\n        const { count: adminCount } = await supabase\n          .from(\"profiles\")\n          .select(\"*\", { count: \"exact\", head: true });\n\n        if (adminCount === 0) {\n          // First user becomes admin\n          const { error: createError } = await supabase\n            .from(\"profiles\")\n            .insert({\n              id: session.user.id,\n              email: session.user.email,\n              role: \"admin\",\n            });\n\n          if (createError) {\n            console.error(\"Error creating admin profile:\", createError);\n            await supabase.auth.signOut();\n            navigate(\"/admin/login\");\n            return;\n          }\n        } else {\n          await supabase.auth.signOut();\n          navigate(\"/admin/login\");\n          return;\n        }\n      } else if (!profile || profile.role !== \"admin\") {\n        await supabase.auth.signOut();\n        navigate(\"/admin/login\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Error checking auth:\", error);\n      navigate(\"/admin/login\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut();\n    navigate(\"/admin/login\");\n  };\n\n  const navigationItems = [\n    {\n      to: \"/\",\n      icon: Home,\n      label: \"Main Website\",\n      description: \"Return to public site\",\n      isExternal: true,\n    },\n    {\n      to: \"/admin/dashboard\",\n      icon: LayoutDashboard,\n      label: \"Dashboard\",\n      description: \"Overview and statistics\",\n    },\n    {\n      to: \"/admin/events\",\n      icon: Calendar,\n      label: \"Events\",\n      description: \"Manage church events\",\n    },\n    {\n      to: \"/admin/sermons\",\n      icon: Activity,\n      label: \"Sermons\",\n      description: \"Manage sermons and audio\",\n    },\n    {\n      to: \"/admin/members\",\n      icon: Users,\n      label: \"Members\",\n      description: \"Manage church members\",\n    },\n    {\n      to: \"/admin/gallery\",\n      icon: Image,\n      label: \"Gallery\",\n      description: \"Manage photo gallery\",\n    },\n    {\n      to: \"/admin/testimonials\",\n      icon: MessageSquare,\n      label: \"Testimonials\",\n      description: \"Review testimonials\",\n    },\n    {\n      to: \"/admin/prayer-requests\",\n      icon: Heart,\n      label: \"Prayer Requests\",\n      description: \"Manage prayer requests\",\n    },\n    {\n      to: \"/admin/donations\",\n      icon: DollarSign,\n      label: \"Donations\",\n      description: \"Track donations\",\n    },\n    {\n      to: \"/admin/appointments\",\n      icon: CalendarCheck,\n      label: \"Appointments\",\n      description: \"Manage appointment requests\",\n    },\n    {\n      to: \"/admin/users\",\n      icon: UsersIcon,\n      label: \"Users\",\n      description: \"Manage admin users\",\n    },\n    {\n      to: \"/admin/analytics\",\n      icon: TrendingUp,\n      label: \"Analytics\",\n      description: \"Data insights\",\n    },\n    {\n      to: \"/admin/bulk-operations\",\n      icon: Upload,\n      label: \"Bulk Operations\",\n      description: \"Import/Export data\",\n    },\n    {\n      to: \"/admin/content-scheduler\",\n      icon: Clock,\n      label: \"Content Scheduler\",\n      description: \"Schedule content\",\n    },\n    {\n      to: \"/admin/system-health\",\n      icon: Activity,\n      label: \"System Health\",\n      description: \"System status & monitoring\",\n    },\n    {\n      to: \"/admin/settings\",\n      icon: Settings,\n      label: \"Settings\",\n      description: \"System configuration\",\n    },\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div\n          className=\"fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n      {/* Sidebar */}\n      <div\n        className={cn(\n          \"fixed inset-y-0 left-0 z-50 bg-church-burgundy text-white transform transition-all duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0\",\n          sidebarOpen ? \"translate-x-0\" : \"-translate-x-full\",\n          sidebarCollapsed ? \"w-16\" : \"w-72\",\n        )}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-church-burgundy/20\">\n            {!sidebarCollapsed && (\n              <div>\n                <h1 className=\"text-xl font-bold text-church-gold\">\n                  Admin Panel\n                </h1>\n                <p className=\"text-sm text-white/70\">Church Management</p>\n              </div>\n            )}\n            <div className=\"flex items-center space-x-2\">\n              {/* Desktop collapse toggle */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"hidden lg:flex text-white hover:bg-church-burgundy/20\"\n                onClick={() => {\n                  const newState = !sidebarCollapsed;\n                  setSidebarCollapsed(newState);\n                  localStorage.setItem(\n                    \"admin-sidebar-collapsed\",\n                    newState.toString(),\n                  );\n                }}\n              >\n                {sidebarCollapsed ? (\n                  <ChevronRight className=\"w-5 h-5\" />\n                ) : (\n                  <ChevronLeft className=\"w-5 h-5\" />\n                )}\n              </Button>\n              {/* Mobile close button */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"lg:hidden text-white hover:bg-church-burgundy/20\"\n                onClick={() => setSidebarOpen(false)}\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 py-6 space-y-2 overflow-y-auto\">\n            {navigationItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location.pathname === item.to;\n\n              return item.isExternal ? (\n                <a\n                  key={item.to}\n                  href={item.to}\n                  className={cn(\n                    \"flex items-center p-3 rounded-lg transition-colors group\",\n                    \"text-white/90 hover:bg-church-burgundy/20 hover:text-white bg-church-burgundy/10\",\n                  )}\n                  onClick={() => setSidebarOpen(false)}\n                >\n                  <Icon className=\"w-5 h-5 mr-3 flex-shrink-0 text-church-gold\" />\n                  {!sidebarCollapsed && (\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-church-gold\">\n                        {item.label}\n                      </div>\n                      <div className=\"text-xs text-white/50\">\n                        {item.description}\n                      </div>\n                    </div>\n                  )}\n                </a>\n              ) : (\n                <Link\n                  key={item.to}\n                  to={item.to}\n                  className={cn(\n                    \"flex items-center p-3 rounded-lg transition-colors group\",\n                    isActive\n                      ? \"bg-church-gold text-church-burgundy\"\n                      : \"text-white/90 hover:bg-church-burgundy/20 hover:text-white\",\n                  )}\n                  onClick={() => setSidebarOpen(false)}\n                >\n                  <Icon\n                    className={cn(\n                      \"w-5 h-5 mr-3 flex-shrink-0\",\n                      isActive\n                        ? \"text-church-burgundy\"\n                        : \"text-white/70 group-hover:text-white\",\n                    )}\n                  />\n                  {!sidebarCollapsed && (\n                    <div className=\"flex-1\">\n                      <div\n                        className={cn(\n                          \"font-medium\",\n                          isActive ? \"text-church-burgundy\" : \"text-white\",\n                        )}\n                      >\n                        {item.label}\n                      </div>\n                      <div\n                        className={cn(\n                          \"text-xs\",\n                          isActive\n                            ? \"text-church-burgundy/70\"\n                            : \"text-white/50\",\n                        )}\n                      >\n                        {item.description}\n                      </div>\n                    </div>\n                  )}\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-church-burgundy/20\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-white hover:text-white hover:bg-church-burgundy/20\"\n              onClick={handleSignOut}\n            >\n              <LogOut className=\"w-5 h-5 mr-3\" />\n              {!sidebarCollapsed && (\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Sign Out</div>\n                  <div className=\"text-xs text-white/50\">Exit admin panel</div>\n                </div>\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Top bar */}\n        <header className=\"bg-white shadow-sm border-b border-gray-200 lg:hidden\">\n          <div className=\"flex items-center justify-between px-4 py-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(true)}\n            >\n              <Menu className=\"w-5 h-5\" />\n            </Button>\n            <h1 className=\"text-lg font-semibold text-church-burgundy\">\n              Admin Panel\n            </h1>\n            <div className=\"w-10\" /> {/* Spacer for centering */}\n          </div>\n        </header>\n\n        {/* Page content */}\n        <main className=\"flex-1 p-4 sm:p-6 lg:p-8 overflow-auto\">\n          {/* Breadcrumb Navigation */}\n          <div className=\"mb-6\">\n            <nav className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <Link\n                to=\"/admin/dashboard\"\n                className=\"hover:text-church-burgundy\"\n              >\n                Dashboard\n              </Link>\n              {location.pathname !== \"/admin/dashboard\" && (\n                <>\n                  <span>/</span>\n                  <span className=\"text-church-burgundy font-medium capitalize\">\n                    {location.pathname.split(\"/\").pop()?.replace(\"-\", \" \")}\n                  </span>\n                </>\n              )}\n            </nav>\n          </div>\n\n          <AdminErrorBoundary>\n            <Outlet />\n            <div>Text</div>\n          </AdminErrorBoundary>\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Analytics.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadAnalyticsData, timeRange]","fix":{"range":[2182,2193],"text":"[loadAnalyticsData, timeRange]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5359,5362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5359,5362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6034,6037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6034,6037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6566,6569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6566,6569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7030,7033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7030,7033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  Area,\n  AreaChart,\n} from \"recharts\";\nimport {\n  TrendingUp,\n  TrendingDown,\n  Users,\n  DollarSign,\n  Calendar,\n  Heart,\n  Download,\n  RefreshCw,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format, subDays, startOfMonth, endOfMonth } from \"date-fns\";\n\ninterface AnalyticsData {\n  donations: {\n    total: number;\n    monthly: Array<{ month: string; amount: number; count: number }>;\n    byPurpose: Array<{ purpose: string; amount: number; percentage: number }>;\n    trends: {\n      thisMonth: number;\n      lastMonth: number;\n      growth: number;\n    };\n  };\n  members: {\n    total: number;\n    monthly: Array<{ month: string; count: number }>;\n    byType: Array<{ type: string; count: number; percentage: number }>;\n    trends: {\n      thisMonth: number;\n      lastMonth: number;\n      growth: number;\n    };\n  };\n  events: {\n    total: number;\n    upcoming: number;\n    monthly: Array<{ month: string; count: number }>;\n    attendance: Array<{ event: string; attendance: number }>;\n  };\n  engagement: {\n    prayerRequests: number;\n    testimonials: number;\n    sermons: number;\n    galleryViews: number;\n  };\n}\n\nconst COLORS = [\"#7d2224\", \"#d4af37\", \"#228b22\", \"#4169e1\", \"#ff6347\"];\n\nexport default function Analytics() {\n  const [data, setData] = useState<AnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState(\"6months\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [timeRange]);\n\n  const loadAnalyticsData = async () => {\n    try {\n      setLoading(true);\n\n      // Calculate date ranges\n      const now = new Date();\n      const monthsBack =\n        timeRange === \"3months\" ? 3 : timeRange === \"6months\" ? 6 : 12;\n      const startDate = subDays(now, monthsBack * 30);\n\n      // Fetch all data in parallel\n      const [\n        donationsRes,\n        membersRes,\n        eventsRes,\n        prayerRequestsRes,\n        testimonialsRes,\n        sermonsRes,\n      ] = await Promise.all([\n        supabase\n          .from(\"donations\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString()),\n        supabase\n          .from(\"members\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString()),\n        supabase\n          .from(\"events\")\n          .select(\"*\")\n          .gte(\"created_at\", startDate.toISOString()),\n        supabase\n          .from(\"prayer_requests\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabase\n          .from(\"testimonials\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"sermons\").select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n      // Process donations data\n      const donations = donationsRes.data || [];\n      const donationsByMonth = processMonthlyData(\n        donations,\n        \"created_at\",\n        \"amount\",\n      );\n      const donationsByPurpose = processPurposeData(donations);\n      const donationTrends = calculateTrends(donations, \"amount\");\n\n      // Process members data\n      const members = membersRes.data || [];\n      const membersByMonth = processMonthlyData(members, \"created_at\");\n      const membersByType = processTypeData(members, \"membership_type\");\n      const memberTrends = calculateTrends(members);\n\n      // Process events data\n      const events = eventsRes.data || [];\n      const eventsByMonth = processMonthlyData(events, \"created_at\");\n      const upcomingEvents = events.filter(\n        (e) => new Date(e.event_date) > now,\n      ).length;\n\n      setData({\n        donations: {\n          total: donations.reduce((sum, d) => sum + d.amount, 0),\n          monthly: donationsByMonth,\n          byPurpose: donationsByPurpose,\n          trends: donationTrends,\n        },\n        members: {\n          total: members.length,\n          monthly: membersByMonth,\n          byType: membersByType,\n          trends: memberTrends,\n        },\n        events: {\n          total: events.length,\n          upcoming: upcomingEvents,\n          monthly: eventsByMonth,\n          attendance: [], // Would need additional tracking\n        },\n        engagement: {\n          prayerRequests: prayerRequestsRes.count || 0,\n          testimonials: testimonialsRes.count || 0,\n          sermons: sermonsRes.count || 0,\n          galleryViews: 0, // Would need view tracking\n        },\n      });\n    } catch (error) {\n      console.error(\"Error loading analytics:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load analytics data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const processMonthlyData = (\n    items: any[],\n    dateField: string,\n    valueField?: string,\n  ) => {\n    const monthlyData: Record<string, { count: number; amount: number }> = {};\n\n    items.forEach((item) => {\n      const month = format(new Date(item[dateField]), \"MMM yyyy\");\n      if (!monthlyData[month]) {\n        monthlyData[month] = { count: 0, amount: 0 };\n      }\n      monthlyData[month].count += 1;\n      if (valueField && item[valueField]) {\n        monthlyData[month].amount += item[valueField];\n      }\n    });\n\n    return Object.entries(monthlyData).map(([month, data]) => ({\n      month,\n      count: data.count,\n      amount: data.amount,\n    }));\n  };\n\n  const processPurposeData = (donations: any[]) => {\n    const purposeData: Record<string, number> = {};\n    const total = donations.reduce((sum, d) => sum + d.amount, 0);\n\n    donations.forEach((donation) => {\n      const purpose = donation.purpose || \"General Fund\";\n      purposeData[purpose] = (purposeData[purpose] || 0) + donation.amount;\n    });\n\n    return Object.entries(purposeData).map(([purpose, amount]) => ({\n      purpose,\n      amount,\n      percentage: total > 0 ? Math.round((amount / total) * 100) : 0,\n    }));\n  };\n\n  const processTypeData = (members: any[], typeField: string) => {\n    const typeData: Record<string, number> = {};\n    const total = members.length;\n\n    members.forEach((member) => {\n      const type = member[typeField] || \"Regular\";\n      typeData[type] = (typeData[type] || 0) + 1;\n    });\n\n    return Object.entries(typeData).map(([type, count]) => ({\n      type,\n      count,\n      percentage: total > 0 ? Math.round((count / total) * 100) : 0,\n    }));\n  };\n\n  const calculateTrends = (items: any[], valueField?: string) => {\n    const now = new Date();\n    const thisMonthStart = startOfMonth(now);\n    const lastMonthStart = startOfMonth(subDays(now, 30));\n    const lastMonthEnd = endOfMonth(subDays(now, 30));\n\n    const thisMonth = items.filter(\n      (item) => new Date(item.created_at) >= thisMonthStart,\n    );\n    const lastMonth = items.filter((item) => {\n      const date = new Date(item.created_at);\n      return date >= lastMonthStart && date <= lastMonthEnd;\n    });\n\n    const thisMonthValue = valueField\n      ? thisMonth.reduce((sum, item) => sum + (item[valueField] || 0), 0)\n      : thisMonth.length;\n    const lastMonthValue = valueField\n      ? lastMonth.reduce((sum, item) => sum + (item[valueField] || 0), 0)\n      : lastMonth.length;\n\n    const growth =\n      lastMonthValue > 0\n        ? Math.round(((thisMonthValue - lastMonthValue) / lastMonthValue) * 100)\n        : 0;\n\n    return {\n      thisMonth: thisMonthValue,\n      lastMonth: lastMonthValue,\n      growth,\n    };\n  };\n\n  const exportData = () => {\n    if (!data) return;\n\n    const exportData = {\n      generatedAt: new Date().toISOString(),\n      timeRange,\n      summary: {\n        totalDonations: data.donations.total,\n        totalMembers: data.members.total,\n        totalEvents: data.events.total,\n        upcomingEvents: data.events.upcoming,\n      },\n      donations: data.donations,\n      members: data.members,\n      events: data.events,\n      engagement: data.engagement,\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `church-analytics-${format(new Date(), \"yyyy-MM-dd\")}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Success\",\n      description: \"Analytics data exported successfully\",\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-500\">No analytics data available</p>\n        <Button onClick={loadAnalyticsData} className=\"mt-4\">\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n            Analytics Dashboard\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Comprehensive insights into church operations\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-full sm:w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"3months\">Last 3 Months</SelectItem>\n              <SelectItem value=\"6months\">Last 6 Months</SelectItem>\n              <SelectItem value=\"12months\">Last 12 Months</SelectItem>\n            </SelectContent>\n          </Select>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={exportData}\n              variant=\"outline\"\n              className=\"flex-1 sm:flex-none\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Export Data</span>\n              <span className=\"sm:hidden\">Export</span>\n            </Button>\n            <Button\n              onClick={loadAnalyticsData}\n              variant=\"outline\"\n              className=\"flex-1 sm:flex-none\"\n            >\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Refresh</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Total Donations\"\n          value={`$${data.donations.total.toLocaleString()}`}\n          trend={data.donations.trends.growth}\n          icon={<DollarSign className=\"h-6 w-6\" />}\n          description=\"This month vs last month\"\n        />\n        <MetricCard\n          title=\"Active Members\"\n          value={data.members.total.toString()}\n          trend={data.members.trends.growth}\n          icon={<Users className=\"h-6 w-6\" />}\n          description=\"New registrations\"\n        />\n        <MetricCard\n          title=\"Upcoming Events\"\n          value={data.events.upcoming.toString()}\n          trend={0}\n          icon={<Calendar className=\"h-6 w-6\" />}\n          description=\"Scheduled events\"\n        />\n        <MetricCard\n          title=\"Prayer Requests\"\n          value={data.engagement.prayerRequests.toString()}\n          trend={0}\n          icon={<Heart className=\"h-6 w-6\" />}\n          description=\"Community engagement\"\n        />\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"donations\">Donations</TabsTrigger>\n          <TabsTrigger value=\"members\">Members</TabsTrigger>\n          <TabsTrigger value=\"engagement\">Engagement</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Donations Trend</CardTitle>\n                <CardDescription>Donation amounts over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={data.donations.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip formatter={(value) => [`$${value}`, \"Amount\"]} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"amount\"\n                      stroke=\"#7d2224\"\n                      fill=\"#7d2224\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Member Growth</CardTitle>\n                <CardDescription>New member registrations</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={data.members.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"count\"\n                      stroke=\"#d4af37\"\n                      strokeWidth={3}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"donations\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Donations by Purpose</CardTitle>\n                <CardDescription>How donations are allocated</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={data.donations.byPurpose}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ purpose, percentage }) =>\n                        `${purpose} (${percentage}%)`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"amount\"\n                    >\n                      {data.donations.byPurpose.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => [`$${value}`, \"Amount\"]} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Donation Trends</CardTitle>\n                <CardDescription>\n                  Amount and frequency over time\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={data.donations.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"amount\" fill=\"#7d2224\" />\n                    <Bar dataKey=\"count\" fill=\"#d4af37\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"members\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Membership Types</CardTitle>\n                <CardDescription>\n                  Distribution of membership categories\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={data.members.byType}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ type, percentage }) =>\n                        `${type} (${percentage}%)`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                    >\n                      {data.members.byType.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Member Registration Trends</CardTitle>\n                <CardDescription>New members over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={data.members.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"count\"\n                      stroke=\"#228b22\"\n                      fill=\"#228b22\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"engagement\" className=\"space-y-6\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Prayer Requests\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.engagement.prayerRequests}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Total submitted</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Testimonials\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.engagement.testimonials}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Community stories</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Sermons</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.engagement.sermons}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Available content</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Events</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-church-burgundy\">\n                  {data.events.total}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">Total organized</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nfunction MetricCard({\n  title,\n  value,\n  trend,\n  icon,\n  description,\n}: {\n  title: string;\n  value: string;\n  trend: number;\n  icon: React.ReactNode;\n  description: string;\n}) {\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">\n          {title}\n        </CardTitle>\n        <div className=\"text-church-burgundy\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-church-burgundy\">{value}</div>\n        <div className=\"flex items-center mt-2\">\n          {trend !== 0 && (\n            <div\n              className={`flex items-center text-xs ${\n                trend > 0 ? \"text-green-600\" : \"text-red-600\"\n              }`}\n            >\n              {trend > 0 ? (\n                <TrendingUp className=\"h-3 w-3 mr-1\" />\n              ) : (\n                <TrendingDown className=\"h-3 w-3 mr-1\" />\n              )}\n              {Math.abs(trend)}%\n            </div>\n          )}\n          <p className=\"text-xs text-gray-500 ml-2\">{description}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Appointments.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2177,2180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2177,2180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAppointments'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadAppointments, statusFilter]","fix":{"range":[2293,2307],"text":"[loadAppointments, statusFilter]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  CalendarCheck,\n  Clock,\n  User,\n  Mail,\n  Phone,\n  MessageSquare,\n  CheckCircle,\n  XCircle,\n  Calendar,\n  RefreshCw,\n  Filter,\n} from \"lucide-react\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport LoadingState from \"@/components/LoadingState\";\nimport EmptyState from \"@/components/EmptyState\";\n\ninterface Appointment {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  service_title: string;\n  requested_date: string;\n  requested_time: string;\n  notes: string | null;\n  status: string;\n  admin_response: string | null;\n  admin_notes: string | null;\n  confirmed_date: string | null;\n  confirmed_time: string | null;\n  responded_by: string | null;\n  responded_at: string | null;\n  created_at: string;\n  updated_at: string;\n  responded_by_profile?: { email: string } | null;\n}\n\nexport default function Appointments() {\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedAppointment, setSelectedAppointment] =\n    useState<Appointment | null>(null);\n  const [responseDialog, setResponseDialog] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [currentUser, setCurrentUser] = useState<any>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAppointments();\n    getCurrentUser();\n  }, [statusFilter]);\n\n  const getCurrentUser = async () => {\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n    setCurrentUser(session?.user);\n  };\n\n  const loadAppointments = async () => {\n    try {\n      setLoading(true);\n      let data;\n      if (statusFilter === \"all\") {\n        data = await api.appointments.getAppointments();\n      } else {\n        data = await api.appointments.getAppointmentsByStatus(statusFilter);\n      }\n      setAppointments(data || []);\n    } catch (error) {\n      console.error(\"Error loading appointments:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load appointments\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResponse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!selectedAppointment || !currentUser) return;\n\n    const formData = new FormData(e.currentTarget);\n    const status = formData.get(\"status\") as string;\n    const admin_response = formData.get(\"admin_response\") as string;\n    const admin_notes = formData.get(\"admin_notes\") as string;\n    const confirmed_date = formData.get(\"confirmed_date\") as string;\n    const confirmed_time = formData.get(\"confirmed_time\") as string;\n\n    try {\n      await api.appointments.respondToAppointment(selectedAppointment.id, {\n        status,\n        admin_response,\n        admin_notes: admin_notes || undefined,\n        confirmed_date: confirmed_date || undefined,\n        confirmed_time: confirmed_time || undefined,\n        responded_by: currentUser.id,\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Response sent successfully\",\n      });\n\n      setResponseDialog(false);\n      setSelectedAppointment(null);\n      loadAppointments();\n    } catch (error) {\n      console.error(\"Error responding to appointment:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send response\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: {\n        variant: \"secondary\" as const,\n        icon: Clock,\n        color: \"text-yellow-600\",\n      },\n      approved: {\n        variant: \"default\" as const,\n        icon: CheckCircle,\n        color: \"text-green-600\",\n      },\n      rejected: {\n        variant: \"destructive\" as const,\n        icon: XCircle,\n        color: \"text-red-600\",\n      },\n      completed: {\n        variant: \"outline\" as const,\n        icon: CheckCircle,\n        color: \"text-blue-600\",\n      },\n    };\n\n    const config =\n      variants[status as keyof typeof variants] || variants.pending;\n    const Icon = config.icon;\n\n    return (\n      <Badge variant={config.variant} className=\"capitalize\">\n        <Icon className={`w-3 h-3 mr-1 ${config.color}`} />\n        {status}\n      </Badge>\n    );\n  };\n\n  const openResponseDialog = (appointment: Appointment) => {\n    setSelectedAppointment(appointment);\n    setResponseDialog(true);\n  };\n\n  if (loading) {\n    return <LoadingState message=\"Loading appointments...\" />;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-church-burgundy\">\n            Appointments\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Manage appointment requests from the services page\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-full sm:w-40\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"approved\">Approved</SelectItem>\n              <SelectItem value=\"rejected\">Rejected</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={loadAppointments} variant=\"outline\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {appointments.length === 0 ? (\n        <EmptyState\n          icon={CalendarCheck}\n          title=\"No appointments found\"\n          description=\"No appointment requests match the current filter.\"\n        />\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Appointment Requests</CardTitle>\n            <CardDescription>\n              {appointments.length} appointment\n              {appointments.length !== 1 ? \"s\" : \"\"} found\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Requester</TableHead>\n                    <TableHead>Service</TableHead>\n                    <TableHead>Requested Date/Time</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Submitted</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {appointments.map((appointment) => (\n                    <TableRow key={appointment.id}>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className=\"font-medium flex items-center\">\n                            <User className=\"w-4 h-4 mr-1\" />\n                            {appointment.name}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center\">\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            {appointment.email}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center\">\n                            <Phone className=\"w-3 h-3 mr-1\" />\n                            {appointment.phone}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">\n                          {appointment.service_title}\n                        </div>\n                        {appointment.notes && (\n                          <div className=\"text-sm text-gray-500 mt-1 flex items-start\">\n                            <MessageSquare className=\"w-3 h-3 mr-1 mt-0.5 flex-shrink-0\" />\n                            <span className=\"line-clamp-2\">\n                              {appointment.notes}\n                            </span>\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center text-sm\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {format(\n                              new Date(appointment.requested_date),\n                              \"MMM d, yyyy\",\n                            )}\n                          </div>\n                          <div className=\"flex items-center text-sm text-gray-500\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            {appointment.requested_time}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(appointment.status)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm text-gray-500\">\n                          {format(\n                            new Date(appointment.created_at),\n                            \"MMM d, yyyy HH:mm\",\n                          )}\n                        </div>\n                        {appointment.responded_at && (\n                          <div className=\"text-xs text-gray-400 mt-1\">\n                            Responded:{\" \"}\n                            {format(\n                              new Date(appointment.responded_at),\n                              \"MMM d, HH:mm\",\n                            )}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => openResponseDialog(appointment)}\n                          className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                        >\n                          {appointment.status === \"pending\"\n                            ? \"Respond\"\n                            : \"Update\"}\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Response Dialog */}\n      <Dialog open={responseDialog} onOpenChange={setResponseDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Respond to Appointment Request</DialogTitle>\n            <DialogDescription>\n              {selectedAppointment && (\n                <span>\n                  Responding to {selectedAppointment.name}'s request for{\" \"}\n                  {selectedAppointment.service_title}\n                </span>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAppointment && (\n            <form onSubmit={handleResponse} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    name=\"status\"\n                    defaultValue={selectedAppointment.status}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"approved\">Approved</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmed_date\">\n                    Confirmed Date (if approved)\n                  </Label>\n                  <Input\n                    id=\"confirmed_date\"\n                    name=\"confirmed_date\"\n                    type=\"date\"\n                    defaultValue={\n                      selectedAppointment.confirmed_date ||\n                      selectedAppointment.requested_date\n                    }\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmed_time\">\n                  Confirmed Time (if approved)\n                </Label>\n                <Input\n                  id=\"confirmed_time\"\n                  name=\"confirmed_time\"\n                  type=\"time\"\n                  defaultValue={\n                    selectedAppointment.confirmed_time ||\n                    selectedAppointment.requested_time\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"admin_response\">Response Message *</Label>\n                <Textarea\n                  id=\"admin_response\"\n                  name=\"admin_response\"\n                  placeholder=\"Enter your response to the appointment request...\"\n                  defaultValue={selectedAppointment.admin_response || \"\"}\n                  required\n                  rows={4}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"admin_notes\">Internal Notes (optional)</Label>\n                <Textarea\n                  id=\"admin_notes\"\n                  name=\"admin_notes\"\n                  placeholder=\"Internal notes for admin reference...\"\n                  defaultValue={selectedAppointment.admin_notes || \"\"}\n                  rows={3}\n                />\n              </div>\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setResponseDialog(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  Send Response\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/BulkOperations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogDescription' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedItems' is assigned a value but never used.","line":67,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'type' is defined but never used. Allowed unused args must match /^_/u.","line":78,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2601,2604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2601,2604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleBulkDelete' is assigned a value but never used.","line":227,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'campaign' is assigned a value but never used.","line":284,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":284,"endColumn":21}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Upload,\n  Download,\n  Trash2,\n  Mail,\n  Users,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { api } from \"@/integrations/supabase/api\";\n\ninterface BulkOperation {\n  id: string;\n  type: \"import\" | \"export\" | \"delete\" | \"email\" | \"update\";\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\";\n  progress: number;\n  total: number;\n  message: string;\n  createdAt: Date;\n}\n\nexport default function BulkOperations() {\n  const [operations, setOperations] = useState<BulkOperation[]>([]);\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [bulkEmailContent, setBulkEmailContent] = useState({\n    subject: \"\",\n    content: \"\",\n  });\n  const [importData, setImportData] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState(\"members\");\n  const { toast } = useToast();\n\n  const handleFileUpload = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    type: string,\n  ) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const content = e.target?.result as string;\n      if (file.type === \"application/json\") {\n        setImportData(content);\n      } else if (file.type === \"text/csv\") {\n        // Convert CSV to JSON format\n        const lines = content.split(\"\\n\");\n        const headers = lines[0].split(\",\");\n        const jsonData = lines\n          .slice(1)\n          .map((line) => {\n            const values = line.split(\",\");\n            const obj: any = {};\n            headers.forEach((header, index) => {\n              obj[header.trim()] = values[index]?.trim();\n            });\n            return obj;\n          })\n          .filter((obj) => Object.values(obj).some((val) => val));\n        setImportData(JSON.stringify(jsonData, null, 2));\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const handleBulkImport = async (table: string) => {\n    if (!importData.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide data to import\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const data = JSON.parse(importData);\n      if (!Array.isArray(data)) {\n        throw new Error(\"Data must be an array\");\n      }\n\n      const operation: BulkOperation = {\n        id: Date.now().toString(),\n        type: \"import\",\n        status: \"running\",\n        progress: 0,\n        total: data.length,\n        message: `Importing ${data.length} ${table} records...`,\n        createdAt: new Date(),\n      };\n\n      setOperations((prev) => [...prev, operation]);\n\n      // Process in batches\n      const batchSize = 10;\n      let processed = 0;\n\n      for (let i = 0; i < data.length; i += batchSize) {\n        const batch = data.slice(i, i + batchSize);\n\n        const { error } = await supabase.from(table).insert(batch);\n\n        if (error) {\n          console.error(`Batch ${i / batchSize + 1} failed:`, error);\n        }\n\n        processed += batch.length;\n\n        // Update progress\n        setOperations((prev) =>\n          prev.map((op) =>\n            op.id === operation.id\n              ? {\n                  ...op,\n                  progress: processed,\n                  message: `Imported ${processed}/${data.length} records`,\n                }\n              : op,\n          ),\n        );\n      }\n\n      // Mark as completed\n      setOperations((prev) =>\n        prev.map((op) =>\n          op.id === operation.id\n            ? {\n                ...op,\n                status: \"completed\",\n                message: `Successfully imported ${processed} records`,\n              }\n            : op,\n        ),\n      );\n\n      toast({\n        title: \"Success\",\n        description: `Imported ${processed} ${table} records`,\n      });\n\n      setImportData(\"\");\n    } catch (error) {\n      console.error(\"Import error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to import data. Please check the format.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkExport = async (table: string) => {\n    try {\n      const { data, error } = await supabase.from(table).select(\"*\");\n\n      if (error) throw error;\n\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `${table}-export-${new Date().toISOString().split(\"T\")[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Success\",\n        description: `Exported ${data?.length || 0} ${table} records`,\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to export data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkDelete = async (table: string, ids: string[]) => {\n    if (ids.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"No items selected for deletion\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const { error } = await supabase.from(table).delete().in(\"id\", ids);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: `Deleted ${ids.length} ${table} records`,\n      });\n\n      setSelectedItems([]);\n    } catch (error) {\n      console.error(\"Delete error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete selected items\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkEmail = async () => {\n    if (!bulkEmailContent.subject || !bulkEmailContent.content) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide both subject and content\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Get all active email subscribers\n      const subscribers = await api.emailSubscribers.getSubscribers();\n      const activeSubscribers =\n        subscribers?.filter((s) => s.status === \"active\") || [];\n\n      if (activeSubscribers.length === 0) {\n        toast({\n          title: \"Warning\",\n          description: \"No active subscribers found\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Create email campaign\n      const campaign = await api.emailCampaigns.createCampaign({\n        name: `Bulk Email - ${new Date().toLocaleDateString()}`,\n        subject: bulkEmailContent.subject,\n        content: bulkEmailContent.content,\n        status: \"sent\",\n        recipient_count: activeSubscribers.length,\n        sent_count: activeSubscribers.length,\n        sent_at: new Date().toISOString(),\n      });\n\n      toast({\n        title: \"Success\",\n        description: `Email campaign created and sent to ${activeSubscribers.length} subscribers`,\n      });\n\n      setBulkEmailContent({ subject: \"\", content: \"\" });\n    } catch (error) {\n      console.error(\"Bulk email error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send bulk email\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n            Bulk Operations\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Manage data in bulk - import, export, and batch operations\n          </p>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"members\">Members</TabsTrigger>\n          <TabsTrigger value=\"events\">Events</TabsTrigger>\n          <TabsTrigger value=\"email\">Email Campaign</TabsTrigger>\n          <TabsTrigger value=\"operations\">Operations</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"members\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"h-5 w-5 mr-2\" />\n                  Import Members\n                </CardTitle>\n                <CardDescription>\n                  Upload member data from JSON or CSV files\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"member-file\">Upload File</Label>\n                  <Input\n                    id=\"member-file\"\n                    type=\"file\"\n                    accept=\".json,.csv\"\n                    onChange={(e) => handleFileUpload(e, \"members\")}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"member-data\">Or Paste JSON Data</Label>\n                  <Textarea\n                    id=\"member-data\"\n                    placeholder='[{\"full_name\": \"John Doe\", \"email\": \"john@example.com\", \"phone\": \"123-456-7890\"}]'\n                    value={importData}\n                    onChange={(e) => setImportData(e.target.value)}\n                    rows={8}\n                  />\n                </div>\n                <Button\n                  onClick={() => handleBulkImport(\"members\")}\n                  className=\"w-full\"\n                  disabled={!importData.trim()}\n                >\n                  Import Members\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Export Members\n                </CardTitle>\n                <CardDescription>\n                  Download all member data as JSON\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Export all member records including contact information,\n                  membership details, and registration dates.\n                </p>\n                <Button\n                  onClick={() => handleBulkExport(\"members\")}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export All Members\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"events\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"h-5 w-5 mr-2\" />\n                  Import Events\n                </CardTitle>\n                <CardDescription>\n                  Upload event data from JSON or CSV files\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event-file\">Upload File</Label>\n                  <Input\n                    id=\"event-file\"\n                    type=\"file\"\n                    accept=\".json,.csv\"\n                    onChange={(e) => handleFileUpload(e, \"events\")}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event-data\">Or Paste JSON Data</Label>\n                  <Textarea\n                    id=\"event-data\"\n                    placeholder='[{\"title\": \"Sunday Service\", \"event_date\": \"2024-01-01\", \"event_time\": \"10:00\", \"location\": \"Main Hall\"}]'\n                    value={importData}\n                    onChange={(e) => setImportData(e.target.value)}\n                    rows={8}\n                  />\n                </div>\n                <Button\n                  onClick={() => handleBulkImport(\"events\")}\n                  className=\"w-full\"\n                  disabled={!importData.trim()}\n                >\n                  Import Events\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Export Events\n                </CardTitle>\n                <CardDescription>\n                  Download all event data as JSON\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Export all event records including dates, times, locations,\n                  and descriptions.\n                </p>\n                <Button\n                  onClick={() => handleBulkExport(\"events\")}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export All Events\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"email\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"h-5 w-5 mr-2\" />\n                Bulk Email Campaign\n              </CardTitle>\n              <CardDescription>\n                Send emails to all active subscribers\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email-subject\">Subject</Label>\n                <Input\n                  id=\"email-subject\"\n                  placeholder=\"Enter email subject\"\n                  value={bulkEmailContent.subject}\n                  onChange={(e) =>\n                    setBulkEmailContent((prev) => ({\n                      ...prev,\n                      subject: e.target.value,\n                    }))\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email-content\">Content</Label>\n                <Textarea\n                  id=\"email-content\"\n                  placeholder=\"Enter email content...\"\n                  value={bulkEmailContent.content}\n                  onChange={(e) =>\n                    setBulkEmailContent((prev) => ({\n                      ...prev,\n                      content: e.target.value,\n                    }))\n                  }\n                  rows={10}\n                />\n              </div>\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                <div className=\"flex items-center\">\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-600 mr-2\" />\n                  <p className=\"text-sm text-yellow-800\">\n                    This will send the email to all active subscribers. Make\n                    sure to review the content carefully.\n                  </p>\n                </div>\n              </div>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    className=\"w-full\"\n                    disabled={\n                      !bulkEmailContent.subject || !bulkEmailContent.content\n                    }\n                  >\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Send Bulk Email\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Confirm Bulk Email</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to send this email to all active\n                      subscribers? This action cannot be undone.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleBulkEmail}>\n                      Send Email\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"operations\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Operation History</CardTitle>\n              <CardDescription>\n                Track the status of bulk operations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {operations.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">No operations yet</p>\n                  <p className=\"text-sm text-gray-400 mt-1\">\n                    Bulk operations will appear here when you perform them\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {operations.map((operation) => (\n                    <div key={operation.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          {operation.status === \"completed\" ? (\n                            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                          ) : operation.status === \"failed\" ? (\n                            <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                          ) : (\n                            <div className=\"h-5 w-5 border-2 border-church-burgundy border-t-transparent rounded-full animate-spin\" />\n                          )}\n                          <span className=\"font-medium capitalize\">\n                            {operation.type} Operation\n                          </span>\n                        </div>\n                        <span className=\"text-sm text-gray-500\">\n                          {operation.createdAt.toLocaleString()}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {operation.message}\n                      </p>\n                      {operation.total > 0 && (\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-church-burgundy h-2 rounded-full transition-all duration-300\"\n                            style={{\n                              width: `${(operation.progress / operation.total) * 100}%`,\n                            }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/ContentScheduler.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Play' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'supabase' is defined but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1486,1489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1486,1489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'editingContent' is assigned a value but never used.","line":83,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setEditingContent' is assigned a value but never used.","line":83,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":43},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAndPublishContent'. Either include it or remove the dependency array.","line":112,"column":6,"nodeType":"ArrayExpression","endLine":112,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAndPublishContent]","fix":{"range":[2784,2786],"text":"[checkAndPublishContent]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3122,3125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3122,3125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7071,7074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7071,7074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":428,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12263,12266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12263,12266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":626,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":626,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19898,19901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19898,19901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Calendar,\n  Clock,\n  Mail,\n  FileText,\n  Image,\n  Play,\n  Pause,\n  Trash2,\n  Plus,\n  Edit,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format, addDays, addWeeks, addMonths } from \"date-fns\";\nimport { api } from \"@/integrations/supabase/api\";\n\ninterface ScheduledContent {\n  id: string;\n  type: \"event\" | \"sermon\" | \"email\" | \"post\";\n  title: string;\n  content: any;\n  scheduledFor: Date;\n  status: \"scheduled\" | \"published\" | \"failed\" | \"cancelled\";\n  recurring?: {\n    frequency: \"daily\" | \"weekly\" | \"monthly\";\n    interval: number;\n    endDate?: Date;\n  };\n  createdAt: Date;\n  publishedAt?: Date;\n}\n\nexport default function ContentScheduler() {\n  const [scheduledContent, setScheduledContent] = useState<ScheduledContent[]>(\n    [],\n  );\n  const [loading, setLoading] = useState(true);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingContent, setEditingContent] = useState<ScheduledContent | null>(\n    null,\n  );\n  const [activeTab, setActiveTab] = useState(\"scheduled\");\n  const { toast } = useToast();\n\n  const [newContent, setNewContent] = useState({\n    type: \"event\" as const,\n    title: \"\",\n    description: \"\",\n    scheduledFor: \"\",\n    scheduledTime: \"\",\n    recurring: false,\n    frequency: \"weekly\" as const,\n    interval: 1,\n    endDate: \"\",\n    emailSubject: \"\",\n    emailContent: \"\",\n    eventLocation: \"\",\n    eventTime: \"\",\n    sermonPreacher: \"\",\n    sermonAudioUrl: \"\",\n  });\n\n  useEffect(() => {\n    loadScheduledContent();\n    // Set up interval to check for content to publish\n    const interval = setInterval(checkAndPublishContent, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, []);\n\n  const loadScheduledContent = async () => {\n    try {\n      setLoading(true);\n      // In a real app, this would be stored in a dedicated table\n      // For now, we'll simulate with localStorage\n      const stored = localStorage.getItem(\"scheduledContent\");\n      if (stored) {\n        const parsed = JSON.parse(stored).map((item: any) => ({\n          ...item,\n          scheduledFor: new Date(item.scheduledFor),\n          createdAt: new Date(item.createdAt),\n          publishedAt: item.publishedAt\n            ? new Date(item.publishedAt)\n            : undefined,\n        }));\n        setScheduledContent(parsed);\n      }\n    } catch (error) {\n      console.error(\"Error loading scheduled content:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveScheduledContent = (content: ScheduledContent[]) => {\n    localStorage.setItem(\"scheduledContent\", JSON.stringify(content));\n    setScheduledContent(content);\n  };\n\n  const checkAndPublishContent = async () => {\n    const now = new Date();\n    const toPublish = scheduledContent.filter(\n      (item) => item.status === \"scheduled\" && item.scheduledFor <= now,\n    );\n\n    for (const item of toPublish) {\n      await publishContent(item);\n    }\n  };\n\n  const publishContent = async (content: ScheduledContent) => {\n    try {\n      let success = false;\n\n      switch (content.type) {\n        case \"event\":\n          await api.events.createEvent(content.content);\n          success = true;\n          break;\n        case \"sermon\":\n          await api.sermons.createSermon(content.content);\n          success = true;\n          break;\n        case \"email\":\n          await api.emailCampaigns.createCampaign({\n            ...content.content,\n            status: \"sent\",\n            sent_at: new Date().toISOString(),\n          });\n          success = true;\n          break;\n        default:\n          success = false;\n      }\n\n      const updatedContent = scheduledContent.map((item) =>\n        item.id === content.id\n          ? {\n              ...item,\n              status: success ? (\"published\" as const) : (\"failed\" as const),\n              publishedAt: success ? new Date() : undefined,\n            }\n          : item,\n      );\n\n      // Handle recurring content\n      if (success && content.recurring) {\n        const nextDate = calculateNextDate(\n          content.scheduledFor,\n          content.recurring,\n        );\n        if (\n          !content.recurring.endDate ||\n          nextDate <= content.recurring.endDate\n        ) {\n          const nextContent: ScheduledContent = {\n            ...content,\n            id: Date.now().toString() + Math.random(),\n            scheduledFor: nextDate,\n            status: \"scheduled\",\n            publishedAt: undefined,\n          };\n          updatedContent.push(nextContent);\n        }\n      }\n\n      saveScheduledContent(updatedContent);\n\n      toast({\n        title: success ? \"Content Published\" : \"Publishing Failed\",\n        description: `${content.title} ${success ? \"has been published\" : \"failed to publish\"}`,\n        variant: success ? \"default\" : \"destructive\",\n      });\n    } catch (error) {\n      console.error(\"Error publishing content:\", error);\n      const updatedContent = scheduledContent.map((item) =>\n        item.id === content.id ? { ...item, status: \"failed\" as const } : item,\n      );\n      saveScheduledContent(updatedContent);\n    }\n  };\n\n  const calculateNextDate = (\n    currentDate: Date,\n    recurring: ScheduledContent[\"recurring\"],\n  ) => {\n    if (!recurring) return currentDate;\n\n    switch (recurring.frequency) {\n      case \"daily\":\n        return addDays(currentDate, recurring.interval);\n      case \"weekly\":\n        return addWeeks(currentDate, recurring.interval);\n      case \"monthly\":\n        return addMonths(currentDate, recurring.interval);\n      default:\n        return currentDate;\n    }\n  };\n\n  const handleScheduleContent = async () => {\n    if (!newContent.title || !newContent.scheduledFor) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide title and scheduled date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const scheduledDateTime = new Date(\n      `${newContent.scheduledFor}T${newContent.scheduledTime || \"09:00\"}`,\n    );\n\n    let contentData: any = {};\n\n    switch (newContent.type) {\n      case \"event\":\n        contentData = {\n          title: newContent.title,\n          description: newContent.description,\n          event_date: newContent.scheduledFor,\n          event_time: newContent.eventTime,\n          location: newContent.eventLocation,\n        };\n        break;\n      case \"sermon\":\n        contentData = {\n          title: newContent.title,\n          description: newContent.description,\n          sermon_date: newContent.scheduledFor,\n          preacher: newContent.sermonPreacher || \"Pastor\",\n          audio_url: newContent.sermonAudioUrl,\n        };\n        break;\n      case \"email\":\n        contentData = {\n          name: newContent.title,\n          subject: newContent.emailSubject,\n          content: newContent.emailContent,\n        };\n        break;\n    }\n\n    const scheduled: ScheduledContent = {\n      id: Date.now().toString() + Math.random(),\n      type: newContent.type,\n      title: newContent.title,\n      content: contentData,\n      scheduledFor: scheduledDateTime,\n      status: \"scheduled\",\n      recurring: newContent.recurring\n        ? {\n            frequency: newContent.frequency,\n            interval: newContent.interval,\n            endDate: newContent.endDate\n              ? new Date(newContent.endDate)\n              : undefined,\n          }\n        : undefined,\n      createdAt: new Date(),\n    };\n\n    const updatedContent = [...scheduledContent, scheduled];\n    saveScheduledContent(updatedContent);\n\n    toast({\n      title: \"Content Scheduled\",\n      description: `${newContent.title} has been scheduled for ${format(scheduledDateTime, \"PPP p\")}`,\n    });\n\n    // Reset form\n    setNewContent({\n      type: \"event\",\n      title: \"\",\n      description: \"\",\n      scheduledFor: \"\",\n      scheduledTime: \"\",\n      recurring: false,\n      frequency: \"weekly\",\n      interval: 1,\n      endDate: \"\",\n      emailSubject: \"\",\n      emailContent: \"\",\n      eventLocation: \"\",\n      eventTime: \"\",\n      sermonPreacher: \"\",\n      sermonAudioUrl: \"\",\n    });\n    setDialogOpen(false);\n  };\n\n  const handleCancelScheduled = (id: string) => {\n    const updatedContent = scheduledContent.map((item) =>\n      item.id === id ? { ...item, status: \"cancelled\" as const } : item,\n    );\n    saveScheduledContent(updatedContent);\n\n    toast({\n      title: \"Content Cancelled\",\n      description: \"Scheduled content has been cancelled\",\n    });\n  };\n\n  const handleDeleteScheduled = (id: string) => {\n    const updatedContent = scheduledContent.filter((item) => item.id !== id);\n    saveScheduledContent(updatedContent);\n\n    toast({\n      title: \"Content Deleted\",\n      description: \"Scheduled content has been deleted\",\n    });\n  };\n\n  const getStatusIcon = (status: ScheduledContent[\"status\"]) => {\n    switch (status) {\n      case \"scheduled\":\n        return <Clock className=\"h-4 w-4 text-blue-600\" />;\n      case \"published\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"failed\":\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      case \"cancelled\":\n        return <AlertTriangle className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getTypeIcon = (type: ScheduledContent[\"type\"]) => {\n    switch (type) {\n      case \"event\":\n        return <Calendar className=\"h-4 w-4\" />;\n      case \"sermon\":\n        return <FileText className=\"h-4 w-4\" />;\n      case \"email\":\n        return <Mail className=\"h-4 w-4\" />;\n      case \"post\":\n        return <Image className=\"h-4 w-4\" />;\n    }\n  };\n\n  const filteredContent = scheduledContent.filter((item) => {\n    switch (activeTab) {\n      case \"scheduled\":\n        return item.status === \"scheduled\";\n      case \"published\":\n        return item.status === \"published\";\n      case \"failed\":\n        return item.status === \"failed\" || item.status === \"cancelled\";\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <div className=\"space-y-6 bg-white min-h-screen p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Content Scheduler\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Schedule and automate content publishing\n          </p>\n        </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Schedule Content\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Schedule New Content</DialogTitle>\n              <DialogDescription>\n                Create content to be automatically published at a specific time\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"content-type\">Content Type</Label>\n                  <Select\n                    value={newContent.type}\n                    onValueChange={(value: any) =>\n                      setNewContent((prev) => ({ ...prev, type: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"event\">Event</SelectItem>\n                      <SelectItem value=\"sermon\">Sermon</SelectItem>\n                      <SelectItem value=\"email\">Email Campaign</SelectItem>\n                      <SelectItem value=\"post\">Post</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Content title\"\n                    value={newContent.title}\n                    onChange={(e) =>\n                      setNewContent((prev) => ({\n                        ...prev,\n                        title: e.target.value,\n                      }))\n                    }\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Content description\"\n                  value={newContent.description}\n                  onChange={(e) =>\n                    setNewContent((prev) => ({\n                      ...prev,\n                      description: e.target.value,\n                    }))\n                  }\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"scheduled-date\">Scheduled Date</Label>\n                  <Input\n                    id=\"scheduled-date\"\n                    type=\"date\"\n                    value={newContent.scheduledFor}\n                    onChange={(e) =>\n                      setNewContent((prev) => ({\n                        ...prev,\n                        scheduledFor: e.target.value,\n                      }))\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"scheduled-time\">Scheduled Time</Label>\n                  <Input\n                    id=\"scheduled-time\"\n                    type=\"time\"\n                    value={newContent.scheduledTime}\n                    onChange={(e) =>\n                      setNewContent((prev) => ({\n                        ...prev,\n                        scheduledTime: e.target.value,\n                      }))\n                    }\n                  />\n                </div>\n              </div>\n\n              {/* Type-specific fields */}\n              {newContent.type === \"event\" && (\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"event-location\">Location</Label>\n                    <Input\n                      id=\"event-location\"\n                      placeholder=\"Event location\"\n                      value={newContent.eventLocation}\n                      onChange={(e) =>\n                        setNewContent((prev) => ({\n                          ...prev,\n                          eventLocation: e.target.value,\n                        }))\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"event-time\">Event Time</Label>\n                    <Input\n                      id=\"event-time\"\n                      type=\"time\"\n                      value={newContent.eventTime}\n                      onChange={(e) =>\n                        setNewContent((prev) => ({\n                          ...prev,\n                          eventTime: e.target.value,\n                        }))\n                      }\n                    />\n                  </div>\n                </div>\n              )}\n\n              {newContent.type === \"sermon\" && (\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sermon-preacher\">Preacher</Label>\n                    <Input\n                      id=\"sermon-preacher\"\n                      placeholder=\"Preacher name\"\n                      value={newContent.sermonPreacher}\n                      onChange={(e) =>\n                        setNewContent((prev) => ({\n                          ...prev,\n                          sermonPreacher: e.target.value,\n                        }))\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sermon-audio\">Audio URL</Label>\n                    <Input\n                      id=\"sermon-audio\"\n                      placeholder=\"Audio file URL\"\n                      value={newContent.sermonAudioUrl}\n                      onChange={(e) =>\n                        setNewContent((prev) => ({\n                          ...prev,\n                          sermonAudioUrl: e.target.value,\n                        }))\n                      }\n                    />\n                  </div>\n                </div>\n              )}\n\n              {newContent.type === \"email\" && (\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email-subject\">Email Subject</Label>\n                    <Input\n                      id=\"email-subject\"\n                      placeholder=\"Email subject line\"\n                      value={newContent.emailSubject}\n                      onChange={(e) =>\n                        setNewContent((prev) => ({\n                          ...prev,\n                          emailSubject: e.target.value,\n                        }))\n                      }\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email-content\">Email Content</Label>\n                    <Textarea\n                      id=\"email-content\"\n                      placeholder=\"Email content\"\n                      value={newContent.emailContent}\n                      onChange={(e) =>\n                        setNewContent((prev) => ({\n                          ...prev,\n                          emailContent: e.target.value,\n                        }))\n                      }\n                      rows={4}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Recurring options */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"recurring\"\n                    checked={newContent.recurring}\n                    onCheckedChange={(checked) =>\n                      setNewContent((prev) => ({ ...prev, recurring: checked }))\n                    }\n                  />\n                  <Label htmlFor=\"recurring\">Make this recurring</Label>\n                </div>\n\n                {newContent.recurring && (\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"frequency\">Frequency</Label>\n                      <Select\n                        value={newContent.frequency}\n                        onValueChange={(value: any) =>\n                          setNewContent((prev) => ({\n                            ...prev,\n                            frequency: value,\n                          }))\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"daily\">Daily</SelectItem>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"interval\">Interval</Label>\n                      <Input\n                        id=\"interval\"\n                        type=\"number\"\n                        min=\"1\"\n                        value={newContent.interval}\n                        onChange={(e) =>\n                          setNewContent((prev) => ({\n                            ...prev,\n                            interval: parseInt(e.target.value) || 1,\n                          }))\n                        }\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"end-date\">End Date (Optional)</Label>\n                      <Input\n                        id=\"end-date\"\n                        type=\"date\"\n                        value={newContent.endDate}\n                        onChange={(e) =>\n                          setNewContent((prev) => ({\n                            ...prev,\n                            endDate: e.target.value,\n                          }))\n                        }\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleScheduleContent}>\n                  Schedule Content\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"scheduled\">\n            Scheduled (\n            {scheduledContent.filter((c) => c.status === \"scheduled\").length})\n          </TabsTrigger>\n          <TabsTrigger value=\"published\">\n            Published (\n            {scheduledContent.filter((c) => c.status === \"published\").length})\n          </TabsTrigger>\n          <TabsTrigger value=\"failed\">\n            Failed/Cancelled (\n            {\n              scheduledContent.filter(\n                (c) => c.status === \"failed\" || c.status === \"cancelled\",\n              ).length\n            }\n            )\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeTab} className=\"space-y-4\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n            </div>\n          ) : filteredContent.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No {activeTab} content</p>\n                <p className=\"text-sm text-gray-400 mt-1\">\n                  {activeTab === \"scheduled\"\n                    ? \"Schedule some content to get started\"\n                    : `No ${activeTab} content found`}\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {filteredContent.map((item) => (\n                <Card key={item.id}>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        {getTypeIcon(item.type)}\n                        <div>\n                          <h3 className=\"font-medium\">{item.title}</h3>\n                          <p className=\"text-sm text-gray-600 capitalize\">\n                            {item.type}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            Scheduled for: {format(item.scheduledFor, \"PPP p\")}\n                          </p>\n                          {item.recurring && (\n                            <p className=\"text-xs text-blue-600\">\n                              Recurring: Every {item.recurring.interval}{\" \"}\n                              {item.recurring.frequency}\n                            </p>\n                          )}\n                          {item.publishedAt && (\n                            <p className=\"text-xs text-green-600\">\n                              Published: {format(item.publishedAt, \"PPP p\")}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {getStatusIcon(item.status)}\n                        <span className=\"text-sm capitalize font-medium\">\n                          {item.status}\n                        </span>\n                        {item.status === \"scheduled\" && (\n                          <div className=\"flex space-x-1 ml-4\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleCancelScheduled(item.id)}\n                            >\n                              <Pause className=\"h-3 w-3\" />\n                            </Button>\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button size=\"sm\" variant=\"outline\">\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>\n                                    Delete Scheduled Content\n                                  </AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to delete &quot;\n                                    {item.title}&quot;? This action cannot be\n                                    undone.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction\n                                    onClick={() =>\n                                      handleDeleteScheduled(item.id)\n                                    }\n                                  >\n                                    Delete\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        )}\n                        {(item.status === \"failed\" ||\n                          item.status === \"cancelled\") && (\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>\n                                  Delete Content\n                                </AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete &quot;\n                                  {item.title}&quot;? This action cannot be\n                                  undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => handleDeleteScheduled(item.id)}\n                                >\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UserPlus' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useDataContext' is defined but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":104,"column":6,"nodeType":"ArrayExpression","endLine":104,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboardData]","fix":{"range":[2724,2726],"text":"[loadDashboardData]"}}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Calendar,\n  Image,\n  Users,\n  DollarSign,\n  MessageSquare,\n  Heart,\n  TrendingUp,\n  Activity,\n  UserPlus,\n  Shield,\n  Plus,\n  Upload,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport AdminSyncStatus from \"@/components/AdminSyncStatus\";\nimport AuditLog from \"@/components/AuditLog\";\nimport ErrorDiagnostics from \"@/components/ErrorDiagnostics\";\nimport { useDataContext } from \"@/contexts/DataContext\";\nimport { dataSyncService } from \"@/services/DataSyncService\";\nimport {\n  AdminDiagnostics,\n  type DiagnosticResult,\n} from \"@/utils/adminDiagnostics\";\n\ninterface DashboardStats {\n  totalEvents: number;\n  totalMembers: number;\n  totalDonations: number;\n  totalTestimonials: number;\n  totalPrayerRequests: number;\n  totalSermons: number;\n  recentDonationAmount: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  type:\n    | \"event\"\n    | \"member\"\n    | \"donation\"\n    | \"testimonial\"\n    | \"prayer_request\"\n    | \"sermon\";\n  title: string;\n  description: string;\n  created_at: string;\n}\n\nexport default function Dashboard() {\n  const [stats, setStats] = useState<DashboardStats>({\n    totalEvents: 0,\n    totalMembers: 0,\n    totalDonations: 0,\n    totalTestimonials: 0,\n    totalPrayerRequests: 0,\n    totalSermons: 0,\n    recentDonationAmount: 0,\n  });\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogLoading, setDialogLoading] = useState(false);\n  const [openDialog, setOpenDialog] = useState<string | null>(null);\n  const [diagnostics, setDiagnostics] = useState<DiagnosticResult[]>([]);\n  const [runningDiagnostics, setRunningDiagnostics] = useState(false);\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  // Data context for sync operations\n  // const { forceSync } = useDataContext(); // Commented to prevent infinite loops\n\n  useEffect(() => {\n    loadDashboardData();\n    runDiagnostics();\n  }, []);\n\n  const runDiagnostics = async () => {\n    setRunningDiagnostics(true);\n    try {\n      const results = await AdminDiagnostics.runFullDiagnostics();\n      setDiagnostics(results);\n    } catch (error) {\n      console.error(\"Diagnostics failed:\", error);\n    } finally {\n      setRunningDiagnostics(false);\n    }\n  };\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      console.log(\"Loading dashboard data...\");\n\n      // Load statistics from all tables with error handling for each\n      const results = await Promise.allSettled([\n        supabase.from(\"events\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"members\").select(\"*\", { count: \"exact\", head: true }),\n        supabase\n          .from(\"donations\")\n          .select(\"amount, created_at\")\n          .order(\"created_at\", { ascending: false }),\n        supabase\n          .from(\"testimonials\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabase\n          .from(\"prayer_requests\")\n          .select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"sermons\").select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n      // Extract results with fallbacks\n      const [\n        eventsRes,\n        membersRes,\n        donationsRes,\n        testimonialsRes,\n        prayerRequestsRes,\n        sermonsRes,\n      ] = results.map((result, index) => {\n        const tableNames = [\n          \"events\",\n          \"members\",\n          \"donations\",\n          \"testimonials\",\n          \"prayer_requests\",\n          \"sermons\",\n        ];\n        if (result.status === \"rejected\") {\n          console.error(\n            `Dashboard data load failed for ${tableNames[index]}:`,\n            result.reason,\n          );\n          toast({\n            title: \"Warning\",\n            description: `Failed to load ${tableNames[index]} data`,\n            variant: \"destructive\",\n          });\n          return { data: null, count: 0, error: result.reason };\n        }\n        return result.value;\n      });\n\n      // Calculate recent donation amount (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const recentDonations =\n        donationsRes?.data?.filter(\n          (d) => d?.created_at && new Date(d.created_at) >= thirtyDaysAgo,\n        ) || [];\n\n      const recentDonationAmount = recentDonations.reduce(\n        (sum, d) => sum + (d?.amount || 0),\n        0,\n      );\n\n      setStats({\n        totalEvents: eventsRes?.count || 0,\n        totalMembers: membersRes?.count || 0,\n        totalDonations: donationsRes?.data?.length || 0,\n        totalTestimonials: testimonialsRes?.count || 0,\n        totalPrayerRequests: prayerRequestsRes?.count || 0,\n        totalSermons: sermonsRes?.count || 0,\n        recentDonationAmount,\n      });\n\n      // Load recent activity\n      await loadRecentActivity();\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load dashboard data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadRecentActivity = async () => {\n    try {\n      const activities: RecentActivity[] = [];\n\n      // Get recent events with error handling\n      try {\n        const { data: events, error: eventsError } = await supabase\n          .from(\"events\")\n          .select(\"id, title, description, created_at\")\n          .order(\"created_at\", { ascending: false })\n          .limit(3);\n\n        if (eventsError) {\n          console.error(\"Error loading recent events:\", eventsError);\n        } else if (events && Array.isArray(events)) {\n          events.forEach((event) => {\n            if (event?.id && event?.title && event?.created_at) {\n              activities.push({\n                id: event.id,\n                type: \"event\",\n                title: `New Event: ${event.title}`,\n                description: event.description || \"No description\",\n                created_at: event.created_at,\n              });\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to load recent events:\", error);\n      }\n\n      // Get recent members with error handling\n      try {\n        const { data: members, error: membersError } = await supabase\n          .from(\"members\")\n          .select(\"id, full_name, created_at\")\n          .order(\"created_at\", { ascending: false })\n          .limit(3);\n\n        if (membersError) {\n          console.error(\"Error loading recent members:\", membersError);\n        } else if (members && Array.isArray(members)) {\n          members.forEach((member) => {\n            if (member?.id && member?.full_name && member?.created_at) {\n              activities.push({\n                id: member.id,\n                type: \"member\",\n                title: `New Member: ${member.full_name}`,\n                description: \"Joined the church community\",\n                created_at: member.created_at,\n              });\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to load recent members:\", error);\n      }\n\n      // Sort by creation date and take the most recent 6\n      activities.sort(\n        (a, b) =>\n          new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),\n      );\n      setRecentActivity(activities.slice(0, 6));\n    } catch (error) {\n      console.error(\"Error loading recent activity:\", error);\n    }\n  };\n\n  const getActivityIcon = (type: RecentActivity[\"type\"]) => {\n    switch (type) {\n      case \"event\":\n        return <Calendar className=\"h-4 w-4\" />;\n      case \"member\":\n        return <Users className=\"h-4 w-4\" />;\n      case \"donation\":\n        return <DollarSign className=\"h-4 w-4\" />;\n      case \"testimonial\":\n        return <MessageSquare className=\"h-4 w-4\" />;\n      case \"prayer_request\":\n        return <Heart className=\"h-4 w-4\" />;\n      case \"sermon\":\n        return <Activity className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  const handleCreateEvent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const eventData = {\n        title: formData.get(\"title\") as string,\n        description: formData.get(\"description\") as string,\n        event_date: formData.get(\"event_date\") as string,\n        event_time: (formData.get(\"event_time\") as string) || null,\n        location: (formData.get(\"location\") as string) || null,\n        is_featured: false,\n        image_url: null,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating event with data:\", eventData);\n\n      const { data, error } = await supabase\n        .from(\"events\")\n        .insert([eventData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error(\"Supabase error:\", error);\n        throw error;\n      }\n\n      console.log(\"Event created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"create\", \"events\", data);\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to create event: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  const handleCreateMember = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const fullName = formData.get(\"full_name\") as string;\n      const nameParts = fullName.trim().split(\" \");\n      const firstName = nameParts[0] || \"\";\n      const lastName = nameParts.slice(1).join(\" \") || \"\";\n\n      const memberData = {\n        full_name: fullName,\n        email: (formData.get(\"email\") as string) || null,\n        phone: (formData.get(\"phone\") as string) || null,\n        address: (formData.get(\"address\") as string) || null,\n        membership_type:\n          (formData.get(\"membership_type\") as string) || \"regular\",\n        membership_status: \"active\",\n        join_date: new Date().toISOString(),\n        membership_date: new Date().toISOString(),\n        registration_date: new Date().toISOString().split(\"T\")[0],\n        first_name: firstName,\n        last_name: lastName,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating member with data:\", memberData);\n\n      const { data, error } = await supabase\n        .from(\"members\")\n        .insert([memberData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error(\"Supabase error:\", error);\n        throw error;\n      }\n\n      console.log(\"Member created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description: \"Member added successfully\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"create\", \"members\", data);\n    } catch (error) {\n      console.error(\"Error creating member:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to add member: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  const handleCreateAdmin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const email = formData.get(\"email\") as string;\n\n      // Check if admin already exists\n      const { data: existingAdmin } = await supabase\n        .from(\"profiles\")\n        .select(\"id\")\n        .eq(\"email\", email)\n        .single();\n\n      if (existingAdmin) {\n        throw new Error(\"Admin with this email already exists\");\n      }\n\n      const adminData = {\n        id: crypto.randomUUID(),\n        email: email,\n        role: \"admin\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating admin with data:\", adminData);\n\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .insert([adminData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error(\"Supabase error:\", error);\n        throw error;\n      }\n\n      console.log(\"Admin created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description:\n          \"Admin user created successfully. They can now register with this email.\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"create\", \"profiles\", data);\n    } catch (error) {\n      console.error(\"Error creating admin:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to create admin user: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  const handleUploadImage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n    const file = formData.get(\"file\") as File;\n\n    if (!file) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a file\",\n        variant: \"destructive\",\n      });\n      setDialogLoading(false);\n      return;\n    }\n\n    // Validate file type\n    if (!file.type.startsWith(\"image/\")) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a valid image file\",\n        variant: \"destructive\",\n      });\n      setDialogLoading(false);\n      return;\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"Error\",\n        description: \"File size must be less than 5MB\",\n        variant: \"destructive\",\n      });\n      setDialogLoading(false);\n      return;\n    }\n\n    try {\n      console.log(\"Starting image upload:\", file.name, file.size, file.type);\n\n      // Upload file to storage bucket\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;\n      const filePath = `gallery/${fileName}`;\n\n      const { data: uploadData, error: uploadError } = await supabase.storage\n        .from(\"images\")\n        .upload(filePath, file, {\n          cacheControl: \"3600\",\n          upsert: false,\n        });\n\n      if (uploadError) {\n        console.error(\"Upload error:\", uploadError);\n        throw uploadError;\n      }\n\n      console.log(\"File uploaded successfully:\", uploadData);\n\n      // Get the public URL\n      const {\n        data: { publicUrl },\n      } = supabase.storage.from(\"images\").getPublicUrl(filePath);\n\n      console.log(\"Public URL:\", publicUrl);\n\n      // Create database entry\n      const galleryData = {\n        title: formData.get(\"title\") as string,\n        description: (formData.get(\"description\") as string) || null,\n        image_url: publicUrl,\n        created_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating gallery entry:\", galleryData);\n\n      const { data, error: dbError } = await supabase\n        .from(\"gallery\")\n        .insert([galleryData])\n        .select()\n        .single();\n\n      if (dbError) {\n        console.error(\"Database error:\", dbError);\n        throw dbError;\n      }\n\n      console.log(\"Gallery entry created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description: \"Image uploaded successfully\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"create\", \"gallery\", data);\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to upload image: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  const handleCreateSermon = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setDialogLoading(true);\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const sermonData = {\n        title: formData.get(\"title\") as string,\n        description: (formData.get(\"description\") as string) || null,\n        scripture_reference:\n          (formData.get(\"scripture_reference\") as string) || null,\n        audio_url: (formData.get(\"audio_url\") as string) || null,\n        preacher: (formData.get(\"preacher\") as string) || null,\n        sermon_date: formData.get(\"sermon_date\") as string,\n        is_featured: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      console.log(\"Creating sermon with data:\", sermonData);\n\n      const { data, error } = await supabase\n        .from(\"sermons\")\n        .insert([sermonData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error(\"Supabase error:\", error);\n        throw error;\n      }\n\n      console.log(\"Sermon created successfully:\", data);\n\n      toast({\n        title: \"Success\",\n        description: \"Sermon added successfully\",\n      });\n      setOpenDialog(null);\n      form.reset();\n      loadDashboardData();\n\n      // Notify data sync service\n      dataSyncService.notifyAdminAction(\"create\", \"sermons\", data);\n    } catch (error) {\n      console.error(\"Error creating sermon:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      toast({\n        title: \"Error\",\n        description: `Failed to add sermon: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDialogLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <h1 className=\"text-2xl sm:text-3xl font-bold text-church-burgundy\">\n          Admin Dashboard\n        </h1>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={loadDashboardData}\n            variant=\"outline\"\n            className=\"w-full sm:w-auto\"\n          >\n            Refresh Data\n          </Button>\n          <Button\n            onClick={runDiagnostics}\n            variant=\"outline\"\n            disabled={runningDiagnostics}\n            className=\"w-full sm:w-auto\"\n          >\n            {runningDiagnostics ? \"Running...\" : \"Run Diagnostics\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <StatsCard\n          title=\"Total Events\"\n          value={stats.totalEvents.toString()}\n          description=\"Scheduled events\"\n          icon={<Calendar className=\"h-6 w-6\" />}\n          trend=\"+2 this month\"\n        />\n        <StatsCard\n          title=\"Church Members\"\n          value={stats.totalMembers.toString()}\n          description=\"Registered members\"\n          icon={<Users className=\"h-6 w-6\" />}\n          trend=\"+5 this month\"\n        />\n        <StatsCard\n          title=\"Recent Donations\"\n          value={`$${stats.recentDonationAmount.toLocaleString()}`}\n          description=\"Last 30 days\"\n          icon={<DollarSign className=\"h-6 w-6\" />}\n          trend=\"+12% from last month\"\n        />\n        <StatsCard\n          title=\"Prayer Requests\"\n          value={stats.totalPrayerRequests.toString()}\n          description=\"Pending requests\"\n          icon={<Heart className=\"h-6 w-6\" />}\n          trend=\"3 new today\"\n        />\n      </div>\n\n      {/* Secondary Stats */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <StatsCard\n          title=\"Sermons\"\n          value={stats.totalSermons.toString()}\n          description=\"Available sermons\"\n          icon={<Activity className=\"h-6 w-6\" />}\n          trend=\"1 new this week\"\n        />\n        <StatsCard\n          title=\"Testimonials\"\n          value={stats.totalTestimonials.toString()}\n          description=\"Approved testimonials\"\n          icon={<MessageSquare className=\"h-6 w-6\" />}\n          trend=\"2 pending approval\"\n        />\n        <StatsCard\n          title=\"Total Donations\"\n          value={stats.totalDonations.toString()}\n          description=\"All time donations\"\n          icon={<TrendingUp className=\"h-6 w-6\" />}\n          trend=\"Growing steadily\"\n        />\n      </div>\n\n      {/* Recent Activity, Quick Actions, and Sync Status */}\n      <div className=\"grid gap-4 lg:grid-cols-3\">\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n            <CardDescription>\n              Latest updates across the platform\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {recentActivity.length > 0 ? (\n                recentActivity.map((activity) => (\n                  <div\n                    key={activity.id}\n                    className=\"flex items-start space-x-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors\"\n                  >\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 line-clamp-1\">\n                        {activity.title}\n                      </p>\n                      <p className=\"text-sm text-gray-500 line-clamp-2\">\n                        {activity.description}\n                      </p>\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        {format(\n                          new Date(activity.created_at),\n                          \"MMM d, yyyy h:mm a\",\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-gray-500 text-center py-4\">\n                  No recent activity\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>Common administrative tasks</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-3\">\n              {/* Create Event Dialog */}\n              <Dialog\n                open={openDialog === \"event\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"event\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Create New Event\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Event</DialogTitle>\n                    <DialogDescription>\n                      Add a new church event\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateEvent} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"title\">Event Title</Label>\n                      <Input id=\"title\" name=\"title\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea id=\"description\" name=\"description\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"event_date\">Date</Label>\n                      <Input\n                        id=\"event_date\"\n                        name=\"event_date\"\n                        type=\"date\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"event_time\">Time</Label>\n                      <Input id=\"event_time\" name=\"event_time\" type=\"time\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"location\">Location</Label>\n                      <Input id=\"location\" name=\"location\" />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Creating...\" : \"Create Event\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Add Member Dialog */}\n              <Dialog\n                open={openDialog === \"member\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"member\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    Add New Member\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Member</DialogTitle>\n                    <DialogDescription>\n                      Register a new church member\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateMember} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"full_name\">Full Name</Label>\n                      <Input id=\"full_name\" name=\"full_name\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input id=\"email\" name=\"email\" type=\"email\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"phone\">Phone</Label>\n                      <Input id=\"phone\" name=\"phone\" type=\"tel\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"address\">Address</Label>\n                      <Input id=\"address\" name=\"address\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"membership_type\">Membership Type</Label>\n                      <Select name=\"membership_type\" defaultValue=\"regular\">\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select membership type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"regular\">Regular</SelectItem>\n                          <SelectItem value=\"student\">Student</SelectItem>\n                          <SelectItem value=\"senior\">Senior</SelectItem>\n                          <SelectItem value=\"family\">Family</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Adding...\" : \"Add Member\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Add Admin Dialog */}\n              <Dialog\n                open={openDialog === \"admin\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"admin\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Add New Admin\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Admin</DialogTitle>\n                    <DialogDescription>\n                      Create a new admin user\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateAdmin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"admin_email\">Email</Label>\n                      <Input\n                        id=\"admin_email\"\n                        name=\"email\"\n                        type=\"email\"\n                        required\n                      />\n                    </div>\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                      <p className=\"text-sm text-yellow-800\">\n                        <strong>Note:</strong> The admin will need to register\n                        with this email address using the admin registration\n                        process.\n                      </p>\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Creating...\" : \"Create Admin\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Upload Image Dialog */}\n              <Dialog\n                open={openDialog === \"image\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"image\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Image className=\"h-4 w-4 mr-2\" />\n                    Upload Gallery Image\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Upload Gallery Image</DialogTitle>\n                    <DialogDescription>\n                      Add a new image to the gallery\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleUploadImage} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"file\">Image File</Label>\n                      <Input\n                        id=\"file\"\n                        name=\"file\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"image_title\">Title</Label>\n                      <Input id=\"image_title\" name=\"title\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"image_description\">Description</Label>\n                      <Textarea id=\"image_description\" name=\"description\" />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Uploading...\" : \"Upload Image\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Add Sermon Dialog */}\n              <Dialog\n                open={openDialog === \"sermon\"}\n                onOpenChange={(open) => setOpenDialog(open ? \"sermon\" : null)}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Activity className=\"h-4 w-4 mr-2\" />\n                    Add New Sermon\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Sermon</DialogTitle>\n                    <DialogDescription>\n                      Add a sermon to the collection\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateSermon} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"sermon_title\">Sermon Title</Label>\n                      <Input id=\"sermon_title\" name=\"title\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"sermon_description\">Description</Label>\n                      <Textarea id=\"sermon_description\" name=\"description\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"scripture_reference\">\n                        Scripture Reference\n                      </Label>\n                      <Input\n                        id=\"scripture_reference\"\n                        name=\"scripture_reference\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"preacher\">Preacher</Label>\n                      <Input id=\"preacher\" name=\"preacher\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"sermon_date\">Sermon Date</Label>\n                      <Input\n                        id=\"sermon_date\"\n                        name=\"sermon_date\"\n                        type=\"date\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"audio_url\">Audio URL (optional)</Label>\n                      <Input id=\"audio_url\" name=\"audio_url\" type=\"url\" />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={dialogLoading}\n                    >\n                      {dialogLoading ? \"Adding...\" : \"Add Sermon\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Navigation Actions */}\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/analytics\")}\n              >\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\n                View Analytics\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/bulk-operations\")}\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Bulk Operations\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/testimonials\")}\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Review Testimonials\n              </Button>\n              <Button\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/admin/prayer-requests\")}\n              >\n                <Heart className=\"h-4 w-4 mr-2\" />\n                View Prayer Requests\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sync Status Panel */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Status</CardTitle>\n              <CardDescription>Real-time sync and git status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <AdminSyncStatus />\n            </CardContent>\n          </Card>\n\n          <ErrorDiagnostics />\n\n          {/* System Diagnostics */}\n          <Card>\n            <CardHeader>\n              <CardTitle>System Diagnostics</CardTitle>\n              <CardDescription>Component health status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {diagnostics.length > 0 ? (\n                  diagnostics.map((result, index) => (\n                    <div\n                      key={index}\n                      className={`flex items-center justify-between p-2 rounded text-sm ${\n                        result.status === \"success\"\n                          ? \"bg-green-50 text-green-800\"\n                          : result.status === \"warning\"\n                            ? \"bg-yellow-50 text-yellow-800\"\n                            : \"bg-red-50 text-red-800\"\n                      }`}\n                    >\n                      <span className=\"font-medium\">{result.component}</span>\n                      <span className=\"text-xs\">{result.message}</span>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-gray-500 text-center py-4\">\n                    {runningDiagnostics\n                      ? \"Running diagnostics...\"\n                      : \"No diagnostics run yet\"}\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Audit Log Section */}\n      <div className=\"mt-8\">\n        <AuditLog />\n      </div>\n    </div>\n  );\n}\n\nfunction StatsCard({\n  title,\n  value,\n  description,\n  icon,\n  trend,\n}: {\n  title: string;\n  value: string;\n  description: string;\n  icon: React.ReactNode;\n  trend?: string;\n}) {\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gray-600\">\n          {title}\n        </CardTitle>\n        <div className=\"text-church-burgundy\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-church-burgundy\">{value}</div>\n        <p className=\"text-xs text-gray-500 mt-1\">{description}</p>\n        {trend && (\n          <p className=\"text-xs text-green-600 mt-2 flex items-center\">\n            <TrendingUp className=\"h-3 w-3 mr-1\" />\n            {trend}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Donations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDonations'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadDonations]","fix":{"range":[1864,1866],"text":"[loadDonations]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterDonations'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":69,"suggestions":[{"desc":"Update the dependencies array to be: [donations, searchTerm, statusFilter, purposeFilter, dateRange, filterDonations]","fix":{"range":[1918,1981],"text":"[donations, searchTerm, statusFilter, purposeFilter, dateRange, filterDonations]"}}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  safeDataLoader,\n  logAdminAction,\n  formatErrorMessage,\n} from \"@/utils/adminHelpers\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Search,\n  DollarSign,\n  TrendingUp,\n  Users,\n  Calendar,\n  Download,\n  Filter,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Donation {\n  id: string;\n  amount: number;\n  donor_email: string;\n  donor_name: string | null;\n  purpose: string;\n  payment_status: string;\n  payment_id: string | null;\n  payment_method: string | null;\n  is_anonymous: boolean;\n  created_at: string;\n}\n\nexport default function AdminDonations() {\n  const [donations, setDonations] = useState<Donation[]>([]);\n  const [filteredDonations, setFilteredDonations] = useState<Donation[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [purposeFilter, setPurposeFilter] = useState(\"all\");\n  const [dateRange, setDateRange] = useState({ from: \"\", to: \"\" });\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadDonations();\n  }, []);\n\n  useEffect(() => {\n    filterDonations();\n  }, [donations, searchTerm, statusFilter, purposeFilter, dateRange]);\n\n  const loadDonations = async () => {\n    setLoading(true);\n\n    const { data, error } = await safeDataLoader(\n      () =>\n        supabase\n          .from(\"donations\")\n          .select(\"*\")\n          .order(\"created_at\", { ascending: false }),\n      \"donations\",\n    );\n\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: formatErrorMessage(error, \"Failed to load donations\"),\n        variant: \"destructive\",\n      });\n      setDonations([]);\n    } else {\n      // Ensure data has proper structure\n      const processedData = data.map((donation) => ({\n        ...donation,\n        amount: Number(donation.amount) || 0,\n        payment_status: donation.payment_status || \"pending\",\n        is_anonymous: Boolean(donation.is_anonymous),\n        donor_name: donation.donor_name || null,\n        donor_email: donation.donor_email || \"\",\n        purpose: donation.purpose || \"general_fund\",\n      }));\n\n      setDonations(processedData);\n      logAdminAction(\"load\", \"donations\", { count: processedData.length });\n    }\n\n    setLoading(false);\n  };\n\n  const filterDonations = () => {\n    let filtered = donations;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (donation) =>\n          donation.donor_email\n            ?.toLowerCase()\n            .includes(searchTerm.toLowerCase()) ||\n          donation.donor_name\n            ?.toLowerCase()\n            .includes(searchTerm.toLowerCase()) ||\n          donation.purpose.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Status filter\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(\n        (donation) => donation.payment_status === statusFilter,\n      );\n    }\n\n    // Purpose filter\n    if (purposeFilter !== \"all\") {\n      filtered = filtered.filter(\n        (donation) => donation.purpose === purposeFilter,\n      );\n    }\n\n    // Date range filter\n    if (dateRange.from) {\n      filtered = filtered.filter(\n        (donation) => new Date(donation.created_at) >= new Date(dateRange.from),\n      );\n    }\n    if (dateRange.to) {\n      filtered = filtered.filter(\n        (donation) => new Date(donation.created_at) <= new Date(dateRange.to),\n      );\n    }\n\n    setFilteredDonations(filtered);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <Badge className=\"bg-green-100 text-green-800\">Completed</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\n      case \"failed\":\n        return <Badge className=\"bg-red-100 text-red-800\">Failed</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getPurposeLabel = (purpose: string) => {\n    return purpose\n      .split(\"_\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \");\n  };\n\n  const calculateStats = () => {\n    const completedDonations = donations.filter(\n      (d) => d.payment_status === \"completed\",\n    );\n    const totalAmount = completedDonations.reduce(\n      (sum, d) => sum + d.amount,\n      0,\n    );\n    const averageAmount =\n      completedDonations.length > 0\n        ? totalAmount / completedDonations.length\n        : 0;\n    const thisMonthDonations = completedDonations.filter(\n      (d) => new Date(d.created_at).getMonth() === new Date().getMonth(),\n    );\n    const thisMonthAmount = thisMonthDonations.reduce(\n      (sum, d) => sum + d.amount,\n      0,\n    );\n\n    return {\n      totalAmount,\n      averageAmount,\n      totalDonations: completedDonations.length,\n      thisMonthAmount,\n      thisMonthCount: thisMonthDonations.length,\n    };\n  };\n\n  const exportDonations = () => {\n    const csvContent = [\n      [\n        \"Date\",\n        \"Donor Name\",\n        \"Email\",\n        \"Amount\",\n        \"Purpose\",\n        \"Status\",\n        \"Payment Method\",\n      ],\n      ...filteredDonations.map((donation) => [\n        format(new Date(donation.created_at), \"yyyy-MM-dd HH:mm\"),\n        donation.is_anonymous ? \"Anonymous\" : donation.donor_name || \"N/A\",\n        donation.is_anonymous ? \"Anonymous\" : donation.donor_email,\n        `$${donation.amount.toFixed(2)}`,\n        getPurposeLabel(donation.purpose),\n        donation.payment_status,\n        donation.payment_method || \"N/A\",\n      ]),\n    ]\n      .map((row) => row.join(\",\"))\n      .join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `donations-${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const stats = calculateStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Donations Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Track and manage church donations and contributions\n          </p>\n        </div>\n        <Button onClick={exportDonations} variant=\"outline\">\n          <Download className=\"w-4 h-4 mr-2\" />\n          Export CSV\n        </Button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <DollarSign className=\"w-4 h-4 mr-2\" />\n              Total Donations\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              ${stats.totalAmount.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.totalDonations} completed donations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Average Donation\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              ${stats.averageAmount.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-gray-500\">Per donation</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              This Month\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              ${stats.thisMonthAmount.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.thisMonthCount} donations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Unique Donors\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {new Set(donations.map((d) => d.donor_email)).size}\n            </div>\n            <p className=\"text-xs text-gray-500\">Total donors</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search donations...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status\">Status</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"purpose\">Purpose</Label>\n              <Select value={purposeFilter} onValueChange={setPurposeFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Purposes</SelectItem>\n                  <SelectItem value=\"general_fund\">General Fund</SelectItem>\n                  <SelectItem value=\"building_fund\">Building Fund</SelectItem>\n                  <SelectItem value=\"youth_programs\">Youth Programs</SelectItem>\n                  <SelectItem value=\"membership_fee\">Membership Fee</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dateFrom\">From Date</Label>\n              <Input\n                id=\"dateFrom\"\n                type=\"date\"\n                value={dateRange.from}\n                onChange={(e) =>\n                  setDateRange((prev) => ({ ...prev, from: e.target.value }))\n                }\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dateTo\">To Date</Label>\n              <Input\n                id=\"dateTo\"\n                type=\"date\"\n                value={dateRange.to}\n                onChange={(e) =>\n                  setDateRange((prev) => ({ ...prev, to: e.target.value }))\n                }\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Donations Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Donations ({filteredDonations.length})</CardTitle>\n          <CardDescription>Manage and track all donations</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Donor</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Purpose</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Payment Method</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredDonations.map((donation) => (\n                  <TableRow key={donation.id}>\n                    <TableCell>\n                      {format(\n                        new Date(donation.created_at),\n                        \"MMM d, yyyy HH:mm\",\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">\n                          {donation.is_anonymous\n                            ? \"Anonymous\"\n                            : donation.donor_name || \"N/A\"}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {donation.is_anonymous ? \"\" : donation.donor_email}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      ${donation.amount.toFixed(2)}\n                    </TableCell>\n                    <TableCell>{getPurposeLabel(donation.purpose)}</TableCell>\n                    <TableCell>\n                      {getStatusBadge(donation.payment_status)}\n                    </TableCell>\n                    <TableCell>\n                      {donation.payment_method\n                        ? donation.payment_method.charAt(0).toUpperCase() +\n                          donation.payment_method.slice(1)\n                        : \"N/A\"}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredDonations.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No donations found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Events.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImageIcon' is defined but never used.","line":49,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":120,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEvents'. Either include it or remove the dependency array.","line":215,"column":6,"nodeType":"ArrayExpression","endLine":215,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadEvents]","fix":{"range":[5642,5644],"text":"[loadEvents]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterEvents'. Either include it or remove the dependency array.","line":219,"column":6,"nodeType":"ArrayExpression","endLine":219,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [events, filterEvents, searchTerm]","fix":{"range":[5693,5713],"text":"[events, filterEvents, searchTerm]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Calendar,\n  MapPin,\n  Clock,\n  Image as ImageIcon,\n  Upload,\n  Loader2,\n} from \"lucide-react\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface Event {\n  id: string;\n  title: string;\n  description: string | null;\n  event_date: string;\n  event_time: string | null;\n  location: string | null;\n  image_url: string | null;\n  is_featured: boolean;\n  created_at: string;\n}\n\ninterface FileUploadProps {\n  onFileUpload: (url: string) => void;\n  defaultImageUrl?: string | null;\n}\n\n// File Upload Component\nconst FileUpload: React.FC<FileUploadProps> = ({\n  onFileUpload,\n  defaultImageUrl,\n}) => {\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(\n    defaultImageUrl || null,\n  );\n  const { toast } = useToast();\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const selectedFile = e.target.files[0];\n      setFile(selectedFile);\n\n      // Create a preview URL\n      const objectUrl = URL.createObjectURL(selectedFile);\n      setPreviewUrl(objectUrl);\n    }\n  };\n\n  const uploadFile = async () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to upload\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    setProgress(0);\n\n    try {\n      // Create a unique file path\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${Math.random().toString(36).substring(2, 15)}_${Date.now()}.${fileExt}`;\n      const filePath = `events/${fileName}`;\n\n      // Upload the file to Supabase Storage - removed onUploadProgress\n      const { data, error } = await supabase.storage\n        .from(\"images\")\n        .upload(filePath, file, {\n          cacheControl: \"3600\",\n          upsert: false,\n        });\n\n      if (error) throw error;\n\n      // Simulate progress for user feedback\n      setProgress(100);\n\n      // Get the public URL\n      const { data: publicUrlData } = supabase.storage\n        .from(\"images\")\n        .getPublicUrl(filePath);\n\n      // Pass the URL back to the parent component\n      onFileUpload(publicUrlData.publicUrl);\n\n      toast({\n        title: \"Upload successful\",\n        description: \"Image has been uploaded successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      toast({\n        title: \"Upload failed\",\n        description: error instanceof Error ? error.message : \"An error occurred during upload\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-4\">\n        <Input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileChange}\n          disabled={uploading}\n        />\n        <Button\n          type=\"button\"\n          onClick={uploadFile}\n          disabled={!file || uploading}\n          variant=\"secondary\"\n        >\n          {uploading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Uploading...\n            </>\n          ) : (\n            <>\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Upload\n            </>\n          )}\n        </Button>\n      </div>\n\n      {uploading && <Progress value={progress} className=\"h-2\" />}\n\n      {previewUrl && (\n        <div className=\"mt-4\">\n          <p className=\"text-sm font-medium mb-2\">Preview:</p>\n          <div className=\"relative w-full h-40 bg-gray-100 rounded-md overflow-hidden\">\n            <img\n              src={previewUrl}\n              alt=\"Preview\"\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default function AdminEvents() {\n  const [events, setEvents] = useState<Event[]>([]);\n  const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadEvents();\n  }, []);\n\n  useEffect(() => {\n    filterEvents();\n  }, [events, searchTerm]);\n\n  const loadEvents = async () => {\n    try {\n      const data = await api.events.getEvents();\n      setEvents(data || []);\n    } catch (error) {\n      console.error(\"Error loading events:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load events\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterEvents = () => {\n    let filtered = events;\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (event) =>\n          event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          event.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          event.location?.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    setFilteredEvents(filtered);\n  };\n\n  const handleAddEvent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      await api.events.createEvent({\n        title: formData.get(\"title\") as string,\n        description: formData.get(\"description\") as string,\n        event_date: formData.get(\"event_date\") as string,\n        event_time: (formData.get(\"event_time\") as string) || null,\n        location: (formData.get(\"location\") as string) || null,\n        image_url: uploadedImageUrl || null,\n        is_featured: formData.get(\"is_featured\") === \"on\",\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Event added successfully\",\n      });\n      loadEvents();\n      setIsAddDialogOpen(false);\n      setUploadedImageUrl(null);\n      form.reset();\n    } catch (error) {\n      console.error(\"Error adding event:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add event\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateEvent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingEvent) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      await api.events.updateEvent(editingEvent.id, {\n        title: formData.get(\"title\") as string,\n        description: formData.get(\"description\") as string,\n        event_date: formData.get(\"event_date\") as string,\n        event_time: (formData.get(\"event_time\") as string) || null,\n        location: (formData.get(\"location\") as string) || null,\n        image_url: uploadedImageUrl || editingEvent.image_url,\n        is_featured: formData.get(\"is_featured\") === \"on\",\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Event updated successfully\",\n      });\n      loadEvents();\n      setEditingEvent(null);\n      setUploadedImageUrl(null);\n    } catch (error) {\n      console.error(\"Error updating event:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update event\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteEvent = async (id: string) => {\n    try {\n      await api.events.deleteEvent(id);\n      toast({\n        title: \"Success\",\n        description: \"Event deleted successfully\",\n      });\n      loadEvents();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete event\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Events Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Manage church events and announcements\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add New Event</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddEvent} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Event Title</Label>\n                  <Input id=\"title\" name=\"title\" required />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea id=\"description\" name=\"description\" rows={3} />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event_date\">Event Date</Label>\n                  <Input\n                    id=\"event_date\"\n                    name=\"event_date\"\n                    type=\"date\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"event_time\">Event Time</Label>\n                  <Input id=\"event_time\" name=\"event_time\" type=\"time\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location</Label>\n                <Input id=\"location\" name=\"location\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image_upload\">Event Image</Label>\n                <FileUpload onFileUpload={setUploadedImageUrl} />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch id=\"is_featured\" name=\"is_featured\" />\n                <Label htmlFor=\"is_featured\">Featured Event</Label>\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Add Event\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {events.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Featured Events\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {events.filter((e) => e.is_featured).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Upcoming Events\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {\n                events.filter((e) => new Date(e.event_date) >= new Date())\n                  .length\n              }\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Past Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {events.filter((e) => new Date(e.event_date) < new Date()).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search Events</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by title, description, or location...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Events Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Events ({filteredEvents.length})</CardTitle>\n          <CardDescription>Manage your church events</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Date & Time</TableHead>\n                  <TableHead>Location</TableHead>\n                  <TableHead>Featured</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredEvents.map((event) => (\n                  <TableRow key={event.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{event.title}</div>\n                        {event.description && (\n                          <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                            {event.description}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {format(new Date(event.event_date), \"MMM d, yyyy\")}\n                      </div>\n                      {event.event_time && (\n                        <div className=\"flex items-center text-sm mt-1\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          {event.event_time}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {event.location ? (\n                        <div className=\"flex items-center text-sm\">\n                          <MapPin className=\"w-3 h-3 mr-1\" />\n                          {event.location}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400 text-sm\">\n                          Not specified\n                        </span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {event.is_featured && (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          Featured\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setEditingEvent(event)}\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Event</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{event.title}\n                                \"? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteEvent(event.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredEvents.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No events found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Event Dialog */}\n      <Dialog open={!!editingEvent} onOpenChange={() => setEditingEvent(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Event</DialogTitle>\n          </DialogHeader>\n          {editingEvent && (\n            <form onSubmit={handleUpdateEvent} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_title\">Event Title</Label>\n                  <Input\n                    id=\"edit_title\"\n                    name=\"title\"\n                    defaultValue={editingEvent.title}\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_description\">Description</Label>\n                <Textarea\n                  id=\"edit_description\"\n                  name=\"description\"\n                  defaultValue={editingEvent.description || \"\"}\n                  rows={3}\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_event_date\">Event Date</Label>\n                  <Input\n                    id=\"edit_event_date\"\n                    name=\"event_date\"\n                    type=\"date\"\n                    defaultValue={editingEvent.event_date.split(\"T\")[0]}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_event_time\">Event Time</Label>\n                  <Input\n                    id=\"edit_event_time\"\n                    name=\"event_time\"\n                    type=\"time\"\n                    defaultValue={editingEvent.event_time || \"\"}\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_location\">Location</Label>\n                <Input\n                  id=\"edit_location\"\n                  name=\"location\"\n                  defaultValue={editingEvent.location || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_image_upload\">Event Image</Label>\n                <FileUpload\n                  onFileUpload={setUploadedImageUrl}\n                  defaultImageUrl={editingEvent.image_url}\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"edit_is_featured\"\n                  name=\"is_featured\"\n                  defaultChecked={editingEvent.is_featured}\n                />\n                <Label htmlFor=\"edit_is_featured\">Featured Event</Label>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button type=\"submit\" className=\"flex-1\">\n                  Update Event\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditingEvent(null)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Gallery.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":12,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadImages'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadImages]","fix":{"range":[898,900],"text":"[loadImages]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { ImagePlus, Trash2, Edit } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface GalleryImage {\n  id: string;\n  title: string;\n  description: string | null;\n  image_url: string;\n  created_at: string;\n}\n\nexport default function GalleryManager() {\n  const [images, setImages] = useState<GalleryImage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [uploading, setUploading] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadImages();\n  }, []);\n\n  const loadImages = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"gallery\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n\n      setImages(data || []);\n    } catch (error) {\n      console.error(\"Error loading images:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load gallery images\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpload = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n    const file = formData.get(\"file\") as File;\n    const title = formData.get(\"title\") as string;\n    const description = formData.get(\"description\") as string;\n\n    if (!file) return;\n\n    setUploading(true);\n    try {\n      // Upload file to storage bucket\n      const fileExt = file.name.split(\".\").pop();\n      const filePath = `gallery/${Date.now()}.${fileExt}`;\n      const { error: uploadError } = await supabase.storage\n        .from(\"images\")\n        .upload(filePath, file);\n\n      if (uploadError) throw uploadError;\n\n      // Get the public URL\n      const {\n        data: { publicUrl },\n      } = supabase.storage.from(\"images\").getPublicUrl(filePath);\n\n      // Create database entry\n      const { error: dbError } = await supabase.from(\"gallery\").insert([\n        {\n          title,\n          description,\n          image_url: publicUrl,\n        },\n      ]);\n\n      if (dbError) throw dbError;\n\n      toast({\n        title: \"Success\",\n        description: \"Image uploaded successfully\",\n      });\n      loadImages();\n      form.reset();\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload image\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleDelete = async (image: GalleryImage) => {\n    try {\n      // Delete from storage\n      const urlParts = image.image_url.split(\"/\");\n      const filePath = `gallery/${urlParts[urlParts.length - 1]}`;\n      if (filePath) {\n        const { error: storageError } = await supabase.storage\n          .from(\"images\")\n          .remove([filePath]);\n\n        if (storageError)\n          console.warn(\"Storage deletion failed:\", storageError);\n      }\n\n      // Delete from database\n      const { error: dbError } = await supabase\n        .from(\"gallery\")\n        .delete()\n        .eq(\"id\", image.id);\n\n      if (dbError) throw dbError;\n\n      toast({\n        title: \"Success\",\n        description: \"Image deleted successfully\",\n      });\n      loadImages();\n    } catch (error) {\n      console.error(\"Error deleting image:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete image\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold\">Gallery</h2>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button>\n              <ImagePlus className=\"w-4 h-4 mr-2\" />\n              Add Image\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Upload Image</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleUpload} className=\"space-y-4\">\n              <div>\n                <Input type=\"file\" name=\"file\" accept=\"image/*\" required />\n              </div>\n              <div>\n                <Input name=\"title\" placeholder=\"Image Title\" required />\n              </div>\n              <div>\n                <Input name=\"description\" placeholder=\"Image Description\" />\n              </div>\n              <Button type=\"submit\" disabled={uploading}>\n                {uploading ? \"Uploading...\" : \"Upload\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {images.map((image) => (\n          <Card key={image.id}>\n            <CardContent className=\"p-4\">\n              <div className=\"aspect-w-16 aspect-h-9 mb-4\">\n                <img\n                  src={image.image_url}\n                  alt={image.title}\n                  className=\"object-cover rounded-lg w-full h-48\"\n                />\n              </div>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h3 className=\"font-semibold\">{image.title}</h3>\n                  {image.description && (\n                    <p className=\"text-sm text-gray-500\">{image.description}</p>\n                  )}\n                </div>\n                <Button\n                  variant=\"destructive\"\n                  size=\"icon\"\n                  onClick={() => handleDelete(image)}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/HealthCheck.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runHealthCheck'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [runHealthCheck]","fix":{"range":[1305,1307],"text":"[runHealthCheck]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'buckets' is assigned a value but never used.","line":83,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, XCircle, AlertCircle, RefreshCw } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface HealthStatus {\n  database: \"healthy\" | \"error\" | \"checking\";\n  auth: \"healthy\" | \"error\" | \"checking\";\n  storage: \"healthy\" | \"error\" | \"checking\";\n  tables: {\n    events: boolean;\n    members: boolean;\n    gallery: boolean;\n    sermons: boolean;\n    testimonials: boolean;\n    prayer_requests: boolean;\n    donations: boolean;\n    profiles: boolean;\n    site_settings: boolean;\n  };\n}\n\nexport default function HealthCheck() {\n  const [status, setStatus] = useState<HealthStatus>({\n    database: \"checking\",\n    auth: \"checking\",\n    storage: \"checking\",\n    tables: {\n      events: false,\n      members: false,\n      gallery: false,\n      sermons: false,\n      testimonials: false,\n      prayer_requests: false,\n      donations: false,\n      profiles: false,\n      site_settings: false,\n    },\n  });\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    runHealthCheck();\n  }, []);\n\n  const runHealthCheck = async () => {\n    setLoading(true);\n    const newStatus: HealthStatus = {\n      database: \"checking\",\n      auth: \"checking\",\n      storage: \"checking\",\n      tables: {\n        events: false,\n        members: false,\n        gallery: false,\n        sermons: false,\n        testimonials: false,\n        prayer_requests: false,\n        donations: false,\n        profiles: false,\n        site_settings: false,\n      },\n    };\n\n    try {\n      // Check database connection\n      const { error: dbError } = await supabase\n        .from(\"profiles\")\n        .select(\"count\", { count: \"exact\", head: true });\n      newStatus.database = dbError ? \"error\" : \"healthy\";\n\n      // Check auth\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      newStatus.auth = session ? \"healthy\" : \"error\";\n\n      // Check storage\n      try {\n        const { data: buckets, error: storageError } =\n          await supabase.storage.listBuckets();\n        newStatus.storage = storageError ? \"error\" : \"healthy\";\n      } catch (storageErr) {\n        console.warn(\"Storage check failed:\", storageErr);\n        newStatus.storage = \"error\";\n      }\n\n      // Check each table\n      const tables = Object.keys(newStatus.tables);\n      for (const table of tables) {\n        try {\n          const { error } = await supabase\n            .from(table)\n            .select(\"count\", { count: \"exact\", head: true });\n          newStatus.tables[table as keyof typeof newStatus.tables] = !error;\n        } catch {\n          newStatus.tables[table as keyof typeof newStatus.tables] = false;\n        }\n      }\n    } catch (error) {\n      console.error(\"Health check error:\", error);\n      toast({\n        title: \"Health Check Failed\",\n        description: \"Unable to complete system health check\",\n        variant: \"destructive\",\n      });\n    }\n\n    setStatus(newStatus);\n    setLoading(false);\n  };\n\n  const getStatusIcon = (status: \"healthy\" | \"error\" | \"checking\") => {\n    switch (status) {\n      case \"healthy\":\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case \"error\":\n        return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      case \"checking\":\n        return <AlertCircle className=\"w-5 h-5 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusText = (status: \"healthy\" | \"error\" | \"checking\") => {\n    switch (status) {\n      case \"healthy\":\n        return \"Healthy\";\n      case \"error\":\n        return \"Error\";\n      case \"checking\":\n        return \"Checking...\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            System Health Check\n          </h1>\n          <p className=\"text-gray-600\">\n            Monitor the status of all admin system components\n          </p>\n        </div>\n        <Button onClick={runHealthCheck} disabled={loading}>\n          <RefreshCw\n            className={`w-4 h-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n          />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Core Services */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n              Database Connection\n              {getStatusIcon(status.database)}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-semibold\">\n              {getStatusText(status.database)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n              Authentication\n              {getStatusIcon(status.auth)}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-semibold\">\n              {getStatusText(status.auth)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n              File Storage\n              {getStatusIcon(status.storage)}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-semibold\">\n              {getStatusText(status.storage)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Database Tables */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Database Tables Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-3 md:grid-cols-3\">\n            {Object.entries(status.tables).map(([table, isHealthy]) => (\n              <div\n                key={table}\n                className=\"flex items-center justify-between p-3 border rounded-lg\"\n              >\n                <span className=\"font-medium capitalize\">\n                  {table.replace(\"_\", \" \")}\n                </span>\n                {isHealthy ? (\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                ) : (\n                  <XCircle className=\"w-5 h-5 text-red-600\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* System Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>System Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Environment:</span>\n              <span className=\"font-mono\">{import.meta.env.MODE}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Supabase URL:</span>\n              <span className=\"font-mono text-xs\">\n                {import.meta.env.VITE_SUPABASE_URL}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Last Check:</span>\n              <span>{new Date().toLocaleString()}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'secretCode' is assigned a value but never used.","line":102,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2 } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\nexport default function AdminLogin() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n    const password = formData.get(\"password\") as string;\n\n    try {\n      const { data, error: signInError } =\n        await supabase.auth.signInWithPassword({\n          email,\n          password,\n        });\n\n      if (signInError) throw signInError;\n\n      // Check if user has admin role\n      const { data: profile, error: profileError } = await supabase\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", data.user.id)\n        .single();\n\n      if (profileError) {\n        console.error(\"Profile fetch error:\", profileError);\n        // If profile doesn't exist, create one for the first user as admin\n        const { count: existingProfilesCount } = await supabase\n          .from(\"profiles\")\n          .select(\"*\", { count: \"exact\", head: true });\n\n        if (existingProfilesCount === 0) {\n          // First user becomes admin\n          const { error: createError } = await supabase\n            .from(\"profiles\")\n            .insert({\n              id: data.user.id,\n              email: data.user.email,\n              role: \"admin\",\n            });\n\n          if (createError) {\n            console.error(\"Error creating admin profile:\", createError);\n            throw new Error(\"Failed to create admin profile\");\n          }\n\n          console.log(\"Created first admin user\");\n        } else {\n          throw new Error(\"Profile not found. Please contact administrator.\");\n        }\n      } else if (profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized. Admin access required.\");\n      }\n\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully logged in to admin dashboard\",\n      });\n      navigate(\"/admin/dashboard\");\n    } catch (error) {\n      setError(error instanceof Error ? error.message : \"Failed to log in\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n    const password = formData.get(\"password\") as string;\n    const confirmPassword = formData.get(\"confirmPassword\") as string;\n    const secretCode = formData.get(\"secretCode\") as string;\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\");\n      setLoading(false);\n      return;\n    }\n\n    // Check if this email was pre-authorized by an existing admin\n    const { data: existingProfile, error: profileCheckError } = await supabase\n      .from(\"profiles\")\n      .select(\"email, role\")\n      .eq(\"email\", email)\n      .single();\n\n    if (\n      profileCheckError ||\n      !existingProfile ||\n      existingProfile.role !== \"admin\"\n    ) {\n      setError(\n        \"This email is not authorized for admin registration. Please contact an existing admin to add you.\",\n      );\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const {\n        data: { user },\n        error: signUpError,\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            role: \"admin\", // This will be validated by security rules\n          },\n        },\n      });\n\n      if (signUpError) throw signUpError;\n\n      if (user) {\n        // Update the existing profile with the user ID\n        const { error: profileError } = await supabase\n          .from(\"profiles\")\n          .update({ id: user.id })\n          .eq(\"email\", user.email);\n\n        if (profileError) throw profileError;\n\n        toast({\n          title: \"Registration successful!\",\n          description: \"Please check your email to verify your account\",\n        });\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : \"Failed to register\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResetPassword = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n\n    try {\n      const { error: resetError } = await supabase.auth.resetPasswordForEmail(\n        email,\n        {\n          redirectTo: window.location.origin + \"/admin/reset-password\",\n        },\n      );\n\n      if (resetError) throw resetError;\n\n      toast({\n        title: \"Check your email\",\n        description: \"We've sent you a password reset link\",\n      });\n    } catch (error) {\n      setError(\n        error instanceof Error ? error.message : \"Failed to send reset email\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Admin Portal\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            Manage your church's digital presence\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"login\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\">Register</TabsTrigger>\n              <TabsTrigger value=\"reset\">Reset</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-email\">Email</Label>\n                  <Input\n                    id=\"login-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"admin@church.com\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <Input\n                    id=\"login-password\"\n                    name=\"password\"\n                    type=\"password\"\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    \"Sign in\"\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-email\">Email</Label>\n                  <Input\n                    id=\"register-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"admin@church.com\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-password\">Password</Label>\n                  <Input\n                    id=\"register-password\"\n                    name=\"password\"\n                    type=\"password\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    required\n                  />\n                </div>\n                <div className=\"bg-blue-50 border border-blue-200 rounded-md p-3\">\n                  <p className=\"text-sm text-blue-800\">\n                    <strong>Note:</strong> Your email must be pre-authorized by\n                    an existing admin before you can register. Contact an admin\n                    to add your email to the system first.\n                  </p>\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Registering...\n                    </>\n                  ) : (\n                    \"Register\"\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"reset\">\n              <form onSubmit={handleResetPassword} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"reset-email\">Email</Label>\n                  <Input\n                    id=\"reset-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"admin@church.com\"\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending reset link...\n                    </>\n                  ) : (\n                    \"Send Reset Link\"\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n\n          {error && (\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n        <CardFooter className=\"flex flex-col space-y-2\">\n          <p className=\"px-8 text-center text-sm text-gray-600\">\n            Secure access to manage church content, members, and settings\n          </p>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Members.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMembers'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadMembers]","fix":{"range":[2369,2371],"text":"[loadMembers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterMembers'. Either include it or remove the dependency array.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [filterMembers, members, searchTerm, statusFilter, typeFilter]","fix":{"range":[2421,2468],"text":"[filterMembers, members, searchTerm, statusFilter, typeFilter]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  safeDataLoader,\n  logAdminAction,\n  formatErrorMessage,\n} from \"@/utils/adminHelpers\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Users,\n  UserPlus,\n  Search,\n  Filter,\n  Edit,\n  Trash2,\n  Mail,\n  Phone,\n  Calendar,\n  CheckCircle,\n  XCircle,\n  Clock,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Member {\n  id: string;\n  full_name: string;\n  email: string | null;\n  phone: string | null;\n  address: string | null;\n  membership_type: \"regular\" | \"student\" | \"senior\" | \"family\";\n  membership_status: \"pending\" | \"active\" | \"inactive\";\n  join_date: string;\n  membership_date: string | null;\n  last_renewal_date: string | null;\n  next_renewal_date: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminMembers() {\n  const [members, setMembers] = useState<Member[]>([]);\n  const [filteredMembers, setFilteredMembers] = useState<Member[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingMember, setEditingMember] = useState<Member | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadMembers();\n  }, []);\n\n  useEffect(() => {\n    filterMembers();\n  }, [members, searchTerm, statusFilter, typeFilter]);\n\n  const loadMembers = async () => {\n    setLoading(true);\n\n    const { data, error } = await safeDataLoader(\n      () =>\n        supabase\n          .from(\"members\")\n          .select(\"*\")\n          .order(\"created_at\", { ascending: false }),\n      \"members\",\n    );\n\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: formatErrorMessage(error, \"Failed to load members\"),\n        variant: \"destructive\",\n      });\n      setMembers([]);\n    } else {\n      // Ensure data has proper structure\n      const processedData = data.map((member) => ({\n        ...member,\n        membership_type: member.membership_type || \"regular\",\n        membership_status: member.membership_status || \"pending\",\n        join_date: member.join_date || member.created_at,\n        updated_at: member.updated_at || member.created_at,\n      }));\n\n      setMembers(processedData);\n      logAdminAction(\"load\", \"members\", { count: processedData.length });\n    }\n\n    setLoading(false);\n  };\n\n  const filterMembers = () => {\n    let filtered = members;\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (member) =>\n          member.full_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          member.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          member.phone?.includes(searchTerm),\n      );\n    }\n\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(\n        (member) => member.membership_status === statusFilter,\n      );\n    }\n\n    if (typeFilter !== \"all\") {\n      filtered = filtered.filter(\n        (member) => member.membership_type === typeFilter,\n      );\n    }\n\n    setFilteredMembers(filtered);\n  };\n\n  const handleAddMember = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const { error } = await supabase.from(\"members\").insert([\n        {\n          full_name: formData.get(\"full_name\") as string,\n          email: formData.get(\"email\") as string,\n          phone: formData.get(\"phone\") as string,\n          address: formData.get(\"address\") as string,\n          membership_type: formData.get(\"membership_type\") as string,\n          membership_status: \"active\",\n          join_date: new Date().toISOString(),\n          membership_date: new Date().toISOString(),\n        },\n      ]);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member added successfully\",\n      });\n      loadMembers();\n      setIsAddDialogOpen(false);\n      form.reset();\n    } catch (error) {\n      console.error(\"Error adding member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateMember = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingMember) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      const { error } = await supabase\n        .from(\"members\")\n        .update({\n          full_name: formData.get(\"full_name\") as string,\n          email: formData.get(\"email\") as string,\n          phone: formData.get(\"phone\") as string,\n          address: formData.get(\"address\") as string,\n          membership_type: formData.get(\"membership_type\") as string,\n          membership_status: formData.get(\"membership_status\") as string,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", editingMember.id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member updated successfully\",\n      });\n      loadMembers();\n      setEditingMember(null);\n    } catch (error) {\n      console.error(\"Error updating member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteMember = async (id: string) => {\n    try {\n      const { error } = await supabase.from(\"members\").delete().eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Member deleted successfully\",\n      });\n      loadMembers();\n    } catch (error) {\n      console.error(\"Error deleting member:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete member\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Active\n          </Badge>\n        );\n      case \"pending\":\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800\">\n            <Clock className=\"w-3 h-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case \"inactive\":\n        return (\n          <Badge className=\"bg-red-100 text-red-800\">\n            <XCircle className=\"w-3 h-3 mr-1\" />\n            Inactive\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getTypeBadge = (type: string) => {\n    const colors = {\n      regular: \"bg-blue-100 text-blue-800\",\n      student: \"bg-purple-100 text-purple-800\",\n      senior: \"bg-orange-100 text-orange-800\",\n      family: \"bg-green-100 text-green-800\",\n    };\n    return (\n      <Badge\n        className={\n          colors[type as keyof typeof colors] || \"bg-gray-100 text-gray-800\"\n        }\n      >\n        {type}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Members Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Manage church members and their information\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              Add Member\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Member</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddMember} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"full_name\">Full Name</Label>\n                <Input id=\"full_name\" name=\"full_name\" required />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input id=\"email\" name=\"email\" type=\"email\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input id=\"phone\" name=\"phone\" type=\"tel\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Address</Label>\n                <Input id=\"address\" name=\"address\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"membership_type\">Membership Type</Label>\n                <Select name=\"membership_type\" defaultValue=\"regular\">\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"regular\">Regular</SelectItem>\n                    <SelectItem value=\"student\">Student</SelectItem>\n                    <SelectItem value=\"senior\">Senior</SelectItem>\n                    <SelectItem value=\"family\">Family</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Add Member\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Members</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {members.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Active Members\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {members.filter((m) => m.membership_status === \"active\").length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Pending Members\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {members.filter((m) => m.membership_status === \"pending\").length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Family Members\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {members.filter((m) => m.membership_type === \"family\").length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search by name, email, or phone...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"regular\">Regular</SelectItem>\n                <SelectItem value=\"student\">Student</SelectItem>\n                <SelectItem value=\"senior\">Senior</SelectItem>\n                <SelectItem value=\"family\">Family</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Members Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Members ({filteredMembers.length})</CardTitle>\n          <CardDescription>Manage your church members</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Join Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredMembers.map((member) => (\n                  <TableRow key={member.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{member.full_name}</div>\n                        {member.address && (\n                          <div className=\"text-sm text-gray-500\">\n                            {member.address}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {member.email && (\n                          <div className=\"flex items-center text-sm\">\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            {member.email}\n                          </div>\n                        )}\n                        {member.phone && (\n                          <div className=\"flex items-center text-sm\">\n                            <Phone className=\"w-3 h-3 mr-1\" />\n                            {member.phone}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {getTypeBadge(member.membership_type)}\n                    </TableCell>\n                    <TableCell>\n                      {getStatusBadge(member.membership_status)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {format(new Date(member.join_date), \"MMM d, yyyy\")}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setEditingMember(member)}\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Member</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete{\" \"}\n                                {member.full_name}? This action cannot be\n                                undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteMember(member.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredMembers.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No members found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Member Dialog */}\n      <Dialog\n        open={!!editingMember}\n        onOpenChange={() => setEditingMember(null)}\n      >\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Member</DialogTitle>\n          </DialogHeader>\n          {editingMember && (\n            <form onSubmit={handleUpdateMember} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_full_name\">Full Name</Label>\n                <Input\n                  id=\"edit_full_name\"\n                  name=\"full_name\"\n                  defaultValue={editingMember.full_name}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_email\">Email</Label>\n                <Input\n                  id=\"edit_email\"\n                  name=\"email\"\n                  type=\"email\"\n                  defaultValue={editingMember.email || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_phone\">Phone</Label>\n                <Input\n                  id=\"edit_phone\"\n                  name=\"phone\"\n                  type=\"tel\"\n                  defaultValue={editingMember.phone || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_address\">Address</Label>\n                <Input\n                  id=\"edit_address\"\n                  name=\"address\"\n                  defaultValue={editingMember.address || \"\"}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_membership_type\">Membership Type</Label>\n                <Select\n                  name=\"membership_type\"\n                  defaultValue={editingMember.membership_type}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"regular\">Regular</SelectItem>\n                    <SelectItem value=\"student\">Student</SelectItem>\n                    <SelectItem value=\"senior\">Senior</SelectItem>\n                    <SelectItem value=\"family\">Family</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_membership_status\">Status</Label>\n                <Select\n                  name=\"membership_status\"\n                  defaultValue={editingMember.membership_status}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button type=\"submit\" className=\"flex-1\">\n                  Update Member\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditingMember(null)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/PrayerRequests.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/PrayerRequestsComplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageSquare' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPrayerRequests'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPrayerRequests]","fix":{"range":[1987,1989],"text":"[loadPrayerRequests]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterRequests'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [filterRequests, prayerRequests, searchTerm, statusFilter]","fix":{"range":[2040,2082],"text":"[filterRequests, prayerRequests, searchTerm, statusFilter]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Search,\n  Heart,\n  CheckCircle,\n  Clock,\n  Eye,\n  Trash2,\n  Mail,\n  User,\n  Calendar,\n  MessageSquare,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface PrayerRequest {\n  id: string;\n  name: string;\n  email: string | null;\n  request: string;\n  is_public: boolean;\n  is_answered: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminPrayerRequestsComplete() {\n  const [prayerRequests, setPrayerRequests] = useState<PrayerRequest[]>([]);\n  const [filteredRequests, setFilteredRequests] = useState<PrayerRequest[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedRequest, setSelectedRequest] = useState<PrayerRequest | null>(\n    null,\n  );\n  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadPrayerRequests();\n  }, []);\n\n  useEffect(() => {\n    filterRequests();\n  }, [prayerRequests, searchTerm, statusFilter]);\n\n  const loadPrayerRequests = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"prayer_requests\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setPrayerRequests(data || []);\n    } catch (error) {\n      console.error(\"Error loading prayer requests:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load prayer requests\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterRequests = () => {\n    let filtered = prayerRequests;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (request) =>\n          request.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          request.request.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          request.email?.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Status filter\n    if (statusFilter !== \"all\") {\n      const isAnswered = statusFilter === \"answered\";\n      filtered = filtered.filter(\n        (request) => request.is_answered === isAnswered,\n      );\n    }\n\n    setFilteredRequests(filtered);\n  };\n\n  const toggleAnsweredStatus = async (id: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from(\"prayer_requests\")\n        .update({\n          is_answered: !currentStatus,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: `Prayer request marked as ${!currentStatus ? \"answered\" : \"pending\"}`,\n      });\n      loadPrayerRequests();\n    } catch (error) {\n      console.error(\"Error updating prayer request:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update prayer request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deletePrayerRequest = async (id: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"prayer_requests\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Prayer request deleted successfully\",\n      });\n      loadPrayerRequests();\n    } catch (error) {\n      console.error(\"Error deleting prayer request:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete prayer request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const sendEmailResponse = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedRequest || !selectedRequest.email) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n    const subject = formData.get(\"subject\") as string;\n    const message = formData.get(\"message\") as string;\n\n    try {\n      // In a real implementation, you would send an email here\n      // For now, we'll just show a success message\n      console.log(\"Email would be sent to:\", selectedRequest.email);\n      console.log(\"Subject:\", subject);\n      console.log(\"Message:\", message);\n\n      toast({\n        title: \"Email Sent\",\n        description: `Response sent to ${selectedRequest.name}`,\n      });\n      setIsEmailDialogOpen(false);\n      setSelectedRequest(null);\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send email response\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const calculateStats = () => {\n    const totalRequests = prayerRequests.length;\n    const answeredRequests = prayerRequests.filter((r) => r.is_answered).length;\n    const pendingRequests = prayerRequests.filter((r) => !r.is_answered).length;\n    const publicRequests = prayerRequests.filter((r) => r.is_public).length;\n    const thisWeekRequests = prayerRequests.filter((r) => {\n      const requestDate = new Date(r.created_at);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return requestDate >= weekAgo;\n    }).length;\n\n    return {\n      totalRequests,\n      answeredRequests,\n      pendingRequests,\n      publicRequests,\n      thisWeekRequests,\n    };\n  };\n\n  const stats = calculateStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Prayer Requests Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Review and respond to prayer requests from the community\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-5\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Total Requests\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {stats.totalRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Answered\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats.answeredRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.totalRequests > 0\n                ? Math.round(\n                    (stats.answeredRequests / stats.totalRequests) * 100,\n                  )\n                : 0}\n              % of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Pending\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {stats.pendingRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">Awaiting response</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              Public\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {stats.publicRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">Visible to community</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              This Week\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {stats.thisWeekRequests}\n            </div>\n            <p className=\"text-xs text-gray-500\">New requests</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search prayer requests...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Status Filter</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={statusFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={statusFilter === \"pending\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"pending\")}\n                >\n                  Pending\n                </Button>\n                <Button\n                  variant={statusFilter === \"answered\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"answered\")}\n                >\n                  Answered\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Prayer Requests Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Prayer Requests ({filteredRequests.length})</CardTitle>\n          <CardDescription>\n            Manage and respond to community prayer requests\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Request</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Visibility</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredRequests.map((request) => (\n                  <TableRow key={request.id}>\n                    <TableCell>\n                      {format(new Date(request.created_at), \"MMM d, yyyy\")}\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{request.name}</div>\n                        {request.email && (\n                          <div className=\"text-sm text-gray-500\">\n                            {request.email}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <p className=\"truncate\">{request.request}</p>\n                        <Button\n                          variant=\"link\"\n                          size=\"sm\"\n                          className=\"p-0 h-auto text-xs\"\n                          onClick={() => setSelectedRequest(request)}\n                        >\n                          Read full request\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {request.is_answered ? (\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Answered\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Pending\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {request.is_public ? (\n                        <Badge className=\"bg-blue-100 text-blue-800\">\n                          <Eye className=\"w-3 h-3 mr-1\" />\n                          Public\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-gray-100 text-gray-800\">\n                          Private\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            toggleAnsweredStatus(\n                              request.id,\n                              request.is_answered,\n                            )\n                          }\n                          className={\n                            request.is_answered\n                              ? \"\"\n                              : \"bg-green-50 hover:bg-green-100\"\n                          }\n                        >\n                          {request.is_answered ? (\n                            <>\n                              <Clock className=\"w-3 h-3 mr-1\" />\n                              Mark Pending\n                            </>\n                          ) : (\n                            <>\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Mark Answered\n                            </>\n                          )}\n                        </Button>\n                        {request.email && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedRequest(request);\n                              setIsEmailDialogOpen(true);\n                            }}\n                          >\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            Email\n                          </Button>\n                        )}\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>\n                                Delete Prayer Request\n                              </AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this prayer\n                                request from {request.name}? This action cannot\n                                be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deletePrayerRequest(request.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredRequests.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No prayer requests found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Prayer Request Detail Dialog */}\n      <Dialog\n        open={!!selectedRequest && !isEmailDialogOpen}\n        onOpenChange={() => setSelectedRequest(null)}\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Prayer Request Details</DialogTitle>\n            <DialogDescription>\n              {selectedRequest &&\n                format(\n                  new Date(selectedRequest.created_at),\n                  \"MMMM d, yyyy 'at' h:mm a\",\n                )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRequest && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">From:</Label>\n                <p className=\"text-sm font-medium\">{selectedRequest.name}</p>\n                {selectedRequest.email && (\n                  <p className=\"text-sm text-gray-500\">\n                    {selectedRequest.email}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Prayer Request:</Label>\n                <div className=\"mt-2 p-4 bg-gray-50 rounded-md border-l-4 border-church-gold\">\n                  <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                    {selectedRequest.request}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between pt-4 border-t\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm\">Status:</Label>\n                    {selectedRequest.is_answered ? (\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Answered\n                      </Badge>\n                    ) : (\n                      <Badge className=\"bg-yellow-100 text-yellow-800\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        Pending\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm\">Visibility:</Label>\n                    {selectedRequest.is_public ? (\n                      <Badge className=\"bg-blue-100 text-blue-800\">\n                        <Eye className=\"w-3 h-3 mr-1\" />\n                        Public\n                      </Badge>\n                    ) : (\n                      <Badge className=\"bg-gray-100 text-gray-800\">\n                        Private\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      toggleAnsweredStatus(\n                        selectedRequest.id,\n                        selectedRequest.is_answered,\n                      );\n                      setSelectedRequest(null);\n                    }}\n                    className={\n                      selectedRequest.is_answered\n                        ? \"\"\n                        : \"bg-green-50 hover:bg-green-100\"\n                    }\n                  >\n                    {selectedRequest.is_answered ? (\n                      <>\n                        <Clock className=\"w-4 h-4 mr-2\" />\n                        Mark Pending\n                      </>\n                    ) : (\n                      <>\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                        Mark Answered\n                      </>\n                    )}\n                  </Button>\n                  {selectedRequest.email && (\n                    <Button\n                      onClick={() => setIsEmailDialogOpen(true)}\n                      className=\"bg-church-burgundy hover:bg-church-burgundy/90\"\n                    >\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      Send Email Response\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Email Response Dialog */}\n      <Dialog open={isEmailDialogOpen} onOpenChange={setIsEmailDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Send Email Response</DialogTitle>\n            <DialogDescription>\n              Respond to {selectedRequest?.name}'s prayer request\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRequest && (\n            <form onSubmit={sendEmailResponse} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subject\">Subject</Label>\n                <Input\n                  id=\"subject\"\n                  name=\"subject\"\n                  defaultValue={`Re: Your Prayer Request`}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"message\">Message</Label>\n                <Textarea\n                  id=\"message\"\n                  name=\"message\"\n                  rows={6}\n                  placeholder={`Dear ${selectedRequest.name},\\n\\nThank you for sharing your prayer request with us. We want you to know that we are praying for you and your situation.\\n\\n[Your personal message here]\\n\\nBlessings,\\nSt. Gabriel Ethiopian Orthodox Church`}\n                  required\n                />\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1 bg-church-burgundy hover:bg-church-burgundy/90\"\n                >\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  Send Email\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsEmailDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Sermons.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Music' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":8},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSermons'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSermons]","fix":{"range":[2125,2127],"text":"[loadSermons]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterSermons'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [sermons, searchTerm, filterSermons]","fix":{"range":[2177,2198],"text":"[sermons, searchTerm, filterSermons]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Play,\n  Pause,\n  Upload,\n  Star,\n  Calendar,\n  User,\n  Book,\n  Music,\n} from \"lucide-react\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Sermon {\n  id: string;\n  title: string;\n  description: string | null;\n  scripture_reference: string | null;\n  audio_url: string | null;\n  preacher: string | null;\n  sermon_date: string;\n  is_featured: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminSermons() {\n  const [sermons, setSermons] = useState<Sermon[]>([]);\n  const [filteredSermons, setFilteredSermons] = useState<Sermon[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingSermon, setEditingSermon] = useState<Sermon | null>(null);\n  const [playingAudio, setPlayingAudio] = useState<string | null>(null);\n  const [audioElements, setAudioElements] = useState<{\n    [key: string]: HTMLAudioElement;\n  }>({});\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadSermons();\n  }, []);\n\n  useEffect(() => {\n    filterSermons();\n  }, [sermons, searchTerm]);\n\n  const loadSermons = async () => {\n    try {\n      const data = await api.sermons.getSermons();\n      setSermons(data || []);\n    } catch (error) {\n      console.error(\"Error loading sermons:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load sermons\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterSermons = () => {\n    let filtered = sermons;\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (sermon) =>\n          sermon.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          sermon.preacher?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          sermon.scripture_reference\n            ?.toLowerCase()\n            .includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    setFilteredSermons(filtered);\n  };\n\n  const handleAddSermon = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      await api.sermons.createSermon({\n        title: formData.get(\"title\") as string,\n        description: formData.get(\"description\") as string,\n        scripture_reference: formData.get(\"scripture_reference\") as string,\n        preacher: formData.get(\"preacher\") as string,\n        sermon_date: formData.get(\"sermon_date\") as string,\n        audio_url: formData.get(\"audio_url\") as string,\n        is_featured: formData.get(\"is_featured\") === \"on\",\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Sermon added successfully\",\n      });\n      loadSermons();\n      setIsAddDialogOpen(false);\n      form.reset();\n    } catch (error) {\n      console.error(\"Error adding sermon:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add sermon\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateSermon = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingSermon) return;\n\n    const form = e.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    try {\n      await api.sermons.updateSermon(editingSermon.id, {\n        title: formData.get(\"title\") as string,\n        description: formData.get(\"description\") as string,\n        scripture_reference: formData.get(\"scripture_reference\") as string,\n        preacher: formData.get(\"preacher\") as string,\n        sermon_date: formData.get(\"sermon_date\") as string,\n        audio_url: formData.get(\"audio_url\") as string,\n        is_featured: formData.get(\"is_featured\") === \"on\",\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Sermon updated successfully\",\n      });\n      loadSermons();\n      setEditingSermon(null);\n    } catch (error) {\n      console.error(\"Error updating sermon:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update sermon\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteSermon = async (id: string) => {\n    try {\n      await api.sermons.deleteSermon(id);\n      toast({\n        title: \"Success\",\n        description: \"Sermon deleted successfully\",\n      });\n      loadSermons();\n    } catch (error) {\n      console.error(\"Error deleting sermon:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete sermon\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleAudio = (sermonId: string, audioUrl: string) => {\n    if (playingAudio === sermonId) {\n      // Pause current audio\n      if (audioElements[sermonId]) {\n        audioElements[sermonId].pause();\n      }\n      setPlayingAudio(null);\n    } else {\n      // Stop any currently playing audio\n      if (playingAudio && audioElements[playingAudio]) {\n        audioElements[playingAudio].pause();\n      }\n\n      // Create or get audio element\n      let audio = audioElements[sermonId];\n      if (!audio) {\n        audio = new Audio(audioUrl);\n        audio.addEventListener(\"ended\", () => setPlayingAudio(null));\n        setAudioElements((prev) => ({ ...prev, [sermonId]: audio }));\n      }\n\n      // Play new audio\n      audio.play();\n      setPlayingAudio(sermonId);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Sermons Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Manage church sermons and audio recordings\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Sermon\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add New Sermon</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddSermon} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input id=\"title\" name=\"title\" required />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"preacher\">Preacher</Label>\n                  <Input id=\"preacher\" name=\"preacher\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea id=\"description\" name=\"description\" rows={3} />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"scripture_reference\">\n                    Scripture Reference\n                  </Label>\n                  <Input\n                    id=\"scripture_reference\"\n                    name=\"scripture_reference\"\n                    placeholder=\"e.g., John 3:16\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sermon_date\">Sermon Date</Label>\n                  <Input\n                    id=\"sermon_date\"\n                    name=\"sermon_date\"\n                    type=\"date\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"audio_url\">Audio URL</Label>\n                <Input\n                  id=\"audio_url\"\n                  name=\"audio_url\"\n                  type=\"url\"\n                  placeholder=\"https://...\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch id=\"is_featured\" name=\"is_featured\" />\n                <Label htmlFor=\"is_featured\">Featured Sermon</Label>\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Add Sermon\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Sermons</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {sermons.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Featured Sermons\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {sermons.filter((s) => s.is_featured).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">With Audio</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {sermons.filter((s) => s.audio_url).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">This Month</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {\n                sermons.filter((s) => {\n                  const sermonDate = new Date(s.sermon_date);\n                  const now = new Date();\n                  return (\n                    sermonDate.getMonth() === now.getMonth() &&\n                    sermonDate.getFullYear() === now.getFullYear()\n                  );\n                }).length\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search Sermons</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by title, preacher, or scripture reference...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sermons Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Sermons ({filteredSermons.length})</CardTitle>\n          <CardDescription>Manage your church sermons</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Preacher</TableHead>\n                  <TableHead>Scripture</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Audio</TableHead>\n                  <TableHead>Featured</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredSermons.map((sermon) => (\n                  <TableRow key={sermon.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{sermon.title}</div>\n                        {sermon.description && (\n                          <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                            {sermon.description}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {sermon.preacher && (\n                        <div className=\"flex items-center text-sm\">\n                          <User className=\"w-3 h-3 mr-1\" />\n                          {sermon.preacher}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {sermon.scripture_reference && (\n                        <div className=\"flex items-center text-sm\">\n                          <Book className=\"w-3 h-3 mr-1\" />\n                          {sermon.scripture_reference}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {format(new Date(sermon.sermon_date), \"MMM d, yyyy\")}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {sermon.audio_url ? (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            toggleAudio(sermon.id, sermon.audio_url!)\n                          }\n                        >\n                          {playingAudio === sermon.id ? (\n                            <Pause className=\"w-3 h-3\" />\n                          ) : (\n                            <Play className=\"w-3 h-3\" />\n                          )}\n                        </Button>\n                      ) : (\n                        <span className=\"text-gray-400 text-sm\">No audio</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {sermon.is_featured && (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          <Star className=\"w-3 h-3 mr-1\" />\n                          Featured\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setEditingSermon(sermon)}\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Sermon</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{sermon.title}\n                                \"? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteSermon(sermon.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredSermons.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No sermons found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Sermon Dialog */}\n      <Dialog\n        open={!!editingSermon}\n        onOpenChange={() => setEditingSermon(null)}\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Sermon</DialogTitle>\n          </DialogHeader>\n          {editingSermon && (\n            <form onSubmit={handleUpdateSermon} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_title\">Title</Label>\n                  <Input\n                    id=\"edit_title\"\n                    name=\"title\"\n                    defaultValue={editingSermon.title}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_preacher\">Preacher</Label>\n                  <Input\n                    id=\"edit_preacher\"\n                    name=\"preacher\"\n                    defaultValue={editingSermon.preacher || \"\"}\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_description\">Description</Label>\n                <Textarea\n                  id=\"edit_description\"\n                  name=\"description\"\n                  defaultValue={editingSermon.description || \"\"}\n                  rows={3}\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_scripture_reference\">\n                    Scripture Reference\n                  </Label>\n                  <Input\n                    id=\"edit_scripture_reference\"\n                    name=\"scripture_reference\"\n                    defaultValue={editingSermon.scripture_reference || \"\"}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit_sermon_date\">Sermon Date</Label>\n                  <Input\n                    id=\"edit_sermon_date\"\n                    name=\"sermon_date\"\n                    type=\"date\"\n                    defaultValue={editingSermon.sermon_date.split(\"T\")[0]}\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit_audio_url\">Audio URL</Label>\n                <Input\n                  id=\"edit_audio_url\"\n                  name=\"audio_url\"\n                  type=\"url\"\n                  defaultValue={editingSermon.audio_url || \"\"}\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"edit_is_featured\"\n                  name=\"is_featured\"\n                  defaultChecked={editingSermon.is_featured}\n                />\n                <Label htmlFor=\"edit_is_featured\">Featured Sermon</Label>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button type=\"submit\" className=\"flex-1\">\n                  Update Sermon\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditingSermon(null)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Textarea' is defined but never used.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Send' is defined but never used.","line":26,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":26,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'templates' is assigned a value but never used.","line":107,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAllSettings'. Either include it or remove the dependency array.","line":115,"column":6,"nodeType":"ArrayExpression","endLine":115,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadAllSettings]","fix":{"range":[3139,3141],"text":"[loadAllSettings]"}}]},{"ruleId":"prefer-const","severity":2,"message":"'error' is never reassigned. Use 'const' instead.","line":122,"column":19,"nodeType":"Identifier","messageId":"useConst","endLine":122,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":283,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":283,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":300,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":300,"endColumn":19}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { api } from \"@/integrations/supabase/api\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { CreditCard, Mail, Users, Send, Eye, Trash2, Plus } from \"lucide-react\";\n\ninterface Settings {\n  church_name: string;\n  church_address: string;\n  phone_number: string;\n  email: string;\n  enable_donations: boolean;\n  enable_membership: boolean;\n  maintenance_mode: boolean;\n}\n\ninterface StripeSettings {\n  stripe_publishable_key: string;\n  stripe_secret_key: string;\n  stripe_webhook_secret: string;\n  stripe_mode: \"test\" | \"live\";\n  enable_stripe: boolean;\n  default_currency: string;\n}\n\ninterface EmailSettings {\n  smtp_host: string;\n  smtp_port: number;\n  smtp_username: string;\n  smtp_password: string;\n  from_email: string;\n  from_name: string;\n  enable_newsletters: boolean;\n  newsletter_frequency: \"daily\" | \"weekly\" | \"monthly\";\n  auto_welcome_email: boolean;\n}\n\ninterface EmailSubscriber {\n  id: string;\n  email: string;\n  name: string;\n  status: \"active\" | \"unsubscribed\" | \"bounced\";\n  subscribed_at: string;\n  unsubscribed_at?: string;\n}\n\ninterface EmailTemplate {\n  id: string;\n  name: string;\n  subject: string;\n  content: string;\n  template_type: \"newsletter\" | \"welcome\" | \"notification\" | \"custom\";\n  is_active: boolean;\n}\n\nexport default function Settings() {\n  const [settings, setSettings] = useState<Settings>({\n    church_name: \"\",\n    church_address: \"\",\n    phone_number: \"\",\n    email: \"\",\n    enable_donations: true,\n    enable_membership: true,\n    maintenance_mode: false,\n  });\n  const [stripeSettings, setStripeSettings] = useState<StripeSettings>({\n    stripe_publishable_key: \"\",\n    stripe_secret_key: \"\",\n    stripe_webhook_secret: \"\",\n    stripe_mode: \"test\",\n    enable_stripe: false,\n    default_currency: \"USD\",\n  });\n  const [emailSettings, setEmailSettings] = useState<EmailSettings>({\n    smtp_host: \"\",\n    smtp_port: 587,\n    smtp_username: \"\",\n    smtp_password: \"\",\n    from_email: \"\",\n    from_name: \"\",\n    enable_newsletters: false,\n    newsletter_frequency: \"weekly\",\n    auto_welcome_email: true,\n  });\n  const [subscribers, setSubscribers] = useState<EmailSubscriber[]>([]);\n  const [templates, setTemplates] = useState<EmailTemplate[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadAllSettings();\n  }, []);\n\n  const loadAllSettings = async () => {\n    try {\n      setLoading(true);\n\n      // Load general settings\n      let { data, error } = await supabase\n        .from(\"site_settings\")\n        .select(\"*\")\n        .limit(1)\n        .single();\n\n      if (error && error.code === \"PGRST116\") {\n        const { data: newData, error: insertError } = await supabase\n          .from(\"site_settings\")\n          .insert({\n            id: 1,\n            church_name: \"St. Gabriel Ethiopian Orthodox Church\",\n            church_address: \"\",\n            phone_number: \"\",\n            email: \"\",\n            enable_donations: true,\n            enable_membership: true,\n            maintenance_mode: false,\n          })\n          .select()\n          .single();\n\n        if (insertError) throw insertError;\n        data = newData;\n      }\n\n      if (data) {\n        setSettings(data);\n      }\n\n      // Load Stripe settings\n      const stripeData = await api.stripeSettings.getSettings();\n      if (stripeData) {\n        setStripeSettings(stripeData);\n      }\n\n      // Load Email settings\n      const emailData = await api.emailSettings.getSettings();\n      if (emailData) {\n        setEmailSettings(emailData);\n      }\n\n      // Load subscribers and templates\n      const [subscribersData, templatesData] = await Promise.all([\n        api.emailSubscribers.getSubscribers(),\n        api.emailTemplates.getTemplates(),\n      ]);\n\n      setSubscribers(subscribersData || []);\n      setTemplates(templatesData || []);\n    } catch (error) {\n      console.error(\"Error loading settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load settings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGeneralSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n\n    try {\n      const { error } = await supabase.from(\"site_settings\").upsert({\n        id: 1,\n        ...settings,\n        updated_at: new Date().toISOString(),\n      });\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"General settings saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error saving general settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save general settings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleStripeSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n\n    try {\n      await api.stripeSettings.updateSettings(stripeSettings);\n      toast({\n        title: \"Success\",\n        description: \"Stripe settings saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error saving Stripe settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save Stripe settings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleEmailSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n\n    try {\n      await api.emailSettings.updateSettings(emailSettings);\n      toast({\n        title: \"Success\",\n        description: \"Email settings saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error saving email settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save email settings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleChange = (field: keyof Settings, value: string | boolean) => {\n    setSettings((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleStripeChange = (\n    field: keyof StripeSettings,\n    value: string | boolean,\n  ) => {\n    setStripeSettings((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleEmailChange = (\n    field: keyof EmailSettings,\n    value: string | boolean | number,\n  ) => {\n    setEmailSettings((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleUnsubscribe = async (email: string) => {\n    try {\n      await api.emailSubscribers.unsubscribe(email);\n      await loadAllSettings(); // Refresh data\n      toast({\n        title: \"Success\",\n        description: \"Subscriber unsubscribed successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to unsubscribe user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteSubscriber = async (id: string) => {\n    try {\n      await api.emailSubscribers.deleteSubscriber(id);\n      await loadAllSettings(); // Refresh data\n      toast({\n        title: \"Success\",\n        description: \"Subscriber deleted successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete subscriber\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"general\">General</TabsTrigger>\n          <TabsTrigger value=\"stripe\">\n            <CreditCard className=\"w-4 h-4 mr-2\" />\n            Stripe\n          </TabsTrigger>\n          <TabsTrigger value=\"email\">\n            <Mail className=\"w-4 h-4 mr-2\" />\n            Email\n          </TabsTrigger>\n          <TabsTrigger value=\"subscribers\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            Subscribers\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"general\">\n          <form onSubmit={handleGeneralSubmit}>\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>General Settings</CardTitle>\n                <CardDescription>\n                  Configure basic church information\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"churchName\">Church Name</Label>\n                  <Input\n                    id=\"churchName\"\n                    value={settings.church_name}\n                    onChange={(e) =>\n                      handleChange(\"church_name\", e.target.value)\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Input\n                    id=\"address\"\n                    value={settings.church_address}\n                    onChange={(e) =>\n                      handleChange(\"church_address\", e.target.value)\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    value={settings.phone_number}\n                    onChange={(e) =>\n                      handleChange(\"phone_number\", e.target.value)\n                    }\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={settings.email}\n                    onChange={(e) => handleChange(\"email\", e.target.value)}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>Feature Settings</CardTitle>\n                <CardDescription>\n                  Enable or disable website features\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Donations</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow visitors to make donations\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_donations}\n                    onCheckedChange={(checked) =>\n                      handleChange(\"enable_donations\", checked)\n                    }\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Membership</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow visitors to register for membership\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.enable_membership}\n                    onCheckedChange={(checked) =>\n                      handleChange(\"enable_membership\", checked)\n                    }\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Maintenance Mode</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Put the website in maintenance mode\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.maintenance_mode}\n                    onCheckedChange={(checked) =>\n                      handleChange(\"maintenance_mode\", checked)\n                    }\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Button type=\"submit\" disabled={saving}>\n              {saving ? \"Saving...\" : \"Save General Settings\"}\n            </Button>\n          </form>\n        </TabsContent>\n\n        <TabsContent value=\"stripe\">\n          <form onSubmit={handleStripeSubmit}>\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"w-5 h-5 mr-2\" />\n                  Stripe Payment Settings\n                </CardTitle>\n                <CardDescription>\n                  Configure Stripe for processing donations and payments\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Stripe Payments</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow Stripe payment processing\n                    </p>\n                  </div>\n                  <Switch\n                    checked={stripeSettings.enable_stripe}\n                    onCheckedChange={(checked) =>\n                      handleStripeChange(\"enable_stripe\", checked)\n                    }\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"stripeMode\">Stripe Mode</Label>\n                  <Select\n                    value={stripeSettings.stripe_mode}\n                    onValueChange={(value: \"test\" | \"live\") =>\n                      handleStripeChange(\"stripe_mode\", value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"test\">Test Mode</SelectItem>\n                      <SelectItem value=\"live\">Live Mode</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"publishableKey\">Publishable Key</Label>\n                  <Input\n                    id=\"publishableKey\"\n                    type=\"password\"\n                    value={stripeSettings.stripe_publishable_key}\n                    onChange={(e) =>\n                      handleStripeChange(\n                        \"stripe_publishable_key\",\n                        e.target.value,\n                      )\n                    }\n                    placeholder=\"pk_test_...\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"secretKey\">Secret Key</Label>\n                  <Input\n                    id=\"secretKey\"\n                    type=\"password\"\n                    value={stripeSettings.stripe_secret_key}\n                    onChange={(e) =>\n                      handleStripeChange(\"stripe_secret_key\", e.target.value)\n                    }\n                    placeholder=\"sk_test_...\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"webhookSecret\">Webhook Secret</Label>\n                  <Input\n                    id=\"webhookSecret\"\n                    type=\"password\"\n                    value={stripeSettings.stripe_webhook_secret}\n                    onChange={(e) =>\n                      handleStripeChange(\n                        \"stripe_webhook_secret\",\n                        e.target.value,\n                      )\n                    }\n                    placeholder=\"whsec_...\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currency\">Default Currency</Label>\n                  <Select\n                    value={stripeSettings.default_currency}\n                    onValueChange={(value) =>\n                      handleStripeChange(\"default_currency\", value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"USD\">USD - US Dollar</SelectItem>\n                      <SelectItem value=\"EUR\">EUR - Euro</SelectItem>\n                      <SelectItem value=\"GBP\">GBP - British Pound</SelectItem>\n                      <SelectItem value=\"CAD\">CAD - Canadian Dollar</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Button type=\"submit\" disabled={saving}>\n              {saving ? \"Saving...\" : \"Save Stripe Settings\"}\n            </Button>\n          </form>\n        </TabsContent>\n\n        <TabsContent value=\"email\">\n          <form onSubmit={handleEmailSubmit}>\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Mail className=\"w-5 h-5 mr-2\" />\n                  Email & Newsletter Settings\n                </CardTitle>\n                <CardDescription>\n                  Configure email notifications and newsletter system\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Enable Newsletter System</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow newsletter subscriptions and campaigns\n                    </p>\n                  </div>\n                  <Switch\n                    checked={emailSettings.enable_newsletters}\n                    onCheckedChange={(checked) =>\n                      handleEmailChange(\"enable_newsletters\", checked)\n                    }\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fromEmail\">From Email</Label>\n                    <Input\n                      id=\"fromEmail\"\n                      type=\"email\"\n                      value={emailSettings.from_email}\n                      onChange={(e) =>\n                        handleEmailChange(\"from_email\", e.target.value)\n                      }\n                      placeholder=\"noreply@church.org\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fromName\">From Name</Label>\n                    <Input\n                      id=\"fromName\"\n                      value={emailSettings.from_name}\n                      onChange={(e) =>\n                        handleEmailChange(\"from_name\", e.target.value)\n                      }\n                      placeholder=\"St. Gabriel Church\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newsletterFreq\">Newsletter Frequency</Label>\n                  <Select\n                    value={emailSettings.newsletter_frequency}\n                    onValueChange={(value: \"daily\" | \"weekly\" | \"monthly\") =>\n                      handleEmailChange(\"newsletter_frequency\", value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Auto Welcome Email</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Send welcome email to new subscribers\n                    </p>\n                  </div>\n                  <Switch\n                    checked={emailSettings.auto_welcome_email}\n                    onCheckedChange={(checked) =>\n                      handleEmailChange(\"auto_welcome_email\", checked)\n                    }\n                  />\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium mb-3\">SMTP Configuration</h4>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"smtpHost\">SMTP Host</Label>\n                      <Input\n                        id=\"smtpHost\"\n                        value={emailSettings.smtp_host}\n                        onChange={(e) =>\n                          handleEmailChange(\"smtp_host\", e.target.value)\n                        }\n                        placeholder=\"smtp.gmail.com\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"smtpPort\">SMTP Port</Label>\n                      <Input\n                        id=\"smtpPort\"\n                        type=\"number\"\n                        value={emailSettings.smtp_port}\n                        onChange={(e) =>\n                          handleEmailChange(\n                            \"smtp_port\",\n                            parseInt(e.target.value),\n                          )\n                        }\n                        placeholder=\"587\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"smtpUsername\">SMTP Username</Label>\n                      <Input\n                        id=\"smtpUsername\"\n                        value={emailSettings.smtp_username}\n                        onChange={(e) =>\n                          handleEmailChange(\"smtp_username\", e.target.value)\n                        }\n                        placeholder=\"your-email@gmail.com\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"smtpPassword\">SMTP Password</Label>\n                      <Input\n                        id=\"smtpPassword\"\n                        type=\"password\"\n                        value={emailSettings.smtp_password}\n                        onChange={(e) =>\n                          handleEmailChange(\"smtp_password\", e.target.value)\n                        }\n                        placeholder=\"your-app-password\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Button type=\"submit\" disabled={saving}>\n              {saving ? \"Saving...\" : \"Save Email Settings\"}\n            </Button>\n          </form>\n        </TabsContent>\n\n        <TabsContent value=\"subscribers\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Email Subscribers ({subscribers.length})\n                </span>\n                <Button size=\"sm\" variant=\"outline\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Subscriber\n                </Button>\n              </CardTitle>\n              <CardDescription>\n                Manage your email newsletter subscribers\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {subscribers.length === 0 ? (\n                  <p className=\"text-center text-gray-500 py-8\">\n                    No subscribers yet. Start collecting email addresses!\n                  </p>\n                ) : (\n                  subscribers.map((subscriber) => (\n                    <div\n                      key={subscriber.id}\n                      className=\"flex items-center justify-between p-4 border rounded-lg\"\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div>\n                            <p className=\"font-medium\">{subscriber.email}</p>\n                            {subscriber.name && (\n                              <p className=\"text-sm text-gray-500\">\n                                {subscriber.name}\n                              </p>\n                            )}\n                          </div>\n                          <Badge\n                            variant={\n                              subscriber.status === \"active\"\n                                ? \"default\"\n                                : subscriber.status === \"unsubscribed\"\n                                  ? \"secondary\"\n                                  : \"destructive\"\n                            }\n                          >\n                            {subscriber.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-400 mt-1\">\n                          Subscribed:{\" \"}\n                          {new Date(\n                            subscriber.subscribed_at,\n                          ).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {subscriber.status === \"active\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUnsubscribe(subscriber.email)}\n                          >\n                            Unsubscribe\n                          </Button>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handleDeleteSubscriber(subscriber.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/SystemHealth.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Wifi' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[822,825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[822,825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toast' is assigned a value but never used.","line":72,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runHealthChecks'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [runHealthChecks]","fix":{"range":[1793,1795],"text":"[runHealthChecks]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":99,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":111,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":125,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":158,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":19}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  RefreshCw,\n  Database,\n  Server,\n  Wifi,\n  HardDrive,\n  Activity,\n  Clock,\n  AlertCircle,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface HealthCheck {\n  name: string;\n  status: \"healthy\" | \"warning\" | \"error\";\n  message: string;\n  lastChecked: Date;\n  responseTime?: number;\n  details?: Record<string, any>;\n}\n\ninterface SystemMetrics {\n  database: {\n    connections: number;\n    queries: number;\n    avgResponseTime: number;\n    storage: {\n      used: number;\n      total: number;\n      percentage: number;\n    };\n  };\n  api: {\n    uptime: number;\n    requests: number;\n    errors: number;\n    avgResponseTime: number;\n  };\n  storage: {\n    images: {\n      count: number;\n      size: number;\n    };\n    documents: {\n      count: number;\n      size: number;\n    };\n  };\n}\n\nexport default function SystemHealth() {\n  const [healthChecks, setHealthChecks] = useState<HealthCheck[]>([]);\n  const [metrics, setMetrics] = useState<SystemMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    runHealthChecks();\n    const interval = setInterval(runHealthChecks, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, []);\n\n  const runHealthChecks = async () => {\n    setLoading(true);\n    const checks: HealthCheck[] = [];\n\n    // Database connectivity check\n    try {\n      const start = Date.now();\n      const { error } = await supabase.from(\"profiles\").select(\"id\").limit(1);\n      const responseTime = Date.now() - start;\n\n      checks.push({\n        name: \"Database Connection\",\n        status: error ? \"error\" : \"healthy\",\n        message: error\n          ? `Connection failed: ${error.message}`\n          : \"Connected successfully\",\n        lastChecked: new Date(),\n        responseTime,\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Database Connection\",\n        status: \"error\",\n        message: \"Connection failed\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Storage bucket check\n    try {\n      const start = Date.now();\n      const { data, error } = await supabase.storage\n        .from(\"images\")\n        .list(\"\", { limit: 1 });\n      const responseTime = Date.now() - start;\n\n      checks.push({\n        name: \"Storage Bucket\",\n        status: error ? \"error\" : \"healthy\",\n        message: error\n          ? `Storage error: ${error.message}`\n          : \"Storage accessible\",\n        lastChecked: new Date(),\n        responseTime,\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Storage Bucket\",\n        status: \"error\",\n        message: \"Storage check failed\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Data integrity checks\n    try {\n      const [eventsRes, membersRes, donationsRes] = await Promise.all([\n        supabase.from(\"events\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"members\").select(\"*\", { count: \"exact\", head: true }),\n        supabase.from(\"donations\").select(\"*\", { count: \"exact\", head: true }),\n      ]);\n\n      const totalRecords =\n        (eventsRes.count || 0) +\n        (membersRes.count || 0) +\n        (donationsRes.count || 0);\n\n      checks.push({\n        name: \"Data Integrity\",\n        status: \"healthy\",\n        message: `${totalRecords} total records found`,\n        lastChecked: new Date(),\n        details: {\n          events: eventsRes.count || 0,\n          members: membersRes.count || 0,\n          donations: donationsRes.count || 0,\n        },\n      });\n    } catch (error) {\n      checks.push({\n        name: \"Data Integrity\",\n        status: \"warning\",\n        message: \"Could not verify data integrity\",\n        lastChecked: new Date(),\n      });\n    }\n\n    // Email system check (mock)\n    checks.push({\n      name: \"Email System\",\n      status: \"healthy\",\n      message: \"Email service operational\",\n      lastChecked: new Date(),\n    });\n\n    // Payment system check (mock)\n    checks.push({\n      name: \"Payment System\",\n      status: \"healthy\",\n      message: \"Stripe integration active\",\n      lastChecked: new Date(),\n    });\n\n    setHealthChecks(checks);\n    setLastUpdate(new Date());\n\n    // Load system metrics\n    await loadSystemMetrics();\n\n    setLoading(false);\n  };\n\n  const loadSystemMetrics = async () => {\n    try {\n      // Get storage info\n      const { data: storageData } = await supabase.storage\n        .from(\"images\")\n        .list();\n\n      // Mock metrics (in a real app, these would come from monitoring services)\n      const mockMetrics: SystemMetrics = {\n        database: {\n          connections: 12,\n          queries: 1547,\n          avgResponseTime: 45,\n          storage: {\n            used: 2.3,\n            total: 10,\n            percentage: 23,\n          },\n        },\n        api: {\n          uptime: 99.8,\n          requests: 8432,\n          errors: 12,\n          avgResponseTime: 120,\n        },\n        storage: {\n          images: {\n            count: storageData?.length || 0,\n            size: 156.7, // MB\n          },\n          documents: {\n            count: 0,\n            size: 0,\n          },\n        },\n      };\n\n      setMetrics(mockMetrics);\n    } catch (error) {\n      console.error(\"Error loading metrics:\", error);\n    }\n  };\n\n  const getStatusIcon = (status: HealthCheck[\"status\"]) => {\n    switch (status) {\n      case \"healthy\":\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />;\n      case \"error\":\n        return <XCircle className=\"h-5 w-5 text-red-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: HealthCheck[\"status\"]) => {\n    const variants = {\n      healthy: \"default\",\n      warning: \"secondary\",\n      error: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status]} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const overallStatus =\n    healthChecks.length > 0\n      ? healthChecks.some((check) => check.status === \"error\")\n        ? \"error\"\n        : healthChecks.some((check) => check.status === \"warning\")\n          ? \"warning\"\n          : \"healthy\"\n      : \"healthy\";\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            System Health\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Monitor system status and performance metrics\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {lastUpdate && (\n            <span className=\"text-sm text-gray-500\">\n              Last updated: {format(lastUpdate, \"HH:mm:ss\")}\n            </span>\n          )}\n          <Button\n            onClick={runHealthChecks}\n            variant=\"outline\"\n            disabled={loading}\n          >\n            <RefreshCw\n              className={`h-4 w-4 mr-2 ${loading ? \"animate-spin\" : \"\"}`}\n            />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Overall Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            {getStatusIcon(overallStatus)}\n            <span>System Status</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-2xl font-bold text-church-burgundy capitalize\">\n                {overallStatus === \"healthy\"\n                  ? \"All Systems Operational\"\n                  : overallStatus === \"warning\"\n                    ? \"Some Issues Detected\"\n                    : \"Critical Issues Found\"}\n              </p>\n              <p className=\"text-gray-600\">\n                {healthChecks.filter((c) => c.status === \"healthy\").length} of{\" \"}\n                {healthChecks.length} services healthy\n              </p>\n            </div>\n            {getStatusBadge(overallStatus)}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"health\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"health\">Health Checks</TabsTrigger>\n          <TabsTrigger value=\"metrics\">System Metrics</TabsTrigger>\n          <TabsTrigger value=\"logs\">System Logs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"health\" className=\"space-y-4\">\n          {healthChecks.map((check, index) => (\n            <Card key={index}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getStatusIcon(check.status)}\n                    <div>\n                      <h3 className=\"font-medium\">{check.name}</h3>\n                      <p className=\"text-sm text-gray-600\">{check.message}</p>\n                      {check.details && (\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {Object.entries(check.details).map(([key, value]) => (\n                            <span key={key} className=\"mr-3\">\n                              {key}: {value}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    {getStatusBadge(check.status)}\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {format(check.lastChecked, \"HH:mm:ss\")}\n                    </p>\n                    {check.responseTime && (\n                      <p className=\"text-xs text-gray-500\">\n                        {check.responseTime}ms\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"metrics\" className=\"space-y-6\">\n          {metrics && (\n            <>\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Database className=\"h-4 w-4 mr-2\" />\n                      Database\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.database.connections}\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Active connections</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>Queries: {metrics.database.queries}</div>\n                      <div>\n                        Avg response: {metrics.database.avgResponseTime}ms\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Server className=\"h-4 w-4 mr-2\" />\n                      API\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.api.uptime}%\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Uptime</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>Requests: {metrics.api.requests}</div>\n                      <div>Errors: {metrics.api.errors}</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <HardDrive className=\"h-4 w-4 mr-2\" />\n                      Storage\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.database.storage.percentage}%\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Used</p>\n                    <div className=\"mt-2 text-xs text-gray-600\">\n                      <div>\n                        {metrics.database.storage.used}GB /{\" \"}\n                        {metrics.database.storage.total}GB\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium flex items-center\">\n                      <Activity className=\"h-4 w-4 mr-2\" />\n                      Performance\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-church-burgundy\">\n                      {metrics.api.avgResponseTime}ms\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Avg response time</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Storage Usage</CardTitle>\n                    <CardDescription>File storage breakdown</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Images</span>\n                      <span className=\"text-sm font-medium\">\n                        {metrics.storage.images.count} files (\n                        {metrics.storage.images.size} MB)\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Documents</span>\n                      <span className=\"text-sm font-medium\">\n                        {metrics.storage.documents.count} files (\n                        {metrics.storage.documents.size} MB)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-church-burgundy h-2 rounded-full\"\n                        style={{\n                          width: `${metrics.database.storage.percentage}%`,\n                        }}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Database Performance</CardTitle>\n                    <CardDescription>\n                      Query and connection metrics\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600\">\n                          Active Connections\n                        </p>\n                        <p className=\"text-2xl font-bold text-church-burgundy\">\n                          {metrics.database.connections}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Total Queries</p>\n                        <p className=\"text-2xl font-bold text-church-burgundy\">\n                          {metrics.database.queries}\n                        </p>\n                      </div>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600\">\n                        Average Response Time\n                      </p>\n                      <p className=\"text-lg font-semibold\">\n                        {metrics.database.avgResponseTime}ms\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"logs\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"h-5 w-5 mr-2\" />\n                Recent System Events\n              </CardTitle>\n              <CardDescription>\n                Latest system activities and alerts\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {[\n                  {\n                    time: \"10:30:15\",\n                    level: \"info\",\n                    message: \"Database backup completed successfully\",\n                  },\n                  {\n                    time: \"10:25:42\",\n                    level: \"info\",\n                    message: \"New member registration: John Doe\",\n                  },\n                  {\n                    time: \"10:20:18\",\n                    level: \"warning\",\n                    message: \"High memory usage detected (85%)\",\n                  },\n                  {\n                    time: \"10:15:33\",\n                    level: \"info\",\n                    message: \"Email campaign sent to 150 subscribers\",\n                  },\n                  {\n                    time: \"10:10:07\",\n                    level: \"error\",\n                    message: \"Failed to process payment for donation #1234\",\n                  },\n                  {\n                    time: \"10:05:21\",\n                    level: \"info\",\n                    message: \"System health check completed\",\n                  },\n                ].map((log, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center space-x-3 p-3 rounded-lg bg-gray-50\"\n                  >\n                    <div className=\"flex-shrink-0\">\n                      {log.level === \"error\" ? (\n                        <XCircle className=\"h-4 w-4 text-red-600\" />\n                      ) : log.level === \"warning\" ? (\n                        <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                      ) : (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">{log.message}</p>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">{log.time}</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Testimonials.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTestimonials'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadTestimonials]","fix":{"range":[1825,1827],"text":"[loadTestimonials]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterTestimonials'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [testimonials, searchTerm, approvalFilter, filterTestimonials]","fix":{"range":[1882,1924],"text":"[testimonials, searchTerm, approvalFilter, filterTestimonials]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Search,\n  MessageSquare,\n  CheckCircle,\n  Clock,\n  Eye,\n  EyeOff,\n  Trash2,\n  User,\n  ThumbsUp,\n  ThumbsDown,\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Testimonial {\n  id: string;\n  name: string;\n  content: string;\n  is_approved: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AdminTestimonials() {\n  const [testimonials, setTestimonials] = useState<Testimonial[]>([]);\n  const [filteredTestimonials, setFilteredTestimonials] = useState<\n    Testimonial[]\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTestimonial, setSelectedTestimonial] =\n    useState<Testimonial | null>(null);\n  const [approvalFilter, setApprovalFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadTestimonials();\n  }, []);\n\n  useEffect(() => {\n    filterTestimonials();\n  }, [testimonials, searchTerm, approvalFilter]);\n\n  const loadTestimonials = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"testimonials\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setTestimonials(data || []);\n    } catch (error) {\n      console.error(\"Error loading testimonials:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load testimonials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterTestimonials = () => {\n    let filtered = testimonials;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (testimonial) =>\n          testimonial.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          testimonial.content.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Approval filter\n    if (approvalFilter !== \"all\") {\n      const isApproved = approvalFilter === \"approved\";\n      filtered = filtered.filter(\n        (testimonial) => testimonial.is_approved === isApproved,\n      );\n    }\n\n    setFilteredTestimonials(filtered);\n  };\n\n  const toggleApproval = async (id: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from(\"testimonials\")\n        .update({\n          is_approved: !currentStatus,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: `Testimonial ${!currentStatus ? \"approved\" : \"unapproved\"} successfully`,\n      });\n      loadTestimonials();\n    } catch (error) {\n      console.error(\"Error updating testimonial:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update testimonial\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteTestimonial = async (id: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"testimonials\")\n        .delete()\n        .eq(\"id\", id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Testimonial deleted successfully\",\n      });\n      loadTestimonials();\n    } catch (error) {\n      console.error(\"Error deleting testimonial:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete testimonial\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const calculateStats = () => {\n    const totalTestimonials = testimonials.length;\n    const approvedTestimonials = testimonials.filter(\n      (t) => t.is_approved,\n    ).length;\n    const pendingTestimonials = testimonials.filter(\n      (t) => !t.is_approved,\n    ).length;\n    const thisMonthTestimonials = testimonials.filter(\n      (t) => new Date(t.created_at).getMonth() === new Date().getMonth(),\n    ).length;\n\n    return {\n      totalTestimonials,\n      approvedTestimonials,\n      pendingTestimonials,\n      thisMonthTestimonials,\n    };\n  };\n\n  const stats = calculateStats();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-church-burgundy\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            Testimonials Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Review and manage testimonials from church members\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              Total Testimonials\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-church-burgundy\">\n              {stats.totalTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Approved\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats.approvedTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {stats.totalTestimonials > 0\n                ? Math.round(\n                    (stats.approvedTestimonials / stats.totalTestimonials) *\n                      100,\n                  )\n                : 0}\n              % of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Pending Review\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {stats.pendingTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">Awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <User className=\"w-4 h-4 mr-2\" />\n              This Month\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {stats.thisMonthTestimonials}\n            </div>\n            <p className=\"text-xs text-gray-500\">New testimonials</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search testimonials...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Approval Status</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={approvalFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={\n                    approvalFilter === \"approved\" ? \"default\" : \"outline\"\n                  }\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"approved\")}\n                >\n                  Approved\n                </Button>\n                <Button\n                  variant={approvalFilter === \"pending\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setApprovalFilter(\"pending\")}\n                >\n                  Pending\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Testimonials Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Testimonials ({filteredTestimonials.length})</CardTitle>\n          <CardDescription>\n            Review and manage community testimonials\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Testimonial</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTestimonials.map((testimonial) => (\n                  <TableRow key={testimonial.id}>\n                    <TableCell>\n                      {format(new Date(testimonial.created_at), \"MMM d, yyyy\")}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"font-medium\">{testimonial.name}</div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <p className=\"truncate\">{testimonial.content}</p>\n                        <Button\n                          variant=\"link\"\n                          size=\"sm\"\n                          className=\"p-0 h-auto text-xs\"\n                          onClick={() => setSelectedTestimonial(testimonial)}\n                        >\n                          Read full testimonial\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {testimonial.is_approved ? (\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Approved\n                        </Badge>\n                      ) : (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Pending\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            toggleApproval(\n                              testimonial.id,\n                              testimonial.is_approved,\n                            )\n                          }\n                          className={\n                            testimonial.is_approved\n                              ? \"\"\n                              : \"bg-green-50 hover:bg-green-100\"\n                          }\n                        >\n                          {testimonial.is_approved ? (\n                            <>\n                              <ThumbsDown className=\"w-3 h-3 mr-1\" />\n                              Unapprove\n                            </>\n                          ) : (\n                            <>\n                              <ThumbsUp className=\"w-3 h-3 mr-1\" />\n                              Approve\n                            </>\n                          )}\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>\n                                Delete Testimonial\n                              </AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this testimonial\n                                from {testimonial.name}? This action cannot be\n                                undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() =>\n                                  deleteTestimonial(testimonial.id)\n                                }\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          {filteredTestimonials.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No testimonials found matching your criteria.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Testimonial Detail Dialog */}\n      <Dialog\n        open={!!selectedTestimonial}\n        onOpenChange={() => setSelectedTestimonial(null)}\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Testimonial Details</DialogTitle>\n            <DialogDescription>\n              {selectedTestimonial &&\n                format(\n                  new Date(selectedTestimonial.created_at),\n                  \"MMMM d, yyyy 'at' h:mm a\",\n                )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTestimonial && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">From:</Label>\n                <p className=\"text-sm font-medium\">\n                  {selectedTestimonial.name}\n                </p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Testimonial:</Label>\n                <div className=\"mt-2 p-4 bg-gray-50 rounded-md border-l-4 border-church-gold\">\n                  <p className=\"text-sm leading-relaxed whitespace-pre-wrap italic\">\n                    \"{selectedTestimonial.content}\"\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between pt-4 border-t\">\n                <div className=\"flex items-center space-x-2\">\n                  <Label className=\"text-sm\">Status:</Label>\n                  {selectedTestimonial.is_approved ? (\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Approved\n                    </Badge>\n                  ) : (\n                    <Badge className=\"bg-yellow-100 text-yellow-800\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      Pending Review\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      toggleApproval(\n                        selectedTestimonial.id,\n                        selectedTestimonial.is_approved,\n                      );\n                      setSelectedTestimonial(null);\n                    }}\n                    className={\n                      selectedTestimonial.is_approved\n                        ? \"\"\n                        : \"bg-green-50 hover:bg-green-100\"\n                    }\n                  >\n                    {selectedTestimonial.is_approved ? (\n                      <>\n                        <ThumbsDown className=\"w-4 h-4 mr-2\" />\n                        Unapprove\n                      </>\n                    ) : (\n                      <>\n                        <ThumbsUp className=\"w-4 h-4 mr-2\" />\n                        Approve\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/admin/Users.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit2' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShieldAlert' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'editingUser' is assigned a value but never used.","line":82,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setEditingUser' is assigned a value but never used.","line":82,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUsers]","fix":{"range":[2014,2016],"text":"[fetchUsers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterUsers'. Either include it or remove the dependency array.","line":90,"column":6,"nodeType":"ArrayExpression","endLine":90,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [users, searchTerm, filterUsers]","fix":{"range":[2064,2083],"text":"[users, searchTerm, filterUsers]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":138,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleRoleChange' is assigned a value but never used.","line":163,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":25}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { api } from \"@/integrations/supabase/api\";\nimport {\n  Loader2,\n  UserPlus,\n  Edit2,\n  Trash2,\n  Mail,\n  ShieldCheck,\n  ShieldAlert,\n  UserX,\n  Search,\n  Crown,\n  Shield,\n  ArrowUp,\n  ArrowDown,\n} from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n  created_at: string;\n}\n\nexport default function Users() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false);\n  const [userToDelete, setUserToDelete] = useState<User | null>(null);\n  const [adminCount, setAdminCount] = useState(0);\n  const [userCount, setUserCount] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    filterUsers();\n  }, [users, searchTerm]);\n\n  const fetchUsers = async () => {\n    try {\n      const { data: profiles, error } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setUsers(profiles);\n\n      // Count admins and regular users\n      const admins = profiles.filter((user) => user.role === \"admin\");\n      setAdminCount(admins.length);\n      setUserCount(profiles.length - admins.length);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch users\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterUsers = () => {\n    if (!searchTerm) {\n      setFilteredUsers(users);\n      return;\n    }\n\n    const filtered = users.filter((user) =>\n      user.email.toLowerCase().includes(searchTerm.toLowerCase()),\n    );\n    setFilteredUsers(filtered);\n  };\n\n  const handleAddUser = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get(\"email\") as string;\n    const role = formData.get(\"role\") as string;\n\n    try {\n      // Create a new user profile directly\n      const { data, error } = await supabase.from(\"profiles\").insert([\n        {\n          email,\n          role,\n        },\n      ]);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User added successfully\",\n      });\n      setIsAddDialogOpen(false);\n      fetchUsers();\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRoleChange = async (userId: string, newRole: string) => {\n    try {\n      // Check if trying to demote the last admin\n      if (newRole === \"user\" && adminCount <= 1) {\n        const user = users.find((u) => u.id === userId);\n        if (user?.role === \"admin\") {\n          toast({\n            title: \"Cannot Demote\",\n            description: \"Cannot demote the last admin user\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: newRole })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePromoteToAdmin = async (userId: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: \"admin\" })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User promoted to admin successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error promoting user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to promote user to admin\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDemoteFromAdmin = async (userId: string) => {\n    try {\n      // Check if this is the last admin\n      if (adminCount <= 1) {\n        toast({\n          title: \"Cannot Demote\",\n          description: \"Cannot demote the last admin user\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({ role: \"user\" })\n        .eq(\"id\", userId);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Admin demoted to user successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error demoting admin:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to demote admin\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const confirmDeleteUser = (user: User) => {\n    setUserToDelete(user);\n    setIsConfirmDeleteOpen(true);\n  };\n\n  const handleDeleteUser = async () => {\n    if (!userToDelete) return;\n\n    try {\n      // Check if this is the last admin\n      if (userToDelete.role === \"admin\" && adminCount <= 1) {\n        toast({\n          title: \"Cannot Delete\",\n          description: \"Cannot delete the last admin user\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"profiles\")\n        .delete()\n        .eq(\"id\", userToDelete.id);\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n\n      await fetchUsers();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsConfirmDeleteOpen(false);\n      setUserToDelete(null);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-church-burgundy\">\n            User Management\n          </h1>\n          <p className=\"text-gray-600\">\n            Add, edit, or remove users and manage their roles\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-church-burgundy hover:bg-church-burgundy/90\">\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New User</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleAddUser} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"user@example.com\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"role\">Role</Label>\n                <Select name=\"role\" defaultValue=\"user\">\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"user\">User</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-church-burgundy hover:bg-church-burgundy/90\"\n              >\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add User\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Admin Users</CardTitle>\n            <CardDescription>\n              Users with administrative privileges\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <Crown className=\"h-5 w-5 text-yellow-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {adminCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Regular Users</CardTitle>\n            <CardDescription>Users with standard access</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <Shield className=\"h-5 w-5 text-blue-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {userCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <CardDescription>All registered users</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center\">\n              <ShieldCheck className=\"h-5 w-5 text-green-600 mr-2\" />\n              <div className=\"text-2xl font-bold text-green-600\">\n                {adminCount + userCount}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search Users</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by email...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"border rounded-lg\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Email</TableHead>\n              <TableHead>Role</TableHead>\n              <TableHead>Admin Actions</TableHead>\n              <TableHead>Created At</TableHead>\n              <TableHead className=\"w-[120px]\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredUsers.map((user) => (\n              <TableRow key={user.id}>\n                <TableCell>{user.email}</TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    {user.role === \"admin\" ? (\n                      <div className=\"flex items-center space-x-1 px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs font-medium\">\n                        <Crown className=\"h-3 w-3\" />\n                        <span>Admin</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium\">\n                        <Shield className=\"h-3 w-3\" />\n                        <span>User</span>\n                      </div>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    {user.role === \"admin\" ? (\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-orange-600 hover:text-orange-700 border-orange-200 hover:border-orange-300\"\n                            disabled={adminCount <= 1}\n                          >\n                            <ArrowDown className=\"h-3 w-3 mr-1\" />\n                            Demote\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Demote Admin</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to demote {user.email} from\n                              admin to regular user?\n                              {adminCount <= 1 && (\n                                <p className=\"text-red-500 mt-2 font-bold\">\n                                  Warning: Cannot demote the last admin user.\n                                </p>\n                              )}\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDemoteFromAdmin(user.id)}\n                              className=\"bg-orange-600 hover:bg-orange-700\"\n                              disabled={adminCount <= 1}\n                            >\n                              <ArrowDown className=\"h-4 w-4 mr-2\" />\n                              Demote to User\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    ) : (\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-green-600 hover:text-green-700 border-green-200 hover:border-green-300\"\n                          >\n                            <ArrowUp className=\"h-3 w-3 mr-1\" />\n                            Promote\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>\n                              Promote to Admin\n                            </AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to promote {user.email} to\n                              admin? This will give them full administrative\n                              privileges.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handlePromoteToAdmin(user.id)}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                            >\n                              <ArrowUp className=\"h-4 w-4 mr-2\" />\n                              Promote to Admin\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  {new Date(user.created_at).toLocaleDateString()}\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex space-x-2\">\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"text-red-500 hover:text-red-700\"\n                          onClick={() => confirmDeleteUser(user)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete User</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete {user.email}? This\n                            action cannot be undone.\n                            {user.role === \"admin\" && adminCount <= 1 && (\n                              <p className=\"text-red-500 mt-2 font-bold\">\n                                Warning: Cannot delete the last admin user.\n                              </p>\n                            )}\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={handleDeleteUser}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                            disabled={user.role === \"admin\" && adminCount <= 1}\n                          >\n                            <UserX className=\"h-4 w-4 mr-2\" />\n                            Delete User\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        {filteredUsers.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500\">\n            No users found matching your criteria.\n          </div>\n        )}\n      </div>\n\n      {/* Delete User Confirmation Dialog */}\n      <AlertDialog\n        open={isConfirmDeleteOpen}\n        onOpenChange={setIsConfirmDeleteOpen}\n      >\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {userToDelete?.email}? This action\n              cannot be undone.\n              {userToDelete?.role === \"admin\" && adminCount <= 1 && (\n                <p className=\"text-red-500 mt-2 font-bold\">\n                  Warning: Cannot delete the last admin user.\n                </p>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteUser}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={userToDelete?.role === \"admin\" && adminCount <= 1}\n            >\n              <UserX className=\"h-4 w-4 mr-2\" />\n              Delete User\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-admin-v2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-admin-v3.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-admin-v4.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/create-test-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/scripts/setup-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/services/DataSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[280,283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[280,283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[376,379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[376,379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1759,1762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1759,1762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5846,5849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5846,5849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7031,7034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7031,7034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7285,7288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7285,7288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8335,8338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8335,8338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced data synchronization service with admin action tracking\n */\nclass DataSyncService {\n  private static instance: DataSyncService;\n  private isInitialized = false;\n  private adminActions: Array<{\n    action: string;\n    table: string;\n    timestamp: Date;\n    data?: any;\n    userId?: string;\n    details?: string;\n  }> = [];\n  private syncStatus: Record<string, any> = {};\n  private errorLog: Array<{\n    error: string;\n    timestamp: Date;\n    context?: string;\n  }> = [];\n\n  private constructor() {}\n\n  static getInstance(): DataSyncService {\n    if (!DataSyncService.instance) {\n      DataSyncService.instance = new DataSyncService();\n    }\n    return DataSyncService.instance;\n  }\n\n  initialize() {\n    if (this.isInitialized) return;\n    console.log(\"DataSyncService initialized with enhanced admin tracking\");\n    this.isInitialized = true;\n    this.startHealthMonitoring();\n  }\n\n  async checkHealth(): Promise<boolean> {\n    try {\n      // Simulate health check\n      const healthStatus = {\n        database: true,\n        authentication: true,\n        storage: true,\n        realtime: true,\n        timestamp: new Date().toISOString(),\n      };\n\n      this.syncStatus = {\n        ...this.syncStatus,\n        lastHealthCheck: healthStatus,\n      };\n\n      return true;\n    } catch (error) {\n      this.logError(\"Health check failed\", error as Error);\n      return false;\n    }\n  }\n\n  getSubscriptionStatus(): Record<string, string> {\n    return {\n      status: \"active\",\n      lastSync: new Date().toISOString(),\n      adminActions: this.adminActions.length.toString(),\n      errors: this.errorLog.length.toString(),\n      uptime: this.calculateUptime(),\n    };\n  }\n\n  notifyAdminAction(\n    action: string,\n    table: string,\n    data?: any,\n    userId?: string,\n    details?: string,\n  ) {\n    const actionRecord = {\n      action,\n      table,\n      timestamp: new Date(),\n      data: data\n        ? {\n            id: data.id,\n            type: typeof data,\n            preview: this.getDataPreview(data),\n          }\n        : undefined,\n      userId: userId || \"system\",\n      details,\n      sessionId: this.getCurrentSessionId(),\n      userAgent:\n        typeof navigator !== \"undefined\" ? navigator.userAgent : \"server\",\n      ipAddress: this.getCurrentIP(),\n    };\n\n    this.adminActions.unshift(actionRecord);\n\n    // Keep only last 1000 actions (increased for better audit trail)\n    if (this.adminActions.length > 1000) {\n      this.adminActions = this.adminActions.slice(0, 1000);\n    }\n\n    console.log(`Admin action recorded: ${action} on ${table}`, {\n      userId: actionRecord.userId,\n      details,\n      timestamp: actionRecord.timestamp,\n      sessionId: actionRecord.sessionId,\n    });\n\n    // Update sync status\n    this.syncStatus.lastAdminAction = actionRecord;\n\n    // Store critical actions in localStorage for persistence\n    if (this.isCriticalAction(action)) {\n      this.persistCriticalAction(actionRecord);\n    }\n  }\n\n  getRecentAdminActions(limit = 10) {\n    return this.adminActions.slice(0, limit);\n  }\n\n  getAdminActionsByUser(userId: string, limit = 20) {\n    return this.adminActions\n      .filter((action) => action.userId === userId)\n      .slice(0, limit);\n  }\n\n  getAdminActionsByTable(table: string, limit = 20) {\n    return this.adminActions\n      .filter((action) => action.table === table)\n      .slice(0, limit);\n  }\n\n  logError(message: string, error: Error, context?: string) {\n    const errorRecord = {\n      error: `${message}: ${error.message}`,\n      timestamp: new Date(),\n      context,\n    };\n\n    this.errorLog.unshift(errorRecord);\n\n    // Keep only last 100 errors\n    if (this.errorLog.length > 100) {\n      this.errorLog = this.errorLog.slice(0, 100);\n    }\n\n    console.error(\"DataSyncService Error:\", errorRecord);\n  }\n\n  getRecentErrors(limit = 10) {\n    return this.errorLog.slice(0, limit);\n  }\n\n  getSystemStats() {\n    return {\n      totalAdminActions: this.adminActions.length,\n      totalErrors: this.errorLog.length,\n      uptime: this.calculateUptime(),\n      lastHealthCheck: this.syncStatus.lastHealthCheck?.timestamp,\n      isHealthy:\n        this.syncStatus.lastHealthCheck?.database &&\n        this.syncStatus.lastHealthCheck?.authentication,\n      actionsByTable: this.getActionStatsByTable(),\n      errorRate: this.calculateErrorRate(),\n    };\n  }\n\n  private calculateUptime(): string {\n    // Simple uptime calculation (would be more sophisticated in production)\n    const uptimeMs = Date.now() - (this.syncStatus.startTime || Date.now());\n    const hours = Math.floor(uptimeMs / (1000 * 60 * 60));\n    const minutes = Math.floor((uptimeMs % (1000 * 60 * 60)) / (1000 * 60));\n    return `${hours}h ${minutes}m`;\n  }\n\n  private getActionStatsByTable() {\n    const stats: Record<string, number> = {};\n    if (Array.isArray(this.adminActions)) {\n      this.adminActions.forEach((action) => {\n        if (action && action.table) {\n          stats[action.table] = (stats[action.table] || 0) + 1;\n        }\n      });\n    }\n    return stats;\n  }\n\n  private calculateErrorRate(): number {\n    const totalOperations = this.adminActions.length;\n    const totalErrors = this.errorLog.length;\n    return totalOperations > 0 ? (totalErrors / totalOperations) * 100 : 0;\n  }\n\n  private startHealthMonitoring() {\n    this.syncStatus.startTime = Date.now();\n\n    // Run health check every 10 minutes to reduce frequency\n    setInterval(\n      () => {\n        this.checkHealth();\n      },\n      10 * 60 * 1000,\n    );\n  }\n\n  exportLogs() {\n    return {\n      adminActions: this.adminActions,\n      errors: this.errorLog,\n      syncStatus: this.syncStatus,\n      exportedAt: new Date().toISOString(),\n    };\n  }\n\n  clearLogs() {\n    this.adminActions = [];\n    this.errorLog = [];\n    console.log(\"DataSyncService logs cleared\");\n  }\n\n  private getDataPreview(data: any): string {\n    if (!data) return \"N/A\";\n    if (typeof data === \"string\") return data.substring(0, 50);\n    if (data.title) return data.title.substring(0, 50);\n    if (data.name) return data.name.substring(0, 50);\n    if (data.email) return data.email;\n    return JSON.stringify(data).substring(0, 50);\n  }\n\n  private getCurrentSessionId(): string {\n    if (typeof window !== \"undefined\") {\n      let sessionId = sessionStorage.getItem(\"admin_session_id\");\n      if (!sessionId) {\n        sessionId =\n          Date.now().toString() + Math.random().toString(36).substr(2, 9);\n        sessionStorage.setItem(\"admin_session_id\", sessionId);\n      }\n      return sessionId;\n    }\n    return \"server-session\";\n  }\n\n  private getCurrentIP(): string {\n    // In a real app, this would be obtained from the server\n    return \"client-ip\";\n  }\n\n  private isCriticalAction(action: string): boolean {\n    const criticalActions = [\n      \"delete\",\n      \"update_role\",\n      \"create_admin\",\n      \"bulk_delete\",\n      \"system_config\",\n    ];\n    return criticalActions.some((critical) =>\n      action.toLowerCase().includes(critical),\n    );\n  }\n\n  private persistCriticalAction(actionRecord: any) {\n    try {\n      if (\n        typeof window === \"undefined\" ||\n        !window.localStorage ||\n        !actionRecord\n      ) {\n        return;\n      }\n\n      const stored = localStorage.getItem(\"critical_admin_actions\");\n      let criticalActions: any[] = [];\n\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          if (Array.isArray(parsed)) {\n            criticalActions = parsed;\n          }\n        } catch {\n          // If parsing fails, start with empty array\n        }\n      }\n\n      criticalActions.unshift(actionRecord);\n      // Keep only last 100 critical actions\n      const trimmed = criticalActions.slice(0, 100);\n      localStorage.setItem(\"critical_admin_actions\", JSON.stringify(trimmed));\n    } catch (error) {\n      console.error(\"Failed to persist critical action:\", error);\n    }\n  }\n\n  getCriticalActions(limit = 20) {\n    try {\n      if (typeof window === \"undefined\" || !window.localStorage) {\n        return [];\n      }\n\n      const stored = localStorage.getItem(\"critical_admin_actions\");\n      if (!stored) {\n        return [];\n      }\n\n      const criticalActions = JSON.parse(stored);\n      if (!Array.isArray(criticalActions)) {\n        return [];\n      }\n\n      return criticalActions\n        .slice(0, limit)\n        .map((action: any) => {\n          if (!action) return null;\n          return {\n            ...action,\n            timestamp: action.timestamp\n              ? new Date(action.timestamp)\n              : new Date(),\n          };\n        })\n        .filter(Boolean);\n    } catch (error) {\n      console.error(\"Failed to get critical actions:\", error);\n      return [];\n    }\n  }\n\n  getActionsByDateRange(startDate: Date, endDate: Date) {\n    return this.adminActions.filter((action) => {\n      const actionDate = new Date(action.timestamp);\n      return actionDate >= startDate && actionDate <= endDate;\n    });\n  }\n\n  getActionStatistics() {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const thisWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n\n    return {\n      today: this.adminActions.filter((a) => new Date(a.timestamp) >= today)\n        .length,\n      thisWeek: this.adminActions.filter(\n        (a) => new Date(a.timestamp) >= thisWeek,\n      ).length,\n      thisMonth: this.adminActions.filter(\n        (a) => new Date(a.timestamp) >= thisMonth,\n      ).length,\n      total: this.adminActions.length,\n      byAction: this.getActionStatsByType(),\n      byUser: this.getActionStatsByUser(),\n      criticalCount: this.getCriticalActions().length,\n    };\n  }\n\n  private getActionStatsByType() {\n    const stats: Record<string, number> = {};\n    if (Array.isArray(this.adminActions)) {\n      this.adminActions.forEach((action) => {\n        if (action && action.action) {\n          stats[action.action] = (stats[action.action] || 0) + 1;\n        }\n      });\n    }\n    return stats;\n  }\n\n  private getActionStatsByUser() {\n    const stats: Record<string, number> = {};\n    if (Array.isArray(this.adminActions)) {\n      this.adminActions.forEach((action) => {\n        if (action) {\n          const user = action.userId || \"unknown\";\n          stats[user] = (stats[user] || 0) + 1;\n        }\n      });\n    }\n    return stats;\n  }\n\n  cleanup() {\n    this.isInitialized = false;\n    this.adminActions = [];\n    this.errorLog = [];\n    this.syncStatus = {};\n    console.log(\"DataSyncService cleaned up\");\n  }\n}\n\nexport const dataSyncService = DataSyncService.getInstance();\nexport default DataSyncService;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/services/GitSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[764,767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[764,767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[795,798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[795,798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1209,1212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1209,1212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2173,2176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2173,2176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3226,3229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3226,3229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4048,4051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4048,4051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Git synchronization service for handling repository operations\n * This service helps with git-related issues in the Tempo platform\n */\nclass GitSyncService {\n  private static instance: GitSyncService;\n  private syncInProgress = false;\n  private lastSyncTime: Date | null = null;\n  private syncErrors: string[] = [];\n\n  private constructor() {}\n\n  static getInstance(): GitSyncService {\n    if (!GitSyncService.instance) {\n      GitSyncService.instance = new GitSyncService();\n    }\n    return GitSyncService.instance;\n  }\n\n  /**\n   * Check if git sync is available in the current environment\n   */\n  isGitSyncAvailable(): boolean {\n    // Check if we're in the Tempo platform environment\n    return (\n      typeof window !== \"undefined\" &&\n      (window as any).tempo &&\n      (window as any).tempo.git\n    );\n  }\n\n  /**\n   * Get current git status\n   */\n  async getGitStatus(): Promise<{\n    hasChanges: boolean;\n    changedFiles: string[];\n    branch: string;\n    lastCommit: string;\n  }> {\n    try {\n      if (!this.isGitSyncAvailable()) {\n        throw new Error(\"Git sync not available in current environment\");\n      }\n\n      // Use Tempo's git API if available\n      const tempoGit = (window as any).tempo.git;\n      const status = await tempoGit.getStatus();\n\n      return {\n        hasChanges: status.hasChanges || false,\n        changedFiles: status.changedFiles || [],\n        branch: status.branch || \"main\",\n        lastCommit: status.lastCommit || \"unknown\",\n      };\n    } catch (error) {\n      console.error(\"Failed to get git status:\", error);\n      return {\n        hasChanges: false,\n        changedFiles: [],\n        branch: \"unknown\",\n        lastCommit: \"unknown\",\n      };\n    }\n  }\n\n  /**\n   * Stage and commit changes\n   */\n  async commitChanges(message: string, files?: string[]): Promise<boolean> {\n    if (this.syncInProgress) {\n      console.warn(\"Git sync already in progress\");\n      return false;\n    }\n\n    try {\n      this.syncInProgress = true;\n      this.syncErrors = [];\n\n      if (!this.isGitSyncAvailable()) {\n        throw new Error(\"Git sync not available in current environment\");\n      }\n\n      const tempoGit = (window as any).tempo.git;\n\n      // Stage files\n      if (files && files.length > 0) {\n        await tempoGit.add(files);\n      } else {\n        await tempoGit.addAll();\n      }\n\n      // Commit changes\n      await tempoGit.commit(message);\n\n      this.lastSyncTime = new Date();\n      console.log(\"Successfully committed changes:\", message);\n      return true;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      this.syncErrors.push(errorMessage);\n      console.error(\"Failed to commit changes:\", error);\n      return false;\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Push changes to remote repository\n   */\n  async pushChanges(): Promise<boolean> {\n    if (this.syncInProgress) {\n      console.warn(\"Git sync already in progress\");\n      return false;\n    }\n\n    try {\n      this.syncInProgress = true;\n\n      if (!this.isGitSyncAvailable()) {\n        throw new Error(\"Git sync not available in current environment\");\n      }\n\n      const tempoGit = (window as any).tempo.git;\n      await tempoGit.push();\n\n      console.log(\"Successfully pushed changes to remote\");\n      return true;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      this.syncErrors.push(errorMessage);\n      console.error(\"Failed to push changes:\", error);\n      return false;\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Pull latest changes from remote\n   */\n  async pullChanges(): Promise<boolean> {\n    if (this.syncInProgress) {\n      console.warn(\"Git sync already in progress\");\n      return false;\n    }\n\n    try {\n      this.syncInProgress = true;\n\n      if (!this.isGitSyncAvailable()) {\n        throw new Error(\"Git sync not available in current environment\");\n      }\n\n      const tempoGit = (window as any).tempo.git;\n      await tempoGit.pull();\n\n      console.log(\"Successfully pulled changes from remote\");\n      return true;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      this.syncErrors.push(errorMessage);\n      console.error(\"Failed to pull changes:\", error);\n      return false;\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Auto-sync changes (commit and push)\n   */\n  async autoSync(commitMessage?: string): Promise<boolean> {\n    const message = commitMessage || `Auto-sync: ${new Date().toISOString()}`;\n\n    const commitSuccess = await this.commitChanges(message);\n    if (!commitSuccess) {\n      return false;\n    }\n\n    const pushSuccess = await this.pushChanges();\n    return pushSuccess;\n  }\n\n  /**\n   * Get sync status\n   */\n  getSyncStatus(): {\n    inProgress: boolean;\n    lastSyncTime: Date | null;\n    errors: string[];\n  } {\n    return {\n      inProgress: this.syncInProgress,\n      lastSyncTime: this.lastSyncTime,\n      errors: [...this.syncErrors],\n    };\n  }\n\n  /**\n   * Clear sync errors\n   */\n  clearErrors(): void {\n    this.syncErrors = [];\n  }\n\n  /**\n   * Setup auto-sync interval\n   */\n  setupAutoSync(intervalMinutes: number = 30): () => void {\n    const interval = setInterval(\n      async () => {\n        const status = await this.getGitStatus();\n        if (status.hasChanges) {\n          console.log(\"Auto-syncing changes...\");\n          await this.autoSync(\"Auto-sync: Periodic commit\");\n        }\n      },\n      intervalMinutes * 60 * 1000,\n    );\n\n    // Return cleanup function\n    return () => clearInterval(interval);\n  }\n}\n\nexport const gitSyncService = GitSyncService.getInstance();\nexport default GitSyncService;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/tempobook/dynamic/src/pages/Home/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/tempobook/storyboards/0d3632c4-e165-4cee-a997-a8e5a1fbb677/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/tempobook/storyboards/2dd722cd-8f7c-4cd7-af0a-491bba6240ff/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/tempobook/storyboards/4b1f0a34-4fbc-4997-9987-a0231a7e8bb0/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/tempobook/storyboards/9f539e7b-3f6a-4dfc-b3bf-f02a4b898e93/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/tempobook/storyboards/a4489c4d-cb64-4221-ac58-c8b9aed7ab22/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/types/env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/types/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/utils/adminDiagnostics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[191,194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[191,194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":16,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":64,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":94,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":21}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\nexport interface DiagnosticResult {\n  component: string;\n  status: \"success\" | \"warning\" | \"error\";\n  message: string;\n  details?: any;\n}\n\nexport class AdminDiagnostics {\n  static async runFullDiagnostics(): Promise<DiagnosticResult[]> {\n    const results: DiagnosticResult[] = [];\n\n    // Test database connectivity\n    try {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n      if (error) throw error;\n      results.push({\n        component: \"Database Connection\",\n        status: \"success\",\n        message: \"Database connection successful\",\n      });\n    } catch (error) {\n      results.push({\n        component: \"Database Connection\",\n        status: \"error\",\n        message: \"Database connection failed\",\n        details: error,\n      });\n    }\n\n    // Test authentication\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (session) {\n        results.push({\n          component: \"Authentication\",\n          status: \"success\",\n          message: \"User authenticated successfully\",\n        });\n      } else {\n        results.push({\n          component: \"Authentication\",\n          status: \"warning\",\n          message: \"No active session found\",\n        });\n      }\n    } catch (error) {\n      results.push({\n        component: \"Authentication\",\n        status: \"error\",\n        message: \"Authentication check failed\",\n        details: error,\n      });\n    }\n\n    // Test storage access\n    try {\n      const { data, error } = await supabase.storage\n        .from(\"images\")\n        .list(\"\", { limit: 1 });\n      if (error) throw error;\n      results.push({\n        component: \"Storage Access\",\n        status: \"success\",\n        message: \"Storage access successful\",\n      });\n    } catch (error) {\n      results.push({\n        component: \"Storage Access\",\n        status: \"error\",\n        message: \"Storage access failed\",\n        details: error,\n      });\n    }\n\n    // Test each table\n    const tables = [\n      \"events\",\n      \"members\",\n      \"gallery\",\n      \"donations\",\n      \"testimonials\",\n      \"prayer_requests\",\n      \"sermons\",\n    ];\n    for (const table of tables) {\n      try {\n        const { data, error } = await supabase.from(table).select(\"*\").limit(1);\n        if (error) throw error;\n        results.push({\n          component: `Table: ${table}`,\n          status: \"success\",\n          message: `Table ${table} accessible`,\n        });\n      } catch (error) {\n        results.push({\n          component: `Table: ${table}`,\n          status: \"error\",\n          message: `Table ${table} access failed`,\n          details: error,\n        });\n      }\n    }\n\n    return results;\n  }\n\n  static async testImagePaths(): Promise<DiagnosticResult[]> {\n    const results: DiagnosticResult[] = [];\n    const imagePaths = [\n      \"/images/gallery/church-service.jpg\",\n      \"/images/religious/palm-sunday.jpg\",\n      \"/images/religious/crucifixion.jpg\",\n      \"/images/religious/procession.jpg\",\n      \"/images/gallery/timket.jpg\",\n      \"/images/gallery/ceremony-1.jpg\",\n      \"/images/gallery/ceremony-2.jpg\",\n      \"/images/gallery/ceremony-3.jpg\",\n    ];\n\n    for (const path of imagePaths) {\n      try {\n        const response = await fetch(path, { method: \"HEAD\" });\n        if (response.ok) {\n          results.push({\n            component: `Image: ${path}`,\n            status: \"success\",\n            message: `Image accessible`,\n          });\n        } else {\n          results.push({\n            component: `Image: ${path}`,\n            status: \"error\",\n            message: `Image not found (${response.status})`,\n          });\n        }\n      } catch (error) {\n        results.push({\n          component: `Image: ${path}`,\n          status: \"error\",\n          message: `Image check failed`,\n          details: error,\n        });\n      }\n    }\n\n    return results;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/adminHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1403,1406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1403,1406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1522,1525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1522,1525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3107,3110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3107,3110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5095,5098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5095,5098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6092,6095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6092,6095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6102,6105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6102,6105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6448,6451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6448,6451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\n/**\n * Utility functions for admin operations with proper error handling\n */\n\nexport interface DatabaseHealthCheck {\n  isHealthy: boolean;\n  errors: string[];\n  tables: Record<string, boolean>;\n}\n\n/**\n * Check the health of all database tables used by the admin system\n */\nexport async function checkDatabaseHealth(): Promise<DatabaseHealthCheck> {\n  const result: DatabaseHealthCheck = {\n    isHealthy: true,\n    errors: [],\n    tables: {},\n  };\n\n  const tables = [\n    \"profiles\",\n    \"events\",\n    \"members\",\n    \"donations\",\n    \"sermons\",\n    \"gallery\",\n    \"testimonials\",\n    \"prayer_requests\",\n    \"appointments\",\n  ];\n\n  for (const table of tables) {\n    try {\n      const { error } = await supabase.from(table).select(\"count\").limit(1);\n\n      if (error) {\n        result.tables[table] = false;\n        result.errors.push(`${table}: ${error.message}`);\n        result.isHealthy = false;\n      } else {\n        result.tables[table] = true;\n      }\n    } catch (err) {\n      result.tables[table] = false;\n      result.errors.push(\n        `${table}: ${err instanceof Error ? err.message : \"Unknown error\"}`,\n      );\n      result.isHealthy = false;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Safe data loader with error handling and retries\n */\nexport async function safeDataLoader<T>(\n  operation: () => Promise<{ data: T[] | null; error: any }>,\n  tableName: string,\n  retries: number = 2,\n): Promise<{ data: T[]; error: string | null }> {\n  let lastError: any = null;\n\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    try {\n      console.log(\n        `Loading ${tableName} data (attempt ${attempt + 1}/${retries + 1})`,\n      );\n\n      const result = await operation();\n\n      if (result.error) {\n        lastError = result.error;\n        console.error(\n          `${tableName} load error (attempt ${attempt + 1}):`,\n          result.error,\n        );\n\n        // Wait before retry (exponential backoff)\n        if (attempt < retries) {\n          await new Promise((resolve) =>\n            setTimeout(resolve, Math.pow(2, attempt) * 1000),\n          );\n          continue;\n        }\n      } else {\n        console.log(\n          `Successfully loaded ${tableName} data:`,\n          result.data?.length || 0,\n          \"records\",\n        );\n        return { data: result.data || [], error: null };\n      }\n    } catch (err) {\n      lastError = err;\n      console.error(\n        `${tableName} load exception (attempt ${attempt + 1}):`,\n        err,\n      );\n\n      if (attempt < retries) {\n        await new Promise((resolve) =>\n          setTimeout(resolve, Math.pow(2, attempt) * 1000),\n        );\n        continue;\n      }\n    }\n  }\n\n  const errorMessage =\n    lastError instanceof Error\n      ? lastError.message\n      : typeof lastError === \"string\"\n        ? lastError\n        : `Failed to load ${tableName} after ${retries + 1} attempts`;\n\n  return { data: [], error: errorMessage };\n}\n\n/**\n * Validate admin authentication and permissions\n */\nexport async function validateAdminAuth(): Promise<{\n  isValid: boolean;\n  user: any;\n  error?: string;\n}> {\n  try {\n    const {\n      data: { session },\n      error: sessionError,\n    } = await supabase.auth.getSession();\n\n    if (sessionError) {\n      return {\n        isValid: false,\n        user: null,\n        error: `Session error: ${sessionError.message}`,\n      };\n    }\n\n    if (!session) {\n      return { isValid: false, user: null, error: \"No active session\" };\n    }\n\n    // Check if user has admin role\n    const { data: profile, error: profileError } = await supabase\n      .from(\"profiles\")\n      .select(\"role, email\")\n      .eq(\"id\", session.user.id)\n      .single();\n\n    if (profileError) {\n      return {\n        isValid: false,\n        user: null,\n        error: `Profile error: ${profileError.message}`,\n      };\n    }\n\n    if (!profile || profile.role !== \"admin\") {\n      return { isValid: false, user: null, error: \"Insufficient permissions\" };\n    }\n\n    return {\n      isValid: true,\n      user: {\n        ...session.user,\n        role: profile.role,\n        email: profile.email || session.user.email,\n      },\n    };\n  } catch (error) {\n    return {\n      isValid: false,\n      user: null,\n      error:\n        error instanceof Error ? error.message : \"Authentication check failed\",\n    };\n  }\n}\n\n/**\n * Safe operation wrapper with error handling\n */\nexport async function safeOperation<T>(\n  operation: () => Promise<T>,\n  operationName: string,\n): Promise<{ success: boolean; data?: T; error?: string }> {\n  try {\n    console.log(`Starting operation: ${operationName}`);\n    const data = await operation();\n    console.log(`Operation completed successfully: ${operationName}`);\n    return { success: true, data };\n  } catch (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : \"Unknown error\";\n    console.error(`Operation failed: ${operationName}`, error);\n    return { success: false, error: errorMessage };\n  }\n}\n\n/**\n * Format error messages for user display\n */\nexport function formatErrorMessage(error: any, context?: string): string {\n  if (!error) return \"Unknown error occurred\";\n\n  let message = \"\";\n\n  if (typeof error === \"string\") {\n    message = error;\n  } else if (error.message) {\n    message = error.message;\n  } else if (error.error_description) {\n    message = error.error_description;\n  } else {\n    message = \"An unexpected error occurred\";\n  }\n\n  // Add context if provided\n  if (context) {\n    message = `${context}: ${message}`;\n  }\n\n  // Make database errors more user-friendly\n  if (message.includes(\"relation\") && message.includes(\"does not exist\")) {\n    message = \"Database table not found. Please contact support.\";\n  } else if (message.includes(\"permission denied\")) {\n    message = \"Access denied. Please check your permissions.\";\n  } else if (message.includes(\"connection\")) {\n    message = \"Database connection error. Please try again.\";\n  }\n\n  return message;\n}\n\n/**\n * Debounce function to prevent rapid successive calls\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n/**\n * Log admin actions for audit trail\n */\nexport function logAdminAction(action: string, table: string, details?: any) {\n  const logEntry = {\n    timestamp: new Date().toISOString(),\n    action,\n    table,\n    details,\n    url: window.location.pathname,\n    userAgent: navigator.userAgent,\n  };\n\n  console.log(\"Admin Action:\", logEntry);\n\n  // Store in localStorage for debugging\n  try {\n    const logs = JSON.parse(localStorage.getItem(\"admin_action_logs\") || \"[]\");\n    logs.unshift(logEntry);\n    // Keep only last 50 logs\n    const recentLogs = logs.slice(0, 50);\n    localStorage.setItem(\"admin_action_logs\", JSON.stringify(recentLogs));\n  } catch (error) {\n    console.warn(\"Failed to store admin action log:\", error);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/debugSync.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1603,1606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1603,1606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Simplified debug utilities for data synchronization\n * Removed all complex event monitoring and subscriptions\n */\n\ninterface DebugInfo {\n  timestamp: string;\n  connectionHealth: boolean;\n  message: string;\n}\n\nclass DebugSyncService {\n  private static instance: DebugSyncService;\n  private debugLog: DebugInfo[] = [];\n  private maxLogEntries = 10;\n\n  private constructor() {}\n\n  static getInstance(): DebugSyncService {\n    if (!DebugSyncService.instance) {\n      DebugSyncService.instance = new DebugSyncService();\n    }\n    return DebugSyncService.instance;\n  }\n\n  async captureDebugInfo(): Promise<DebugInfo> {\n    const timestamp = new Date().toISOString();\n\n    const debugInfo: DebugInfo = {\n      timestamp,\n      connectionHealth: true,\n      message: \"Debug info captured\",\n    };\n\n    this.debugLog.unshift(debugInfo);\n    if (this.debugLog.length > this.maxLogEntries) {\n      this.debugLog = this.debugLog.slice(0, this.maxLogEntries);\n    }\n\n    return debugInfo;\n  }\n\n  getDebugLog(): DebugInfo[] {\n    return [...this.debugLog];\n  }\n\n  clearDebugLog(): void {\n    this.debugLog = [];\n  }\n\n  exportDebugInfo(): string {\n    return JSON.stringify(\n      {\n        exportTime: new Date().toISOString(),\n        debugLog: this.debugLog,\n      },\n      null,\n      2,\n    );\n  }\n\n  async testConnection(): Promise<{ success: boolean; error?: string }> {\n    return {\n      success: true,\n    };\n  }\n}\n\nexport const debugSyncService = DebugSyncService.getInstance();\nexport default DebugSyncService;\n\n// Simplified global debug functions\nif (typeof window !== \"undefined\") {\n  (window as any).debugSync = {\n    capture: () => debugSyncService.captureDebugInfo(),\n    log: () => debugSyncService.getDebugLog(),\n    export: () => debugSyncService.exportDebugInfo(),\n    test: () => debugSyncService.testConnection(),\n    clear: () => debugSyncService.clearDebugLog(),\n  };\n\n  console.log(\"Simplified debug sync utilities available at window.debugSync\");\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/utils/safeUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/utils/systemTest.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":11,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":125,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5521,5524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5521,5524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// System Test Utilities\n// This file contains utilities to test various system components\n\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { api } from \"@/integrations/supabase/api\";\n\nexport const systemTest = {\n  // Test database connectivity\n  async testDatabaseConnection() {\n    try {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"count\")\n        .limit(1);\n      if (error) throw error;\n      console.log(\"✅ Database connection successful\");\n      return true;\n    } catch (error) {\n      console.error(\"❌ Database connection failed:\", error);\n      return false;\n    }\n  },\n\n  // Test authentication\n  async testAuthentication() {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      console.log(\"✅ Authentication system working\");\n      return { success: true, hasSession: !!session };\n    } catch (error) {\n      console.error(\"❌ Authentication test failed:\", error);\n      return { success: false, hasSession: false };\n    }\n  },\n\n  // Test API endpoints\n  async testAPIEndpoints() {\n    const results = {\n      events: false,\n      sermons: false,\n      gallery: false,\n      testimonials: false,\n      prayerRequests: false,\n      members: false,\n      donations: false,\n    };\n\n    try {\n      // Test events API\n      await api.events.getEvents();\n      results.events = true;\n      console.log(\"✅ Events API working\");\n    } catch (error) {\n      console.error(\"❌ Events API failed:\", error);\n    }\n\n    try {\n      // Test sermons API\n      await api.sermons.getSermons();\n      results.sermons = true;\n      console.log(\"✅ Sermons API working\");\n    } catch (error) {\n      console.error(\"❌ Sermons API failed:\", error);\n    }\n\n    try {\n      // Test gallery API\n      await api.gallery.getGalleryImages();\n      results.gallery = true;\n      console.log(\"✅ Gallery API working\");\n    } catch (error) {\n      console.error(\"❌ Gallery API failed:\", error);\n    }\n\n    try {\n      // Test testimonials API\n      await api.testimonials.getTestimonials();\n      results.testimonials = true;\n      console.log(\"✅ Testimonials API working\");\n    } catch (error) {\n      console.error(\"❌ Testimonials API failed:\", error);\n    }\n\n    try {\n      // Test prayer requests API\n      await api.prayerRequests.getPrayerRequests();\n      results.prayerRequests = true;\n      console.log(\"✅ Prayer Requests API working\");\n    } catch (error) {\n      console.error(\"❌ Prayer Requests API failed:\", error);\n    }\n\n    try {\n      // Test members API\n      await api.members.getMembers();\n      results.members = true;\n      console.log(\"✅ Members API working\");\n    } catch (error) {\n      console.error(\"❌ Members API failed:\", error);\n    }\n\n    try {\n      // Test donations API\n      await api.donations.getDonations();\n      results.donations = true;\n      console.log(\"✅ Donations API working\");\n    } catch (error) {\n      console.error(\"❌ Donations API failed:\", error);\n    }\n\n    return results;\n  },\n\n  // Test edge functions\n  async testEdgeFunctions() {\n    const results = {\n      createCheckout: false,\n      sendEmail: false,\n    };\n\n    try {\n      // Test create-checkout function (without actually creating a checkout)\n      const { error } = await supabase.functions.invoke(\n        \"supabase-functions-create-checkout\",\n        {\n          body: {\n            amount: \"1\",\n            donationType: \"one_time\",\n            purpose: \"test\",\n            email: \"test@example.com\",\n            name: \"Test User\",\n            address: \"Test Address\",\n            isAnonymous: false,\n            includeBulletin: false,\n            memorial: \"\",\n          },\n        },\n      );\n\n      // If we get a response (even an error), the function is accessible\n      results.createCheckout = true;\n      console.log(\"✅ Create Checkout function accessible\");\n    } catch (error) {\n      console.error(\"❌ Create Checkout function failed:\", error);\n    }\n\n    return results;\n  },\n\n  // Run comprehensive system test\n  async runFullSystemTest() {\n    console.log(\"🔍 Starting comprehensive system test...\");\n\n    const results = {\n      database: false,\n      authentication: { success: false, hasSession: false },\n      api: {},\n      edgeFunctions: {},\n      timestamp: new Date().toISOString(),\n    };\n\n    // Test database\n    results.database = await this.testDatabaseConnection();\n\n    // Test authentication\n    results.authentication = await this.testAuthentication();\n\n    // Test API endpoints\n    results.api = await this.testAPIEndpoints();\n\n    // Test edge functions\n    results.edgeFunctions = await this.testEdgeFunctions();\n\n    // Summary\n    const apiSuccessCount = Object.values(results.api).filter(Boolean).length;\n    const apiTotalCount = Object.keys(results.api).length;\n    const edgeFunctionSuccessCount = Object.values(\n      results.edgeFunctions,\n    ).filter(Boolean).length;\n    const edgeFunctionTotalCount = Object.keys(results.edgeFunctions).length;\n\n    console.log(\"\\n📊 System Test Summary:\");\n    console.log(`Database: ${results.database ? \"✅\" : \"❌\"}`);\n    console.log(\n      `Authentication: ${results.authentication.success ? \"✅\" : \"❌\"}`,\n    );\n    console.log(`API Endpoints: ${apiSuccessCount}/${apiTotalCount} working`);\n    console.log(\n      `Edge Functions: ${edgeFunctionSuccessCount}/${edgeFunctionTotalCount} accessible`,\n    );\n\n    return results;\n  },\n};\n\n// Make it available globally for debugging\nif (typeof window !== \"undefined\") {\n  (window as any).systemTest = systemTest;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/_shared/cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/_shared/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/_shared/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[545,548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[545,548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { corsHeaders } from \"./cors.ts\";\n\nexport function handleCorsOptions(req: Request) {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n  return null;\n}\n\nexport function formatErrorResponse(error: Error, status = 400) {\n  console.error(`Error: ${error.message}`);\n  return new Response(\n    JSON.stringify({\n      error: error.message,\n    }),\n    {\n      status,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    },\n  );\n}\n\nexport function formatSuccessResponse(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n  });\n}\n\n// Security utilities\nexport const sanitizeString = (\n  input: string,\n  maxLength: number = 1000,\n): string => {\n  if (!input) return \"\";\n  return input.trim().slice(0, maxLength);\n};\n\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const getSecurityHeaders = () => {\n  return {\n    \"X-Content-Type-Options\": \"nosniff\",\n    \"X-Frame-Options\": \"DENY\",\n    \"X-XSS-Protection\": \"1; mode=block\",\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n    \"Content-Security-Policy\":\n      \"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:;\",\n  };\n};\n\n// Rate limiting helper (simple in-memory store for demo)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\nexport const checkRateLimit = (\n  identifier: string,\n  maxRequests: number = 10,\n  windowMs: number = 60000,\n): boolean => {\n  const now = Date.now();\n  const key = identifier;\n  const record = rateLimitStore.get(key);\n\n  if (!record || now > record.resetTime) {\n    rateLimitStore.set(key, { count: 1, resetTime: now + windowMs });\n    return true;\n  }\n\n  if (record.count >= maxRequests) {\n    return false;\n  }\n\n  record.count++;\n  return true;\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/create-checkout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/backup/deps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/backup/index.new.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GenerateCodeResponse' is defined but never used.","line":4,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\";\n\ninterface GenerateCodeResponse {\n  code: string;\n}\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      throw new Error('No authorization header');\n    }\n\n    const { data: user, error: authError } = await supabaseClient.auth.getUser(\n      authHeader.replace('Bearer ', '')\n    );\n\n    if (authError || !user) {\n      throw new Error('Invalid authentication token');\n    }\n\n    const { data, error } = await supabaseClient\n      .rpc('generate_admin_registration_code');\n\n    if (error) throw error;\n\n    return new Response(\n      JSON.stringify({ code: data }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 200,\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        status: 'error'\n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 400,\n      }\n    );\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/backup/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GenerateCodeResponse' is defined but never used.","line":3,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve, createClient } from \"./deps.ts\";\n\ninterface GenerateCodeResponse {\n  code: string;\n}\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      throw new Error('No authorization header');\n    }\n\n    const { data: user, error: authError } = await supabaseClient.auth.getUser(\n      authHeader.replace('Bearer ', '')\n    );\n\n    if (authError || !user) {\n      throw new Error('Invalid authentication token');\n    }\n\n    const { data, error } = await supabaseClient\n      .rpc('generate_admin_registration_code');\n\n    if (error) throw error;\n\n    return new Response(\n      JSON.stringify({ code: data }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 200,\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        status: 'error'\n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 400,\n      }\n    );\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/deps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/generate-admin-code/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":28,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nserve(async (req: Request) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    // Generate a random 6-digit code\n    const code = Math.floor(100000 + Math.random() * 900000).toString();\n    \n    // Set expiration to 1 hour from now\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000).toISOString();\n\n    const { data, error } = await supabaseClient\n      .from(\"admin_registration_codes\")\n      .insert([\n        {\n          code,\n          expires_at: expiresAt,\n          is_used: false,\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return new Response(JSON.stringify({ code, expires_at: expiresAt }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"Error generating admin code:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n    return new Response(JSON.stringify({ error: errorMessage }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/get-session/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/prayer-requests/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[782,785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[782,785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nfunction handleCorsOptions(req: Request) {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n  return null;\n}\n\nfunction formatErrorResponse(error: Error, status = 400) {\n  console.error(`Error: ${error.message}`);\n  return new Response(\n    JSON.stringify({\n      error: error.message,\n    }),\n    {\n      status,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    },\n  );\n}\n\nfunction formatSuccessResponse(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n  });\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const requestId = url.searchParams.get(\"id\");\n\n    if (req.method === \"GET\") {\n      // Check if user is admin\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      // Get all prayer requests or a specific one\n      let query = supabaseClient.from(\"prayer_requests\").select(\"*\");\n\n      if (requestId) {\n        query = query.eq(\"id\", requestId).single();\n      } else {\n        // Order by creation date, newest first\n        query = query.order(\"created_at\", { ascending: false });\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_requests: data });\n    } else if (req.method === \"POST\") {\n      // Create a new prayer request\n      const { name, email, request, is_public } = await req.json();\n\n      if (!name || !request) {\n        throw new Error(\"Name and prayer request are required\");\n      }\n\n      const { data, error } = await supabaseClient\n        .from(\"prayer_requests\")\n        .insert({\n          name,\n          email,\n          request,\n          is_public: is_public || false,\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_request: data }, 201);\n    } else if (req.method === \"PUT\" && requestId) {\n      // Update a prayer request (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { is_answered } = await req.json();\n\n      const { data, error } = await supabaseClient\n        .from(\"prayer_requests\")\n        .update({\n          is_answered,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", requestId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ prayer_request: data });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), {\n      status: 405,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/send-email/deno.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[636,639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[636,639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare namespace Deno {\n  export interface env {\n    get(key: string): string | undefined;\n  }\n}\n\ndeclare module \"std/http/server.ts\" {\n  export interface ServeInit {\n    port?: number;\n    hostname?: string;\n    handler?: (request: Request) => Response | Promise<Response>;\n  }\n  \n  export function serve(\n    handler: (request: Request) => Response | Promise<Response>,\n    init?: ServeInit\n  ): void;\n}\n\ndeclare module \"resend\" {\n  export class Resend {\n    constructor(apiKey: string);\n    emails: {\n      send(options: {\n        from: string;\n        to: string[];\n        subject: string;\n        html: string;\n      }): Promise<any>;\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/send-email/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/sermons/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[782,785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[782,785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nfunction handleCorsOptions(req: Request) {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n  return null;\n}\n\nfunction formatErrorResponse(error: Error, status = 400) {\n  console.error(`Error: ${error.message}`);\n  return new Response(\n    JSON.stringify({\n      error: error.message,\n    }),\n    {\n      status,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    },\n  );\n}\n\nfunction formatSuccessResponse(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n  });\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const sermonId = url.searchParams.get(\"id\");\n\n    if (req.method === \"GET\") {\n      // Get all sermons or a specific one\n      let query = supabaseClient.from(\"sermons\").select(\"*\");\n\n      if (sermonId) {\n        query = query.eq(\"id\", sermonId).single();\n      } else {\n        // Order by sermon date, newest first\n        query = query.order(\"sermon_date\", { ascending: false });\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ sermons: data });\n    } else if (req.method === \"POST\") {\n      // Create a new sermon (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { title, scripture_reference, summary, sermon_date, audio_url, video_url } = await req.json();\n\n      if (!title || !scripture_reference || !sermon_date) {\n        throw new Error(\"Title, scripture reference, and sermon date are required\");\n      }\n\n      const { data, error } = await supabaseClient\n        .from(\"sermons\")\n        .insert({\n          title,\n          scripture_reference,\n          summary,\n          sermon_date,\n          audio_url,\n          video_url,\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ sermon: data }, 201);\n    } else if (req.method === \"PUT\" && sermonId) {\n      // Update a sermon (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { title, scripture_reference, summary, sermon_date, audio_url, video_url } = await req.json();\n\n      const { data, error } = await supabaseClient\n        .from(\"sermons\")\n        .update({\n          title,\n          scripture_reference,\n          summary,\n          sermon_date,\n          audio_url,\n          video_url,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", sermonId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ sermon: data });\n    } else if (req.method === \"DELETE\" && sermonId) {\n      // Delete a sermon (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { error } = await supabaseClient\n        .from(\"sermons\")\n        .delete()\n        .eq(\"id\", sermonId);\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ message: \"Sermon deleted successfully\" });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), {\n      status: 405,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/testimonials/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[782,785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[782,785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nfunction handleCorsOptions(req: Request) {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n  return null;\n}\n\nfunction formatErrorResponse(error: Error, status = 400) {\n  console.error(`Error: ${error.message}`);\n  return new Response(\n    JSON.stringify({\n      error: error.message,\n    }),\n    {\n      status,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    },\n  );\n}\n\nfunction formatSuccessResponse(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n  });\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCorsOptions(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\n    );\n\n    const url = new URL(req.url);\n    const testimonialId = url.searchParams.get(\"id\");\n\n    if (req.method === \"GET\") {\n      // Get all testimonials or a specific one\n      let query = supabaseClient.from(\"testimonials\").select(\"*\");\n\n      if (testimonialId) {\n        query = query.eq(\"id\", testimonialId).single();\n      } else {\n        // Order by creation date, newest first\n        query = query.order(\"created_at\", { ascending: false });\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonials: data });\n    } else if (req.method === \"POST\") {\n      // Create a new testimonial\n      const { name, email, testimony, is_public } = await req.json();\n\n      if (!name || !testimony) {\n        throw new Error(\"Name and testimony are required\");\n      }\n\n      const { data, error } = await supabaseClient\n        .from(\"testimonials\")\n        .insert({\n          name,\n          email,\n          testimony,\n          is_public: is_public || false,\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonial: data }, 201);\n    } else if (req.method === \"PUT\" && testimonialId) {\n      // Update a testimonial (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { is_approved, is_public } = await req.json();\n\n      const { data, error } = await supabaseClient\n        .from(\"testimonials\")\n        .update({\n          is_approved,\n          is_public,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", testimonialId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ testimonial: data });\n    } else if (req.method === \"DELETE\" && testimonialId) {\n      // Delete a testimonial (admin only)\n      const authHeader = req.headers.get(\"Authorization\");\n      if (!authHeader) {\n        throw new Error(\"Authorization header is required\");\n      }\n\n      const token = authHeader.replace(\"Bearer \", \"\");\n      const {\n        data: { user },\n        error: authError,\n      } = await supabaseClient.auth.getUser(token);\n\n      if (authError || !user) {\n        throw new Error(\"Unauthorized\");\n      }\n\n      // Verify admin role\n      const { data: profile, error: profileError } = await supabaseClient\n        .from(\"profiles\")\n        .select(\"role\")\n        .eq(\"id\", user.id)\n        .single();\n\n      if (profileError || profile?.role !== \"admin\") {\n        throw new Error(\"Unauthorized: Admin access required\");\n      }\n\n      const { error } = await supabaseClient\n        .from(\"testimonials\")\n        .delete()\n        .eq(\"id\", testimonialId);\n\n      if (error) throw error;\n\n      return formatSuccessResponse({ message: \"Testimonial deleted successfully\" });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method not allowed\" }), {\n      status: 405,\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    return formatErrorResponse(error as Error);\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/webhook-handler/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/vite.config.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","line":25,"column":5,"nodeType":"Line","messageId":"tsDirectiveCommentRequiresDescription","endLine":25,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { componentTagger } from \"lovable-tagger\";\nimport { tempo } from \"tempo-devtools/dist/vite\";\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => ({\n  plugins: [\n    react(),\n    tempo(),\n    mode === \"development\" && componentTagger(),\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n  // Configure base path for GitHub Pages deployment\n  base: mode === \"production\" ? \"/\" : \"/\",\n  server: {\n    host: \"::\",\n    port: 8080,\n    strictPort: true,\n    // @ts-expect-error\n    allowedHosts: process.env.TEMPO === \"true\" ? true : undefined,\n  },\n  build: {\n    outDir: \"dist\",\n    sourcemap: false,\n    rollupOptions: {\n      external: [\n        // Exclude all supabase functions from the build\n        /^supabase\\/functions/,\n      ],\n      output: {\n        assetFileNames: '[name].[ext]'\n      }\n    },\n  },\n  // Define globals for compatibility\n  define: {\n    global: \"globalThis\",\n  },\n  // Exclude supabase functions from optimization\n  optimizeDeps: {\n    exclude: [\"supabase/functions\"],\n  },\n  // Exclude supabase functions from being processed\n  esbuild: {\n    exclude: [\"supabase/functions/**/*\"],\n  },\n}));\n","usedDeprecatedRules":[]}]
